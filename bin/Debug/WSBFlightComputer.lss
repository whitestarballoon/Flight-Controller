
bin/Debug/WSBFlightComputer:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001dc  00800100  00007ae4  00007b98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007ae4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b5  008002dc  008002dc  00007d74  2**0
                  ALLOC
  3 .eeprom       0000007f  00810000  00810000  00007d74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00007188  00000000  00000000  00007df4  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000193a  00000000  00000000  0000ef7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000060  00000000  00000000  000108b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000385  00000000  00000000  00010916  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002d96  00000000  00000000  00010c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000683  00000000  00000000  00013a31  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000201c  00000000  00000000  000140b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000200  00000000  00000000  000160d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000b80  00000000  00000000  000162d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001640  00000000  00000000  00016e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000348  00000000  00000000  00018490  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__ctors_end>
       4:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__bad_interrupt>
       8:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__bad_interrupt>
       c:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__bad_interrupt>
      10:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__bad_interrupt>
      14:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__bad_interrupt>
      18:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__bad_interrupt>
      1c:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__bad_interrupt>
      20:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__bad_interrupt>
      24:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__bad_interrupt>
      28:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__bad_interrupt>
      2c:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__bad_interrupt>
      30:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__bad_interrupt>
      34:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__bad_interrupt>
      38:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__bad_interrupt>
      3c:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__bad_interrupt>
      40:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__bad_interrupt>
      44:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__bad_interrupt>
      48:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__bad_interrupt>
      4c:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__bad_interrupt>
      50:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__bad_interrupt>
      54:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__bad_interrupt>
      58:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__bad_interrupt>
      5c:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__bad_interrupt>
      60:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__bad_interrupt>
      64:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__bad_interrupt>
      68:	0c 94 5f 0e 	jmp	0x1cbe	; 0x1cbe <__vector_26>
      6c:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__bad_interrupt>
      70:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__bad_interrupt>
      74:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__bad_interrupt>
      78:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__bad_interrupt>

0000007c <bitmaskTypeOrder>:
      7c:	20 10 10 08 21 21 10 08 21 21 08 60 21 60 21 40      ...!!..!!.`!`!@
      8c:	10 30 10 30 08 22 22 08 30 21 30 21 21 10 08 10     .0.0."".0!0!!...
      9c:	10 10 10                                            ...

0000009f <__c.2739>:
      9f:	45 52 52 4f 52 21 0a 00                             ERROR!..

000000a7 <__c.2736>:
      a7:	50 68 61 73 65 20 34 3a 20 4c 61 6e 64 65 64 0a     Phase 4: Landed.
	...

000000b8 <__c.2733>:
      b8:	50 68 61 73 65 20 33 3a 20 46 41 4c 4c 49 4e 47     Phase 3: FALLING
      c8:	20 4f 55 54 20 4f 46 20 53 4b 59 0a 00               OUT OF SKY..

000000d5 <__c.2730>:
      d5:	50 68 61 73 65 20 32 3a 20 43 72 75 69 73 65 0a     Phase 2: Cruise.
	...

000000e6 <__c.2727>:
      e6:	50 68 61 73 65 20 31 3a 20 43 6c 69 6d 62 0a 00     Phase 1: Climb..

000000f6 <__c.2723>:
      f6:	50 68 61 73 65 20 30 3a 20 50 72 65 6c 61 75 6e     Phase 0: Prelaun
     106:	63 68 0a 00                                         ch..

0000010a <__c.2713>:
     10a:	49 6e 20 50 68 61 73 65 20 4c 6f 67 69 63 0a 00     In Phase Logic..

0000011a <__c.2700>:
     11a:	42 61 6c 6c 61 73 74 20 45 72 72 6f 72 0a 00        Ballast Error..

00000129 <__c.2692>:
     129:	49 6e 20 62 61 6c 6c 61 73 74 20 74 69 63 6b 6c     In ballast tickl
     139:	65 0a 00                                            e..

0000013c <__c.2683>:
     13c:	49 6e 20 52 61 70 69 64 20 48 46 20 54 58 0a 00     In Rapid HF TX..

0000014c <__c.2677>:
     14c:	49 6e 20 55 70 64 61 74 65 20 48 46 20 54 65 6c     In Update HF Tel
     15c:	65 6d 65 74 72 79 0a 00                             emetry..

00000164 <__c.2633>:
     164:	47 65 6e 65 72 61 74 69 6e 67 20 52 65 70 6f 72     Generating Repor
     174:	74 0a 00                                            t..

00000177 <__c.2629>:
     177:	49 6e 20 53 61 6d 70 6c 65 20 54 58 0a 00           In Sample TX..

00000185 <__c.2509>:
     185:	53 61 6d 70 6c 65 20 53 74 72 69 6e 67 3a 20 0a     Sample String: .
	...

00000196 <__c.2502>:
     196:	25 6c 64 2c 25 6c 64 2c 25 6c 64 2c 25 64 2c 25     %ld,%ld,%ld,%d,%
     1a6:	64 2c 25 64 2c 25 64 2c 25 64 2c 25 64 2c 25 64     d,%d,%d,%d,%d,%d
     1b6:	2c 25 64 2c 25 64 2c 25 73 2c 25 66 2c 25 73 2c     ,%d,%d,%s,%f,%s,
     1c6:	25 66 2c 25 73 2c 25 64 2c 25 73 2c 25 64 2c 25     %f,%s,%d,%s,%d,%
     1d6:	73 2c 25 64 2c 25 64 2c 25 64 2c 25 64 2c 25 73     s,%d,%d,%d,%d,%s
     1e6:	2c 25 64 2c 25 73 2c 25 64 2c 25 64 2c 25 64 2c     ,%d,%s,%d,%d,%d,
     1f6:	25 64 2c 25 64 2c 25 64 2c 25 64 2c 25 64 00        %d,%d,%d,%d,%d.

00000205 <__c.2475>:
     205:	49 6e 20 44 61 74 61 20 43 6f 6c 6c 65 63 74 6f     In Data Collecto
     215:	72 0a 00                                            r..

00000218 <__c.2446>:
     218:	42 61 6c 6c 61 73 74 20 45 72 72 6f 72 0a 00        Ballast Error..

00000227 <__c.2441>:
     227:	54 68 69 72 64 20 49 6e 66 69 6e 69 74 65 20 4c     Third Infinite L
     237:	6f 6f 70 0a 00                                      oop..

0000023c <__c.2437>:
     23c:	42 61 6c 6c 61 73 74 20 44 69 73 61 62 6c 65 64     Ballast Disabled
     24c:	0a 00                                               ..

0000024e <__c.2435>:
     24e:	42 61 6c 6c 61 73 74 20 45 72 72 6f 72 0a 00        Ballast Error..

0000025d <__c.2430>:
     25d:	53 65 63 6f 6e 64 20 49 6e 66 69 6e 69 74 65 20     Second Infinite 
     26d:	4c 6f 6f 70 0a 00                                   Loop..

00000273 <__c.2426>:
     273:	42 61 6c 6c 61 73 74 3a 20 54 56 53 70 65 65 64     Ballast: TVSpeed
     283:	30 0a 00                                            0..

00000286 <__c.2424>:
     286:	42 61 6c 6c 61 73 74 3a 20 54 56 53 70 65 65 64     Ballast: TVSpeed
     296:	2d 0a 00                                            -..

00000299 <__c.2422>:
     299:	42 61 6c 6c 61 73 74 3a 20 54 56 53 70 65 65 64     Ballast: TVSpeed
     2a9:	2b 0a 00                                            +..

000002ac <__c.2420>:
     2ac:	4e 6f 20 62 61 62 79 73 69 74 20 6e 65 63 65 73     No babysit neces
     2bc:	73 61 72 79 0a 00                                   sary..

000002c2 <__c.2418>:
     2c2:	42 61 62 79 73 69 74 3a 20 53 74 69 6c 6c 20 57     Babysit: Still W
     2d2:	61 69 74 69 6e 67 0a 00                             aiting..

000002da <__c.2416>:
     2da:	42 61 6c 6c 61 73 74 20 45 72 72 6f 72 0a 00        Ballast Error..

000002e9 <__c.2411>:
     2e9:	46 69 72 73 74 20 49 6e 66 69 6e 69 74 65 20 4c     First Infinite L
     2f9:	6f 6f 70 0a 00                                      oop..

000002fe <__c.2407>:
     2fe:	42 61 62 79 73 69 74 3a 20 31 2f 32 20 54 20 72     Babysit: 1/2 T r
     30e:	65 61 63 68 65 64 0a 00                             eached..

00000316 <__c.2405>:
     316:	42 61 6c 6c 61 73 74 20 42 61 62 79 73 69 74 20     Ballast Babysit 
     326:	45 6e 61 62 6c 65 21 0a 00                          Enable!..

0000032f <__c.2403>:
     32f:	63 68 65 63 6b 20 34 20 62 61 62 79 73 69 74 0a     check 4 babysit.
	...

00000340 <__c.2399>:
     340:	47 6f 74 20 45 45 50 52 4f 4d 20 56 61 72 73 0a     Got EEPROM Vars.
	...

00000351 <__c.2393>:
     351:	49 6e 20 61 75 74 6f 42 61 6c 6c 61 73 74 0a 00     In autoBallast..

00000361 <__c.2357>:
     361:	4c 41 3a 20 25 64 20 54 41 3a 20 25 64 0a 00        LA: %d TA: %d..

00000370 <__c.2355>:
     370:	43 75 72 72 65 6e 74 20 56 53 70 65 65 64 41 76     Current VSpeedAv
     380:	67 3a 20 25 64 0a 00                                g: %d..

00000387 <__c.2340>:
     387:	49 6e 20 56 73 70 65 65 64 20 43 61 6c 63 75 6c     In Vspeed Calcul
     397:	61 74 6f 72 0a 00                                   ator..

0000039d <__c.2315>:
     39d:	43 72 69 74 69 63 61 6c 20 47 50 53 20 46 61 69     Critical GPS Fai
     3ad:	6c 75 72 65 0a 00                                   lure..

000003b3 <__c.2313>:
     3b3:	42 61 64 20 47 50 53 20 44 61 74 61 0a 00           Bad GPS Data..

000003c1 <__c.2310>:
     3c1:	49 6e 20 50 72 6f 63 65 73 73 20 4d 6f 6e 69 74     In Process Monit
     3d1:	6f 72 0a 00                                         or..

000003d5 <__c.2297>:
     3d5:	76 64 6f 70 3a 20 25 64 20 68 64 6f 70 3a 20 25     vdop: %d hdop: %
     3e5:	64 0a 00                                            d..

000003e8 <__c.2295>:
     3e8:	41 6c 74 3a 20 25 64 20 53 61 74 73 3a 20 25 64     Alt: %d Sats: %d
     3f8:	0a 00                                               ..

000003fa <__c.2293>:
     3fa:	4c 61 74 3a 20 25 66 20 4c 6f 6e 3a 20 25 66 0a     Lat: %f Lon: %f.
	...

0000040b <__c.2237>:
     40b:	74 65 6c 65 6d 65 74 72 79 53 70 65 65 64 44 69     telemetrySpeedDi
     41b:	61 6c 3a 20 25 64 0a 00                             al: %d..

00000423 <__c.2235>:
     423:	54 65 6c 65 6d 42 69 74 6d 61 70 3a 20 25 6c 64     TelemBitmap: %ld
     433:	25 6c 64 25 6c 64 0a 00                             %ld%ld..

0000043b <__c.2233>:
     43b:	66 6c 69 67 68 74 50 68 61 73 65 3a 20 25 64 0a     flightPhase: %d.
	...

0000044c <__c.2231>:
     44c:	63 6f 6d 6d 4d 6f 64 75 6c 65 52 65 73 65 74 43     commModuleResetC
     45c:	6f 75 6e 74 3a 20 25 64 0a 00                       ount: %d..

00000466 <__c.2229>:
     466:	66 6c 69 67 68 74 43 6f 6d 70 75 74 65 72 52 65     flightComputerRe
     476:	73 65 74 43 6f 75 6e 74 3a 20 25 64 0a 00           setCount: %d..

00000484 <__c.2227>:
     484:	63 6f 6d 6d 20 45 45 50 52 4f 4d 20 45 6e 64 3a     comm EEPROM End:
     494:	20 25 64 0a 00                                       %d..

00000499 <__c.2225>:
     499:	63 6f 6d 6d 20 45 45 50 52 4f 4d 20 53 74 61 72     comm EEPROM Star
     4a9:	74 3a 20 25 64 0a 00                                t: %d..

000004b0 <__c.2223>:
     4b0:	62 61 74 63 68 53 61 6d 70 6c 65 45 6e 64 3a 20     batchSampleEnd: 
     4c0:	25 64 0a 00                                         %d..

000004c4 <__c.2221>:
     4c4:	62 61 74 63 68 53 61 6d 70 6c 65 53 74 61 72 74     batchSampleStart
     4d4:	3a 20 25 64 0a 00                                   : %d..

000004da <__c.2219>:
     4da:	63 75 72 72 65 6e 74 42 61 74 63 68 4e 75 6d 62     currentBatchNumb
     4ea:	65 72 3a 20 25 64 0a 00                             er: %d..

000004f2 <__c.2217>:
     4f2:	65 70 6f 63 68 4f 66 4c 61 73 74 42 61 74 63 68     epochOfLastBatch
     502:	54 58 3a 20 25 6c 64 0a 00                          TX: %ld..

0000050b <__c.2215>:
     50b:	48 46 72 61 70 69 64 54 72 61 6e 73 6d 69 74 49     HFrapidTransmitI
     51b:	6e 74 65 72 76 61 6c 3a 20 25 64 0a 00              nterval: %d..

00000528 <__c.2213>:
     528:	48 46 64 61 74 61 54 72 61 6e 73 6d 69 74 49 6e     HFdataTransmitIn
     538:	74 65 72 76 61 6c 3a 20 25 64 0a 00                 terval: %d..

00000544 <__c.2211>:
     544:	62 61 74 63 68 54 58 49 6e 74 65 72 76 61 6c 3a     batchTXInterval:
     554:	20 25 64 0a 00                                       %d..

00000559 <__c.2209>:
     559:	64 61 74 61 53 61 6d 70 6c 65 49 6e 74 65 72 76     dataSampleInterv
     569:	61 6c 3a 20 25 64 0a 00                             al: %d..

00000571 <__c.2207>:
     571:	62 61 74 74 65 72 79 48 65 61 74 65 72 53 65 74     batteryHeaterSet
     581:	70 6f 69 6e 74 3a 20 25 64 0a 00                    point: %d..

0000058c <__c.2205>:
     58c:	6d 61 78 41 6c 6c 6f 77 61 62 6c 65 54 58 49 6e     maxAllowableTXIn
     59c:	74 65 72 76 61 6c 3a 20 25 64 0a 00                 terval: %d..

000005a8 <__c.2203>:
     5a8:	73 75 6e 72 69 73 65 41 6e 74 69 63 69 70 61 74     sunriseAnticipat
     5b8:	69 6f 6e 54 69 6d 65 3a 20 25 6c 64 0a 00           ionTime: %ld..

000005c6 <__c.2201>:
     5c6:	6e 69 67 68 74 54 65 6d 70 46 6f 72 65 63 61 73     nightTempForecas
     5d6:	74 3a 20 25 64 0a 00                                t: %d..

000005dd <__c.2199>:
     5dd:	6f 76 65 72 20 6f 63 65 61 6e 20 66 6c 61 67 3a     over ocean flag:
     5ed:	20 25 64 0a 00                                       %d..

000005f2 <__c.2197>:
     5f2:	61 75 74 6f 42 61 6c 6c 61 73 74 20 6f 6e 2f 6f     autoBallast on/o
     602:	66 66 20 66 6c 61 67 3a 20 25 64 0a 00              ff flag: %d..

0000060f <__c.2195>:
     60f:	62 61 6c 6c 61 73 74 53 61 66 65 74 79 41 6c 74     ballastSafetyAlt
     61f:	3a 20 25 64 0a 00                                   : %d..

00000625 <__c.2193>:
     625:	6d 61 79 64 61 79 56 53 70 65 65 64 3a 20 25 64     maydayVSpeed: %d
     635:	0a 00                                               ..

00000637 <__c.2191>:
     637:	6d 61 79 64 61 79 41 6c 74 69 74 75 64 65 3a 20     maydayAltitude: 
     647:	25 64 0a 00                                         %d..

0000064b <__c.2189>:
     64b:	62 61 6c 6c 61 73 74 54 61 72 67 65 74 20 2d 56     ballastTarget -V
     65b:	73 70 65 65 64 3a 20 25 64 0a 00                    speed: %d..

00000666 <__c.2187>:
     666:	62 61 6c 6c 61 73 74 54 61 72 67 65 74 20 2b 56     ballastTarget +V
     676:	73 70 65 65 64 3a 20 25 64 0a 00                    speed: %d..

00000681 <__c.2185>:
     681:	62 61 6c 6c 61 73 74 54 61 72 67 65 74 41 6c 74     ballastTargetAlt
     691:	3a 20 25 64 0a 00                                   : %d..

00000697 <__c.2183>:
     697:	65 70 6f 63 68 53 74 61 72 74 44 61 79 73 3a 20     epochStartDays: 
     6a7:	25 64 0a 00                                         %d..

000006ab <__c.2181>:
     6ab:	65 70 6f 63 68 53 74 61 72 74 48 6f 75 72 73 3a     epochStartHours:
     6bb:	20 25 64 0a 00                                       %d..

000006c0 <__c.2179>:
     6c0:	65 70 6f 63 68 53 74 61 72 74 4d 69 6e 75 74 65     epochStartMinute
     6d0:	73 3a 20 25 64 0a 00                                s: %d..

000006d7 <__c.2177>:
     6d7:	65 70 6f 63 68 53 74 61 72 74 53 65 63 6f 6e 64     epochStartSecond
     6e7:	73 3a 20 25 64 0a 00                                s: %d..

000006ee <__c.2162>:
     6ee:	45 72 72 6f 72 20 52 65 61 64 69 6e 67 20 42 61     Error Reading Ba
     6fe:	74 74 65 72 79 20 54 65 6d 70 0a 00                 ttery Temp..

0000070a <__c.2160>:
     70a:	42 61 74 74 3a 20 52 61 77 3a 20 25 78 20 43 61     Batt: Raw: %x Ca
     71a:	6c 63 3a 20 25 64 0a 00                             lc: %d..

00000722 <__c.2158>:
     722:	45 72 72 6f 72 20 52 65 61 64 69 6e 67 20 45 78     Error Reading Ex
     732:	74 65 72 6e 61 6c 20 54 65 6d 70 0a 00              ternal Temp..

0000073f <__c.2156>:
     73f:	45 78 74 3a 20 52 61 77 3a 20 25 78 20 43 61 6c     Ext: Raw: %x Cal
     74f:	63 3a 20 25 64 0a 00                                c: %d..

00000756 <__c.2154>:
     756:	45 72 72 6f 72 20 52 65 61 64 69 6e 67 20 46 43     Error Reading FC
     766:	20 54 65 6d 70 0a 00                                 Temp..

0000076d <__c.2152>:
     76d:	46 43 3a 20 52 61 77 3a 20 25 78 20 43 61 6c 63     FC: Raw: %x Calc
     77d:	3a 20 25 64 0a 00                                   : %d..

00000783 <__c.2137>:
     783:	42 4d 50 20 50 3a 20 25 6c 64 0a 00                 BMP P: %ld..

0000078f <__c.2135>:
     78f:	42 4d 50 20 54 3a 20 25 6c 64 0a 00                 BMP T: %ld..

0000079b <__c.2123>:
     79b:	74 75 72 6e 65 64 20 62 61 6c 6c 61 73 74 20 6f     turned ballast o
     7ab:	6e 2e 0a 00                                         n...

000007af <__c.2116>:
     7af:	74 65 73 74 69 6e 67 20 62 61 6c 6c 61 73 74 0a     testing ballast.
	...

000007c0 <__c.2035>:
     7c0:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 74 68     Error Setting th
     7d0:	65 72 6d 6f 6d 65 74 65 72 0a 00                    ermometer..

000007db <__c.1969>:
     7db:	53 65 74 74 69 6e 67 20 45 70 6f 63 68 20 53 74     Setting Epoch St
     7eb:	61 72 74 0a 00                                      art..

000007f0 <__c.1832>:
     7f0:	43 68 65 63 6b 73 75 6d 20 56 61 6c 69 64 0a 00     Checksum Valid..

00000800 <__c.1826>:
     800:	43 53 3a 20 25 78 20 54 43 53 3a 20 25 78 0a 00     CS: %x TCS: %x..

00000810 <__c.1815>:
     810:	43 68 65 63 6b 73 75 6d 20 56 61 6c 69 64 0a 00     Checksum Valid..

00000820 <__c.1809>:
     820:	43 53 3a 20 25 78 20 54 43 53 3a 20 25 78 0a 00     CS: %x TCS: %x..

00000830 <__c.1798>:
     830:	43 68 65 63 6b 73 75 6d 20 56 61 6c 69 64 0a 00     Checksum Valid..

00000840 <__c.1792>:
     840:	43 53 3a 20 25 78 20 54 43 53 3a 20 25 78 0a 00     CS: %x TCS: %x..

00000850 <__c.1778>:
     850:	49 6e 20 55 72 20 47 50 53 20 44 65 62 75 67 0a     In Ur GPS Debug.
	...

00000861 <__c.1790>:
     861:	6e 61 6e 00                                         nan.

00000865 <__c.1788>:
     865:	69 6e 66 00                                         inf.

00000869 <__c.2085>:
     869:	63 64 69 6e 6f 70 73 75 78 58 5b 65 66 67 45 46     cdinopsuxX[efgEF
     879:	47 00                                               G.

0000087b <pstr_an>:
     87b:	61 6e 00                                            an.

0000087e <pstr_nfinity>:
     87e:	6e 66 69 6e 69 74 79 00                             nfinity.

00000886 <pwr_m10>:
     886:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     896:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000089e <pwr_p10>:
     89e:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     8ae:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     8be:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     8ce:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     8de:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     8ee:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     8fe:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     90e:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     91e:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     92e:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     93e:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     94e:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     95e:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     96e:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     97e:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     98e:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     99e:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     9ae:	3d 27                                               ='

000009b0 <__ctors_end>:
     9b0:	11 24       	eor	r1, r1
     9b2:	1f be       	out	0x3f, r1	; 63
     9b4:	cf ef       	ldi	r28, 0xFF	; 255
     9b6:	d8 e0       	ldi	r29, 0x08	; 8
     9b8:	de bf       	out	0x3e, r29	; 62
     9ba:	cd bf       	out	0x3d, r28	; 61

000009bc <__do_copy_data>:
     9bc:	12 e0       	ldi	r17, 0x02	; 2
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	b1 e0       	ldi	r27, 0x01	; 1
     9c2:	e4 ee       	ldi	r30, 0xE4	; 228
     9c4:	fa e7       	ldi	r31, 0x7A	; 122
     9c6:	02 c0       	rjmp	.+4      	; 0x9cc <.do_copy_data_start>

000009c8 <.do_copy_data_loop>:
     9c8:	05 90       	lpm	r0, Z+
     9ca:	0d 92       	st	X+, r0

000009cc <.do_copy_data_start>:
     9cc:	ac 3d       	cpi	r26, 0xDC	; 220
     9ce:	b1 07       	cpc	r27, r17
     9d0:	d9 f7       	brne	.-10     	; 0x9c8 <.do_copy_data_loop>

000009d2 <__do_clear_bss>:
     9d2:	14 e0       	ldi	r17, 0x04	; 4
     9d4:	ac ed       	ldi	r26, 0xDC	; 220
     9d6:	b2 e0       	ldi	r27, 0x02	; 2
     9d8:	01 c0       	rjmp	.+2      	; 0x9dc <.do_clear_bss_start>

000009da <.do_clear_bss_loop>:
     9da:	1d 92       	st	X+, r1

000009dc <.do_clear_bss_start>:
     9dc:	a1 39       	cpi	r26, 0x91	; 145
     9de:	b1 07       	cpc	r27, r17
     9e0:	e1 f7       	brne	.-8      	; 0x9da <.do_clear_bss_loop>
     9e2:	0e 94 ef 26 	call	0x4dde	; 0x4dde <main>
     9e6:	0c 94 70 3d 	jmp	0x7ae0	; 0x7ae0 <_exit>

000009ea <__bad_interrupt>:
     9ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000009ee <memrcpy>:
	eeprom_write_word(&EEcommPromEnd, commPromEnd);
	eeprom_write_word(&EEcommPromStart, commPromStart);
}

void memrcpy(void *dst, const void *src, size_t len)
{
     9ee:	dc 01       	movw	r26, r24
     9f0:	a4 0f       	add	r26, r20
     9f2:	b5 1f       	adc	r27, r21
     9f4:	20 e0       	ldi	r18, 0x00	; 0
     9f6:	30 e0       	ldi	r19, 0x00	; 0
     9f8:	07 c0       	rjmp	.+14     	; 0xa08 <memrcpy+0x1a>
    char* d = (char*)dst;
    const char* s = (const char*)src;

    for(i=0; i<len; ++i)
    {
        d[len-1-i] = s[i];
     9fa:	fb 01       	movw	r30, r22
     9fc:	e2 0f       	add	r30, r18
     9fe:	f3 1f       	adc	r31, r19
     a00:	80 81       	ld	r24, Z
     a02:	8c 93       	st	X, r24
{
    size_t i;
    char* d = (char*)dst;
    const char* s = (const char*)src;

    for(i=0; i<len; ++i)
     a04:	2f 5f       	subi	r18, 0xFF	; 255
     a06:	3f 4f       	sbci	r19, 0xFF	; 255
     a08:	11 97       	sbiw	r26, 0x01	; 1
     a0a:	24 17       	cp	r18, r20
     a0c:	35 07       	cpc	r19, r21
     a0e:	a8 f3       	brcs	.-22     	; 0x9fa <memrcpy+0xc>
    {
        d[len-1-i] = s[i];
    }
}
     a10:	08 95       	ret

00000a12 <flushSatQueue>:
	eeprom_write_word(&EEcommPromEnd, commPromEnd);

}

void flushSatQueue(void)
{
     a12:	cf 93       	push	r28
     a14:	df 93       	push	r29

	uint16_t commPromEnd = eeprom_read_word(&EEcommPromEnd);
     a16:	8e e2       	ldi	r24, 0x2E	; 46
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
     a1e:	bc 01       	movw	r22, r24
	uint16_t commPromStart = eeprom_read_word(&EEcommPromStart);
	//Send A message to comm module(CommEEPROMstart, CommEEPROMEnd)
	if(COMMPROMSIZE - commPromEnd < 1024)
     a20:	9c 01       	movw	r18, r24
     a22:	40 e0       	ldi	r20, 0x00	; 0
     a24:	50 e0       	ldi	r21, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	90 e8       	ldi	r25, 0x80	; 128
     a2a:	a0 e0       	ldi	r26, 0x00	; 0
     a2c:	b0 e0       	ldi	r27, 0x00	; 0
     a2e:	82 1b       	sub	r24, r18
     a30:	93 0b       	sbc	r25, r19
     a32:	a4 0b       	sbc	r26, r20
     a34:	b5 0b       	sbc	r27, r21
     a36:	80 50       	subi	r24, 0x00	; 0
     a38:	94 40       	sbci	r25, 0x04	; 4
     a3a:	a0 40       	sbci	r26, 0x00	; 0
     a3c:	b0 40       	sbci	r27, 0x00	; 0
     a3e:	14 f0       	brlt	.+4      	; 0xa44 <flushSatQueue+0x32>
     a40:	eb 01       	movw	r28, r22
     a42:	04 c0       	rjmp	.+8      	; 0xa4c <flushSatQueue+0x3a>
     a44:	60 e0       	ldi	r22, 0x00	; 0
     a46:	70 e0       	ldi	r23, 0x00	; 0
     a48:	c0 e0       	ldi	r28, 0x00	; 0
     a4a:	d0 e0       	ldi	r29, 0x00	; 0
		commPromStart = commPromEnd = 0;
	else
		commPromStart = commPromEnd;

	eeprom_write_word(&EEcommPromEnd, commPromEnd);
     a4c:	8e e2       	ldi	r24, 0x2E	; 46
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__eewr_word_m324p>
	eeprom_write_word(&EEcommPromStart, commPromStart);
     a54:	8c e2       	ldi	r24, 0x2C	; 44
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	be 01       	movw	r22, r28
     a5a:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__eewr_word_m324p>
}
     a5e:	df 91       	pop	r29
     a60:	cf 91       	pop	r28
     a62:	08 95       	ret

00000a64 <getTxSample>:

extern int lprintf(char *, ...);
extern uint16_t EEMEM EEcurrentTelemetryVersion;

uint16_t getTxSample(uint8_t *output, uint32_t *bitmask, uint16_t sampleNumber, uint16_t batch)
{
     a64:	2f 92       	push	r2
     a66:	3f 92       	push	r3
     a68:	4f 92       	push	r4
     a6a:	5f 92       	push	r5
     a6c:	6f 92       	push	r6
     a6e:	7f 92       	push	r7
     a70:	8f 92       	push	r8
     a72:	9f 92       	push	r9
     a74:	af 92       	push	r10
     a76:	bf 92       	push	r11
     a78:	cf 92       	push	r12
     a7a:	df 92       	push	r13
     a7c:	ef 92       	push	r14
     a7e:	ff 92       	push	r15
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	df 93       	push	r29
     a86:	cf 93       	push	r28
     a88:	cd b7       	in	r28, 0x3d	; 61
     a8a:	de b7       	in	r29, 0x3e	; 62
     a8c:	cf 5f       	subi	r28, 0xFF	; 255
     a8e:	d0 40       	sbci	r29, 0x00	; 0
     a90:	0f b6       	in	r0, 0x3f	; 63
     a92:	f8 94       	cli
     a94:	de bf       	out	0x3e, r29	; 62
     a96:	0f be       	out	0x3f, r0	; 63
     a98:	cd bf       	out	0x3d, r28	; 61
     a9a:	4c 01       	movw	r8, r24
     a9c:	2b 01       	movw	r4, r22
     a9e:	5a 01       	movw	r10, r20
     aa0:	19 01       	movw	r2, r18
     aa2:	cc 24       	eor	r12, r12
     aa4:	dd 24       	eor	r13, r13
		  r <<= 1;
		  r |= v & 1;
		  s--;
		}
		r <<= s; // shift when v's highest bits are zero
		reversedBitmask[i] = r;
     aa6:	3f e0       	ldi	r19, 0x0F	; 15
     aa8:	63 2e       	mov	r6, r19
     aaa:	71 2c       	mov	r7, r1
     aac:	6c 0e       	add	r6, r28
     aae:	7d 1e       	adc	r7, r29
	//uint32_t v;     // input bits to be reversed
	//uint32_t r = v; // r will be reversed bits of v; first get LSB of v

	for(int i=0; i < 3; i++)
	{
		uint32_t v = bitmask[i];
     ab0:	f2 01       	movw	r30, r4
     ab2:	ec 0d       	add	r30, r12
     ab4:	fd 1d       	adc	r31, r13
     ab6:	80 81       	ld	r24, Z
     ab8:	91 81       	ldd	r25, Z+1	; 0x01
     aba:	a2 81       	ldd	r26, Z+2	; 0x02
     abc:	b3 81       	ldd	r27, Z+3	; 0x03
		uint32_t r = v;
		int s = sizeof(v) * 8 - 1; // extra shift needed at end
		for (v >>= 1; v; v >>= 1)
     abe:	7c 01       	movw	r14, r24
     ac0:	8d 01       	movw	r16, r26
     ac2:	16 95       	lsr	r17
     ac4:	07 95       	ror	r16
     ac6:	f7 94       	ror	r15
     ac8:	e7 94       	ror	r14
     aca:	9c 01       	movw	r18, r24
     acc:	ad 01       	movw	r20, r26
     ace:	6f e1       	ldi	r22, 0x1F	; 31
     ad0:	70 e0       	ldi	r23, 0x00	; 0
     ad2:	16 c0       	rjmp	.+44     	; 0xb00 <getTxSample+0x9c>
		{
		  r <<= 1;
     ad4:	da 01       	movw	r26, r20
     ad6:	c9 01       	movw	r24, r18
     ad8:	88 0f       	add	r24, r24
     ada:	99 1f       	adc	r25, r25
     adc:	aa 1f       	adc	r26, r26
     ade:	bb 1f       	adc	r27, r27
		  r |= v & 1;
     ae0:	a8 01       	movw	r20, r16
     ae2:	97 01       	movw	r18, r14
     ae4:	21 70       	andi	r18, 0x01	; 1
     ae6:	30 70       	andi	r19, 0x00	; 0
     ae8:	40 70       	andi	r20, 0x00	; 0
     aea:	50 70       	andi	r21, 0x00	; 0
     aec:	28 2b       	or	r18, r24
     aee:	39 2b       	or	r19, r25
     af0:	4a 2b       	or	r20, r26
     af2:	5b 2b       	or	r21, r27
		  s--;
     af4:	61 50       	subi	r22, 0x01	; 1
     af6:	70 40       	sbci	r23, 0x00	; 0
	for(int i=0; i < 3; i++)
	{
		uint32_t v = bitmask[i];
		uint32_t r = v;
		int s = sizeof(v) * 8 - 1; // extra shift needed at end
		for (v >>= 1; v; v >>= 1)
     af8:	16 95       	lsr	r17
     afa:	07 95       	ror	r16
     afc:	f7 94       	ror	r15
     afe:	e7 94       	ror	r14
     b00:	e1 14       	cp	r14, r1
     b02:	f1 04       	cpc	r15, r1
     b04:	01 05       	cpc	r16, r1
     b06:	11 05       	cpc	r17, r1
     b08:	29 f7       	brne	.-54     	; 0xad4 <getTxSample+0x70>
		  r <<= 1;
		  r |= v & 1;
		  s--;
		}
		r <<= s; // shift when v's highest bits are zero
		reversedBitmask[i] = r;
     b0a:	f3 01       	movw	r30, r6
     b0c:	ec 0d       	add	r30, r12
     b0e:	fd 1d       	adc	r31, r13
     b10:	04 c0       	rjmp	.+8      	; 0xb1a <getTxSample+0xb6>
     b12:	22 0f       	add	r18, r18
     b14:	33 1f       	adc	r19, r19
     b16:	44 1f       	adc	r20, r20
     b18:	55 1f       	adc	r21, r21
     b1a:	6a 95       	dec	r22
     b1c:	d2 f7       	brpl	.-12     	; 0xb12 <getTxSample+0xae>
     b1e:	20 83       	st	Z, r18
     b20:	31 83       	std	Z+1, r19	; 0x01
     b22:	42 83       	std	Z+2, r20	; 0x02
     b24:	53 83       	std	Z+3, r21	; 0x03
     b26:	24 e0       	ldi	r18, 0x04	; 4
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	c2 0e       	add	r12, r18
     b2c:	d3 1e       	adc	r13, r19
	uint32_t reversedBitmask[3];

	//uint32_t v;     // input bits to be reversed
	//uint32_t r = v; // r will be reversed bits of v; first get LSB of v

	for(int i=0; i < 3; i++)
     b2e:	3c e0       	ldi	r19, 0x0C	; 12
     b30:	c3 16       	cp	r12, r19
     b32:	d1 04       	cpc	r13, r1
     b34:	09 f0       	breq	.+2      	; 0xb38 <getTxSample+0xd4>
     b36:	bc cf       	rjmp	.-136    	; 0xab0 <getTxSample+0x4c>
	}
	//Bitmask reversal words

	char sampleHolder[SAMPLESTRINGSIZEINCHARS];

	getDataSample(sampleNumber, sampleHolder);
     b38:	8e 01       	movw	r16, r28
     b3a:	05 5e       	subi	r16, 0xE5	; 229
     b3c:	1f 4f       	sbci	r17, 0xFF	; 255
     b3e:	c5 01       	movw	r24, r10
     b40:	b8 01       	movw	r22, r16
     b42:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <getDataSample>
	//Sample Retrieval words
	#ifdef opdebug
		lprintf("ISAMP: %d\n", sampleNumber);
     b46:	00 d0       	rcall	.+0      	; 0xb48 <getTxSample+0xe4>
     b48:	00 d0       	rcall	.+0      	; 0xb4a <getTxSample+0xe6>
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	91 e0       	ldi	r25, 0x01	; 1
     b4e:	ad b7       	in	r26, 0x3d	; 61
     b50:	be b7       	in	r27, 0x3e	; 62
     b52:	12 96       	adiw	r26, 0x02	; 2
     b54:	9c 93       	st	X, r25
     b56:	8e 93       	st	-X, r24
     b58:	11 97       	sbiw	r26, 0x01	; 1
     b5a:	14 96       	adiw	r26, 0x04	; 4
     b5c:	bc 92       	st	X, r11
     b5e:	ae 92       	st	-X, r10
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	0e 94 77 13 	call	0x26ee	; 0x26ee <lprintf>
		lprintf("%s\n", sampleHolder);
     b66:	8b e0       	ldi	r24, 0x0B	; 11
     b68:	91 e0       	ldi	r25, 0x01	; 1
     b6a:	ed b7       	in	r30, 0x3d	; 61
     b6c:	fe b7       	in	r31, 0x3e	; 62
     b6e:	92 83       	std	Z+2, r25	; 0x02
     b70:	81 83       	std	Z+1, r24	; 0x01
     b72:	14 83       	std	Z+4, r17	; 0x04
     b74:	03 83       	std	Z+3, r16	; 0x03
     b76:	0e 94 77 13 	call	0x26ee	; 0x26ee <lprintf>
	char *token;


	//BEGIN SAMPLE PREAMBLE
	//First token is epoch time:
	token = strtok(sampleHolder, ",");
     b7a:	0f 90       	pop	r0
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	0f 90       	pop	r0
     b82:	c8 01       	movw	r24, r16
     b84:	6f e0       	ldi	r22, 0x0F	; 15
     b86:	71 e0       	ldi	r23, 0x01	; 1
     b88:	0e 94 2a 3b 	call	0x7654	; 0x7654 <strtok>
	uint32_t epochSample;
	sscanf(token, "%ld", &epochSample);
     b8c:	00 d0       	rcall	.+0      	; 0xb8e <getTxSample+0x12a>
     b8e:	00 d0       	rcall	.+0      	; 0xb90 <getTxSample+0x12c>
     b90:	00 d0       	rcall	.+0      	; 0xb92 <getTxSample+0x12e>
     b92:	ed b7       	in	r30, 0x3d	; 61
     b94:	fe b7       	in	r31, 0x3e	; 62
     b96:	31 96       	adiw	r30, 0x01	; 1
     b98:	ad b7       	in	r26, 0x3d	; 61
     b9a:	be b7       	in	r27, 0x3e	; 62
     b9c:	12 96       	adiw	r26, 0x02	; 2
     b9e:	9c 93       	st	X, r25
     ba0:	8e 93       	st	-X, r24
     ba2:	11 97       	sbiw	r26, 0x01	; 1
     ba4:	81 e1       	ldi	r24, 0x11	; 17
     ba6:	91 e0       	ldi	r25, 0x01	; 1
     ba8:	93 83       	std	Z+3, r25	; 0x03
     baa:	82 83       	std	Z+2, r24	; 0x02
     bac:	ce 01       	movw	r24, r28
     bae:	03 96       	adiw	r24, 0x03	; 3
     bb0:	95 83       	std	Z+5, r25	; 0x05
     bb2:	84 83       	std	Z+4, r24	; 0x04
     bb4:	0e 94 3e 3c 	call	0x787c	; 0x787c <sscanf>

	output[0] = eeprom_read_word(&EEcurrentTelemetryVersion) >> 8;
     bb8:	ed b7       	in	r30, 0x3d	; 61
     bba:	fe b7       	in	r31, 0x3e	; 62
     bbc:	36 96       	adiw	r30, 0x06	; 6
     bbe:	0f b6       	in	r0, 0x3f	; 63
     bc0:	f8 94       	cli
     bc2:	fe bf       	out	0x3e, r31	; 62
     bc4:	0f be       	out	0x3f, r0	; 63
     bc6:	ed bf       	out	0x3d, r30	; 61
     bc8:	8f e3       	ldi	r24, 0x3F	; 63
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
     bd0:	d4 01       	movw	r26, r8
     bd2:	9c 93       	st	X, r25
	output[1] = eeprom_read_word(&EEcurrentTelemetryVersion);
     bd4:	8f e3       	ldi	r24, 0x3F	; 63
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
     bdc:	f4 01       	movw	r30, r8
     bde:	81 83       	std	Z+1, r24	; 0x01

	bytesWritten +=2;
	memcpy(output[2], bitmask, sizeof(uint32_t)*3);
     be0:	22 81       	ldd	r18, Z+2	; 0x02
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	c9 01       	movw	r24, r18
     be6:	dc 01       	movw	r26, r24
     be8:	f2 01       	movw	r30, r4
     bea:	8c e0       	ldi	r24, 0x0C	; 12
     bec:	01 90       	ld	r0, Z+
     bee:	0d 92       	st	X+, r0
     bf0:	81 50       	subi	r24, 0x01	; 1
     bf2:	e1 f7       	brne	.-8      	; 0xbec <getTxSample+0x188>

	bytesWritten +=sizeof(uint32_t)*3;

	output[bytesWritten] = epochSample >> 24;
     bf4:	8b 81       	ldd	r24, Y+3	; 0x03
     bf6:	9c 81       	ldd	r25, Y+4	; 0x04
     bf8:	ad 81       	ldd	r26, Y+5	; 0x05
     bfa:	be 81       	ldd	r27, Y+6	; 0x06
     bfc:	2b 2f       	mov	r18, r27
     bfe:	33 27       	eor	r19, r19
     c00:	44 27       	eor	r20, r20
     c02:	55 27       	eor	r21, r21
     c04:	f4 01       	movw	r30, r8
     c06:	26 87       	std	Z+14, r18	; 0x0e
	bytesWritten++;
	output[bytesWritten] = epochSample >> 16;
     c08:	9d 01       	movw	r18, r26
     c0a:	44 27       	eor	r20, r20
     c0c:	55 27       	eor	r21, r21
     c0e:	27 87       	std	Z+15, r18	; 0x0f
	bytesWritten++;
	output[bytesWritten] = epochSample >> 8;
     c10:	89 2f       	mov	r24, r25
     c12:	9a 2f       	mov	r25, r26
     c14:	ab 2f       	mov	r26, r27
     c16:	bb 27       	eor	r27, r27
     c18:	80 8b       	std	Z+16, r24	; 0x10
	bytesWritten++;
	output[bytesWritten] = epochSample;
     c1a:	8b 81       	ldd	r24, Y+3	; 0x03
     c1c:	81 8b       	std	Z+17, r24	; 0x11
	bytesWritten++;
	output[bytesWritten] = batch >> 8;
     c1e:	32 8a       	std	Z+18, r3	; 0x12
	bytesWritten++;
	output[bytesWritten] = batch;
     c20:	23 8a       	std	Z+19, r2	; 0x13
     c22:	aa 24       	eor	r10, r10
     c24:	74 e1       	ldi	r23, 0x14	; 20
     c26:	b7 2e       	mov	r11, r23

	do
	{
		token = strtok(NULL,",");

		lprintf("L: %d V: %lx\n", currentTelemetryChannel/32, reversedBitmask[currentTelemetryChannel/32] );
     c28:	3e 01       	movw	r6, r28
     c2a:	08 94       	sec
     c2c:	61 1c       	adc	r6, r1
     c2e:	71 1c       	adc	r7, r1
					sscanf(token, "%d", &holder16);
					memrcpy(&output[bytesWritten], &holder16, sizeof(uint8_t)*2);
					bytesWritten+=2;
					break;
				case 24:
					sscanf(token, "%ld", &holder32);
     c30:	67 e0       	ldi	r22, 0x07	; 7
     c32:	46 2e       	mov	r4, r22
     c34:	51 2c       	mov	r5, r1
     c36:	4c 0e       	add	r4, r28
     c38:	5d 1e       	adc	r5, r29
{
    size_t i;
    char* d = (char*)dst;
    const char* s = (const char*)src;

    for(i=0; i<len; ++i)
     c3a:	9e 01       	movw	r18, r28
     c3c:	26 5f       	subi	r18, 0xF6	; 246
     c3e:	3f 4f       	sbci	r19, 0xFF	; 255
     c40:	c4 50       	subi	r28, 0x04	; 4
     c42:	df 4f       	sbci	r29, 0xFF	; 255
     c44:	39 83       	std	Y+1, r19	; 0x01
     c46:	28 83       	st	Y, r18
     c48:	cc 5f       	subi	r28, 0xFC	; 252
     c4a:	d0 40       	sbci	r29, 0x00	; 0
     c4c:	ce 01       	movw	r24, r28
     c4e:	0f 96       	adiw	r24, 0x0f	; 15
     c50:	c2 50       	subi	r28, 0x02	; 2
     c52:	df 4f       	sbci	r29, 0xFF	; 255
     c54:	99 83       	std	Y+1, r25	; 0x01
     c56:	88 83       	st	Y, r24
     c58:	ce 5f       	subi	r28, 0xFE	; 254
     c5a:	d0 40       	sbci	r29, 0x00	; 0
			{
				uint16_t holder16;
				uint32_t holder32;
				float holderf;
				case 8:
					sscanf(token, "%d", &output[bytesWritten]);
     c5c:	53 e2       	ldi	r21, 0x23	; 35
     c5e:	25 2e       	mov	r2, r21
     c60:	51 e0       	ldi	r21, 0x01	; 1
     c62:	35 2e       	mov	r3, r21

	//END SAMPLE PREAMBLE

	do
	{
		token = strtok(NULL,",");
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	6f e0       	ldi	r22, 0x0F	; 15
     c6a:	71 e0       	ldi	r23, 0x01	; 1
     c6c:	0e 94 2a 3b 	call	0x7654	; 0x7654 <strtok>
     c70:	6c 01       	movw	r12, r24

		lprintf("L: %d V: %lx\n", currentTelemetryChannel/32, reversedBitmask[currentTelemetryChannel/32] );
     c72:	8a 2d       	mov	r24, r10
     c74:	82 95       	swap	r24
     c76:	86 95       	lsr	r24
     c78:	87 70       	andi	r24, 0x07	; 7
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	fc 01       	movw	r30, r24
     c7e:	ee 0f       	add	r30, r30
     c80:	ff 1f       	adc	r31, r31
     c82:	ee 0f       	add	r30, r30
     c84:	ff 1f       	adc	r31, r31
     c86:	e6 0d       	add	r30, r6
     c88:	f7 1d       	adc	r31, r7
     c8a:	e6 84       	ldd	r14, Z+14	; 0x0e
     c8c:	f7 84       	ldd	r15, Z+15	; 0x0f
     c8e:	00 89       	ldd	r16, Z+16	; 0x10
     c90:	11 89       	ldd	r17, Z+17	; 0x11
     c92:	ad b7       	in	r26, 0x3d	; 61
     c94:	be b7       	in	r27, 0x3e	; 62
     c96:	18 97       	sbiw	r26, 0x08	; 8
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	be bf       	out	0x3e, r27	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	ad bf       	out	0x3d, r26	; 61
     ca2:	ed b7       	in	r30, 0x3d	; 61
     ca4:	fe b7       	in	r31, 0x3e	; 62
     ca6:	31 96       	adiw	r30, 0x01	; 1
     ca8:	25 e1       	ldi	r18, 0x15	; 21
     caa:	31 e0       	ldi	r19, 0x01	; 1
     cac:	12 96       	adiw	r26, 0x02	; 2
     cae:	3c 93       	st	X, r19
     cb0:	2e 93       	st	-X, r18
     cb2:	11 97       	sbiw	r26, 0x01	; 1
     cb4:	93 83       	std	Z+3, r25	; 0x03
     cb6:	82 83       	std	Z+2, r24	; 0x02
     cb8:	e4 82       	std	Z+4, r14	; 0x04
     cba:	f5 82       	std	Z+5, r15	; 0x05
     cbc:	06 83       	std	Z+6, r16	; 0x06
     cbe:	17 83       	std	Z+7, r17	; 0x07
     cc0:	0e 94 77 13 	call	0x26ee	; 0x26ee <lprintf>
		if(reversedBitmask[currentTelemetryChannel/32] & 1 == 1)
     cc4:	31 e0       	ldi	r19, 0x01	; 1
     cc6:	e3 22       	and	r14, r19
     cc8:	ff 24       	eor	r15, r15
     cca:	8d b7       	in	r24, 0x3d	; 61
     ccc:	9e b7       	in	r25, 0x3e	; 62
     cce:	08 96       	adiw	r24, 0x08	; 8
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	f8 94       	cli
     cd4:	9e bf       	out	0x3e, r25	; 62
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	8d bf       	out	0x3d, r24	; 61
     cda:	ef 28       	or	r14, r15
     cdc:	09 f4       	brne	.+2      	; 0xce0 <getTxSample+0x27c>
     cde:	e5 c0       	rjmp	.+458    	; 0xeaa <getTxSample+0x446>
		{
			//lprintf("Tof: %d\n", pgm_read_byte(&bitmaskTypeOrder[currentTelemetryChannel]));
			//lprintf("Tok: %s\n", token);
			switch(pgm_read_byte(&bitmaskTypeOrder[currentTelemetryChannel]))
     ce0:	ea 2d       	mov	r30, r10
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	e4 58       	subi	r30, 0x84	; 132
     ce6:	ff 4f       	sbci	r31, 0xFF	; 255
     ce8:	84 91       	lpm	r24, Z+
     cea:	88 31       	cpi	r24, 0x18	; 24
     cec:	09 f4       	brne	.+2      	; 0xcf0 <getTxSample+0x28c>
     cee:	4c c0       	rjmp	.+152    	; 0xd88 <getTxSample+0x324>
     cf0:	89 31       	cpi	r24, 0x19	; 25
     cf2:	30 f4       	brcc	.+12     	; 0xd00 <getTxSample+0x29c>
     cf4:	88 30       	cpi	r24, 0x08	; 8
     cf6:	59 f0       	breq	.+22     	; 0xd0e <getTxSample+0x2aa>
     cf8:	80 31       	cpi	r24, 0x10	; 16
     cfa:	09 f0       	breq	.+2      	; 0xcfe <getTxSample+0x29a>
     cfc:	d6 c0       	rjmp	.+428    	; 0xeaa <getTxSample+0x446>
     cfe:	1e c0       	rjmp	.+60     	; 0xd3c <getTxSample+0x2d8>
     d00:	80 32       	cpi	r24, 0x20	; 32
     d02:	09 f4       	brne	.+2      	; 0xd06 <getTxSample+0x2a2>
     d04:	6f c0       	rjmp	.+222    	; 0xde4 <getTxSample+0x380>
     d06:	81 32       	cpi	r24, 0x21	; 33
     d08:	09 f0       	breq	.+2      	; 0xd0c <getTxSample+0x2a8>
     d0a:	cf c0       	rjmp	.+414    	; 0xeaa <getTxSample+0x446>
     d0c:	9a c0       	rjmp	.+308    	; 0xe42 <getTxSample+0x3de>
			{
				uint16_t holder16;
				uint32_t holder32;
				float holderf;
				case 8:
					sscanf(token, "%d", &output[bytesWritten]);
     d0e:	00 d0       	rcall	.+0      	; 0xd10 <getTxSample+0x2ac>
     d10:	00 d0       	rcall	.+0      	; 0xd12 <getTxSample+0x2ae>
     d12:	00 d0       	rcall	.+0      	; 0xd14 <getTxSample+0x2b0>
     d14:	ed b7       	in	r30, 0x3d	; 61
     d16:	fe b7       	in	r31, 0x3e	; 62
     d18:	31 96       	adiw	r30, 0x01	; 1
     d1a:	ad b7       	in	r26, 0x3d	; 61
     d1c:	be b7       	in	r27, 0x3e	; 62
     d1e:	12 96       	adiw	r26, 0x02	; 2
     d20:	dc 92       	st	X, r13
     d22:	ce 92       	st	-X, r12
     d24:	11 97       	sbiw	r26, 0x01	; 1
     d26:	33 82       	std	Z+3, r3	; 0x03
     d28:	22 82       	std	Z+2, r2	; 0x02
     d2a:	c4 01       	movw	r24, r8
     d2c:	8b 0d       	add	r24, r11
     d2e:	91 1d       	adc	r25, r1
     d30:	95 83       	std	Z+5, r25	; 0x05
     d32:	84 83       	std	Z+4, r24	; 0x04
     d34:	0e 94 3e 3c 	call	0x787c	; 0x787c <sscanf>
					bytesWritten+=1;
     d38:	b3 94       	inc	r11
     d3a:	1d c0       	rjmp	.+58     	; 0xd76 <getTxSample+0x312>
					break;
				case 16:
					sscanf(token, "%d", &holder16);
     d3c:	00 d0       	rcall	.+0      	; 0xd3e <getTxSample+0x2da>
     d3e:	00 d0       	rcall	.+0      	; 0xd40 <getTxSample+0x2dc>
     d40:	00 d0       	rcall	.+0      	; 0xd42 <getTxSample+0x2de>
     d42:	ed b7       	in	r30, 0x3d	; 61
     d44:	fe b7       	in	r31, 0x3e	; 62
     d46:	31 96       	adiw	r30, 0x01	; 1
     d48:	ad b7       	in	r26, 0x3d	; 61
     d4a:	be b7       	in	r27, 0x3e	; 62
     d4c:	12 96       	adiw	r26, 0x02	; 2
     d4e:	dc 92       	st	X, r13
     d50:	ce 92       	st	-X, r12
     d52:	11 97       	sbiw	r26, 0x01	; 1
     d54:	33 82       	std	Z+3, r3	; 0x03
     d56:	22 82       	std	Z+2, r2	; 0x02
     d58:	75 82       	std	Z+5, r7	; 0x05
     d5a:	64 82       	std	Z+4, r6	; 0x04
     d5c:	0e 94 3e 3c 	call	0x787c	; 0x787c <sscanf>
}

void memrcpy(void *dst, const void *src, size_t len)
{
    size_t i;
    char* d = (char*)dst;
     d60:	f4 01       	movw	r30, r8
     d62:	eb 0d       	add	r30, r11
     d64:	f1 1d       	adc	r31, r1
    const char* s = (const char*)src;

    for(i=0; i<len; ++i)
    {
        d[len-1-i] = s[i];
     d66:	d3 01       	movw	r26, r6
     d68:	8c 91       	ld	r24, X
     d6a:	81 83       	std	Z+1, r24	; 0x01
     d6c:	11 96       	adiw	r26, 0x01	; 1
     d6e:	8c 91       	ld	r24, X
     d70:	80 83       	st	Z, r24
					bytesWritten+=1;
					break;
				case 16:
					sscanf(token, "%d", &holder16);
					memrcpy(&output[bytesWritten], &holder16, sizeof(uint8_t)*2);
					bytesWritten+=2;
     d72:	b2 e0       	ldi	r27, 0x02	; 2
     d74:	bb 0e       	add	r11, r27
     d76:	ed b7       	in	r30, 0x3d	; 61
     d78:	fe b7       	in	r31, 0x3e	; 62
     d7a:	36 96       	adiw	r30, 0x06	; 6
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	f8 94       	cli
     d80:	fe bf       	out	0x3e, r31	; 62
     d82:	0f be       	out	0x3f, r0	; 63
     d84:	ed bf       	out	0x3d, r30	; 61
     d86:	91 c0       	rjmp	.+290    	; 0xeaa <getTxSample+0x446>
					break;
				case 24:
					sscanf(token, "%ld", &holder32);
     d88:	00 d0       	rcall	.+0      	; 0xd8a <getTxSample+0x326>
     d8a:	00 d0       	rcall	.+0      	; 0xd8c <getTxSample+0x328>
     d8c:	00 d0       	rcall	.+0      	; 0xd8e <getTxSample+0x32a>
     d8e:	ed b7       	in	r30, 0x3d	; 61
     d90:	fe b7       	in	r31, 0x3e	; 62
     d92:	31 96       	adiw	r30, 0x01	; 1
     d94:	ad b7       	in	r26, 0x3d	; 61
     d96:	be b7       	in	r27, 0x3e	; 62
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	dc 92       	st	X, r13
     d9c:	ce 92       	st	-X, r12
     d9e:	11 97       	sbiw	r26, 0x01	; 1
     da0:	21 e1       	ldi	r18, 0x11	; 17
     da2:	31 e0       	ldi	r19, 0x01	; 1
     da4:	33 83       	std	Z+3, r19	; 0x03
     da6:	22 83       	std	Z+2, r18	; 0x02
     da8:	55 82       	std	Z+5, r5	; 0x05
     daa:	44 82       	std	Z+4, r4	; 0x04
     dac:	0e 94 3e 3c 	call	0x787c	; 0x787c <sscanf>
     db0:	d2 01       	movw	r26, r4
     db2:	f4 01       	movw	r30, r8
     db4:	eb 0d       	add	r30, r11
     db6:	f1 1d       	adc	r31, r1
     db8:	8d b7       	in	r24, 0x3d	; 61
     dba:	9e b7       	in	r25, 0x3e	; 62
     dbc:	06 96       	adiw	r24, 0x06	; 6
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	f8 94       	cli
     dc2:	9e bf       	out	0x3e, r25	; 62
     dc4:	0f be       	out	0x3f, r0	; 63
     dc6:	8d bf       	out	0x3d, r24	; 61
    char* d = (char*)dst;
    const char* s = (const char*)src;

    for(i=0; i<len; ++i)
    {
        d[len-1-i] = s[i];
     dc8:	8d 91       	ld	r24, X+
     dca:	82 83       	std	Z+2, r24	; 0x02
     dcc:	31 97       	sbiw	r30, 0x01	; 1
{
    size_t i;
    char* d = (char*)dst;
    const char* s = (const char*)src;

    for(i=0; i<len; ++i)
     dce:	c4 50       	subi	r28, 0x04	; 4
     dd0:	df 4f       	sbci	r29, 0xFF	; 255
     dd2:	28 81       	ld	r18, Y
     dd4:	39 81       	ldd	r19, Y+1	; 0x01
     dd6:	cc 5f       	subi	r28, 0xFC	; 252
     dd8:	d0 40       	sbci	r29, 0x00	; 0
     dda:	a2 17       	cp	r26, r18
     ddc:	b3 07       	cpc	r27, r19
     dde:	a1 f7       	brne	.-24     	; 0xdc8 <getTxSample+0x364>
					bytesWritten+=2;
					break;
				case 24:
					sscanf(token, "%ld", &holder32);
					memrcpy(&output[bytesWritten], &holder32, sizeof(uint8_t)*3);
					bytesWritten+=3;
     de0:	33 e0       	ldi	r19, 0x03	; 3
     de2:	2d c0       	rjmp	.+90     	; 0xe3e <getTxSample+0x3da>
					break;
				case 32:
					sscanf(token, "%ld", &holder32);
     de4:	00 d0       	rcall	.+0      	; 0xde6 <getTxSample+0x382>
     de6:	00 d0       	rcall	.+0      	; 0xde8 <getTxSample+0x384>
     de8:	00 d0       	rcall	.+0      	; 0xdea <getTxSample+0x386>
     dea:	ed b7       	in	r30, 0x3d	; 61
     dec:	fe b7       	in	r31, 0x3e	; 62
     dee:	31 96       	adiw	r30, 0x01	; 1
     df0:	ad b7       	in	r26, 0x3d	; 61
     df2:	be b7       	in	r27, 0x3e	; 62
     df4:	12 96       	adiw	r26, 0x02	; 2
     df6:	dc 92       	st	X, r13
     df8:	ce 92       	st	-X, r12
     dfa:	11 97       	sbiw	r26, 0x01	; 1
     dfc:	21 e1       	ldi	r18, 0x11	; 17
     dfe:	31 e0       	ldi	r19, 0x01	; 1
     e00:	33 83       	std	Z+3, r19	; 0x03
     e02:	22 83       	std	Z+2, r18	; 0x02
     e04:	55 82       	std	Z+5, r5	; 0x05
     e06:	44 82       	std	Z+4, r4	; 0x04
     e08:	0e 94 3e 3c 	call	0x787c	; 0x787c <sscanf>
     e0c:	d2 01       	movw	r26, r4
     e0e:	f4 01       	movw	r30, r8
     e10:	eb 0d       	add	r30, r11
     e12:	f1 1d       	adc	r31, r1
     e14:	8d b7       	in	r24, 0x3d	; 61
     e16:	9e b7       	in	r25, 0x3e	; 62
     e18:	06 96       	adiw	r24, 0x06	; 6
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	f8 94       	cli
     e1e:	9e bf       	out	0x3e, r25	; 62
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	8d bf       	out	0x3d, r24	; 61
    char* d = (char*)dst;
    const char* s = (const char*)src;

    for(i=0; i<len; ++i)
    {
        d[len-1-i] = s[i];
     e24:	8d 91       	ld	r24, X+
     e26:	82 83       	std	Z+2, r24	; 0x02
     e28:	31 97       	sbiw	r30, 0x01	; 1
{
    size_t i;
    char* d = (char*)dst;
    const char* s = (const char*)src;

    for(i=0; i<len; ++i)
     e2a:	c4 50       	subi	r28, 0x04	; 4
     e2c:	df 4f       	sbci	r29, 0xFF	; 255
     e2e:	28 81       	ld	r18, Y
     e30:	39 81       	ldd	r19, Y+1	; 0x01
     e32:	cc 5f       	subi	r28, 0xFC	; 252
     e34:	d0 40       	sbci	r29, 0x00	; 0
     e36:	a2 17       	cp	r26, r18
     e38:	b3 07       	cpc	r27, r19
     e3a:	a1 f7       	brne	.-24     	; 0xe24 <getTxSample+0x3c0>
					bytesWritten+=3;
					break;
				case 32:
					sscanf(token, "%ld", &holder32);
					memrcpy(&output[bytesWritten], &holder32, sizeof(uint8_t)*3);
					bytesWritten+=4;
     e3c:	34 e0       	ldi	r19, 0x04	; 4
     e3e:	b3 0e       	add	r11, r19
     e40:	34 c0       	rjmp	.+104    	; 0xeaa <getTxSample+0x446>
					break;
				case 33: //Float
					sscanf(token, "%f", &holderf);
     e42:	00 d0       	rcall	.+0      	; 0xe44 <getTxSample+0x3e0>
     e44:	00 d0       	rcall	.+0      	; 0xe46 <getTxSample+0x3e2>
     e46:	00 d0       	rcall	.+0      	; 0xe48 <getTxSample+0x3e4>
     e48:	ed b7       	in	r30, 0x3d	; 61
     e4a:	fe b7       	in	r31, 0x3e	; 62
     e4c:	31 96       	adiw	r30, 0x01	; 1
     e4e:	ad b7       	in	r26, 0x3d	; 61
     e50:	be b7       	in	r27, 0x3e	; 62
     e52:	12 96       	adiw	r26, 0x02	; 2
     e54:	dc 92       	st	X, r13
     e56:	ce 92       	st	-X, r12
     e58:	11 97       	sbiw	r26, 0x01	; 1
     e5a:	26 e2       	ldi	r18, 0x26	; 38
     e5c:	31 e0       	ldi	r19, 0x01	; 1
     e5e:	33 83       	std	Z+3, r19	; 0x03
     e60:	22 83       	std	Z+2, r18	; 0x02
     e62:	8b e0       	ldi	r24, 0x0B	; 11
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	8c 0f       	add	r24, r28
     e68:	9d 1f       	adc	r25, r29
     e6a:	95 83       	std	Z+5, r25	; 0x05
     e6c:	84 83       	std	Z+4, r24	; 0x04
     e6e:	0e 94 3e 3c 	call	0x787c	; 0x787c <sscanf>
     e72:	de 01       	movw	r26, r28
     e74:	1b 96       	adiw	r26, 0x0b	; 11
     e76:	f4 01       	movw	r30, r8
     e78:	eb 0d       	add	r30, r11
     e7a:	f1 1d       	adc	r31, r1
     e7c:	2d b7       	in	r18, 0x3d	; 61
     e7e:	3e b7       	in	r19, 0x3e	; 62
     e80:	2a 5f       	subi	r18, 0xFA	; 250
     e82:	3f 4f       	sbci	r19, 0xFF	; 255
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	f8 94       	cli
     e88:	3e bf       	out	0x3e, r19	; 62
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	2d bf       	out	0x3d, r18	; 61
    char* d = (char*)dst;
    const char* s = (const char*)src;

    for(i=0; i<len; ++i)
    {
        d[len-1-i] = s[i];
     e8e:	8d 91       	ld	r24, X+
     e90:	83 83       	std	Z+3, r24	; 0x03
     e92:	31 97       	sbiw	r30, 0x01	; 1
{
    size_t i;
    char* d = (char*)dst;
    const char* s = (const char*)src;

    for(i=0; i<len; ++i)
     e94:	c2 50       	subi	r28, 0x02	; 2
     e96:	df 4f       	sbci	r29, 0xFF	; 255
     e98:	88 81       	ld	r24, Y
     e9a:	99 81       	ldd	r25, Y+1	; 0x01
     e9c:	ce 5f       	subi	r28, 0xFE	; 254
     e9e:	d0 40       	sbci	r29, 0x00	; 0
     ea0:	a8 17       	cp	r26, r24
     ea2:	b9 07       	cpc	r27, r25
     ea4:	a1 f7       	brne	.-24     	; 0xe8e <getTxSample+0x42a>
					bytesWritten+=4;
					break;
				case 33: //Float
					sscanf(token, "%f", &holderf);
					memrcpy(&output[bytesWritten], &holderf, sizeof(float));
					bytesWritten+=sizeof(float);
     ea6:	94 e0       	ldi	r25, 0x04	; 4
     ea8:	b9 0e       	add	r11, r25
				default:
					break;
			}
		}

		currentTelemetryChannel++;
     eaa:	a3 94       	inc	r10
		reversedBitmask[currentTelemetryChannel/32] >>= 1;
     eac:	ea 2d       	mov	r30, r10
     eae:	e2 95       	swap	r30
     eb0:	e6 95       	lsr	r30
     eb2:	e7 70       	andi	r30, 0x07	; 7
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	ee 0f       	add	r30, r30
     eb8:	ff 1f       	adc	r31, r31
     eba:	ee 0f       	add	r30, r30
     ebc:	ff 1f       	adc	r31, r31
     ebe:	e6 0d       	add	r30, r6
     ec0:	f7 1d       	adc	r31, r7
     ec2:	86 85       	ldd	r24, Z+14	; 0x0e
     ec4:	97 85       	ldd	r25, Z+15	; 0x0f
     ec6:	a0 89       	ldd	r26, Z+16	; 0x10
     ec8:	b1 89       	ldd	r27, Z+17	; 0x11
     eca:	b6 95       	lsr	r27
     ecc:	a7 95       	ror	r26
     ece:	97 95       	ror	r25
     ed0:	87 95       	ror	r24
     ed2:	86 87       	std	Z+14, r24	; 0x0e
     ed4:	97 87       	std	Z+15, r25	; 0x0f
     ed6:	a0 8b       	std	Z+16, r26	; 0x10
     ed8:	b1 8b       	std	Z+17, r27	; 0x11
	} while(reversedBitmask[0] != 0 || reversedBitmask[1] != 0 || reversedBitmask[2] != 0);
     eda:	8f 85       	ldd	r24, Y+15	; 0x0f
     edc:	98 89       	ldd	r25, Y+16	; 0x10
     ede:	a9 89       	ldd	r26, Y+17	; 0x11
     ee0:	ba 89       	ldd	r27, Y+18	; 0x12
     ee2:	00 97       	sbiw	r24, 0x00	; 0
     ee4:	a1 05       	cpc	r26, r1
     ee6:	b1 05       	cpc	r27, r1
     ee8:	09 f0       	breq	.+2      	; 0xeec <getTxSample+0x488>
     eea:	bc ce       	rjmp	.-648    	; 0xc64 <getTxSample+0x200>
     eec:	8b 89       	ldd	r24, Y+19	; 0x13
     eee:	9c 89       	ldd	r25, Y+20	; 0x14
     ef0:	ad 89       	ldd	r26, Y+21	; 0x15
     ef2:	be 89       	ldd	r27, Y+22	; 0x16
     ef4:	00 97       	sbiw	r24, 0x00	; 0
     ef6:	a1 05       	cpc	r26, r1
     ef8:	b1 05       	cpc	r27, r1
     efa:	09 f0       	breq	.+2      	; 0xefe <getTxSample+0x49a>
     efc:	b3 ce       	rjmp	.-666    	; 0xc64 <getTxSample+0x200>
     efe:	8f 89       	ldd	r24, Y+23	; 0x17
     f00:	98 8d       	ldd	r25, Y+24	; 0x18
     f02:	a9 8d       	ldd	r26, Y+25	; 0x19
     f04:	ba 8d       	ldd	r27, Y+26	; 0x1a
     f06:	00 97       	sbiw	r24, 0x00	; 0
     f08:	a1 05       	cpc	r26, r1
     f0a:	b1 05       	cpc	r27, r1
     f0c:	09 f0       	breq	.+2      	; 0xf10 <getTxSample+0x4ac>
     f0e:	aa ce       	rjmp	.-684    	; 0xc64 <getTxSample+0x200>

	return bytesWritten;

}
     f10:	8b 2d       	mov	r24, r11
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	c1 50       	subi	r28, 0x01	; 1
     f16:	df 4f       	sbci	r29, 0xFF	; 255
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	f8 94       	cli
     f1c:	de bf       	out	0x3e, r29	; 62
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	cd bf       	out	0x3d, r28	; 61
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	1f 91       	pop	r17
     f28:	0f 91       	pop	r16
     f2a:	ff 90       	pop	r15
     f2c:	ef 90       	pop	r14
     f2e:	df 90       	pop	r13
     f30:	cf 90       	pop	r12
     f32:	bf 90       	pop	r11
     f34:	af 90       	pop	r10
     f36:	9f 90       	pop	r9
     f38:	8f 90       	pop	r8
     f3a:	7f 90       	pop	r7
     f3c:	6f 90       	pop	r6
     f3e:	5f 90       	pop	r5
     f40:	4f 90       	pop	r4
     f42:	3f 90       	pop	r3
     f44:	2f 90       	pop	r2
     f46:	08 95       	ret

00000f48 <loadBatch>:

//Before this function is called, CommPromEnd must be set to CommPromStart, or weird things could hapen.
void loadBatch(void)
{
     f48:	2f 92       	push	r2
     f4a:	3f 92       	push	r3
     f4c:	4f 92       	push	r4
     f4e:	5f 92       	push	r5
     f50:	6f 92       	push	r6
     f52:	7f 92       	push	r7
     f54:	8f 92       	push	r8
     f56:	9f 92       	push	r9
     f58:	af 92       	push	r10
     f5a:	bf 92       	push	r11
     f5c:	cf 92       	push	r12
     f5e:	df 92       	push	r13
     f60:	ef 92       	push	r14
     f62:	ff 92       	push	r15
     f64:	0f 93       	push	r16
     f66:	1f 93       	push	r17
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
     f70:	c2 5a       	subi	r28, 0xA2	; 162
     f72:	d0 40       	sbci	r29, 0x00	; 0
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	cd bf       	out	0x3d, r28	; 61

	uint16_t batchSampleStart = eeprom_read_word(&EEbatchSampleStart);
     f7e:	88 e2       	ldi	r24, 0x28	; 40
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
     f86:	18 2f       	mov	r17, r24
     f88:	09 2f       	mov	r16, r25
	uint16_t batchSampleEnd = eeprom_read_word(&EEbatchSampleEnd);
     f8a:	8a e2       	ldi	r24, 0x2A	; 42
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
     f92:	2c 01       	movw	r4, r24
	uint16_t batchNumber = eeprom_read_word(&EEcurrentBatchNumber);
     f94:	86 e2       	ldi	r24, 0x26	; 38
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
     f9c:	4c 01       	movw	r8, r24

	uint32_t currentBitmask[3];
	currentBitmask[0] = eeprom_read_dword(&EEcurrentTelemetryBitmap[0]);
     f9e:	83 e3       	ldi	r24, 0x33	; 51
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	0e 94 3c 3d 	call	0x7a78	; 0x7a78 <__eerd_dword_m324p>
     fa6:	69 83       	std	Y+1, r22	; 0x01
     fa8:	7a 83       	std	Y+2, r23	; 0x02
     faa:	8b 83       	std	Y+3, r24	; 0x03
     fac:	9c 83       	std	Y+4, r25	; 0x04
	currentBitmask[1] = eeprom_read_dword(&EEcurrentTelemetryBitmap[1]);
     fae:	87 e3       	ldi	r24, 0x37	; 55
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	0e 94 3c 3d 	call	0x7a78	; 0x7a78 <__eerd_dword_m324p>
     fb6:	6d 83       	std	Y+5, r22	; 0x05
     fb8:	7e 83       	std	Y+6, r23	; 0x06
     fba:	8f 83       	std	Y+7, r24	; 0x07
     fbc:	98 87       	std	Y+8, r25	; 0x08
	currentBitmask[2] = eeprom_read_dword(&EEcurrentTelemetryBitmap[2]);
     fbe:	8b e3       	ldi	r24, 0x3B	; 59
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	0e 94 3c 3d 	call	0x7a78	; 0x7a78 <__eerd_dword_m324p>
     fc6:	69 87       	std	Y+9, r22	; 0x09
     fc8:	7a 87       	std	Y+10, r23	; 0x0a
     fca:	8b 87       	std	Y+11, r24	; 0x0b
     fcc:	9c 87       	std	Y+12, r25	; 0x0c

	uint16_t commPromEnd = eeprom_read_word(&EEcommPromEnd);
     fce:	8e e2       	ldi	r24, 0x2E	; 46
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
     fd6:	3c 01       	movw	r6, r24

	for(int i=batchSampleStart; i < batchSampleEnd; i++)
     fd8:	21 2f       	mov	r18, r17
     fda:	30 2f       	mov	r19, r16
     fdc:	c9 01       	movw	r24, r18
     fde:	6c 01       	movw	r12, r24
	{
		uint8_t thisSample[MAXTXSAMPLESIZE];
		uint8_t sizeOfSample;
		lprintf("i: %d\n", i);
		sizeOfSample = getTxSample(thisSample, currentBitmask, i, batchNumber);
     fe0:	4d e0       	ldi	r20, 0x0D	; 13
     fe2:	24 2e       	mov	r2, r20
     fe4:	31 2c       	mov	r3, r1
     fe6:	2c 0e       	add	r2, r28
     fe8:	3d 1e       	adc	r3, r29
     fea:	5c c0       	rjmp	.+184    	; 0x10a4 <loadBatch+0x15c>

	for(int i=batchSampleStart; i < batchSampleEnd; i++)
	{
		uint8_t thisSample[MAXTXSAMPLESIZE];
		uint8_t sizeOfSample;
		lprintf("i: %d\n", i);
     fec:	00 d0       	rcall	.+0      	; 0xfee <loadBatch+0xa6>
     fee:	00 d0       	rcall	.+0      	; 0xff0 <loadBatch+0xa8>
     ff0:	e9 e2       	ldi	r30, 0x29	; 41
     ff2:	f1 e0       	ldi	r31, 0x01	; 1
     ff4:	ad b7       	in	r26, 0x3d	; 61
     ff6:	be b7       	in	r27, 0x3e	; 62
     ff8:	12 96       	adiw	r26, 0x02	; 2
     ffa:	fc 93       	st	X, r31
     ffc:	ee 93       	st	-X, r30
     ffe:	11 97       	sbiw	r26, 0x01	; 1
    1000:	14 96       	adiw	r26, 0x04	; 4
    1002:	dc 92       	st	X, r13
    1004:	ce 92       	st	-X, r12
    1006:	13 97       	sbiw	r26, 0x03	; 3
    1008:	0e 94 77 13 	call	0x26ee	; 0x26ee <lprintf>
		sizeOfSample = getTxSample(thisSample, currentBitmask, i, batchNumber);
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	0f 90       	pop	r0
    1014:	c1 01       	movw	r24, r2
    1016:	be 01       	movw	r22, r28
    1018:	6f 5f       	subi	r22, 0xFF	; 255
    101a:	7f 4f       	sbci	r23, 0xFF	; 255
    101c:	a6 01       	movw	r20, r12
    101e:	94 01       	movw	r18, r8
    1020:	0e 94 32 05 	call	0xa64	; 0xa64 <getTxSample>
    1024:	18 2f       	mov	r17, r24
		#ifdef opdebug
			lprintf("A Sample: ");
    1026:	00 d0       	rcall	.+0      	; 0x1028 <loadBatch+0xe0>
    1028:	e0 e3       	ldi	r30, 0x30	; 48
    102a:	f1 e0       	ldi	r31, 0x01	; 1
    102c:	ad b7       	in	r26, 0x3d	; 61
    102e:	be b7       	in	r27, 0x3e	; 62
    1030:	12 96       	adiw	r26, 0x02	; 2
    1032:	fc 93       	st	X, r31
    1034:	ee 93       	st	-X, r30
    1036:	11 97       	sbiw	r26, 0x01	; 1
    1038:	0e 94 77 13 	call	0x26ee	; 0x26ee <lprintf>
    103c:	71 01       	movw	r14, r2
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0

}

//Before this function is called, CommPromEnd must be set to CommPromStart, or weird things could hapen.
void loadBatch(void)
{
    1042:	01 2f       	mov	r16, r17
    1044:	10 e0       	ldi	r17, 0x00	; 0
		lprintf("i: %d\n", i);
		sizeOfSample = getTxSample(thisSample, currentBitmask, i, batchNumber);
		#ifdef opdebug
			lprintf("A Sample: ");
		#endif
		for(int j=0; j < sizeOfSample; j++)
    1046:	51 01       	movw	r10, r2
    1048:	a0 0e       	add	r10, r16
    104a:	b1 1e       	adc	r11, r17
    104c:	18 c0       	rjmp	.+48     	; 0x107e <loadBatch+0x136>
		{
			#ifdef opdebug
				lprintf("%x", thisSample[j]);
    104e:	00 d0       	rcall	.+0      	; 0x1050 <loadBatch+0x108>
    1050:	00 d0       	rcall	.+0      	; 0x1052 <loadBatch+0x10a>
    1052:	ed b7       	in	r30, 0x3d	; 61
    1054:	fe b7       	in	r31, 0x3e	; 62
    1056:	31 96       	adiw	r30, 0x01	; 1
    1058:	8b e3       	ldi	r24, 0x3B	; 59
    105a:	91 e0       	ldi	r25, 0x01	; 1
    105c:	ad b7       	in	r26, 0x3d	; 61
    105e:	be b7       	in	r27, 0x3e	; 62
    1060:	12 96       	adiw	r26, 0x02	; 2
    1062:	9c 93       	st	X, r25
    1064:	8e 93       	st	-X, r24
    1066:	11 97       	sbiw	r26, 0x01	; 1
    1068:	d7 01       	movw	r26, r14
    106a:	8d 91       	ld	r24, X+
    106c:	7d 01       	movw	r14, r26
    106e:	82 83       	std	Z+2, r24	; 0x02
    1070:	13 82       	std	Z+3, r1	; 0x03
    1072:	0e 94 77 13 	call	0x26ee	; 0x26ee <lprintf>
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
		lprintf("i: %d\n", i);
		sizeOfSample = getTxSample(thisSample, currentBitmask, i, batchNumber);
		#ifdef opdebug
			lprintf("A Sample: ");
		#endif
		for(int j=0; j < sizeOfSample; j++)
    107e:	ea 14       	cp	r14, r10
    1080:	fb 04       	cpc	r15, r11
    1082:	29 f7       	brne	.-54     	; 0x104e <loadBatch+0x106>
    1084:	60 0e       	add	r6, r16
    1086:	71 1e       	adc	r7, r17
			i2cMasterSendNI(COMPROM, 3, &data);
			#endif
			commPromEnd++;
		}
		#ifdef opdebug
			lprintf("\n");
    1088:	00 d0       	rcall	.+0      	; 0x108a <loadBatch+0x142>
    108a:	8e e3       	ldi	r24, 0x3E	; 62
    108c:	91 e0       	ldi	r25, 0x01	; 1
    108e:	ed b7       	in	r30, 0x3d	; 61
    1090:	fe b7       	in	r31, 0x3e	; 62
    1092:	92 83       	std	Z+2, r25	; 0x02
    1094:	81 83       	std	Z+1, r24	; 0x01
    1096:	0e 94 77 13 	call	0x26ee	; 0x26ee <lprintf>
	currentBitmask[1] = eeprom_read_dword(&EEcurrentTelemetryBitmap[1]);
	currentBitmask[2] = eeprom_read_dword(&EEcurrentTelemetryBitmap[2]);

	uint16_t commPromEnd = eeprom_read_word(&EEcommPromEnd);

	for(int i=batchSampleStart; i < batchSampleEnd; i++)
    109a:	08 94       	sec
    109c:	c1 1c       	adc	r12, r1
    109e:	d1 1c       	adc	r13, r1
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	c4 14       	cp	r12, r4
    10a6:	d5 04       	cpc	r13, r5
    10a8:	08 f4       	brcc	.+2      	; 0x10ac <loadBatch+0x164>
    10aa:	a0 cf       	rjmp	.-192    	; 0xfec <loadBatch+0xa4>
	}

	batchNumber++;
	batchSampleStart = batchSampleEnd;

	eeprom_write_word(&EEbatchSampleStart, batchSampleStart);
    10ac:	88 e2       	ldi	r24, 0x28	; 40
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	b2 01       	movw	r22, r4
    10b2:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__eewr_word_m324p>
	eeprom_write_word(&EEbatchSampleEnd, batchSampleEnd);
    10b6:	8a e2       	ldi	r24, 0x2A	; 42
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	b2 01       	movw	r22, r4
    10bc:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__eewr_word_m324p>
	eeprom_write_word(&EEcurrentBatchNumber, batchNumber);
    10c0:	08 94       	sec
    10c2:	81 1c       	adc	r8, r1
    10c4:	91 1c       	adc	r9, r1
    10c6:	86 e2       	ldi	r24, 0x26	; 38
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	b4 01       	movw	r22, r8
    10cc:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__eewr_word_m324p>
	eeprom_write_word(&EEcommPromEnd, commPromEnd);
    10d0:	8e e2       	ldi	r24, 0x2E	; 46
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	b3 01       	movw	r22, r6
    10d6:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__eewr_word_m324p>

}
    10da:	ce 55       	subi	r28, 0x5E	; 94
    10dc:	df 4f       	sbci	r29, 0xFF	; 255
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	f8 94       	cli
    10e2:	de bf       	out	0x3e, r29	; 62
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	cd bf       	out	0x3d, r28	; 61
    10e8:	cf 91       	pop	r28
    10ea:	df 91       	pop	r29
    10ec:	1f 91       	pop	r17
    10ee:	0f 91       	pop	r16
    10f0:	ff 90       	pop	r15
    10f2:	ef 90       	pop	r14
    10f4:	df 90       	pop	r13
    10f6:	cf 90       	pop	r12
    10f8:	bf 90       	pop	r11
    10fa:	af 90       	pop	r10
    10fc:	9f 90       	pop	r9
    10fe:	8f 90       	pop	r8
    1100:	7f 90       	pop	r7
    1102:	6f 90       	pop	r6
    1104:	5f 90       	pop	r5
    1106:	4f 90       	pop	r4
    1108:	3f 90       	pop	r3
    110a:	2f 90       	pop	r2
    110c:	08 95       	ret

0000110e <bmp085ReadShort>:
    110e:	df 92       	push	r13
    1110:	ef 92       	push	r14
    1112:	ff 92       	push	r15
    1114:	0f 93       	push	r16
    1116:	1f 93       	push	r17
    1118:	18 2f       	mov	r17, r24
    111a:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <i2cDisableInt>
    111e:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <i2cSendStart>
    1122:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    1126:	8e ee       	ldi	r24, 0xEE	; 238
    1128:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
    112c:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    1130:	81 2f       	mov	r24, r17
    1132:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
    1136:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    113a:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <i2cSendStart>
    113e:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    1142:	8f ee       	ldi	r24, 0xEF	; 239
    1144:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
    1148:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <i2cReceiveByte>
    1152:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    1156:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <i2cGetReceivedByte>
    115a:	d8 2e       	mov	r13, r24
    115c:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <i2cReceiveByte>
    1166:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    116a:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <i2cGetReceivedByte>
    116e:	e8 2e       	mov	r14, r24
    1170:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    1174:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <i2cSendStop>
    1178:	1d 2d       	mov	r17, r13
    117a:	00 e0       	ldi	r16, 0x00	; 0
    117c:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <i2cEnableInt>
    1180:	ff 24       	eor	r15, r15
    1182:	e0 2a       	or	r14, r16
    1184:	f1 2a       	or	r15, r17
    1186:	c7 01       	movw	r24, r14
    1188:	1f 91       	pop	r17
    118a:	0f 91       	pop	r16
    118c:	ff 90       	pop	r15
    118e:	ef 90       	pop	r14
    1190:	df 90       	pop	r13
    1192:	08 95       	ret

00001194 <bmp085ReadPressure>:
    1194:	ef 92       	push	r14
    1196:	ff 92       	push	r15
    1198:	0f 93       	push	r16
    119a:	1f 93       	push	r17
    119c:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <i2cDisableInt>
    11a0:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <i2cSendStart>
    11a4:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    11a8:	8e ee       	ldi	r24, 0xEE	; 238
    11aa:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
    11ae:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    11b2:	84 ef       	ldi	r24, 0xF4	; 244
    11b4:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
    11b8:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    11bc:	84 e3       	ldi	r24, 0x34	; 52
    11be:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
    11c2:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    11c6:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <i2cSendStop>
    11ca:	80 e3       	ldi	r24, 0x30	; 48
    11cc:	95 e7       	ldi	r25, 0x75	; 117
    11ce:	01 97       	sbiw	r24, 0x01	; 1
    11d0:	f1 f7       	brne	.-4      	; 0x11ce <bmp085ReadPressure+0x3a>
    11d2:	86 ef       	ldi	r24, 0xF6	; 246
    11d4:	0e 94 87 08 	call	0x110e	; 0x110e <bmp085ReadShort>
    11d8:	7c 01       	movw	r14, r24
    11da:	00 27       	eor	r16, r16
    11dc:	f7 fc       	sbrc	r15, 7
    11de:	00 95       	com	r16
    11e0:	10 2f       	mov	r17, r16
    11e2:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <i2cEnableInt>
    11e6:	8f ef       	ldi	r24, 0xFF	; 255
    11e8:	9f ef       	ldi	r25, 0xFF	; 255
    11ea:	a0 e0       	ldi	r26, 0x00	; 0
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	e8 22       	and	r14, r24
    11f0:	f9 22       	and	r15, r25
    11f2:	0a 23       	and	r16, r26
    11f4:	1b 23       	and	r17, r27
    11f6:	b7 01       	movw	r22, r14
    11f8:	c8 01       	movw	r24, r16
    11fa:	1f 91       	pop	r17
    11fc:	0f 91       	pop	r16
    11fe:	ff 90       	pop	r15
    1200:	ef 90       	pop	r14
    1202:	08 95       	ret

00001204 <bmp085ReadTemp>:
    1204:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <i2cDisableInt>
    1208:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <i2cSendStart>
    120c:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    1210:	8e ee       	ldi	r24, 0xEE	; 238
    1212:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
    1216:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    121a:	84 ef       	ldi	r24, 0xF4	; 244
    121c:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
    1220:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    1224:	8e e2       	ldi	r24, 0x2E	; 46
    1226:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
    122a:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    122e:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <i2cSendStop>
    1232:	80 e3       	ldi	r24, 0x30	; 48
    1234:	95 e7       	ldi	r25, 0x75	; 117
    1236:	01 97       	sbiw	r24, 0x01	; 1
    1238:	f1 f7       	brne	.-4      	; 0x1236 <bmp085ReadTemp+0x32>
    123a:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <i2cEnableInt>
    123e:	86 ef       	ldi	r24, 0xF6	; 246
    1240:	0e 94 87 08 	call	0x110e	; 0x110e <bmp085ReadShort>
    1244:	9c 01       	movw	r18, r24
    1246:	44 27       	eor	r20, r20
    1248:	37 fd       	sbrc	r19, 7
    124a:	40 95       	com	r20
    124c:	54 2f       	mov	r21, r20
    124e:	b9 01       	movw	r22, r18
    1250:	ca 01       	movw	r24, r20
    1252:	08 95       	ret

00001254 <bmp085Convert>:
    1254:	2f 92       	push	r2
    1256:	3f 92       	push	r3
    1258:	4f 92       	push	r4
    125a:	5f 92       	push	r5
    125c:	6f 92       	push	r6
    125e:	7f 92       	push	r7
    1260:	8f 92       	push	r8
    1262:	9f 92       	push	r9
    1264:	af 92       	push	r10
    1266:	bf 92       	push	r11
    1268:	cf 92       	push	r12
    126a:	df 92       	push	r13
    126c:	ef 92       	push	r14
    126e:	ff 92       	push	r15
    1270:	0f 93       	push	r16
    1272:	1f 93       	push	r17
    1274:	df 93       	push	r29
    1276:	cf 93       	push	r28
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
    127c:	64 97       	sbiw	r28, 0x14	; 20
    127e:	0f b6       	in	r0, 0x3f	; 63
    1280:	f8 94       	cli
    1282:	de bf       	out	0x3e, r29	; 62
    1284:	0f be       	out	0x3f, r0	; 63
    1286:	cd bf       	out	0x3d, r28	; 61
    1288:	98 8b       	std	Y+16, r25	; 0x10
    128a:	8f 87       	std	Y+15, r24	; 0x0f
    128c:	7a 8b       	std	Y+18, r23	; 0x12
    128e:	69 8b       	std	Y+17, r22	; 0x11
    1290:	89 e6       	ldi	r24, 0x69	; 105
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
    1298:	9e 87       	std	Y+14, r25	; 0x0e
    129a:	8d 87       	std	Y+13, r24	; 0x0d
    129c:	8b e6       	ldi	r24, 0x6B	; 107
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
    12a4:	9c 87       	std	Y+12, r25	; 0x0c
    12a6:	8b 87       	std	Y+11, r24	; 0x0b
    12a8:	8d e6       	ldi	r24, 0x6D	; 109
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
    12b0:	9a 87       	std	Y+10, r25	; 0x0a
    12b2:	89 87       	std	Y+9, r24	; 0x09
    12b4:	8f e6       	ldi	r24, 0x6F	; 111
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
    12bc:	9e 83       	std	Y+6, r25	; 0x06
    12be:	8d 83       	std	Y+5, r24	; 0x05
    12c0:	81 e7       	ldi	r24, 0x71	; 113
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
    12c8:	6c 01       	movw	r12, r24
    12ca:	83 e7       	ldi	r24, 0x73	; 115
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
    12d2:	1c 01       	movw	r2, r24
    12d4:	85 e7       	ldi	r24, 0x75	; 117
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
    12dc:	9c 8b       	std	Y+20, r25	; 0x14
    12de:	8b 8b       	std	Y+19, r24	; 0x13
    12e0:	87 e7       	ldi	r24, 0x77	; 119
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
    12e8:	98 87       	std	Y+8, r25	; 0x08
    12ea:	8f 83       	std	Y+7, r24	; 0x07
    12ec:	8b e7       	ldi	r24, 0x7B	; 123
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
    12f4:	3c 01       	movw	r6, r24
    12f6:	8d e7       	ldi	r24, 0x7D	; 125
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
    12fe:	5c 01       	movw	r10, r24
    1300:	0e 94 02 09 	call	0x1204	; 0x1204 <bmp085ReadTemp>
    1304:	0e 94 02 09 	call	0x1204	; 0x1204 <bmp085ReadTemp>
    1308:	7b 01       	movw	r14, r22
    130a:	8c 01       	movw	r16, r24
    130c:	0e 94 ca 08 	call	0x1194	; 0x1194 <bmp085ReadPressure>
    1310:	0e 94 ca 08 	call	0x1194	; 0x1194 <bmp085ReadPressure>
    1314:	69 83       	std	Y+1, r22	; 0x01
    1316:	7a 83       	std	Y+2, r23	; 0x02
    1318:	8b 83       	std	Y+3, r24	; 0x03
    131a:	9c 83       	std	Y+4, r25	; 0x04
    131c:	44 24       	eor	r4, r4
    131e:	55 24       	eor	r5, r5
    1320:	e2 18       	sub	r14, r2
    1322:	f3 08       	sbc	r15, r3
    1324:	04 09       	sbc	r16, r4
    1326:	15 09       	sbc	r17, r5
    1328:	96 01       	movw	r18, r12
    132a:	40 e0       	ldi	r20, 0x00	; 0
    132c:	50 e0       	ldi	r21, 0x00	; 0
    132e:	c8 01       	movw	r24, r16
    1330:	b7 01       	movw	r22, r14
    1332:	0e 94 66 39 	call	0x72cc	; 0x72cc <__mulsi3>
    1336:	7b 01       	movw	r14, r22
    1338:	8c 01       	movw	r16, r24
    133a:	7f e0       	ldi	r23, 0x0F	; 15
    133c:	16 95       	lsr	r17
    133e:	07 95       	ror	r16
    1340:	f7 94       	ror	r15
    1342:	e7 94       	ror	r14
    1344:	7a 95       	dec	r23
    1346:	d1 f7       	brne	.-12     	; 0x133c <bmp085Convert+0xe8>
    1348:	88 24       	eor	r8, r8
    134a:	77 fc       	sbrc	r7, 7
    134c:	80 94       	com	r8
    134e:	98 2c       	mov	r9, r8
    1350:	6b e0       	ldi	r22, 0x0B	; 11
    1352:	66 0c       	add	r6, r6
    1354:	77 1c       	adc	r7, r7
    1356:	88 1c       	adc	r8, r8
    1358:	99 1c       	adc	r9, r9
    135a:	6a 95       	dec	r22
    135c:	d1 f7       	brne	.-12     	; 0x1352 <bmp085Convert+0xfe>
    135e:	cc 24       	eor	r12, r12
    1360:	b7 fc       	sbrc	r11, 7
    1362:	c0 94       	com	r12
    1364:	dc 2c       	mov	r13, r12
    1366:	ae 0c       	add	r10, r14
    1368:	bf 1c       	adc	r11, r15
    136a:	c0 1e       	adc	r12, r16
    136c:	d1 1e       	adc	r13, r17
    136e:	c4 01       	movw	r24, r8
    1370:	b3 01       	movw	r22, r6
    1372:	a6 01       	movw	r20, r12
    1374:	95 01       	movw	r18, r10
    1376:	0e 94 c6 39 	call	0x738c	; 0x738c <__divmodsi4>
    137a:	59 01       	movw	r10, r18
    137c:	6a 01       	movw	r12, r20
    137e:	ae 0c       	add	r10, r14
    1380:	bf 1c       	adc	r11, r15
    1382:	c0 1e       	adc	r12, r16
    1384:	d1 1e       	adc	r13, r17
    1386:	88 e0       	ldi	r24, 0x08	; 8
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	a0 e0       	ldi	r26, 0x00	; 0
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	a8 0e       	add	r10, r24
    1390:	b9 1e       	adc	r11, r25
    1392:	ca 1e       	adc	r12, r26
    1394:	db 1e       	adc	r13, r27
    1396:	d6 01       	movw	r26, r12
    1398:	c5 01       	movw	r24, r10
    139a:	54 e0       	ldi	r21, 0x04	; 4
    139c:	b5 95       	asr	r27
    139e:	a7 95       	ror	r26
    13a0:	97 95       	ror	r25
    13a2:	87 95       	ror	r24
    13a4:	5a 95       	dec	r21
    13a6:	d1 f7       	brne	.-12     	; 0x139c <bmp085Convert+0x148>
    13a8:	ef 85       	ldd	r30, Y+15	; 0x0f
    13aa:	f8 89       	ldd	r31, Y+16	; 0x10
    13ac:	80 83       	st	Z, r24
    13ae:	91 83       	std	Z+1, r25	; 0x01
    13b0:	a2 83       	std	Z+2, r26	; 0x02
    13b2:	b3 83       	std	Z+3, r27	; 0x03
    13b4:	88 e5       	ldi	r24, 0x58	; 88
    13b6:	90 ef       	ldi	r25, 0xF0	; 240
    13b8:	af ef       	ldi	r26, 0xFF	; 255
    13ba:	bf ef       	ldi	r27, 0xFF	; 255
    13bc:	a8 0e       	add	r10, r24
    13be:	b9 1e       	adc	r11, r25
    13c0:	ca 1e       	adc	r12, r26
    13c2:	db 1e       	adc	r13, r27
    13c4:	c6 01       	movw	r24, r12
    13c6:	b5 01       	movw	r22, r10
    13c8:	a6 01       	movw	r20, r12
    13ca:	95 01       	movw	r18, r10
    13cc:	0e 94 66 39 	call	0x72cc	; 0x72cc <__mulsi3>
    13d0:	3b 01       	movw	r6, r22
    13d2:	4c 01       	movw	r8, r24
    13d4:	4c e0       	ldi	r20, 0x0C	; 12
    13d6:	95 94       	asr	r9
    13d8:	87 94       	ror	r8
    13da:	77 94       	ror	r7
    13dc:	67 94       	ror	r6
    13de:	4a 95       	dec	r20
    13e0:	d1 f7       	brne	.-12     	; 0x13d6 <bmp085Convert+0x182>
    13e2:	a9 85       	ldd	r26, Y+9	; 0x09
    13e4:	ba 85       	ldd	r27, Y+10	; 0x0a
    13e6:	9d 01       	movw	r18, r26
    13e8:	44 27       	eor	r20, r20
    13ea:	37 fd       	sbrc	r19, 7
    13ec:	40 95       	com	r20
    13ee:	54 2f       	mov	r21, r20
    13f0:	c6 01       	movw	r24, r12
    13f2:	b5 01       	movw	r22, r10
    13f4:	0e 94 66 39 	call	0x72cc	; 0x72cc <__mulsi3>
    13f8:	7b 01       	movw	r14, r22
    13fa:	8c 01       	movw	r16, r24
    13fc:	3d e0       	ldi	r19, 0x0D	; 13
    13fe:	15 95       	asr	r17
    1400:	07 95       	ror	r16
    1402:	f7 94       	ror	r15
    1404:	e7 94       	ror	r14
    1406:	3a 95       	dec	r19
    1408:	d1 f7       	brne	.-12     	; 0x13fe <bmp085Convert+0x1aa>
    140a:	82 e0       	ldi	r24, 0x02	; 2
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	a0 e0       	ldi	r26, 0x00	; 0
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	e8 0e       	add	r14, r24
    1414:	f9 1e       	adc	r15, r25
    1416:	0a 1f       	adc	r16, r26
    1418:	1b 1f       	adc	r17, r27
    141a:	ab 89       	ldd	r26, Y+19	; 0x13
    141c:	bc 89       	ldd	r27, Y+20	; 0x14
    141e:	9d 01       	movw	r18, r26
    1420:	44 27       	eor	r20, r20
    1422:	37 fd       	sbrc	r19, 7
    1424:	40 95       	com	r20
    1426:	54 2f       	mov	r21, r20
    1428:	c4 01       	movw	r24, r8
    142a:	b3 01       	movw	r22, r6
    142c:	0e 94 66 39 	call	0x72cc	; 0x72cc <__mulsi3>
    1430:	bc 01       	movw	r22, r24
    1432:	99 27       	eor	r25, r25
    1434:	77 fd       	sbrc	r23, 7
    1436:	90 95       	com	r25
    1438:	89 2f       	mov	r24, r25
    143a:	e6 0e       	add	r14, r22
    143c:	f7 1e       	adc	r15, r23
    143e:	08 1f       	adc	r16, r24
    1440:	19 1f       	adc	r17, r25
    1442:	82 e0       	ldi	r24, 0x02	; 2
    1444:	15 95       	asr	r17
    1446:	07 95       	ror	r16
    1448:	f7 94       	ror	r15
    144a:	e7 94       	ror	r14
    144c:	8a 95       	dec	r24
    144e:	d1 f7       	brne	.-12     	; 0x1444 <bmp085Convert+0x1f0>
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	90 e8       	ldi	r25, 0x80	; 128
    1454:	a0 e0       	ldi	r26, 0x00	; 0
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e8 0e       	add	r14, r24
    145a:	f9 1e       	adc	r15, r25
    145c:	0a 1f       	adc	r16, r26
    145e:	1b 1f       	adc	r17, r27
    1460:	ad 81       	ldd	r26, Y+5	; 0x05
    1462:	be 81       	ldd	r27, Y+6	; 0x06
    1464:	9d 01       	movw	r18, r26
    1466:	40 e0       	ldi	r20, 0x00	; 0
    1468:	50 e0       	ldi	r21, 0x00	; 0
    146a:	c8 01       	movw	r24, r16
    146c:	b7 01       	movw	r22, r14
    146e:	0e 94 66 39 	call	0x72cc	; 0x72cc <__mulsi3>
    1472:	1b 01       	movw	r2, r22
    1474:	2c 01       	movw	r4, r24
    1476:	1f e0       	ldi	r17, 0x0F	; 15
    1478:	56 94       	lsr	r5
    147a:	47 94       	ror	r4
    147c:	37 94       	ror	r3
    147e:	27 94       	ror	r2
    1480:	1a 95       	dec	r17
    1482:	d1 f7       	brne	.-12     	; 0x1478 <bmp085Convert+0x224>
    1484:	ed 85       	ldd	r30, Y+13	; 0x0d
    1486:	fe 85       	ldd	r31, Y+14	; 0x0e
    1488:	7f 01       	movw	r14, r30
    148a:	00 27       	eor	r16, r16
    148c:	f7 fc       	sbrc	r15, 7
    148e:	00 95       	com	r16
    1490:	10 2f       	mov	r17, r16
    1492:	b2 e0       	ldi	r27, 0x02	; 2
    1494:	ee 0c       	add	r14, r14
    1496:	ff 1c       	adc	r15, r15
    1498:	00 1f       	adc	r16, r16
    149a:	11 1f       	adc	r17, r17
    149c:	ba 95       	dec	r27
    149e:	d1 f7       	brne	.-12     	; 0x1494 <bmp085Convert+0x240>
    14a0:	82 e0       	ldi	r24, 0x02	; 2
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	a0 e0       	ldi	r26, 0x00	; 0
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	e8 0e       	add	r14, r24
    14aa:	f9 1e       	adc	r15, r25
    14ac:	0a 1f       	adc	r16, r26
    14ae:	1b 1f       	adc	r17, r27
    14b0:	ab 85       	ldd	r26, Y+11	; 0x0b
    14b2:	bc 85       	ldd	r27, Y+12	; 0x0c
    14b4:	9d 01       	movw	r18, r26
    14b6:	44 27       	eor	r20, r20
    14b8:	37 fd       	sbrc	r19, 7
    14ba:	40 95       	com	r20
    14bc:	54 2f       	mov	r21, r20
    14be:	c6 01       	movw	r24, r12
    14c0:	b5 01       	movw	r22, r10
    14c2:	0e 94 66 39 	call	0x72cc	; 0x72cc <__mulsi3>
    14c6:	ab e0       	ldi	r26, 0x0B	; 11
    14c8:	95 95       	asr	r25
    14ca:	87 95       	ror	r24
    14cc:	77 95       	ror	r23
    14ce:	67 95       	ror	r22
    14d0:	aa 95       	dec	r26
    14d2:	d1 f7       	brne	.-12     	; 0x14c8 <bmp085Convert+0x274>
    14d4:	e6 0e       	add	r14, r22
    14d6:	f7 1e       	adc	r15, r23
    14d8:	08 1f       	adc	r16, r24
    14da:	19 1f       	adc	r17, r25
    14dc:	ef 81       	ldd	r30, Y+7	; 0x07
    14de:	f8 85       	ldd	r31, Y+8	; 0x08
    14e0:	9f 01       	movw	r18, r30
    14e2:	44 27       	eor	r20, r20
    14e4:	37 fd       	sbrc	r19, 7
    14e6:	40 95       	com	r20
    14e8:	54 2f       	mov	r21, r20
    14ea:	c4 01       	movw	r24, r8
    14ec:	b3 01       	movw	r22, r6
    14ee:	0e 94 66 39 	call	0x72cc	; 0x72cc <__mulsi3>
    14f2:	fb e0       	ldi	r31, 0x0B	; 11
    14f4:	95 95       	asr	r25
    14f6:	87 95       	ror	r24
    14f8:	77 95       	ror	r23
    14fa:	67 95       	ror	r22
    14fc:	fa 95       	dec	r31
    14fe:	d1 f7       	brne	.-12     	; 0x14f4 <bmp085Convert+0x2a0>
    1500:	e6 0e       	add	r14, r22
    1502:	f7 1e       	adc	r15, r23
    1504:	08 1f       	adc	r16, r24
    1506:	19 1f       	adc	r17, r25
    1508:	c8 01       	movw	r24, r16
    150a:	b7 01       	movw	r22, r14
    150c:	24 e0       	ldi	r18, 0x04	; 4
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	40 e0       	ldi	r20, 0x00	; 0
    1512:	50 e0       	ldi	r21, 0x00	; 0
    1514:	0e 94 c6 39 	call	0x738c	; 0x738c <__divmodsi4>
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	9a 81       	ldd	r25, Y+2	; 0x02
    151c:	ab 81       	ldd	r26, Y+3	; 0x03
    151e:	bc 81       	ldd	r27, Y+4	; 0x04
    1520:	82 1b       	sub	r24, r18
    1522:	93 0b       	sbc	r25, r19
    1524:	a4 0b       	sbc	r26, r20
    1526:	b5 0b       	sbc	r27, r21
    1528:	89 83       	std	Y+1, r24	; 0x01
    152a:	9a 83       	std	Y+2, r25	; 0x02
    152c:	ab 83       	std	Y+3, r26	; 0x03
    152e:	bc 83       	std	Y+4, r27	; 0x04
    1530:	bc 01       	movw	r22, r24
    1532:	cd 01       	movw	r24, r26
    1534:	20 e5       	ldi	r18, 0x50	; 80
    1536:	33 ec       	ldi	r19, 0xC3	; 195
    1538:	40 e0       	ldi	r20, 0x00	; 0
    153a:	50 e0       	ldi	r21, 0x00	; 0
    153c:	0e 94 66 39 	call	0x72cc	; 0x72cc <__mulsi3>
    1540:	97 fd       	sbrc	r25, 7
    1542:	0d c0       	rjmp	.+26     	; 0x155e <bmp085Convert+0x30a>
    1544:	66 0f       	add	r22, r22
    1546:	77 1f       	adc	r23, r23
    1548:	88 1f       	adc	r24, r24
    154a:	99 1f       	adc	r25, r25
    154c:	a2 01       	movw	r20, r4
    154e:	91 01       	movw	r18, r2
    1550:	0e 94 a4 39 	call	0x7348	; 0x7348 <__udivmodsi4>
    1554:	c9 01       	movw	r24, r18
    1556:	da 01       	movw	r26, r20
    1558:	5c 01       	movw	r10, r24
    155a:	6d 01       	movw	r12, r26
    155c:	0a c0       	rjmp	.+20     	; 0x1572 <bmp085Convert+0x31e>
    155e:	a2 01       	movw	r20, r4
    1560:	91 01       	movw	r18, r2
    1562:	0e 94 a4 39 	call	0x7348	; 0x7348 <__udivmodsi4>
    1566:	59 01       	movw	r10, r18
    1568:	6a 01       	movw	r12, r20
    156a:	aa 0c       	add	r10, r10
    156c:	bb 1c       	adc	r11, r11
    156e:	cc 1c       	adc	r12, r12
    1570:	dd 1c       	adc	r13, r13
    1572:	55 27       	eor	r21, r21
    1574:	d7 fc       	sbrc	r13, 7
    1576:	5a 95       	dec	r21
    1578:	4d 2d       	mov	r20, r13
    157a:	3c 2d       	mov	r19, r12
    157c:	2b 2d       	mov	r18, r11
    157e:	ca 01       	movw	r24, r20
    1580:	b9 01       	movw	r22, r18
    1582:	0e 94 66 39 	call	0x72cc	; 0x72cc <__mulsi3>
    1586:	2e ed       	ldi	r18, 0xDE	; 222
    1588:	3b e0       	ldi	r19, 0x0B	; 11
    158a:	40 e0       	ldi	r20, 0x00	; 0
    158c:	50 e0       	ldi	r21, 0x00	; 0
    158e:	0e 94 66 39 	call	0x72cc	; 0x72cc <__mulsi3>
    1592:	7b 01       	movw	r14, r22
    1594:	8c 01       	movw	r16, r24
    1596:	c6 01       	movw	r24, r12
    1598:	b5 01       	movw	r22, r10
    159a:	23 e4       	ldi	r18, 0x43	; 67
    159c:	33 ee       	ldi	r19, 0xE3	; 227
    159e:	4f ef       	ldi	r20, 0xFF	; 255
    15a0:	5f ef       	ldi	r21, 0xFF	; 255
    15a2:	0e 94 66 39 	call	0x72cc	; 0x72cc <__mulsi3>
    15a6:	bc 01       	movw	r22, r24
    15a8:	99 27       	eor	r25, r25
    15aa:	77 fd       	sbrc	r23, 7
    15ac:	90 95       	com	r25
    15ae:	89 2f       	mov	r24, r25
    15b0:	61 53       	subi	r22, 0x31	; 49
    15b2:	71 4f       	sbci	r23, 0xF1	; 241
    15b4:	8f 4f       	sbci	r24, 0xFF	; 255
    15b6:	9f 4f       	sbci	r25, 0xFF	; 255
    15b8:	78 01       	movw	r14, r16
    15ba:	11 27       	eor	r17, r17
    15bc:	f7 fc       	sbrc	r15, 7
    15be:	10 95       	com	r17
    15c0:	01 2f       	mov	r16, r17
    15c2:	6e 0d       	add	r22, r14
    15c4:	7f 1d       	adc	r23, r15
    15c6:	80 1f       	adc	r24, r16
    15c8:	91 1f       	adc	r25, r17
    15ca:	24 e0       	ldi	r18, 0x04	; 4
    15cc:	95 95       	asr	r25
    15ce:	87 95       	ror	r24
    15d0:	77 95       	ror	r23
    15d2:	67 95       	ror	r22
    15d4:	2a 95       	dec	r18
    15d6:	d1 f7       	brne	.-12     	; 0x15cc <bmp085Convert+0x378>
    15d8:	6a 0d       	add	r22, r10
    15da:	7b 1d       	adc	r23, r11
    15dc:	8c 1d       	adc	r24, r12
    15de:	9d 1d       	adc	r25, r13
    15e0:	a9 89       	ldd	r26, Y+17	; 0x11
    15e2:	ba 89       	ldd	r27, Y+18	; 0x12
    15e4:	6d 93       	st	X+, r22
    15e6:	7d 93       	st	X+, r23
    15e8:	8d 93       	st	X+, r24
    15ea:	9c 93       	st	X, r25
    15ec:	13 97       	sbiw	r26, 0x03	; 3
    15ee:	64 96       	adiw	r28, 0x14	; 20
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	f8 94       	cli
    15f4:	de bf       	out	0x3e, r29	; 62
    15f6:	0f be       	out	0x3f, r0	; 63
    15f8:	cd bf       	out	0x3d, r28	; 61
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	1f 91       	pop	r17
    1600:	0f 91       	pop	r16
    1602:	ff 90       	pop	r15
    1604:	ef 90       	pop	r14
    1606:	df 90       	pop	r13
    1608:	cf 90       	pop	r12
    160a:	bf 90       	pop	r11
    160c:	af 90       	pop	r10
    160e:	9f 90       	pop	r9
    1610:	8f 90       	pop	r8
    1612:	7f 90       	pop	r7
    1614:	6f 90       	pop	r6
    1616:	5f 90       	pop	r5
    1618:	4f 90       	pop	r4
    161a:	3f 90       	pop	r3
    161c:	2f 90       	pop	r2
    161e:	08 95       	ret

00001620 <BMP085_Calibration>:
    1620:	8a ea       	ldi	r24, 0xAA	; 170
    1622:	0e 94 87 08 	call	0x110e	; 0x110e <bmp085ReadShort>
    1626:	bc 01       	movw	r22, r24
    1628:	89 e6       	ldi	r24, 0x69	; 105
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__eewr_word_m324p>
    1630:	8c ea       	ldi	r24, 0xAC	; 172
    1632:	0e 94 87 08 	call	0x110e	; 0x110e <bmp085ReadShort>
    1636:	bc 01       	movw	r22, r24
    1638:	8b e6       	ldi	r24, 0x6B	; 107
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__eewr_word_m324p>
    1640:	8e ea       	ldi	r24, 0xAE	; 174
    1642:	0e 94 87 08 	call	0x110e	; 0x110e <bmp085ReadShort>
    1646:	bc 01       	movw	r22, r24
    1648:	8d e6       	ldi	r24, 0x6D	; 109
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__eewr_word_m324p>
    1650:	80 eb       	ldi	r24, 0xB0	; 176
    1652:	0e 94 87 08 	call	0x110e	; 0x110e <bmp085ReadShort>
    1656:	bc 01       	movw	r22, r24
    1658:	8f e6       	ldi	r24, 0x6F	; 111
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__eewr_word_m324p>
    1660:	82 eb       	ldi	r24, 0xB2	; 178
    1662:	0e 94 87 08 	call	0x110e	; 0x110e <bmp085ReadShort>
    1666:	bc 01       	movw	r22, r24
    1668:	81 e7       	ldi	r24, 0x71	; 113
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__eewr_word_m324p>
    1670:	84 eb       	ldi	r24, 0xB4	; 180
    1672:	0e 94 87 08 	call	0x110e	; 0x110e <bmp085ReadShort>
    1676:	bc 01       	movw	r22, r24
    1678:	83 e7       	ldi	r24, 0x73	; 115
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__eewr_word_m324p>
    1680:	86 eb       	ldi	r24, 0xB6	; 182
    1682:	0e 94 87 08 	call	0x110e	; 0x110e <bmp085ReadShort>
    1686:	bc 01       	movw	r22, r24
    1688:	85 e7       	ldi	r24, 0x75	; 117
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__eewr_word_m324p>
    1690:	88 eb       	ldi	r24, 0xB8	; 184
    1692:	0e 94 87 08 	call	0x110e	; 0x110e <bmp085ReadShort>
    1696:	bc 01       	movw	r22, r24
    1698:	87 e7       	ldi	r24, 0x77	; 119
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__eewr_word_m324p>
    16a0:	8a eb       	ldi	r24, 0xBA	; 186
    16a2:	0e 94 87 08 	call	0x110e	; 0x110e <bmp085ReadShort>
    16a6:	bc 01       	movw	r22, r24
    16a8:	89 e7       	ldi	r24, 0x79	; 121
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__eewr_word_m324p>
    16b0:	8c eb       	ldi	r24, 0xBC	; 188
    16b2:	0e 94 87 08 	call	0x110e	; 0x110e <bmp085ReadShort>
    16b6:	bc 01       	movw	r22, r24
    16b8:	8b e7       	ldi	r24, 0x7B	; 123
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__eewr_word_m324p>
    16c0:	8e eb       	ldi	r24, 0xBE	; 190
    16c2:	0e 94 87 08 	call	0x110e	; 0x110e <bmp085ReadShort>
    16c6:	bc 01       	movw	r22, r24
    16c8:	8d e7       	ldi	r24, 0x7D	; 125
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__eewr_word_m324p>
    16d0:	08 95       	ret

000016d2 <ds3231read>:
    16d2:	1f 93       	push	r17
    16d4:	18 2f       	mov	r17, r24
    16d6:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <i2cDisableInt>
    16da:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <i2cSendStart>
    16de:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    16e2:	80 ed       	ldi	r24, 0xD0	; 208
    16e4:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
    16e8:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    16ec:	81 2f       	mov	r24, r17
    16ee:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
    16f2:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    16f6:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <i2cSendStart>
    16fa:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    16fe:	81 ed       	ldi	r24, 0xD1	; 209
    1700:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
    1704:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <i2cReceiveByte>
    170e:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    1712:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <i2cGetReceivedByte>
    1716:	18 2f       	mov	r17, r24
    1718:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    171c:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <i2cSendStop>
    1720:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <i2cEnableInt>
    1724:	81 2f       	mov	r24, r17
    1726:	1f 91       	pop	r17
    1728:	08 95       	ret

0000172a <getDays>:
    172a:	83 e0       	ldi	r24, 0x03	; 3
    172c:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <ds3231read>
    1730:	28 2f       	mov	r18, r24
    1732:	22 95       	swap	r18
    1734:	2f 70       	andi	r18, 0x0F	; 15
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	a9 01       	movw	r20, r18
    173a:	63 e0       	ldi	r22, 0x03	; 3
    173c:	44 0f       	add	r20, r20
    173e:	55 1f       	adc	r21, r21
    1740:	6a 95       	dec	r22
    1742:	e1 f7       	brne	.-8      	; 0x173c <getDays+0x12>
    1744:	22 0f       	add	r18, r18
    1746:	33 1f       	adc	r19, r19
    1748:	42 0f       	add	r20, r18
    174a:	53 1f       	adc	r21, r19
    174c:	8f 70       	andi	r24, 0x0F	; 15
    174e:	84 0f       	add	r24, r20
    1750:	08 95       	ret

00001752 <getHours>:
    1752:	82 e0       	ldi	r24, 0x02	; 2
    1754:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <ds3231read>
    1758:	28 2f       	mov	r18, r24
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	20 73       	andi	r18, 0x30	; 48
    175e:	30 70       	andi	r19, 0x00	; 0
    1760:	f4 e0       	ldi	r31, 0x04	; 4
    1762:	35 95       	asr	r19
    1764:	27 95       	ror	r18
    1766:	fa 95       	dec	r31
    1768:	e1 f7       	brne	.-8      	; 0x1762 <getHours+0x10>
    176a:	a9 01       	movw	r20, r18
    176c:	e3 e0       	ldi	r30, 0x03	; 3
    176e:	44 0f       	add	r20, r20
    1770:	55 1f       	adc	r21, r21
    1772:	ea 95       	dec	r30
    1774:	e1 f7       	brne	.-8      	; 0x176e <getHours+0x1c>
    1776:	22 0f       	add	r18, r18
    1778:	33 1f       	adc	r19, r19
    177a:	42 0f       	add	r20, r18
    177c:	53 1f       	adc	r21, r19
    177e:	8f 70       	andi	r24, 0x0F	; 15
    1780:	84 0f       	add	r24, r20
    1782:	08 95       	ret

00001784 <getMinutes>:
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <ds3231read>
    178a:	28 2f       	mov	r18, r24
    178c:	22 95       	swap	r18
    178e:	2f 70       	andi	r18, 0x0F	; 15
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	a9 01       	movw	r20, r18
    1794:	b3 e0       	ldi	r27, 0x03	; 3
    1796:	44 0f       	add	r20, r20
    1798:	55 1f       	adc	r21, r21
    179a:	ba 95       	dec	r27
    179c:	e1 f7       	brne	.-8      	; 0x1796 <getMinutes+0x12>
    179e:	22 0f       	add	r18, r18
    17a0:	33 1f       	adc	r19, r19
    17a2:	42 0f       	add	r20, r18
    17a4:	53 1f       	adc	r21, r19
    17a6:	8f 70       	andi	r24, 0x0F	; 15
    17a8:	84 0f       	add	r24, r20
    17aa:	08 95       	ret

000017ac <getSeconds>:
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <ds3231read>
    17b2:	28 2f       	mov	r18, r24
    17b4:	22 95       	swap	r18
    17b6:	2f 70       	andi	r18, 0x0F	; 15
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	a9 01       	movw	r20, r18
    17bc:	63 e0       	ldi	r22, 0x03	; 3
    17be:	44 0f       	add	r20, r20
    17c0:	55 1f       	adc	r21, r21
    17c2:	6a 95       	dec	r22
    17c4:	e1 f7       	brne	.-8      	; 0x17be <getSeconds+0x12>
    17c6:	22 0f       	add	r18, r18
    17c8:	33 1f       	adc	r19, r19
    17ca:	42 0f       	add	r20, r18
    17cc:	53 1f       	adc	r21, r19
    17ce:	8f 70       	andi	r24, 0x0F	; 15
    17d0:	84 0f       	add	r24, r20
    17d2:	08 95       	ret

000017d4 <ds3231write>:
    17d4:	0f 93       	push	r16
    17d6:	1f 93       	push	r17
    17d8:	18 2f       	mov	r17, r24
    17da:	06 2f       	mov	r16, r22
    17dc:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <i2cDisableInt>
    17e0:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <i2cSendStart>
    17e4:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    17e8:	80 ed       	ldi	r24, 0xD0	; 208
    17ea:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
    17ee:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    17f2:	81 2f       	mov	r24, r17
    17f4:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
    17f8:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    17fc:	80 2f       	mov	r24, r16
    17fe:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
    1802:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    1806:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <i2cSendStop>
    180a:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <i2cEnableInt>
    180e:	1f 91       	pop	r17
    1810:	0f 91       	pop	r16
    1812:	08 95       	ret

00001814 <getTime>:
    1814:	2f 92       	push	r2
    1816:	3f 92       	push	r3
    1818:	4f 92       	push	r4
    181a:	5f 92       	push	r5
    181c:	6f 92       	push	r6
    181e:	7f 92       	push	r7
    1820:	8f 92       	push	r8
    1822:	9f 92       	push	r9
    1824:	af 92       	push	r10
    1826:	bf 92       	push	r11
    1828:	cf 92       	push	r12
    182a:	df 92       	push	r13
    182c:	ef 92       	push	r14
    182e:	ff 92       	push	r15
    1830:	0f 93       	push	r16
    1832:	1f 93       	push	r17
    1834:	df 93       	push	r29
    1836:	cf 93       	push	r28
    1838:	00 d0       	rcall	.+0      	; 0x183a <getTime+0x26>
    183a:	00 d0       	rcall	.+0      	; 0x183c <getTime+0x28>
    183c:	0f 92       	push	r0
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	7c 01       	movw	r14, r24
    1844:	6b 01       	movw	r12, r22
    1846:	5a 01       	movw	r10, r20
    1848:	49 01       	movw	r8, r18
    184a:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <i2cDisableInt>
    184e:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <i2cSendStart>
    1852:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    1856:	18 2f       	mov	r17, r24
    1858:	80 ed       	ldi	r24, 0xD0	; 208
    185a:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
    185e:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    1862:	8d 83       	std	Y+5, r24	; 0x05
    1864:	80 e0       	ldi	r24, 0x00	; 0
    1866:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
    186a:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    186e:	8c 83       	std	Y+4, r24	; 0x04
    1870:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <i2cSendStart>
    1874:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    1878:	8b 83       	std	Y+3, r24	; 0x03
    187a:	81 ed       	ldi	r24, 0xD1	; 209
    187c:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
    1880:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    1884:	8a 83       	std	Y+2, r24	; 0x02
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <i2cReceiveByte>
    188c:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    1890:	28 2e       	mov	r2, r24
    1892:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <i2cGetReceivedByte>
    1896:	f7 01       	movw	r30, r14
    1898:	80 83       	st	Z, r24
    189a:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    189e:	38 2e       	mov	r3, r24
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <i2cReceiveByte>
    18a6:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    18aa:	48 2e       	mov	r4, r24
    18ac:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <i2cGetReceivedByte>
    18b0:	f6 01       	movw	r30, r12
    18b2:	80 83       	st	Z, r24
    18b4:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    18b8:	58 2e       	mov	r5, r24
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <i2cReceiveByte>
    18c0:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    18c4:	68 2e       	mov	r6, r24
    18c6:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <i2cGetReceivedByte>
    18ca:	f5 01       	movw	r30, r10
    18cc:	80 83       	st	Z, r24
    18ce:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    18d2:	78 2e       	mov	r7, r24
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <i2cReceiveByte>
    18da:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    18de:	08 2f       	mov	r16, r24
    18e0:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <i2cGetReceivedByte>
    18e4:	f4 01       	movw	r30, r8
    18e6:	80 83       	st	Z, r24
    18e8:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    18ec:	89 83       	std	Y+1, r24	; 0x01
    18ee:	fd 81       	ldd	r31, Y+5	; 0x05
    18f0:	1f 2b       	or	r17, r31
    18f2:	8c 81       	ldd	r24, Y+4	; 0x04
    18f4:	18 2b       	or	r17, r24
    18f6:	eb 81       	ldd	r30, Y+3	; 0x03
    18f8:	1e 2b       	or	r17, r30
    18fa:	fa 81       	ldd	r31, Y+2	; 0x02
    18fc:	1f 2b       	or	r17, r31
    18fe:	12 29       	or	r17, r2
    1900:	13 29       	or	r17, r3
    1902:	14 29       	or	r17, r4
    1904:	15 29       	or	r17, r5
    1906:	16 29       	or	r17, r6
    1908:	17 29       	or	r17, r7
    190a:	10 2b       	or	r17, r16
    190c:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <i2cSendStop>
    1910:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <i2cEnableInt>
    1914:	f7 01       	movw	r30, r14
    1916:	40 81       	ld	r20, Z
    1918:	84 2f       	mov	r24, r20
    191a:	82 95       	swap	r24
    191c:	8f 70       	andi	r24, 0x0F	; 15
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	9c 01       	movw	r18, r24
    1922:	a3 e0       	ldi	r26, 0x03	; 3
    1924:	22 0f       	add	r18, r18
    1926:	33 1f       	adc	r19, r19
    1928:	aa 95       	dec	r26
    192a:	e1 f7       	brne	.-8      	; 0x1924 <getTime+0x110>
    192c:	88 0f       	add	r24, r24
    192e:	99 1f       	adc	r25, r25
    1930:	28 0f       	add	r18, r24
    1932:	39 1f       	adc	r19, r25
    1934:	4f 70       	andi	r20, 0x0F	; 15
    1936:	42 0f       	add	r20, r18
    1938:	40 83       	st	Z, r20
    193a:	f6 01       	movw	r30, r12
    193c:	40 81       	ld	r20, Z
    193e:	84 2f       	mov	r24, r20
    1940:	82 95       	swap	r24
    1942:	8f 70       	andi	r24, 0x0F	; 15
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	9c 01       	movw	r18, r24
    1948:	63 e0       	ldi	r22, 0x03	; 3
    194a:	22 0f       	add	r18, r18
    194c:	33 1f       	adc	r19, r19
    194e:	6a 95       	dec	r22
    1950:	e1 f7       	brne	.-8      	; 0x194a <getTime+0x136>
    1952:	88 0f       	add	r24, r24
    1954:	99 1f       	adc	r25, r25
    1956:	28 0f       	add	r18, r24
    1958:	39 1f       	adc	r19, r25
    195a:	4f 70       	andi	r20, 0x0F	; 15
    195c:	42 0f       	add	r20, r18
    195e:	40 83       	st	Z, r20
    1960:	f5 01       	movw	r30, r10
    1962:	40 81       	ld	r20, Z
    1964:	84 2f       	mov	r24, r20
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	80 73       	andi	r24, 0x30	; 48
    196a:	90 70       	andi	r25, 0x00	; 0
    196c:	24 e0       	ldi	r18, 0x04	; 4
    196e:	95 95       	asr	r25
    1970:	87 95       	ror	r24
    1972:	2a 95       	dec	r18
    1974:	e1 f7       	brne	.-8      	; 0x196e <getTime+0x15a>
    1976:	9c 01       	movw	r18, r24
    1978:	03 e0       	ldi	r16, 0x03	; 3
    197a:	22 0f       	add	r18, r18
    197c:	33 1f       	adc	r19, r19
    197e:	0a 95       	dec	r16
    1980:	e1 f7       	brne	.-8      	; 0x197a <getTime+0x166>
    1982:	88 0f       	add	r24, r24
    1984:	99 1f       	adc	r25, r25
    1986:	28 0f       	add	r18, r24
    1988:	39 1f       	adc	r19, r25
    198a:	4f 70       	andi	r20, 0x0F	; 15
    198c:	42 0f       	add	r20, r18
    198e:	40 83       	st	Z, r20
    1990:	f4 01       	movw	r30, r8
    1992:	40 81       	ld	r20, Z
    1994:	84 2f       	mov	r24, r20
    1996:	82 95       	swap	r24
    1998:	8f 70       	andi	r24, 0x0F	; 15
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	9c 01       	movw	r18, r24
    199e:	a3 e0       	ldi	r26, 0x03	; 3
    19a0:	22 0f       	add	r18, r18
    19a2:	33 1f       	adc	r19, r19
    19a4:	aa 95       	dec	r26
    19a6:	e1 f7       	brne	.-8      	; 0x19a0 <getTime+0x18c>
    19a8:	88 0f       	add	r24, r24
    19aa:	99 1f       	adc	r25, r25
    19ac:	28 0f       	add	r18, r24
    19ae:	39 1f       	adc	r19, r25
    19b0:	4f 70       	andi	r20, 0x0F	; 15
    19b2:	42 0f       	add	r20, r18
    19b4:	40 83       	st	Z, r20
    19b6:	89 81       	ldd	r24, Y+1	; 0x01
    19b8:	81 2b       	or	r24, r17
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	cf 91       	pop	r28
    19c6:	df 91       	pop	r29
    19c8:	1f 91       	pop	r17
    19ca:	0f 91       	pop	r16
    19cc:	ff 90       	pop	r15
    19ce:	ef 90       	pop	r14
    19d0:	df 90       	pop	r13
    19d2:	cf 90       	pop	r12
    19d4:	bf 90       	pop	r11
    19d6:	af 90       	pop	r10
    19d8:	9f 90       	pop	r9
    19da:	8f 90       	pop	r8
    19dc:	7f 90       	pop	r7
    19de:	6f 90       	pop	r6
    19e0:	5f 90       	pop	r5
    19e2:	4f 90       	pop	r4
    19e4:	3f 90       	pop	r3
    19e6:	2f 90       	pop	r2
    19e8:	08 95       	ret

000019ea <i2cSetTheDamnTWBRMyself>:
    19ea:	80 93 b8 00 	sts	0x00B8, r24
    19ee:	08 95       	ret

000019f0 <i2cSetBitrate>:
    19f0:	20 91 b9 00 	lds	r18, 0x00B9
    19f4:	2c 7f       	andi	r18, 0xFC	; 252
    19f6:	20 93 b9 00 	sts	0x00B9, r18
    19fa:	a0 e0       	ldi	r26, 0x00	; 0
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	bc 01       	movw	r22, r24
    1a00:	cd 01       	movw	r24, r26
    1a02:	0e 94 51 38 	call	0x70a2	; 0x70a2 <__floatunsisf>
    1a06:	9b 01       	movw	r18, r22
    1a08:	ac 01       	movw	r20, r24
    1a0a:	60 e0       	ldi	r22, 0x00	; 0
    1a0c:	70 e0       	ldi	r23, 0x00	; 0
    1a0e:	8f e7       	ldi	r24, 0x7F	; 127
    1a10:	93 e4       	ldi	r25, 0x43	; 67
    1a12:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__divsf3>
    1a16:	0e 94 25 38 	call	0x704a	; 0x704a <__fixunssfsi>
    1a1a:	60 31       	cpi	r22, 0x10	; 16
    1a1c:	30 f0       	brcs	.+12     	; 0x1a2a <i2cSetBitrate+0x3a>
    1a1e:	86 2f       	mov	r24, r22
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	40 97       	sbiw	r24, 0x10	; 16
    1a24:	95 95       	asr	r25
    1a26:	87 95       	ror	r24
    1a28:	68 2f       	mov	r22, r24
    1a2a:	60 93 b8 00 	sts	0x00B8, r22
    1a2e:	08 95       	ret

00001a30 <i2cInit>:
    1a30:	10 92 25 03 	sts	0x0325, r1
    1a34:	10 92 24 03 	sts	0x0324, r1
    1a38:	10 92 29 03 	sts	0x0329, r1
    1a3c:	10 92 28 03 	sts	0x0328, r1
    1a40:	84 e6       	ldi	r24, 0x64	; 100
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <i2cSetBitrate>
    1a48:	ec eb       	ldi	r30, 0xBC	; 188
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	84 60       	ori	r24, 0x04	; 4
    1a50:	80 83       	st	Z, r24
    1a52:	10 92 dc 02 	sts	0x02DC, r1
    1a56:	80 81       	ld	r24, Z
    1a58:	81 64       	ori	r24, 0x41	; 65
    1a5a:	80 83       	st	Z, r24
    1a5c:	78 94       	sei
    1a5e:	08 95       	ret

00001a60 <i2cSetLocalDeviceAddr>:
    1a60:	0f 93       	push	r16
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	41 11       	cpse	r20, r1
    1a66:	91 e0       	ldi	r25, 0x01	; 1
    1a68:	8e 7f       	andi	r24, 0xFE	; 254
    1a6a:	98 2b       	or	r25, r24
    1a6c:	90 93 ba 00 	sts	0x00BA, r25
    1a70:	66 0f       	add	r22, r22
    1a72:	60 93 bd 00 	sts	0x00BD, r22
    1a76:	20 93 df 02 	sts	0x02DF, r18
    1a7a:	00 93 de 02 	sts	0x02DE, r16
    1a7e:	0f 91       	pop	r16
    1a80:	08 95       	ret

00001a82 <i2cSetSlaveReceiveHandler>:
    1a82:	90 93 25 03 	sts	0x0325, r25
    1a86:	80 93 24 03 	sts	0x0324, r24
    1a8a:	08 95       	ret

00001a8c <i2cSetSlaveTransmitHandler>:
    1a8c:	90 93 29 03 	sts	0x0329, r25
    1a90:	80 93 28 03 	sts	0x0328, r24
    1a94:	08 95       	ret

00001a96 <i2cSendStart>:
    1a96:	3c 9a       	sbi	0x07, 4	; 7
    1a98:	84 ea       	ldi	r24, 0xA4	; 164
    1a9a:	80 93 bc 00 	sts	0x00BC, r24
    1a9e:	08 95       	ret

00001aa0 <i2cSendStop>:
    1aa0:	84 ed       	ldi	r24, 0xD4	; 212
    1aa2:	80 93 bc 00 	sts	0x00BC, r24
    1aa6:	08 95       	ret

00001aa8 <i2cDisableInt>:
    1aa8:	ec eb       	ldi	r30, 0xBC	; 188
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	8e 7f       	andi	r24, 0xFE	; 254
    1ab0:	80 83       	st	Z, r24
    1ab2:	08 95       	ret

00001ab4 <i2cEnableInt>:
    1ab4:	ec eb       	ldi	r30, 0xBC	; 188
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	81 60       	ori	r24, 0x01	; 1
    1abc:	80 83       	st	Z, r24
    1abe:	08 95       	ret

00001ac0 <i2cWaitForComplete>:
    1ac0:	df 93       	push	r29
    1ac2:	cf 93       	push	r28
    1ac4:	0f 92       	push	r0
    1ac6:	cd b7       	in	r28, 0x3d	; 61
    1ac8:	de b7       	in	r29, 0x3e	; 62
    1aca:	19 82       	std	Y+1, r1	; 0x01
    1acc:	28 eb       	ldi	r18, 0xB8	; 184
    1ace:	3b e0       	ldi	r19, 0x0B	; 11
    1ad0:	06 c0       	rjmp	.+12     	; 0x1ade <i2cWaitForComplete+0x1e>
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
    1ad4:	8f 5f       	subi	r24, 0xFF	; 255
    1ad6:	89 83       	std	Y+1, r24	; 0x01
    1ad8:	c9 01       	movw	r24, r18
    1ada:	01 97       	sbiw	r24, 0x01	; 1
    1adc:	f1 f7       	brne	.-4      	; 0x1ada <i2cWaitForComplete+0x1a>
    1ade:	80 91 bc 00 	lds	r24, 0x00BC
    1ae2:	87 fd       	sbrc	r24, 7
    1ae4:	03 c0       	rjmp	.+6      	; 0x1aec <i2cWaitForComplete+0x2c>
    1ae6:	89 81       	ldd	r24, Y+1	; 0x01
    1ae8:	84 36       	cpi	r24, 0x64	; 100
    1aea:	98 f3       	brcs	.-26     	; 0x1ad2 <i2cWaitForComplete+0x12>
    1aec:	89 81       	ldd	r24, Y+1	; 0x01
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	83 36       	cpi	r24, 0x63	; 99
    1af2:	08 f0       	brcs	.+2      	; 0x1af6 <i2cWaitForComplete+0x36>
    1af4:	91 e0       	ldi	r25, 0x01	; 1
    1af6:	89 2f       	mov	r24, r25
    1af8:	0f 90       	pop	r0
    1afa:	cf 91       	pop	r28
    1afc:	df 91       	pop	r29
    1afe:	08 95       	ret

00001b00 <i2cSendByte>:
    1b00:	3c 9a       	sbi	0x07, 4	; 7
    1b02:	80 93 bb 00 	sts	0x00BB, r24
    1b06:	84 e8       	ldi	r24, 0x84	; 132
    1b08:	80 93 bc 00 	sts	0x00BC, r24
    1b0c:	08 95       	ret

00001b0e <i2cReceiveByte>:
    1b0e:	88 23       	and	r24, r24
    1b10:	29 f0       	breq	.+10     	; 0x1b1c <i2cReceiveByte+0xe>
    1b12:	80 91 bc 00 	lds	r24, 0x00BC
    1b16:	8f 70       	andi	r24, 0x0F	; 15
    1b18:	80 6c       	ori	r24, 0xC0	; 192
    1b1a:	04 c0       	rjmp	.+8      	; 0x1b24 <i2cReceiveByte+0x16>
    1b1c:	80 91 bc 00 	lds	r24, 0x00BC
    1b20:	8f 70       	andi	r24, 0x0F	; 15
    1b22:	80 68       	ori	r24, 0x80	; 128
    1b24:	80 93 bc 00 	sts	0x00BC, r24
    1b28:	08 95       	ret

00001b2a <i2cGetReceivedByte>:
    1b2a:	80 91 bb 00 	lds	r24, 0x00BB
    1b2e:	08 95       	ret

00001b30 <i2cGetStatus>:
    1b30:	80 91 b9 00 	lds	r24, 0x00B9
    1b34:	08 95       	ret

00001b36 <i2cMasterSend>:
    1b36:	98 2f       	mov	r25, r24
    1b38:	80 91 dc 02 	lds	r24, 0x02DC
    1b3c:	88 23       	and	r24, r24
    1b3e:	e1 f7       	brne	.-8      	; 0x1b38 <i2cMasterSend+0x2>
    1b40:	82 e0       	ldi	r24, 0x02	; 2
    1b42:	80 93 dc 02 	sts	0x02DC, r24
    1b46:	9e 7f       	andi	r25, 0xFE	; 254
    1b48:	90 93 dd 02 	sts	0x02DD, r25
    1b4c:	a0 ee       	ldi	r26, 0xE0	; 224
    1b4e:	b2 e0       	ldi	r27, 0x02	; 2
    1b50:	fa 01       	movw	r30, r20
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <i2cMasterSend+0x22>
    1b54:	81 91       	ld	r24, Z+
    1b56:	8d 93       	st	X+, r24
    1b58:	8e 2f       	mov	r24, r30
    1b5a:	84 1b       	sub	r24, r20
    1b5c:	86 17       	cp	r24, r22
    1b5e:	d0 f3       	brcs	.-12     	; 0x1b54 <i2cMasterSend+0x1e>
    1b60:	10 92 00 03 	sts	0x0300, r1
    1b64:	60 93 01 03 	sts	0x0301, r22
    1b68:	3c 9a       	sbi	0x07, 4	; 7
    1b6a:	84 ea       	ldi	r24, 0xA4	; 164
    1b6c:	80 93 bc 00 	sts	0x00BC, r24
    1b70:	08 95       	ret

00001b72 <i2cMasterReceive>:
    1b72:	98 2f       	mov	r25, r24
    1b74:	80 91 dc 02 	lds	r24, 0x02DC
    1b78:	88 23       	and	r24, r24
    1b7a:	e1 f7       	brne	.-8      	; 0x1b74 <i2cMasterReceive+0x2>
    1b7c:	83 e0       	ldi	r24, 0x03	; 3
    1b7e:	80 93 dc 02 	sts	0x02DC, r24
    1b82:	91 60       	ori	r25, 0x01	; 1
    1b84:	90 93 dd 02 	sts	0x02DD, r25
    1b88:	10 92 22 03 	sts	0x0322, r1
    1b8c:	60 93 23 03 	sts	0x0323, r22
    1b90:	3c 9a       	sbi	0x07, 4	; 7
    1b92:	84 ea       	ldi	r24, 0xA4	; 164
    1b94:	80 93 bc 00 	sts	0x00BC, r24
    1b98:	80 91 dc 02 	lds	r24, 0x02DC
    1b9c:	88 23       	and	r24, r24
    1b9e:	e1 f7       	brne	.-8      	; 0x1b98 <i2cMasterReceive+0x26>
    1ba0:	a2 e0       	ldi	r26, 0x02	; 2
    1ba2:	b3 e0       	ldi	r27, 0x03	; 3
    1ba4:	fa 01       	movw	r30, r20
    1ba6:	02 c0       	rjmp	.+4      	; 0x1bac <i2cMasterReceive+0x3a>
    1ba8:	8d 91       	ld	r24, X+
    1baa:	81 93       	st	Z+, r24
    1bac:	8e 2f       	mov	r24, r30
    1bae:	84 1b       	sub	r24, r20
    1bb0:	86 17       	cp	r24, r22
    1bb2:	d0 f3       	brcs	.-12     	; 0x1ba8 <i2cMasterReceive+0x36>
    1bb4:	08 95       	ret

00001bb6 <i2cMasterSendNI>:
    1bb6:	0f 93       	push	r16
    1bb8:	1f 93       	push	r17
    1bba:	cf 93       	push	r28
    1bbc:	df 93       	push	r29
    1bbe:	18 2f       	mov	r17, r24
    1bc0:	06 2f       	mov	r16, r22
    1bc2:	ea 01       	movw	r28, r20
    1bc4:	80 91 bc 00 	lds	r24, 0x00BC
    1bc8:	8e 7f       	andi	r24, 0xFE	; 254
    1bca:	80 93 bc 00 	sts	0x00BC, r24
    1bce:	3c 9a       	sbi	0x07, 4	; 7
    1bd0:	84 ea       	ldi	r24, 0xA4	; 164
    1bd2:	80 93 bc 00 	sts	0x00BC, r24
    1bd6:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    1bda:	1e 7f       	andi	r17, 0xFE	; 254
    1bdc:	3c 9a       	sbi	0x07, 4	; 7
    1bde:	10 93 bb 00 	sts	0x00BB, r17
    1be2:	84 e8       	ldi	r24, 0x84	; 132
    1be4:	80 93 bc 00 	sts	0x00BC, r24
    1be8:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    1bec:	80 91 b9 00 	lds	r24, 0x00B9
    1bf0:	88 31       	cpi	r24, 0x18	; 24
    1bf2:	61 f0       	breq	.+24     	; 0x1c0c <i2cMasterSendNI+0x56>
    1bf4:	91 e0       	ldi	r25, 0x01	; 1
    1bf6:	0e c0       	rjmp	.+28     	; 0x1c14 <i2cMasterSendNI+0x5e>
    1bf8:	89 91       	ld	r24, Y+
    1bfa:	3c 9a       	sbi	0x07, 4	; 7
    1bfc:	80 93 bb 00 	sts	0x00BB, r24
    1c00:	10 93 bc 00 	sts	0x00BC, r17
    1c04:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    1c08:	01 50       	subi	r16, 0x01	; 1
    1c0a:	01 c0       	rjmp	.+2      	; 0x1c0e <i2cMasterSendNI+0x58>
    1c0c:	14 e8       	ldi	r17, 0x84	; 132
    1c0e:	00 23       	and	r16, r16
    1c10:	99 f7       	brne	.-26     	; 0x1bf8 <i2cMasterSendNI+0x42>
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	84 ed       	ldi	r24, 0xD4	; 212
    1c16:	80 93 bc 00 	sts	0x00BC, r24
    1c1a:	80 91 bc 00 	lds	r24, 0x00BC
    1c1e:	84 ff       	sbrs	r24, 4
    1c20:	fc cf       	rjmp	.-8      	; 0x1c1a <i2cMasterSendNI+0x64>
    1c22:	80 91 bc 00 	lds	r24, 0x00BC
    1c26:	81 60       	ori	r24, 0x01	; 1
    1c28:	80 93 bc 00 	sts	0x00BC, r24
    1c2c:	89 2f       	mov	r24, r25
    1c2e:	df 91       	pop	r29
    1c30:	cf 91       	pop	r28
    1c32:	1f 91       	pop	r17
    1c34:	0f 91       	pop	r16
    1c36:	08 95       	ret

00001c38 <i2cMasterReceiveNI>:
    1c38:	0f 93       	push	r16
    1c3a:	1f 93       	push	r17
    1c3c:	cf 93       	push	r28
    1c3e:	df 93       	push	r29
    1c40:	18 2f       	mov	r17, r24
    1c42:	06 2f       	mov	r16, r22
    1c44:	ea 01       	movw	r28, r20
    1c46:	80 91 bc 00 	lds	r24, 0x00BC
    1c4a:	8e 7f       	andi	r24, 0xFE	; 254
    1c4c:	80 93 bc 00 	sts	0x00BC, r24
    1c50:	3c 9a       	sbi	0x07, 4	; 7
    1c52:	84 ea       	ldi	r24, 0xA4	; 164
    1c54:	80 93 bc 00 	sts	0x00BC, r24
    1c58:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    1c5c:	11 60       	ori	r17, 0x01	; 1
    1c5e:	3c 9a       	sbi	0x07, 4	; 7
    1c60:	10 93 bb 00 	sts	0x00BB, r17
    1c64:	84 e8       	ldi	r24, 0x84	; 132
    1c66:	80 93 bc 00 	sts	0x00BC, r24
    1c6a:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    1c6e:	80 91 b9 00 	lds	r24, 0x00B9
    1c72:	80 34       	cpi	r24, 0x40	; 64
    1c74:	59 f0       	breq	.+22     	; 0x1c8c <i2cMasterReceiveNI+0x54>
    1c76:	91 e0       	ldi	r25, 0x01	; 1
    1c78:	14 c0       	rjmp	.+40     	; 0x1ca2 <i2cMasterReceiveNI+0x6a>
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <i2cReceiveByte>
    1c80:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    1c84:	80 91 bb 00 	lds	r24, 0x00BB
    1c88:	89 93       	st	Y+, r24
    1c8a:	01 50       	subi	r16, 0x01	; 1
    1c8c:	02 30       	cpi	r16, 0x02	; 2
    1c8e:	a8 f7       	brcc	.-22     	; 0x1c7a <i2cMasterReceiveNI+0x42>
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <i2cReceiveByte>
    1c96:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    1c9a:	80 91 bb 00 	lds	r24, 0x00BB
    1c9e:	88 83       	st	Y, r24
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	84 ed       	ldi	r24, 0xD4	; 212
    1ca4:	80 93 bc 00 	sts	0x00BC, r24
    1ca8:	80 91 bc 00 	lds	r24, 0x00BC
    1cac:	81 60       	ori	r24, 0x01	; 1
    1cae:	80 93 bc 00 	sts	0x00BC, r24
    1cb2:	89 2f       	mov	r24, r25
    1cb4:	df 91       	pop	r29
    1cb6:	cf 91       	pop	r28
    1cb8:	1f 91       	pop	r17
    1cba:	0f 91       	pop	r16
    1cbc:	08 95       	ret

00001cbe <__vector_26>:
    1cbe:	1f 92       	push	r1
    1cc0:	0f 92       	push	r0
    1cc2:	0f b6       	in	r0, 0x3f	; 63
    1cc4:	0f 92       	push	r0
    1cc6:	11 24       	eor	r1, r1
    1cc8:	2f 93       	push	r18
    1cca:	3f 93       	push	r19
    1ccc:	4f 93       	push	r20
    1cce:	5f 93       	push	r21
    1cd0:	6f 93       	push	r22
    1cd2:	7f 93       	push	r23
    1cd4:	8f 93       	push	r24
    1cd6:	9f 93       	push	r25
    1cd8:	af 93       	push	r26
    1cda:	bf 93       	push	r27
    1cdc:	ef 93       	push	r30
    1cde:	ff 93       	push	r31
    1ce0:	80 91 b9 00 	lds	r24, 0x00B9
    1ce4:	88 7f       	andi	r24, 0xF8	; 248
    1ce6:	80 36       	cpi	r24, 0x60	; 96
    1ce8:	09 f4       	brne	.+2      	; 0x1cec <__vector_26+0x2e>
    1cea:	a0 c0       	rjmp	.+320    	; 0x1e2c <__vector_26+0x16e>
    1cec:	81 36       	cpi	r24, 0x61	; 97
    1cee:	70 f5       	brcc	.+92     	; 0x1d4c <__vector_26+0x8e>
    1cf0:	88 32       	cpi	r24, 0x28	; 40
    1cf2:	09 f4       	brne	.+2      	; 0x1cf6 <__vector_26+0x38>
    1cf4:	5f c0       	rjmp	.+190    	; 0x1db4 <__vector_26+0xf6>
    1cf6:	89 32       	cpi	r24, 0x29	; 41
    1cf8:	98 f4       	brcc	.+38     	; 0x1d20 <__vector_26+0x62>
    1cfa:	80 31       	cpi	r24, 0x10	; 16
    1cfc:	09 f4       	brne	.+2      	; 0x1d00 <__vector_26+0x42>
    1cfe:	57 c0       	rjmp	.+174    	; 0x1dae <__vector_26+0xf0>
    1d00:	81 31       	cpi	r24, 0x11	; 17
    1d02:	38 f4       	brcc	.+14     	; 0x1d12 <__vector_26+0x54>
    1d04:	88 23       	and	r24, r24
    1d06:	09 f4       	brne	.+2      	; 0x1d0a <__vector_26+0x4c>
    1d08:	16 c1       	rjmp	.+556    	; 0x1f36 <__vector_26+0x278>
    1d0a:	88 30       	cpi	r24, 0x08	; 8
    1d0c:	09 f0       	breq	.+2      	; 0x1d10 <__vector_26+0x52>
    1d0e:	1a c1       	rjmp	.+564    	; 0x1f44 <__vector_26+0x286>
    1d10:	4e c0       	rjmp	.+156    	; 0x1dae <__vector_26+0xf0>
    1d12:	88 31       	cpi	r24, 0x18	; 24
    1d14:	09 f4       	brne	.+2      	; 0x1d18 <__vector_26+0x5a>
    1d16:	4e c0       	rjmp	.+156    	; 0x1db4 <__vector_26+0xf6>
    1d18:	80 32       	cpi	r24, 0x20	; 32
    1d1a:	09 f0       	breq	.+2      	; 0x1d1e <__vector_26+0x60>
    1d1c:	13 c1       	rjmp	.+550    	; 0x1f44 <__vector_26+0x286>
    1d1e:	69 c0       	rjmp	.+210    	; 0x1df2 <__vector_26+0x134>
    1d20:	80 34       	cpi	r24, 0x40	; 64
    1d22:	09 f4       	brne	.+2      	; 0x1d26 <__vector_26+0x68>
    1d24:	78 c0       	rjmp	.+240    	; 0x1e16 <__vector_26+0x158>
    1d26:	81 34       	cpi	r24, 0x41	; 65
    1d28:	38 f4       	brcc	.+14     	; 0x1d38 <__vector_26+0x7a>
    1d2a:	80 33       	cpi	r24, 0x30	; 48
    1d2c:	09 f4       	brne	.+2      	; 0x1d30 <__vector_26+0x72>
    1d2e:	61 c0       	rjmp	.+194    	; 0x1df2 <__vector_26+0x134>
    1d30:	88 33       	cpi	r24, 0x38	; 56
    1d32:	09 f0       	breq	.+2      	; 0x1d36 <__vector_26+0x78>
    1d34:	07 c1       	rjmp	.+526    	; 0x1f44 <__vector_26+0x286>
    1d36:	5f c0       	rjmp	.+190    	; 0x1df6 <__vector_26+0x138>
    1d38:	80 35       	cpi	r24, 0x50	; 80
    1d3a:	09 f4       	brne	.+2      	; 0x1d3e <__vector_26+0x80>
    1d3c:	60 c0       	rjmp	.+192    	; 0x1dfe <__vector_26+0x140>
    1d3e:	88 35       	cpi	r24, 0x58	; 88
    1d40:	09 f4       	brne	.+2      	; 0x1d44 <__vector_26+0x86>
    1d42:	4b c0       	rjmp	.+150    	; 0x1dda <__vector_26+0x11c>
    1d44:	88 34       	cpi	r24, 0x48	; 72
    1d46:	09 f0       	breq	.+2      	; 0x1d4a <__vector_26+0x8c>
    1d48:	fd c0       	rjmp	.+506    	; 0x1f44 <__vector_26+0x286>
    1d4a:	53 c0       	rjmp	.+166    	; 0x1df2 <__vector_26+0x134>
    1d4c:	88 39       	cpi	r24, 0x98	; 152
    1d4e:	09 f4       	brne	.+2      	; 0x1d52 <__vector_26+0x94>
    1d50:	9d c0       	rjmp	.+314    	; 0x1e8c <__vector_26+0x1ce>
    1d52:	89 39       	cpi	r24, 0x99	; 153
    1d54:	b0 f4       	brcc	.+44     	; 0x1d82 <__vector_26+0xc4>
    1d56:	88 37       	cpi	r24, 0x78	; 120
    1d58:	09 f4       	brne	.+2      	; 0x1d5c <__vector_26+0x9e>
    1d5a:	68 c0       	rjmp	.+208    	; 0x1e2c <__vector_26+0x16e>
    1d5c:	89 37       	cpi	r24, 0x79	; 121
    1d5e:	38 f4       	brcc	.+14     	; 0x1d6e <__vector_26+0xb0>
    1d60:	88 36       	cpi	r24, 0x68	; 104
    1d62:	09 f4       	brne	.+2      	; 0x1d66 <__vector_26+0xa8>
    1d64:	63 c0       	rjmp	.+198    	; 0x1e2c <__vector_26+0x16e>
    1d66:	80 37       	cpi	r24, 0x70	; 112
    1d68:	09 f0       	breq	.+2      	; 0x1d6c <__vector_26+0xae>
    1d6a:	ec c0       	rjmp	.+472    	; 0x1f44 <__vector_26+0x286>
    1d6c:	5f c0       	rjmp	.+190    	; 0x1e2c <__vector_26+0x16e>
    1d6e:	88 38       	cpi	r24, 0x88	; 136
    1d70:	09 f4       	brne	.+2      	; 0x1d74 <__vector_26+0xb6>
    1d72:	8c c0       	rjmp	.+280    	; 0x1e8c <__vector_26+0x1ce>
    1d74:	80 39       	cpi	r24, 0x90	; 144
    1d76:	09 f4       	brne	.+2      	; 0x1d7a <__vector_26+0xbc>
    1d78:	79 c0       	rjmp	.+242    	; 0x1e6c <__vector_26+0x1ae>
    1d7a:	80 38       	cpi	r24, 0x80	; 128
    1d7c:	09 f0       	breq	.+2      	; 0x1d80 <__vector_26+0xc2>
    1d7e:	e2 c0       	rjmp	.+452    	; 0x1f44 <__vector_26+0x286>
    1d80:	75 c0       	rjmp	.+234    	; 0x1e6c <__vector_26+0x1ae>
    1d82:	80 3b       	cpi	r24, 0xB0	; 176
    1d84:	09 f4       	brne	.+2      	; 0x1d88 <__vector_26+0xca>
    1d86:	a1 c0       	rjmp	.+322    	; 0x1eca <__vector_26+0x20c>
    1d88:	81 3b       	cpi	r24, 0xB1	; 177
    1d8a:	38 f4       	brcc	.+14     	; 0x1d9a <__vector_26+0xdc>
    1d8c:	80 3a       	cpi	r24, 0xA0	; 160
    1d8e:	09 f4       	brne	.+2      	; 0x1d92 <__vector_26+0xd4>
    1d90:	81 c0       	rjmp	.+258    	; 0x1e94 <__vector_26+0x1d6>
    1d92:	88 3a       	cpi	r24, 0xA8	; 168
    1d94:	09 f0       	breq	.+2      	; 0x1d98 <__vector_26+0xda>
    1d96:	d6 c0       	rjmp	.+428    	; 0x1f44 <__vector_26+0x286>
    1d98:	98 c0       	rjmp	.+304    	; 0x1eca <__vector_26+0x20c>
    1d9a:	80 3c       	cpi	r24, 0xC0	; 192
    1d9c:	09 f4       	brne	.+2      	; 0x1da0 <__vector_26+0xe2>
    1d9e:	c7 c0       	rjmp	.+398    	; 0x1f2e <__vector_26+0x270>
    1da0:	88 3c       	cpi	r24, 0xC8	; 200
    1da2:	09 f4       	brne	.+2      	; 0x1da6 <__vector_26+0xe8>
    1da4:	c4 c0       	rjmp	.+392    	; 0x1f2e <__vector_26+0x270>
    1da6:	88 3b       	cpi	r24, 0xB8	; 184
    1da8:	09 f0       	breq	.+2      	; 0x1dac <__vector_26+0xee>
    1daa:	cc c0       	rjmp	.+408    	; 0x1f44 <__vector_26+0x286>
    1dac:	a6 c0       	rjmp	.+332    	; 0x1efa <__vector_26+0x23c>
    1dae:	80 91 dd 02 	lds	r24, 0x02DD
    1db2:	0e c0       	rjmp	.+28     	; 0x1dd0 <__vector_26+0x112>
    1db4:	90 91 00 03 	lds	r25, 0x0300
    1db8:	80 91 01 03 	lds	r24, 0x0301
    1dbc:	98 17       	cp	r25, r24
    1dbe:	c8 f4       	brcc	.+50     	; 0x1df2 <__vector_26+0x134>
    1dc0:	e9 2f       	mov	r30, r25
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	e0 52       	subi	r30, 0x20	; 32
    1dc6:	fd 4f       	sbci	r31, 0xFD	; 253
    1dc8:	80 81       	ld	r24, Z
    1dca:	9f 5f       	subi	r25, 0xFF	; 255
    1dcc:	90 93 00 03 	sts	0x0300, r25
    1dd0:	3c 9a       	sbi	0x07, 4	; 7
    1dd2:	80 93 bb 00 	sts	0x00BB, r24
    1dd6:	84 e8       	ldi	r24, 0x84	; 132
    1dd8:	a7 c0       	rjmp	.+334    	; 0x1f28 <__vector_26+0x26a>
    1dda:	80 91 22 03 	lds	r24, 0x0322
    1dde:	90 91 bb 00 	lds	r25, 0x00BB
    1de2:	e8 2f       	mov	r30, r24
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	ee 5f       	subi	r30, 0xFE	; 254
    1de8:	fc 4f       	sbci	r31, 0xFC	; 252
    1dea:	90 83       	st	Z, r25
    1dec:	8f 5f       	subi	r24, 0xFF	; 255
    1dee:	80 93 22 03 	sts	0x0322, r24
    1df2:	84 ed       	ldi	r24, 0xD4	; 212
    1df4:	a3 c0       	rjmp	.+326    	; 0x1f3c <__vector_26+0x27e>
    1df6:	80 91 bc 00 	lds	r24, 0x00BC
    1dfa:	80 68       	ori	r24, 0x80	; 128
    1dfc:	9f c0       	rjmp	.+318    	; 0x1f3c <__vector_26+0x27e>
    1dfe:	80 91 22 03 	lds	r24, 0x0322
    1e02:	90 91 bb 00 	lds	r25, 0x00BB
    1e06:	e8 2f       	mov	r30, r24
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	ee 5f       	subi	r30, 0xFE	; 254
    1e0c:	fc 4f       	sbci	r31, 0xFC	; 252
    1e0e:	90 83       	st	Z, r25
    1e10:	8f 5f       	subi	r24, 0xFF	; 255
    1e12:	80 93 22 03 	sts	0x0322, r24
    1e16:	20 91 22 03 	lds	r18, 0x0322
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	80 91 23 03 	lds	r24, 0x0323
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	01 97       	sbiw	r24, 0x01	; 1
    1e24:	28 17       	cp	r18, r24
    1e26:	39 07       	cpc	r19, r25
    1e28:	8c f5       	brge	.+98     	; 0x1e8c <__vector_26+0x1ce>
    1e2a:	2e c0       	rjmp	.+92     	; 0x1e88 <__vector_26+0x1ca>
    1e2c:	90 91 bb 00 	lds	r25, 0x00BB
    1e30:	80 91 ba 00 	lds	r24, 0x00BA
    1e34:	89 27       	eor	r24, r25
    1e36:	8e 7f       	andi	r24, 0xFE	; 254
    1e38:	11 f4       	brne	.+4      	; 0x1e3e <__vector_26+0x180>
    1e3a:	85 e0       	ldi	r24, 0x05	; 5
    1e3c:	12 c0       	rjmp	.+36     	; 0x1e62 <__vector_26+0x1a4>
    1e3e:	20 91 bb 00 	lds	r18, 0x00BB
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	2e 7f       	andi	r18, 0xFE	; 254
    1e46:	30 70       	andi	r19, 0x00	; 0
    1e48:	80 91 de 02 	lds	r24, 0x02DE
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	28 17       	cp	r18, r24
    1e50:	39 07       	cpc	r19, r25
    1e52:	09 f0       	breq	.+2      	; 0x1e56 <__vector_26+0x198>
    1e54:	77 c0       	rjmp	.+238    	; 0x1f44 <__vector_26+0x286>
    1e56:	80 91 df 02 	lds	r24, 0x02DF
    1e5a:	88 23       	and	r24, r24
    1e5c:	09 f4       	brne	.+2      	; 0x1e60 <__vector_26+0x1a2>
    1e5e:	72 c0       	rjmp	.+228    	; 0x1f44 <__vector_26+0x286>
    1e60:	86 e0       	ldi	r24, 0x06	; 6
    1e62:	80 93 dc 02 	sts	0x02DC, r24
    1e66:	10 92 22 03 	sts	0x0322, r1
    1e6a:	57 c0       	rjmp	.+174    	; 0x1f1a <__vector_26+0x25c>
    1e6c:	80 91 22 03 	lds	r24, 0x0322
    1e70:	90 91 bb 00 	lds	r25, 0x00BB
    1e74:	e8 2f       	mov	r30, r24
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	ee 5f       	subi	r30, 0xFE	; 254
    1e7a:	fc 4f       	sbci	r31, 0xFC	; 252
    1e7c:	90 83       	st	Z, r25
    1e7e:	8f 5f       	subi	r24, 0xFF	; 255
    1e80:	80 93 22 03 	sts	0x0322, r24
    1e84:	80 32       	cpi	r24, 0x20	; 32
    1e86:	10 f4       	brcc	.+4      	; 0x1e8c <__vector_26+0x1ce>
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	01 c0       	rjmp	.+2      	; 0x1e8e <__vector_26+0x1d0>
    1e8c:	80 e0       	ldi	r24, 0x00	; 0
    1e8e:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <i2cReceiveByte>
    1e92:	58 c0       	rjmp	.+176    	; 0x1f44 <__vector_26+0x286>
    1e94:	80 91 bc 00 	lds	r24, 0x00BC
    1e98:	80 6c       	ori	r24, 0xC0	; 192
    1e9a:	80 93 bc 00 	sts	0x00BC, r24
    1e9e:	80 91 dc 02 	lds	r24, 0x02DC
    1ea2:	86 30       	cpi	r24, 0x06	; 6
    1ea4:	29 f4       	brne	.+10     	; 0x1eb0 <__vector_26+0x1f2>
    1ea6:	e0 91 26 03 	lds	r30, 0x0326
    1eaa:	f0 91 27 03 	lds	r31, 0x0327
    1eae:	04 c0       	rjmp	.+8      	; 0x1eb8 <__vector_26+0x1fa>
    1eb0:	e0 91 24 03 	lds	r30, 0x0324
    1eb4:	f0 91 25 03 	lds	r31, 0x0325
    1eb8:	30 97       	sbiw	r30, 0x00	; 0
    1eba:	09 f4       	brne	.+2      	; 0x1ebe <__vector_26+0x200>
    1ebc:	41 c0       	rjmp	.+130    	; 0x1f40 <__vector_26+0x282>
    1ebe:	80 91 22 03 	lds	r24, 0x0322
    1ec2:	62 e0       	ldi	r22, 0x02	; 2
    1ec4:	73 e0       	ldi	r23, 0x03	; 3
    1ec6:	09 95       	icall
    1ec8:	3b c0       	rjmp	.+118    	; 0x1f40 <__vector_26+0x282>
    1eca:	90 91 bb 00 	lds	r25, 0x00BB
    1ece:	80 91 ba 00 	lds	r24, 0x00BA
    1ed2:	89 27       	eor	r24, r25
    1ed4:	8e 7f       	andi	r24, 0xFE	; 254
    1ed6:	b1 f5       	brne	.+108    	; 0x1f44 <__vector_26+0x286>
    1ed8:	84 e0       	ldi	r24, 0x04	; 4
    1eda:	80 93 dc 02 	sts	0x02DC, r24
    1ede:	e0 91 28 03 	lds	r30, 0x0328
    1ee2:	f0 91 29 03 	lds	r31, 0x0329
    1ee6:	30 97       	sbiw	r30, 0x00	; 0
    1ee8:	31 f0       	breq	.+12     	; 0x1ef6 <__vector_26+0x238>
    1eea:	80 e2       	ldi	r24, 0x20	; 32
    1eec:	60 ee       	ldi	r22, 0xE0	; 224
    1eee:	72 e0       	ldi	r23, 0x02	; 2
    1ef0:	09 95       	icall
    1ef2:	80 93 01 03 	sts	0x0301, r24
    1ef6:	10 92 00 03 	sts	0x0300, r1
    1efa:	90 91 00 03 	lds	r25, 0x0300
    1efe:	e9 2f       	mov	r30, r25
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	e0 52       	subi	r30, 0x20	; 32
    1f04:	fd 4f       	sbci	r31, 0xFD	; 253
    1f06:	80 81       	ld	r24, Z
    1f08:	80 93 bb 00 	sts	0x00BB, r24
    1f0c:	9f 5f       	subi	r25, 0xFF	; 255
    1f0e:	90 93 00 03 	sts	0x0300, r25
    1f12:	80 91 01 03 	lds	r24, 0x0301
    1f16:	98 17       	cp	r25, r24
    1f18:	20 f4       	brcc	.+8      	; 0x1f22 <__vector_26+0x264>
    1f1a:	80 91 bc 00 	lds	r24, 0x00BC
    1f1e:	80 6c       	ori	r24, 0xC0	; 192
    1f20:	03 c0       	rjmp	.+6      	; 0x1f28 <__vector_26+0x26a>
    1f22:	80 91 bc 00 	lds	r24, 0x00BC
    1f26:	80 68       	ori	r24, 0x80	; 128
    1f28:	80 93 bc 00 	sts	0x00BC, r24
    1f2c:	0b c0       	rjmp	.+22     	; 0x1f44 <__vector_26+0x286>
    1f2e:	80 91 bc 00 	lds	r24, 0x00BC
    1f32:	80 6c       	ori	r24, 0xC0	; 192
    1f34:	03 c0       	rjmp	.+6      	; 0x1f3c <__vector_26+0x27e>
    1f36:	80 91 bc 00 	lds	r24, 0x00BC
    1f3a:	80 6d       	ori	r24, 0xD0	; 208
    1f3c:	80 93 bc 00 	sts	0x00BC, r24
    1f40:	10 92 dc 02 	sts	0x02DC, r1
    1f44:	ff 91       	pop	r31
    1f46:	ef 91       	pop	r30
    1f48:	bf 91       	pop	r27
    1f4a:	af 91       	pop	r26
    1f4c:	9f 91       	pop	r25
    1f4e:	8f 91       	pop	r24
    1f50:	7f 91       	pop	r23
    1f52:	6f 91       	pop	r22
    1f54:	5f 91       	pop	r21
    1f56:	4f 91       	pop	r20
    1f58:	3f 91       	pop	r19
    1f5a:	2f 91       	pop	r18
    1f5c:	0f 90       	pop	r0
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	0f 90       	pop	r0
    1f62:	1f 90       	pop	r1
    1f64:	18 95       	reti

00001f66 <i2cGetState>:
    1f66:	80 91 dc 02 	lds	r24, 0x02DC
    1f6a:	08 95       	ret

00001f6c <get12bit2scomp>:
    1f6c:	28 e0       	ldi	r18, 0x08	; 8
    1f6e:	80 30       	cpi	r24, 0x00	; 0
    1f70:	92 07       	cpc	r25, r18
    1f72:	28 f0       	brcs	.+10     	; 0x1f7e <get12bit2scomp+0x12>
    1f74:	9c 01       	movw	r18, r24
    1f76:	37 70       	andi	r19, 0x07	; 7
    1f78:	20 50       	subi	r18, 0x00	; 0
    1f7a:	38 40       	sbci	r19, 0x08	; 8
    1f7c:	01 c0       	rjmp	.+2      	; 0x1f80 <get12bit2scomp+0x14>
    1f7e:	9c 01       	movw	r18, r24
    1f80:	c9 01       	movw	r24, r18
    1f82:	08 95       	ret

00001f84 <set12bit2scomp>:
    1f84:	97 ff       	sbrs	r25, 7
    1f86:	04 c0       	rjmp	.+8      	; 0x1f90 <set12bit2scomp+0xc>
    1f88:	9c 01       	movw	r18, r24
    1f8a:	20 50       	subi	r18, 0x00	; 0
    1f8c:	30 4f       	sbci	r19, 0xF0	; 240
    1f8e:	01 c0       	rjmp	.+2      	; 0x1f92 <set12bit2scomp+0xe>
    1f90:	9c 01       	movw	r18, r24
    1f92:	c9 01       	movw	r24, r18
    1f94:	08 95       	ret

00001f96 <setTMP101Thermo>:
    1f96:	df 92       	push	r13
    1f98:	ef 92       	push	r14
    1f9a:	ff 92       	push	r15
    1f9c:	0f 93       	push	r16
    1f9e:	1f 93       	push	r17
    1fa0:	08 2f       	mov	r16, r24
    1fa2:	d6 2e       	mov	r13, r22
    1fa4:	f4 2e       	mov	r15, r20
    1fa6:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <i2cDisableInt>
    1faa:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <i2cSendStart>
    1fae:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    1fb2:	18 2f       	mov	r17, r24
    1fb4:	80 2f       	mov	r24, r16
    1fb6:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
    1fba:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    1fbe:	e8 2e       	mov	r14, r24
    1fc0:	8f 2d       	mov	r24, r15
    1fc2:	8e 5f       	subi	r24, 0xFE	; 254
    1fc4:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
    1fc8:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    1fcc:	f8 2e       	mov	r15, r24
    1fce:	8d 2d       	mov	r24, r13
    1fd0:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
    1fd4:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    1fd8:	08 2f       	mov	r16, r24
    1fda:	1e 29       	or	r17, r14
    1fdc:	1f 29       	or	r17, r15
    1fde:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <i2cSendStop>
    1fe2:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <i2cEnableInt>
    1fe6:	81 2f       	mov	r24, r17
    1fe8:	80 2b       	or	r24, r16
    1fea:	1f 91       	pop	r17
    1fec:	0f 91       	pop	r16
    1fee:	ff 90       	pop	r15
    1ff0:	ef 90       	pop	r14
    1ff2:	df 90       	pop	r13
    1ff4:	08 95       	ret

00001ff6 <setTMP100config>:
    1ff6:	df 92       	push	r13
    1ff8:	ef 92       	push	r14
    1ffa:	ff 92       	push	r15
    1ffc:	0f 93       	push	r16
    1ffe:	1f 93       	push	r17
    2000:	08 2f       	mov	r16, r24
    2002:	d6 2e       	mov	r13, r22
    2004:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <i2cDisableInt>
    2008:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <i2cSendStart>
    200c:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    2010:	18 2f       	mov	r17, r24
    2012:	80 2f       	mov	r24, r16
    2014:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
    2018:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    201c:	e8 2e       	mov	r14, r24
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
    2024:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    2028:	f8 2e       	mov	r15, r24
    202a:	8d 2d       	mov	r24, r13
    202c:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
    2030:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    2034:	08 2f       	mov	r16, r24
    2036:	1e 29       	or	r17, r14
    2038:	1f 29       	or	r17, r15
    203a:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <i2cSendStop>
    203e:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <i2cEnableInt>
    2042:	81 2f       	mov	r24, r17
    2044:	80 2b       	or	r24, r16
    2046:	1f 91       	pop	r17
    2048:	0f 91       	pop	r16
    204a:	ff 90       	pop	r15
    204c:	ef 90       	pop	r14
    204e:	df 90       	pop	r13
    2050:	08 95       	ret

00002052 <getTMP100config>:
    2052:	1f 93       	push	r17
    2054:	18 2f       	mov	r17, r24
    2056:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <i2cDisableInt>
    205a:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <i2cSendStart>
    205e:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    2062:	81 2f       	mov	r24, r17
    2064:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
    2068:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
    2072:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    2076:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <i2cSendStart>
    207a:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    207e:	81 2f       	mov	r24, r17
    2080:	8f 5f       	subi	r24, 0xFF	; 255
    2082:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
    2086:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <i2cReceiveByte>
    2090:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    2094:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <i2cGetReceivedByte>
    2098:	18 2f       	mov	r17, r24
    209a:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    209e:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <i2cSendStop>
    20a2:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <i2cEnableInt>
    20a6:	81 2f       	mov	r24, r17
    20a8:	1f 91       	pop	r17
    20aa:	08 95       	ret

000020ac <tmp100rawTemp>:
    20ac:	2f 92       	push	r2
    20ae:	3f 92       	push	r3
    20b0:	4f 92       	push	r4
    20b2:	5f 92       	push	r5
    20b4:	6f 92       	push	r6
    20b6:	7f 92       	push	r7
    20b8:	8f 92       	push	r8
    20ba:	9f 92       	push	r9
    20bc:	af 92       	push	r10
    20be:	bf 92       	push	r11
    20c0:	cf 92       	push	r12
    20c2:	df 92       	push	r13
    20c4:	ef 92       	push	r14
    20c6:	ff 92       	push	r15
    20c8:	0f 93       	push	r16
    20ca:	1f 93       	push	r17
    20cc:	df 93       	push	r29
    20ce:	cf 93       	push	r28
    20d0:	00 d0       	rcall	.+0      	; 0x20d2 <tmp100rawTemp+0x26>
    20d2:	cd b7       	in	r28, 0x3d	; 61
    20d4:	de b7       	in	r29, 0x3e	; 62
    20d6:	f8 2e       	mov	r15, r24
    20d8:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <i2cDisableInt>
    20dc:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <i2cSendStart>
    20e0:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    20e4:	08 2f       	mov	r16, r24
    20e6:	8f 2d       	mov	r24, r15
    20e8:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
    20ec:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    20f0:	d8 2e       	mov	r13, r24
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
    20f8:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    20fc:	28 2e       	mov	r2, r24
    20fe:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <i2cSendStart>
    2102:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    2106:	48 2e       	mov	r4, r24
    2108:	8f 2d       	mov	r24, r15
    210a:	8f 5f       	subi	r24, 0xFF	; 255
    210c:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
    2110:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    2114:	68 2e       	mov	r6, r24
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <i2cReceiveByte>
    211c:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    2120:	88 2e       	mov	r8, r24
    2122:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <i2cGetReceivedByte>
    2126:	8a 83       	std	Y+2, r24	; 0x02
    2128:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    212c:	a8 2e       	mov	r10, r24
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <i2cReceiveByte>
    2134:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    2138:	e8 2e       	mov	r14, r24
    213a:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <i2cGetReceivedByte>
    213e:	89 83       	std	Y+1, r24	; 0x01
    2140:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    2144:	c8 2e       	mov	r12, r24
    2146:	10 e0       	ldi	r17, 0x00	; 0
    2148:	8d 2d       	mov	r24, r13
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	08 2b       	or	r16, r24
    214e:	19 2b       	or	r17, r25
    2150:	33 24       	eor	r3, r3
    2152:	02 29       	or	r16, r2
    2154:	13 29       	or	r17, r3
    2156:	55 24       	eor	r5, r5
    2158:	04 29       	or	r16, r4
    215a:	15 29       	or	r17, r5
    215c:	77 24       	eor	r7, r7
    215e:	06 29       	or	r16, r6
    2160:	17 29       	or	r17, r7
    2162:	99 24       	eor	r9, r9
    2164:	08 29       	or	r16, r8
    2166:	19 29       	or	r17, r9
    2168:	bb 24       	eor	r11, r11
    216a:	0a 29       	or	r16, r10
    216c:	1b 29       	or	r17, r11
    216e:	ff 24       	eor	r15, r15
    2170:	0e 29       	or	r16, r14
    2172:	1f 29       	or	r17, r15
    2174:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <i2cSendStop>
    2178:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <i2cEnableInt>
    217c:	dd 24       	eor	r13, r13
    217e:	0c 29       	or	r16, r12
    2180:	1d 29       	or	r17, r13
    2182:	01 2b       	or	r16, r17
    2184:	19 f0       	breq	.+6      	; 0x218c <tmp100rawTemp+0xe0>
    2186:	2f ef       	ldi	r18, 0xFF	; 255
    2188:	3f ee       	ldi	r19, 0xEF	; 239
    218a:	07 c0       	rjmp	.+14     	; 0x219a <tmp100rawTemp+0xee>
    218c:	9a 81       	ldd	r25, Y+2	; 0x02
    218e:	80 e0       	ldi	r24, 0x00	; 0
    2190:	49 81       	ldd	r20, Y+1	; 0x01
    2192:	24 2f       	mov	r18, r20
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	28 2b       	or	r18, r24
    2198:	39 2b       	or	r19, r25
    219a:	c9 01       	movw	r24, r18
    219c:	0f 90       	pop	r0
    219e:	0f 90       	pop	r0
    21a0:	cf 91       	pop	r28
    21a2:	df 91       	pop	r29
    21a4:	1f 91       	pop	r17
    21a6:	0f 91       	pop	r16
    21a8:	ff 90       	pop	r15
    21aa:	ef 90       	pop	r14
    21ac:	df 90       	pop	r13
    21ae:	cf 90       	pop	r12
    21b0:	bf 90       	pop	r11
    21b2:	af 90       	pop	r10
    21b4:	9f 90       	pop	r9
    21b6:	8f 90       	pop	r8
    21b8:	7f 90       	pop	r7
    21ba:	6f 90       	pop	r6
    21bc:	5f 90       	pop	r5
    21be:	4f 90       	pop	r4
    21c0:	3f 90       	pop	r3
    21c2:	2f 90       	pop	r2
    21c4:	08 95       	ret

000021c6 <ol_putchar>:
    21c6:	1f 93       	push	r17
    21c8:	18 2f       	mov	r17, r24
    21ca:	8a 30       	cpi	r24, 0x0A	; 10
    21cc:	19 f4       	brne	.+6      	; 0x21d4 <ol_putchar+0xe>
    21ce:	8d e0       	ldi	r24, 0x0D	; 13
    21d0:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <ol_putchar>
    21d4:	80 91 c0 00 	lds	r24, 0x00C0
    21d8:	85 ff       	sbrs	r24, 5
    21da:	fc cf       	rjmp	.-8      	; 0x21d4 <ol_putchar+0xe>
    21dc:	10 93 c6 00 	sts	0x00C6, r17
    21e0:	80 e0       	ldi	r24, 0x00	; 0
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	1f 91       	pop	r17
    21e6:	08 95       	ret

000021e8 <ol_getchar>:
    21e8:	80 91 c0 00 	lds	r24, 0x00C0
    21ec:	87 ff       	sbrs	r24, 7
    21ee:	fc cf       	rjmp	.-8      	; 0x21e8 <ol_getchar>
    21f0:	80 91 c6 00 	lds	r24, 0x00C6
    21f4:	08 95       	ret

000021f6 <getDataSample>:
    21f6:	ef 92       	push	r14
    21f8:	ff 92       	push	r15
    21fa:	0f 93       	push	r16
    21fc:	1f 93       	push	r17
    21fe:	df 93       	push	r29
    2200:	cf 93       	push	r28
    2202:	0f 92       	push	r0
    2204:	cd b7       	in	r28, 0x3d	; 61
    2206:	de b7       	in	r29, 0x3e	; 62
    2208:	8c 01       	movw	r16, r24
    220a:	7b 01       	movw	r14, r22
    220c:	8d e0       	ldi	r24, 0x0D	; 13
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	69 ea       	ldi	r22, 0xA9	; 169
    2212:	71 e0       	ldi	r23, 0x01	; 1
    2214:	0e 94 c5 3b 	call	0x778a	; 0x778a <fputc>
    2218:	80 91 c0 00 	lds	r24, 0x00C0
    221c:	87 ff       	sbrs	r24, 7
    221e:	fc cf       	rjmp	.-8      	; 0x2218 <getDataSample+0x22>
    2220:	80 91 c6 00 	lds	r24, 0x00C6
    2224:	8e 33       	cpi	r24, 0x3E	; 62
    2226:	c1 f7       	brne	.-16     	; 0x2218 <getDataSample+0x22>
    2228:	2d b7       	in	r18, 0x3d	; 61
    222a:	3e b7       	in	r19, 0x3e	; 62
    222c:	28 50       	subi	r18, 0x08	; 8
    222e:	30 40       	sbci	r19, 0x00	; 0
    2230:	0f b6       	in	r0, 0x3f	; 63
    2232:	f8 94       	cli
    2234:	3e bf       	out	0x3e, r19	; 62
    2236:	0f be       	out	0x3f, r0	; 63
    2238:	2d bf       	out	0x3d, r18	; 61
    223a:	ed b7       	in	r30, 0x3d	; 61
    223c:	fe b7       	in	r31, 0x3e	; 62
    223e:	31 96       	adiw	r30, 0x01	; 1
    2240:	89 ea       	ldi	r24, 0xA9	; 169
    2242:	91 e0       	ldi	r25, 0x01	; 1
    2244:	ad b7       	in	r26, 0x3d	; 61
    2246:	be b7       	in	r27, 0x3e	; 62
    2248:	12 96       	adiw	r26, 0x02	; 2
    224a:	9c 93       	st	X, r25
    224c:	8e 93       	st	-X, r24
    224e:	11 97       	sbiw	r26, 0x01	; 1
    2250:	80 e4       	ldi	r24, 0x40	; 64
    2252:	91 e0       	ldi	r25, 0x01	; 1
    2254:	93 83       	std	Z+3, r25	; 0x03
    2256:	82 83       	std	Z+2, r24	; 0x02
    2258:	83 ee       	ldi	r24, 0xE3	; 227
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	9c 01       	movw	r18, r24
    225e:	02 9f       	mul	r16, r18
    2260:	c0 01       	movw	r24, r0
    2262:	03 9f       	mul	r16, r19
    2264:	90 0d       	add	r25, r0
    2266:	12 9f       	mul	r17, r18
    2268:	90 0d       	add	r25, r0
    226a:	11 24       	eor	r1, r1
    226c:	95 83       	std	Z+5, r25	; 0x05
    226e:	84 83       	std	Z+4, r24	; 0x04
    2270:	81 ee       	ldi	r24, 0xE1	; 225
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	97 83       	std	Z+7, r25	; 0x07
    2276:	86 83       	std	Z+6, r24	; 0x06
    2278:	0e 94 b1 3b 	call	0x7762	; 0x7762 <fprintf>
    227c:	8d b7       	in	r24, 0x3d	; 61
    227e:	9e b7       	in	r25, 0x3e	; 62
    2280:	08 96       	adiw	r24, 0x08	; 8
    2282:	0f b6       	in	r0, 0x3f	; 63
    2284:	f8 94       	cli
    2286:	9e bf       	out	0x3e, r25	; 62
    2288:	0f be       	out	0x3f, r0	; 63
    228a:	8d bf       	out	0x3d, r24	; 61
    228c:	80 91 c0 00 	lds	r24, 0x00C0
    2290:	87 ff       	sbrs	r24, 7
    2292:	fc cf       	rjmp	.-8      	; 0x228c <getDataSample+0x96>
    2294:	80 91 c6 00 	lds	r24, 0x00C6
    2298:	80 91 c0 00 	lds	r24, 0x00C0
    229c:	87 ff       	sbrs	r24, 7
    229e:	fc cf       	rjmp	.-8      	; 0x2298 <getDataSample+0xa2>
    22a0:	80 91 c6 00 	lds	r24, 0x00C6
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	04 c0       	rjmp	.+8      	; 0x22b2 <getDataSample+0xbc>
    22aa:	89 81       	ldd	r24, Y+1	; 0x01
    22ac:	80 83       	st	Z, r24
    22ae:	2f 5f       	subi	r18, 0xFF	; 255
    22b0:	3f 4f       	sbci	r19, 0xFF	; 255
    22b2:	80 91 c0 00 	lds	r24, 0x00C0
    22b6:	87 ff       	sbrs	r24, 7
    22b8:	fc cf       	rjmp	.-8      	; 0x22b2 <getDataSample+0xbc>
    22ba:	80 91 c6 00 	lds	r24, 0x00C6
    22be:	89 83       	std	Y+1, r24	; 0x01
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
    22c2:	f7 01       	movw	r30, r14
    22c4:	e2 0f       	add	r30, r18
    22c6:	f3 1f       	adc	r31, r19
    22c8:	8d 30       	cpi	r24, 0x0D	; 13
    22ca:	79 f7       	brne	.-34     	; 0x22aa <getDataSample+0xb4>
    22cc:	10 82       	st	Z, r1
    22ce:	80 91 c0 00 	lds	r24, 0x00C0
    22d2:	87 ff       	sbrs	r24, 7
    22d4:	fc cf       	rjmp	.-8      	; 0x22ce <getDataSample+0xd8>
    22d6:	80 91 c6 00 	lds	r24, 0x00C6
    22da:	89 83       	std	Y+1, r24	; 0x01
    22dc:	89 81       	ldd	r24, Y+1	; 0x01
    22de:	8e 33       	cpi	r24, 0x3E	; 62
    22e0:	b1 f7       	brne	.-20     	; 0x22ce <getDataSample+0xd8>
    22e2:	0f 90       	pop	r0
    22e4:	cf 91       	pop	r28
    22e6:	df 91       	pop	r29
    22e8:	1f 91       	pop	r17
    22ea:	0f 91       	pop	r16
    22ec:	ff 90       	pop	r15
    22ee:	ef 90       	pop	r14
    22f0:	08 95       	ret

000022f2 <initOpenLogFlight>:
    22f2:	10 92 c5 00 	sts	0x00C5, r1
    22f6:	8d e4       	ldi	r24, 0x4D	; 77
    22f8:	80 93 c4 00 	sts	0x00C4, r24
    22fc:	88 e1       	ldi	r24, 0x18	; 24
    22fe:	80 93 c1 00 	sts	0x00C1, r24
    2302:	80 e2       	ldi	r24, 0x20	; 32
    2304:	9e e4       	ldi	r25, 0x4E	; 78
    2306:	2c e2       	ldi	r18, 0x2C	; 44
    2308:	31 e0       	ldi	r19, 0x01	; 1
    230a:	f9 01       	movw	r30, r18
    230c:	31 97       	sbiw	r30, 0x01	; 1
    230e:	f1 f7       	brne	.-4      	; 0x230c <initOpenLogFlight+0x1a>
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	d9 f7       	brne	.-10     	; 0x230a <initOpenLogFlight+0x18>
    2314:	8d b7       	in	r24, 0x3d	; 61
    2316:	9e b7       	in	r25, 0x3e	; 62
    2318:	0a 97       	sbiw	r24, 0x0a	; 10
    231a:	0f b6       	in	r0, 0x3f	; 63
    231c:	f8 94       	cli
    231e:	9e bf       	out	0x3e, r25	; 62
    2320:	0f be       	out	0x3f, r0	; 63
    2322:	8d bf       	out	0x3d, r24	; 61
    2324:	ed b7       	in	r30, 0x3d	; 61
    2326:	fe b7       	in	r31, 0x3e	; 62
    2328:	31 96       	adiw	r30, 0x01	; 1
    232a:	89 ea       	ldi	r24, 0xA9	; 169
    232c:	91 e0       	ldi	r25, 0x01	; 1
    232e:	ad b7       	in	r26, 0x3d	; 61
    2330:	be b7       	in	r27, 0x3e	; 62
    2332:	12 96       	adiw	r26, 0x02	; 2
    2334:	9c 93       	st	X, r25
    2336:	8e 93       	st	-X, r24
    2338:	11 97       	sbiw	r26, 0x01	; 1
    233a:	88 e5       	ldi	r24, 0x58	; 88
    233c:	91 e0       	ldi	r25, 0x01	; 1
    233e:	93 83       	std	Z+3, r25	; 0x03
    2340:	82 83       	std	Z+2, r24	; 0x02
    2342:	8a e1       	ldi	r24, 0x1A	; 26
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	95 83       	std	Z+5, r25	; 0x05
    2348:	84 83       	std	Z+4, r24	; 0x04
    234a:	97 83       	std	Z+7, r25	; 0x07
    234c:	86 83       	std	Z+6, r24	; 0x06
    234e:	91 87       	std	Z+9, r25	; 0x09
    2350:	80 87       	std	Z+8, r24	; 0x08
    2352:	0e 94 b1 3b 	call	0x7762	; 0x7762 <fprintf>
    2356:	8d b7       	in	r24, 0x3d	; 61
    2358:	9e b7       	in	r25, 0x3e	; 62
    235a:	0a 96       	adiw	r24, 0x0a	; 10
    235c:	0f b6       	in	r0, 0x3f	; 63
    235e:	f8 94       	cli
    2360:	9e bf       	out	0x3e, r25	; 62
    2362:	0f be       	out	0x3f, r0	; 63
    2364:	8d bf       	out	0x3d, r24	; 61
    2366:	08 95       	ret

00002368 <putDataSample>:
    2368:	cf 93       	push	r28
    236a:	df 93       	push	r29
    236c:	ec 01       	movw	r28, r24
    236e:	80 e6       	ldi	r24, 0x60	; 96
    2370:	91 e0       	ldi	r25, 0x01	; 1
    2372:	69 ea       	ldi	r22, 0xA9	; 169
    2374:	71 e0       	ldi	r23, 0x01	; 1
    2376:	0e 94 f1 3b 	call	0x77e2	; 0x77e2 <fputs>
    237a:	80 91 c0 00 	lds	r24, 0x00C0
    237e:	87 ff       	sbrs	r24, 7
    2380:	fc cf       	rjmp	.-8      	; 0x237a <putDataSample+0x12>
    2382:	80 91 c6 00 	lds	r24, 0x00C6
    2386:	8c 33       	cpi	r24, 0x3C	; 60
    2388:	c1 f7       	brne	.-16     	; 0x237a <putDataSample+0x12>
    238a:	00 d0       	rcall	.+0      	; 0x238c <putDataSample+0x24>
    238c:	00 d0       	rcall	.+0      	; 0x238e <putDataSample+0x26>
    238e:	00 d0       	rcall	.+0      	; 0x2390 <putDataSample+0x28>
    2390:	ed b7       	in	r30, 0x3d	; 61
    2392:	fe b7       	in	r31, 0x3e	; 62
    2394:	31 96       	adiw	r30, 0x01	; 1
    2396:	89 ea       	ldi	r24, 0xA9	; 169
    2398:	91 e0       	ldi	r25, 0x01	; 1
    239a:	ad b7       	in	r26, 0x3d	; 61
    239c:	be b7       	in	r27, 0x3e	; 62
    239e:	12 96       	adiw	r26, 0x02	; 2
    23a0:	9c 93       	st	X, r25
    23a2:	8e 93       	st	-X, r24
    23a4:	11 97       	sbiw	r26, 0x01	; 1
    23a6:	84 e7       	ldi	r24, 0x74	; 116
    23a8:	91 e0       	ldi	r25, 0x01	; 1
    23aa:	93 83       	std	Z+3, r25	; 0x03
    23ac:	82 83       	std	Z+2, r24	; 0x02
    23ae:	d5 83       	std	Z+5, r29	; 0x05
    23b0:	c4 83       	std	Z+4, r28	; 0x04
    23b2:	0e 94 b1 3b 	call	0x7762	; 0x7762 <fprintf>
    23b6:	28 ee       	ldi	r18, 0xE8	; 232
    23b8:	33 e0       	ldi	r19, 0x03	; 3
    23ba:	8d b7       	in	r24, 0x3d	; 61
    23bc:	9e b7       	in	r25, 0x3e	; 62
    23be:	06 96       	adiw	r24, 0x06	; 6
    23c0:	0f b6       	in	r0, 0x3f	; 63
    23c2:	f8 94       	cli
    23c4:	9e bf       	out	0x3e, r25	; 62
    23c6:	0f be       	out	0x3f, r0	; 63
    23c8:	8d bf       	out	0x3d, r24	; 61
    23ca:	4c e2       	ldi	r20, 0x2C	; 44
    23cc:	51 e0       	ldi	r21, 0x01	; 1
    23ce:	ca 01       	movw	r24, r20
    23d0:	01 97       	sbiw	r24, 0x01	; 1
    23d2:	f1 f7       	brne	.-4      	; 0x23d0 <putDataSample+0x68>
    23d4:	21 50       	subi	r18, 0x01	; 1
    23d6:	30 40       	sbci	r19, 0x00	; 0
    23d8:	d1 f7       	brne	.-12     	; 0x23ce <putDataSample+0x66>
    23da:	ad b7       	in	r26, 0x3d	; 61
    23dc:	be b7       	in	r27, 0x3e	; 62
    23de:	1a 97       	sbiw	r26, 0x0a	; 10
    23e0:	0f b6       	in	r0, 0x3f	; 63
    23e2:	f8 94       	cli
    23e4:	be bf       	out	0x3e, r27	; 62
    23e6:	0f be       	out	0x3f, r0	; 63
    23e8:	ad bf       	out	0x3d, r26	; 61
    23ea:	ed b7       	in	r30, 0x3d	; 61
    23ec:	fe b7       	in	r31, 0x3e	; 62
    23ee:	31 96       	adiw	r30, 0x01	; 1
    23f0:	89 ea       	ldi	r24, 0xA9	; 169
    23f2:	91 e0       	ldi	r25, 0x01	; 1
    23f4:	12 96       	adiw	r26, 0x02	; 2
    23f6:	9c 93       	st	X, r25
    23f8:	8e 93       	st	-X, r24
    23fa:	11 97       	sbiw	r26, 0x01	; 1
    23fc:	88 e5       	ldi	r24, 0x58	; 88
    23fe:	91 e0       	ldi	r25, 0x01	; 1
    2400:	93 83       	std	Z+3, r25	; 0x03
    2402:	82 83       	std	Z+2, r24	; 0x02
    2404:	8a e1       	ldi	r24, 0x1A	; 26
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	95 83       	std	Z+5, r25	; 0x05
    240a:	84 83       	std	Z+4, r24	; 0x04
    240c:	97 83       	std	Z+7, r25	; 0x07
    240e:	86 83       	std	Z+6, r24	; 0x06
    2410:	91 87       	std	Z+9, r25	; 0x09
    2412:	80 87       	std	Z+8, r24	; 0x08
    2414:	0e 94 b1 3b 	call	0x7762	; 0x7762 <fprintf>
    2418:	8d b7       	in	r24, 0x3d	; 61
    241a:	9e b7       	in	r25, 0x3e	; 62
    241c:	0a 96       	adiw	r24, 0x0a	; 10
    241e:	0f b6       	in	r0, 0x3f	; 63
    2420:	f8 94       	cli
    2422:	9e bf       	out	0x3e, r25	; 62
    2424:	0f be       	out	0x3f, r0	; 63
    2426:	8d bf       	out	0x3d, r24	; 61
    2428:	80 91 c0 00 	lds	r24, 0x00C0
    242c:	87 ff       	sbrs	r24, 7
    242e:	fc cf       	rjmp	.-8      	; 0x2428 <putDataSample+0xc0>
    2430:	80 91 c6 00 	lds	r24, 0x00C6
    2434:	8e 33       	cpi	r24, 0x3E	; 62
    2436:	c1 f7       	brne	.-16     	; 0x2428 <putDataSample+0xc0>
    2438:	80 91 c0 00 	lds	r24, 0x00C0
    243c:	87 ff       	sbrs	r24, 7
    243e:	fc cf       	rjmp	.-8      	; 0x2438 <putDataSample+0xd0>
    2440:	80 91 c6 00 	lds	r24, 0x00C6
    2444:	8e 33       	cpi	r24, 0x3E	; 62
    2446:	c1 f7       	brne	.-16     	; 0x2438 <putDataSample+0xd0>
    2448:	88 e7       	ldi	r24, 0x78	; 120
    244a:	91 e0       	ldi	r25, 0x01	; 1
    244c:	69 ea       	ldi	r22, 0xA9	; 169
    244e:	71 e0       	ldi	r23, 0x01	; 1
    2450:	0e 94 f1 3b 	call	0x77e2	; 0x77e2 <fputs>
    2454:	80 91 c0 00 	lds	r24, 0x00C0
    2458:	87 ff       	sbrs	r24, 7
    245a:	fc cf       	rjmp	.-8      	; 0x2454 <putDataSample+0xec>
    245c:	80 91 c6 00 	lds	r24, 0x00C6
    2460:	8e 33       	cpi	r24, 0x3E	; 62
    2462:	c1 f7       	brne	.-16     	; 0x2454 <putDataSample+0xec>
    2464:	df 91       	pop	r29
    2466:	cf 91       	pop	r28
    2468:	08 95       	ret

0000246a <initOpenLogTest>:
    246a:	10 92 c5 00 	sts	0x00C5, r1
    246e:	8d e4       	ldi	r24, 0x4D	; 77
    2470:	80 93 c4 00 	sts	0x00C4, r24
    2474:	88 e1       	ldi	r24, 0x18	; 24
    2476:	80 93 c1 00 	sts	0x00C1, r24
    247a:	88 e9       	ldi	r24, 0x98	; 152
    247c:	9a e3       	ldi	r25, 0x3A	; 58
    247e:	2c e2       	ldi	r18, 0x2C	; 44
    2480:	31 e0       	ldi	r19, 0x01	; 1
    2482:	f9 01       	movw	r30, r18
    2484:	31 97       	sbiw	r30, 0x01	; 1
    2486:	f1 f7       	brne	.-4      	; 0x2484 <initOpenLogTest+0x1a>
    2488:	01 97       	sbiw	r24, 0x01	; 1
    248a:	d9 f7       	brne	.-10     	; 0x2482 <initOpenLogTest+0x18>
    248c:	8d b7       	in	r24, 0x3d	; 61
    248e:	9e b7       	in	r25, 0x3e	; 62
    2490:	0a 97       	sbiw	r24, 0x0a	; 10
    2492:	0f b6       	in	r0, 0x3f	; 63
    2494:	f8 94       	cli
    2496:	9e bf       	out	0x3e, r25	; 62
    2498:	0f be       	out	0x3f, r0	; 63
    249a:	8d bf       	out	0x3d, r24	; 61
    249c:	ed b7       	in	r30, 0x3d	; 61
    249e:	fe b7       	in	r31, 0x3e	; 62
    24a0:	31 96       	adiw	r30, 0x01	; 1
    24a2:	89 ea       	ldi	r24, 0xA9	; 169
    24a4:	91 e0       	ldi	r25, 0x01	; 1
    24a6:	ad b7       	in	r26, 0x3d	; 61
    24a8:	be b7       	in	r27, 0x3e	; 62
    24aa:	12 96       	adiw	r26, 0x02	; 2
    24ac:	9c 93       	st	X, r25
    24ae:	8e 93       	st	-X, r24
    24b0:	11 97       	sbiw	r26, 0x01	; 1
    24b2:	88 e5       	ldi	r24, 0x58	; 88
    24b4:	91 e0       	ldi	r25, 0x01	; 1
    24b6:	93 83       	std	Z+3, r25	; 0x03
    24b8:	82 83       	std	Z+2, r24	; 0x02
    24ba:	8a e1       	ldi	r24, 0x1A	; 26
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	95 83       	std	Z+5, r25	; 0x05
    24c0:	84 83       	std	Z+4, r24	; 0x04
    24c2:	97 83       	std	Z+7, r25	; 0x07
    24c4:	86 83       	std	Z+6, r24	; 0x06
    24c6:	91 87       	std	Z+9, r25	; 0x09
    24c8:	80 87       	std	Z+8, r24	; 0x08
    24ca:	0e 94 b1 3b 	call	0x7762	; 0x7762 <fprintf>
    24ce:	8d b7       	in	r24, 0x3d	; 61
    24d0:	9e b7       	in	r25, 0x3e	; 62
    24d2:	0a 96       	adiw	r24, 0x0a	; 10
    24d4:	0f b6       	in	r0, 0x3f	; 63
    24d6:	f8 94       	cli
    24d8:	9e bf       	out	0x3e, r25	; 62
    24da:	0f be       	out	0x3f, r0	; 63
    24dc:	8d bf       	out	0x3d, r24	; 61
    24de:	80 91 c0 00 	lds	r24, 0x00C0
    24e2:	87 ff       	sbrs	r24, 7
    24e4:	fc cf       	rjmp	.-8      	; 0x24de <initOpenLogTest+0x74>
    24e6:	80 91 c6 00 	lds	r24, 0x00C6
    24ea:	8e 33       	cpi	r24, 0x3E	; 62
    24ec:	c1 f7       	brne	.-16     	; 0x24de <initOpenLogTest+0x74>
    24ee:	8e e7       	ldi	r24, 0x7E	; 126
    24f0:	91 e0       	ldi	r25, 0x01	; 1
    24f2:	69 ea       	ldi	r22, 0xA9	; 169
    24f4:	71 e0       	ldi	r23, 0x01	; 1
    24f6:	0e 94 f1 3b 	call	0x77e2	; 0x77e2 <fputs>
    24fa:	80 91 c0 00 	lds	r24, 0x00C0
    24fe:	87 ff       	sbrs	r24, 7
    2500:	fc cf       	rjmp	.-8      	; 0x24fa <initOpenLogTest+0x90>
    2502:	80 91 c6 00 	lds	r24, 0x00C6
    2506:	8e 33       	cpi	r24, 0x3E	; 62
    2508:	c1 f7       	brne	.-16     	; 0x24fa <initOpenLogTest+0x90>
    250a:	8d e0       	ldi	r24, 0x0D	; 13
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	69 ea       	ldi	r22, 0xA9	; 169
    2510:	71 e0       	ldi	r23, 0x01	; 1
    2512:	0e 94 c5 3b 	call	0x778a	; 0x778a <fputc>
    2516:	80 91 c0 00 	lds	r24, 0x00C0
    251a:	87 ff       	sbrs	r24, 7
    251c:	fc cf       	rjmp	.-8      	; 0x2516 <initOpenLogTest+0xac>
    251e:	80 91 c6 00 	lds	r24, 0x00C6
    2522:	8e 33       	cpi	r24, 0x3E	; 62
    2524:	c1 f7       	brne	.-16     	; 0x2516 <initOpenLogTest+0xac>
    2526:	88 e8       	ldi	r24, 0x88	; 136
    2528:	91 e0       	ldi	r25, 0x01	; 1
    252a:	69 ea       	ldi	r22, 0xA9	; 169
    252c:	71 e0       	ldi	r23, 0x01	; 1
    252e:	0e 94 f1 3b 	call	0x77e2	; 0x77e2 <fputs>
    2532:	80 91 c0 00 	lds	r24, 0x00C0
    2536:	87 ff       	sbrs	r24, 7
    2538:	fc cf       	rjmp	.-8      	; 0x2532 <initOpenLogTest+0xc8>
    253a:	80 91 c6 00 	lds	r24, 0x00C6
    253e:	8e 33       	cpi	r24, 0x3E	; 62
    2540:	c1 f7       	brne	.-16     	; 0x2532 <initOpenLogTest+0xc8>
    2542:	88 e9       	ldi	r24, 0x98	; 152
    2544:	91 e0       	ldi	r25, 0x01	; 1
    2546:	69 ea       	ldi	r22, 0xA9	; 169
    2548:	71 e0       	ldi	r23, 0x01	; 1
    254a:	0e 94 f1 3b 	call	0x77e2	; 0x77e2 <fputs>
    254e:	80 91 c0 00 	lds	r24, 0x00C0
    2552:	87 ff       	sbrs	r24, 7
    2554:	fc cf       	rjmp	.-8      	; 0x254e <initOpenLogTest+0xe4>
    2556:	80 91 c6 00 	lds	r24, 0x00C6
    255a:	8e 33       	cpi	r24, 0x3E	; 62
    255c:	c1 f7       	brne	.-16     	; 0x254e <initOpenLogTest+0xe4>
    255e:	08 95       	ret

00002560 <timedCutdown>:
void timedCutdown(uint32_t time)
{
	//BEFORE FLIGHT
	//Send Comm Controller the cutdown command
	//In response, will  I receive the Cutdown Now command?
}
    2560:	08 95       	ret

00002562 <uart_putchar>:
}



static int uart_putchar(char c, FILE *stream)
{
    2562:	1f 93       	push	r17
    2564:	18 2f       	mov	r17, r24
    if (c == '\n') uart_putchar('\r', stream);
    2566:	8a 30       	cpi	r24, 0x0A	; 10
    2568:	19 f4       	brne	.+6      	; 0x2570 <uart_putchar+0xe>
    256a:	8d e0       	ldi	r24, 0x0D	; 13
    256c:	0e 94 b1 12 	call	0x2562	; 0x2562 <uart_putchar>

    loop_until_bit_is_set(UCSR1A, UDRE1);
    2570:	80 91 c8 00 	lds	r24, 0x00C8
    2574:	85 ff       	sbrs	r24, 5
    2576:	fc cf       	rjmp	.-8      	; 0x2570 <uart_putchar+0xe>
    UDR1 = c;
    2578:	10 93 ce 00 	sts	0x00CE, r17

    return 0;
}
    257c:	80 e0       	ldi	r24, 0x00	; 0
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	1f 91       	pop	r17
    2582:	08 95       	ret

00002584 <lprintf_P>:
	}
	_delay_ms(100);
}

int lprintf_P(const char *str, ...)
{
    2584:	0f 93       	push	r16
    2586:	1f 93       	push	r17
    2588:	df 93       	push	r29
    258a:	cf 93       	push	r28
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
    2590:	c9 5c       	subi	r28, 0xC9	; 201
    2592:	d0 40       	sbci	r29, 0x00	; 0
    2594:	0f b6       	in	r0, 0x3f	; 63
    2596:	f8 94       	cli
    2598:	de bf       	out	0x3e, r29	; 62
    259a:	0f be       	out	0x3f, r0	; 63
    259c:	cd bf       	out	0x3d, r28	; 61
    259e:	fe 01       	movw	r30, r28
    25a0:	e0 53       	subi	r30, 0x30	; 48
    25a2:	ff 4f       	sbci	r31, 0xFF	; 255
    25a4:	41 91       	ld	r20, Z+
    25a6:	51 91       	ld	r21, Z+
	int chars;
	va_list args;

	va_start(args, str);

	chars = vsnprintf_P(lstr, 100, str, args);
    25a8:	8e 01       	movw	r16, r28
    25aa:	0f 5f       	subi	r16, 0xFF	; 255
    25ac:	1f 4f       	sbci	r17, 0xFF	; 255
    25ae:	c8 01       	movw	r24, r16
    25b0:	64 e6       	ldi	r22, 0x64	; 100
    25b2:	70 e0       	ldi	r23, 0x00	; 0
    25b4:	9f 01       	movw	r18, r30
    25b6:	0e 94 82 3c 	call	0x7904	; 0x7904 <vsnprintf_P>
    25ba:	bc 01       	movw	r22, r24

	if(chars > 100)
    25bc:	85 36       	cpi	r24, 0x65	; 101
    25be:	91 05       	cpc	r25, r1
    25c0:	1c f0       	brlt	.+6      	; 0x25c8 <lprintf_P+0x44>
    25c2:	21 e0       	ldi	r18, 0x01	; 1
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	1c c0       	rjmp	.+56     	; 0x2600 <lprintf_P+0x7c>
	{
		va_end(args);
		return 1;
	} else {
		int i=0;
		i2cSend[0] = 0x05;
    25c8:	fe 01       	movw	r30, r28
    25ca:	eb 59       	subi	r30, 0x9B	; 155
    25cc:	ff 4f       	sbci	r31, 0xFF	; 255
    25ce:	85 e0       	ldi	r24, 0x05	; 5
    25d0:	80 83       	st	Z, r24
    25d2:	d8 01       	movw	r26, r16
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	af 01       	movw	r20, r30
    25da:	07 c0       	rjmp	.+14     	; 0x25ea <lprintf_P+0x66>
		for(i=0; i <=chars; i++)
		{
			i2cSend[i+1] = (uint8_t)lstr[i];
    25dc:	2f 5f       	subi	r18, 0xFF	; 255
    25de:	3f 4f       	sbci	r19, 0xFF	; 255
    25e0:	fa 01       	movw	r30, r20
    25e2:	e2 0f       	add	r30, r18
    25e4:	f3 1f       	adc	r31, r19
    25e6:	8d 91       	ld	r24, X+
    25e8:	80 83       	st	Z, r24
		va_end(args);
		return 1;
	} else {
		int i=0;
		i2cSend[0] = 0x05;
		for(i=0; i <=chars; i++)
    25ea:	62 17       	cp	r22, r18
    25ec:	73 07       	cpc	r23, r19
    25ee:	b4 f7       	brge	.-20     	; 0x25dc <lprintf_P+0x58>
		{
			i2cSend[i+1] = (uint8_t)lstr[i];
		}
		uint8_t retVal = i2cMasterSendNI(0b00001110, chars+1, i2cSend);
    25f0:	6f 5f       	subi	r22, 0xFF	; 255
    25f2:	8e e0       	ldi	r24, 0x0E	; 14
    25f4:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <i2cMasterSendNI>
		if(retVal != I2C_OK)
    25f8:	81 11       	cpse	r24, r1
		{
			yellow_on();
    25fa:	2b 9a       	sbi	0x05, 3	; 5
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0

		va_end(args);
		return 0;
	}
	_delay_ms(100);
}
    2600:	c9 01       	movw	r24, r18
    2602:	c7 53       	subi	r28, 0x37	; 55
    2604:	df 4f       	sbci	r29, 0xFF	; 255
    2606:	0f b6       	in	r0, 0x3f	; 63
    2608:	f8 94       	cli
    260a:	de bf       	out	0x3e, r29	; 62
    260c:	0f be       	out	0x3f, r0	; 63
    260e:	cd bf       	out	0x3d, r28	; 61
    2610:	cf 91       	pop	r28
    2612:	df 91       	pop	r29
    2614:	1f 91       	pop	r17
    2616:	0f 91       	pop	r16
    2618:	08 95       	ret

0000261a <dumpGPS>:
struct gpsData currentPositionData;

void dumpGPS(void)
{

	lprintf_P(PSTR("Lat: %f Lon: %f\n"), currentPositionData.latitude, currentPositionData.longitude);
    261a:	8d b7       	in	r24, 0x3d	; 61
    261c:	9e b7       	in	r25, 0x3e	; 62
    261e:	0a 97       	sbiw	r24, 0x0a	; 10
    2620:	0f b6       	in	r0, 0x3f	; 63
    2622:	f8 94       	cli
    2624:	9e bf       	out	0x3e, r25	; 62
    2626:	0f be       	out	0x3f, r0	; 63
    2628:	8d bf       	out	0x3d, r24	; 61
    262a:	ed b7       	in	r30, 0x3d	; 61
    262c:	fe b7       	in	r31, 0x3e	; 62
    262e:	31 96       	adiw	r30, 0x01	; 1
    2630:	8a ef       	ldi	r24, 0xFA	; 250
    2632:	93 e0       	ldi	r25, 0x03	; 3
    2634:	ad b7       	in	r26, 0x3d	; 61
    2636:	be b7       	in	r27, 0x3e	; 62
    2638:	12 96       	adiw	r26, 0x02	; 2
    263a:	9c 93       	st	X, r25
    263c:	8e 93       	st	-X, r24
    263e:	11 97       	sbiw	r26, 0x01	; 1
    2640:	80 91 3c 04 	lds	r24, 0x043C
    2644:	90 91 3d 04 	lds	r25, 0x043D
    2648:	a0 91 3e 04 	lds	r26, 0x043E
    264c:	b0 91 3f 04 	lds	r27, 0x043F
    2650:	82 83       	std	Z+2, r24	; 0x02
    2652:	93 83       	std	Z+3, r25	; 0x03
    2654:	a4 83       	std	Z+4, r26	; 0x04
    2656:	b5 83       	std	Z+5, r27	; 0x05
    2658:	80 91 40 04 	lds	r24, 0x0440
    265c:	90 91 41 04 	lds	r25, 0x0441
    2660:	a0 91 42 04 	lds	r26, 0x0442
    2664:	b0 91 43 04 	lds	r27, 0x0443
    2668:	86 83       	std	Z+6, r24	; 0x06
    266a:	97 83       	std	Z+7, r25	; 0x07
    266c:	a0 87       	std	Z+8, r26	; 0x08
    266e:	b1 87       	std	Z+9, r27	; 0x09
    2670:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
	lprintf_P(PSTR("Alt: %d Sats: %d\n"), currentPositionData.altitude, currentPositionData.numberOfSats);
    2674:	0f 90       	pop	r0
    2676:	0f 90       	pop	r0
    2678:	0f 90       	pop	r0
    267a:	0f 90       	pop	r0
    267c:	ed b7       	in	r30, 0x3d	; 61
    267e:	fe b7       	in	r31, 0x3e	; 62
    2680:	31 96       	adiw	r30, 0x01	; 1
    2682:	88 ee       	ldi	r24, 0xE8	; 232
    2684:	93 e0       	ldi	r25, 0x03	; 3
    2686:	ad b7       	in	r26, 0x3d	; 61
    2688:	be b7       	in	r27, 0x3e	; 62
    268a:	12 96       	adiw	r26, 0x02	; 2
    268c:	9c 93       	st	X, r25
    268e:	8e 93       	st	-X, r24
    2690:	11 97       	sbiw	r26, 0x01	; 1
    2692:	80 91 4e 04 	lds	r24, 0x044E
    2696:	90 91 4f 04 	lds	r25, 0x044F
    269a:	93 83       	std	Z+3, r25	; 0x03
    269c:	82 83       	std	Z+2, r24	; 0x02
    269e:	80 91 50 04 	lds	r24, 0x0450
    26a2:	84 83       	std	Z+4, r24	; 0x04
    26a4:	15 82       	std	Z+5, r1	; 0x05
    26a6:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
	lprintf_P(PSTR("vdop: %d hdop: %d\n"), currentPositionData.vdop, currentPositionData.hdop);
    26aa:	ed b7       	in	r30, 0x3d	; 61
    26ac:	fe b7       	in	r31, 0x3e	; 62
    26ae:	31 96       	adiw	r30, 0x01	; 1
    26b0:	85 ed       	ldi	r24, 0xD5	; 213
    26b2:	93 e0       	ldi	r25, 0x03	; 3
    26b4:	ad b7       	in	r26, 0x3d	; 61
    26b6:	be b7       	in	r27, 0x3e	; 62
    26b8:	12 96       	adiw	r26, 0x02	; 2
    26ba:	9c 93       	st	X, r25
    26bc:	8e 93       	st	-X, r24
    26be:	11 97       	sbiw	r26, 0x01	; 1
    26c0:	80 91 49 04 	lds	r24, 0x0449
    26c4:	90 91 4a 04 	lds	r25, 0x044A
    26c8:	93 83       	std	Z+3, r25	; 0x03
    26ca:	82 83       	std	Z+2, r24	; 0x02
    26cc:	80 91 47 04 	lds	r24, 0x0447
    26d0:	90 91 48 04 	lds	r25, 0x0448
    26d4:	95 83       	std	Z+5, r25	; 0x05
    26d6:	84 83       	std	Z+4, r24	; 0x04
    26d8:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
    26dc:	8d b7       	in	r24, 0x3d	; 61
    26de:	9e b7       	in	r25, 0x3e	; 62
    26e0:	06 96       	adiw	r24, 0x06	; 6
    26e2:	0f b6       	in	r0, 0x3f	; 63
    26e4:	f8 94       	cli
    26e6:	9e bf       	out	0x3e, r25	; 62
    26e8:	0f be       	out	0x3f, r0	; 63
    26ea:	8d bf       	out	0x3d, r24	; 61

}
    26ec:	08 95       	ret

000026ee <lprintf>:
    return(UDR1);

}

int lprintf(char *str, ...)
{
    26ee:	0f 93       	push	r16
    26f0:	1f 93       	push	r17
    26f2:	df 93       	push	r29
    26f4:	cf 93       	push	r28
    26f6:	cd b7       	in	r28, 0x3d	; 61
    26f8:	de b7       	in	r29, 0x3e	; 62
    26fa:	c9 5c       	subi	r28, 0xC9	; 201
    26fc:	d0 40       	sbci	r29, 0x00	; 0
    26fe:	0f b6       	in	r0, 0x3f	; 63
    2700:	f8 94       	cli
    2702:	de bf       	out	0x3e, r29	; 62
    2704:	0f be       	out	0x3f, r0	; 63
    2706:	cd bf       	out	0x3d, r28	; 61
    2708:	fe 01       	movw	r30, r28
    270a:	e0 53       	subi	r30, 0x30	; 48
    270c:	ff 4f       	sbci	r31, 0xFF	; 255
    270e:	41 91       	ld	r20, Z+
    2710:	51 91       	ld	r21, Z+
	int chars;
	va_list args;

	va_start(args, str);

	chars = vsnprintf(lstr, 100, str, args);
    2712:	8e 01       	movw	r16, r28
    2714:	0f 5f       	subi	r16, 0xFF	; 255
    2716:	1f 4f       	sbci	r17, 0xFF	; 255
    2718:	c8 01       	movw	r24, r16
    271a:	64 e6       	ldi	r22, 0x64	; 100
    271c:	70 e0       	ldi	r23, 0x00	; 0
    271e:	9f 01       	movw	r18, r30
    2720:	0e 94 58 3c 	call	0x78b0	; 0x78b0 <vsnprintf>
    2724:	bc 01       	movw	r22, r24

	if(chars > 100)
    2726:	85 36       	cpi	r24, 0x65	; 101
    2728:	91 05       	cpc	r25, r1
    272a:	1c f0       	brlt	.+6      	; 0x2732 <lprintf+0x44>
    272c:	21 e0       	ldi	r18, 0x01	; 1
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	1c c0       	rjmp	.+56     	; 0x276a <lprintf+0x7c>
	{
		va_end(args);
		return 1;
	} else {
		int i=0;
		i2cSend[0] = 0x05;
    2732:	fe 01       	movw	r30, r28
    2734:	eb 59       	subi	r30, 0x9B	; 155
    2736:	ff 4f       	sbci	r31, 0xFF	; 255
    2738:	85 e0       	ldi	r24, 0x05	; 5
    273a:	80 83       	st	Z, r24
    273c:	d8 01       	movw	r26, r16
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	af 01       	movw	r20, r30
    2744:	07 c0       	rjmp	.+14     	; 0x2754 <lprintf+0x66>
		for(i=0; i <=chars; i++)
		{
			i2cSend[i+1] = (uint8_t)lstr[i];
    2746:	2f 5f       	subi	r18, 0xFF	; 255
    2748:	3f 4f       	sbci	r19, 0xFF	; 255
    274a:	fa 01       	movw	r30, r20
    274c:	e2 0f       	add	r30, r18
    274e:	f3 1f       	adc	r31, r19
    2750:	8d 91       	ld	r24, X+
    2752:	80 83       	st	Z, r24
		va_end(args);
		return 1;
	} else {
		int i=0;
		i2cSend[0] = 0x05;
		for(i=0; i <=chars; i++)
    2754:	62 17       	cp	r22, r18
    2756:	73 07       	cpc	r23, r19
    2758:	b4 f7       	brge	.-20     	; 0x2746 <lprintf+0x58>
		{
			i2cSend[i+1] = (uint8_t)lstr[i];
		}
		uint8_t retVal = i2cMasterSendNI(0b00001110, chars+1, i2cSend);
    275a:	6f 5f       	subi	r22, 0xFF	; 255
    275c:	8e e0       	ldi	r24, 0x0E	; 14
    275e:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <i2cMasterSendNI>
		if(retVal != I2C_OK)
    2762:	81 11       	cpse	r24, r1
		{
			yellow_on();
    2764:	2b 9a       	sbi	0x05, 3	; 5
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0

		va_end(args);
		return 0;
	}
	_delay_ms(100);
}
    276a:	c9 01       	movw	r24, r18
    276c:	c7 53       	subi	r28, 0x37	; 55
    276e:	df 4f       	sbci	r29, 0xFF	; 255
    2770:	0f b6       	in	r0, 0x3f	; 63
    2772:	f8 94       	cli
    2774:	de bf       	out	0x3e, r29	; 62
    2776:	0f be       	out	0x3f, r0	; 63
    2778:	cd bf       	out	0x3d, r28	; 61
    277a:	cf 91       	pop	r28
    277c:	df 91       	pop	r29
    277e:	1f 91       	pop	r17
    2780:	0f 91       	pop	r16
    2782:	08 95       	ret

00002784 <uart_getchar>:

    return 0;
}

uint8_t uart_getchar(void)
{
    2784:	40 e0       	ldi	r20, 0x00	; 0
    2786:	50 e0       	ldi	r21, 0x00	; 0
    2788:	60 e0       	ldi	r22, 0x00	; 0
    278a:	70 e0       	ldi	r23, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    278c:	28 e5       	ldi	r18, 0x58	; 88
    278e:	32 e0       	ldi	r19, 0x02	; 2
    2790:	07 c0       	rjmp	.+14     	; 0x27a0 <uart_getchar+0x1c>
	uint32_t errorCounter = 0;
    while( !(UCSR1A & (1<<RXC1)) )
    {
		errorCounter++;
    2792:	4f 5f       	subi	r20, 0xFF	; 255
    2794:	5f 4f       	sbci	r21, 0xFF	; 255
    2796:	6f 4f       	sbci	r22, 0xFF	; 255
    2798:	7f 4f       	sbci	r23, 0xFF	; 255
    279a:	c9 01       	movw	r24, r18
    279c:	01 97       	sbiw	r24, 0x01	; 1
    279e:	f1 f7       	brne	.-4      	; 0x279c <uart_getchar+0x18>
}

uint8_t uart_getchar(void)
{
	uint32_t errorCounter = 0;
    while( !(UCSR1A & (1<<RXC1)) )
    27a0:	80 91 c8 00 	lds	r24, 0x00C8
    27a4:	87 ff       	sbrs	r24, 7
    27a6:	f5 cf       	rjmp	.-22     	; 0x2792 <uart_getchar+0xe>
    {
		errorCounter++;
		_delay_us(200);
	}
	if(errorCounter >= 10)
    27a8:	4a 30       	cpi	r20, 0x0A	; 10
    27aa:	51 05       	cpc	r21, r1
    27ac:	61 05       	cpc	r22, r1
    27ae:	71 05       	cpc	r23, r1
    27b0:	28 f1       	brcs	.+74     	; 0x27fc <uart_getchar+0x78>
	{
	   lprintf("E: %lu c: %c\n", errorCounter, UDR1);
    27b2:	20 91 ce 00 	lds	r18, 0x00CE
    27b6:	8d b7       	in	r24, 0x3d	; 61
    27b8:	9e b7       	in	r25, 0x3e	; 62
    27ba:	08 97       	sbiw	r24, 0x08	; 8
    27bc:	0f b6       	in	r0, 0x3f	; 63
    27be:	f8 94       	cli
    27c0:	9e bf       	out	0x3e, r25	; 62
    27c2:	0f be       	out	0x3f, r0	; 63
    27c4:	8d bf       	out	0x3d, r24	; 61
    27c6:	ed b7       	in	r30, 0x3d	; 61
    27c8:	fe b7       	in	r31, 0x3e	; 62
    27ca:	31 96       	adiw	r30, 0x01	; 1
    27cc:	87 eb       	ldi	r24, 0xB7	; 183
    27ce:	91 e0       	ldi	r25, 0x01	; 1
    27d0:	ad b7       	in	r26, 0x3d	; 61
    27d2:	be b7       	in	r27, 0x3e	; 62
    27d4:	12 96       	adiw	r26, 0x02	; 2
    27d6:	9c 93       	st	X, r25
    27d8:	8e 93       	st	-X, r24
    27da:	11 97       	sbiw	r26, 0x01	; 1
    27dc:	42 83       	std	Z+2, r20	; 0x02
    27de:	53 83       	std	Z+3, r21	; 0x03
    27e0:	64 83       	std	Z+4, r22	; 0x04
    27e2:	75 83       	std	Z+5, r23	; 0x05
    27e4:	26 83       	std	Z+6, r18	; 0x06
    27e6:	17 82       	std	Z+7, r1	; 0x07
    27e8:	0e 94 77 13 	call	0x26ee	; 0x26ee <lprintf>
    27ec:	8d b7       	in	r24, 0x3d	; 61
    27ee:	9e b7       	in	r25, 0x3e	; 62
    27f0:	08 96       	adiw	r24, 0x08	; 8
    27f2:	0f b6       	in	r0, 0x3f	; 63
    27f4:	f8 94       	cli
    27f6:	9e bf       	out	0x3e, r25	; 62
    27f8:	0f be       	out	0x3f, r0	; 63
    27fa:	8d bf       	out	0x3d, r24	; 61
	}
    return(UDR1);
    27fc:	80 91 ce 00 	lds	r24, 0x00CE

}
    2800:	08 95       	ret

00002802 <debugBallast>:
			break;
	}
}

void debugBallast(void)
{
    2802:	ef 92       	push	r14
    2804:	ff 92       	push	r15
    2806:	0f 93       	push	r16
    2808:	1f 93       	push	r17
    280a:	df 93       	push	r29
    280c:	cf 93       	push	r28
    280e:	0f 92       	push	r0
    2810:	cd b7       	in	r28, 0x3d	; 61
    2812:	de b7       	in	r29, 0x3e	; 62
	lprintf_P(PSTR("testing ballast\n"));
    2814:	00 d0       	rcall	.+0      	; 0x2816 <debugBallast+0x14>
    2816:	8f ea       	ldi	r24, 0xAF	; 175
    2818:	97 e0       	ldi	r25, 0x07	; 7
    281a:	ed b7       	in	r30, 0x3d	; 61
    281c:	fe b7       	in	r31, 0x3e	; 62
    281e:	92 83       	std	Z+2, r25	; 0x02
    2820:	81 83       	std	Z+1, r24	; 0x01
    2822:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>

	uint8_t data = 19;
    2826:	83 e1       	ldi	r24, 0x13	; 19
    2828:	89 83       	std	Y+1, r24	; 0x01
    282a:	0f 90       	pop	r0
    282c:	0f 90       	pop	r0
	uint8_t retVal;
	while( (retVal = i2cMasterSendNI(BALLASTMODULE, 1, &data)) != I2C_OK)
    282e:	7e 01       	movw	r14, r28
    2830:	08 94       	sec
    2832:	e1 1c       	adc	r14, r1
    2834:	f1 1c       	adc	r15, r1
    2836:	0c e2       	ldi	r16, 0x2C	; 44
    2838:	11 e0       	ldi	r17, 0x01	; 1
    283a:	07 c0       	rjmp	.+14     	; 0x284a <debugBallast+0x48>
    283c:	88 e8       	ldi	r24, 0x88	; 136
    283e:	93 e1       	ldi	r25, 0x13	; 19
    2840:	f8 01       	movw	r30, r16
    2842:	31 97       	sbiw	r30, 0x01	; 1
    2844:	f1 f7       	brne	.-4      	; 0x2842 <debugBallast+0x40>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2846:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2848:	d9 f7       	brne	.-10     	; 0x2840 <debugBallast+0x3e>
    284a:	82 e1       	ldi	r24, 0x12	; 18
    284c:	61 e0       	ldi	r22, 0x01	; 1
    284e:	a7 01       	movw	r20, r14
    2850:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <i2cMasterSendNI>
    2854:	88 23       	and	r24, r24
    2856:	91 f7       	brne	.-28     	; 0x283c <debugBallast+0x3a>
    2858:	80 e1       	ldi	r24, 0x10	; 16
    285a:	97 e2       	ldi	r25, 0x27	; 39
    285c:	2c e2       	ldi	r18, 0x2C	; 44
    285e:	31 e0       	ldi	r19, 0x01	; 1
    2860:	f9 01       	movw	r30, r18
    2862:	31 97       	sbiw	r30, 0x01	; 1
    2864:	f1 f7       	brne	.-4      	; 0x2862 <debugBallast+0x60>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2866:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2868:	d9 f7       	brne	.-10     	; 0x2860 <debugBallast+0x5e>
	{
		_delay_ms(500);
	}
	_delay_ms(1000);
	lprintf(PSTR("turned ballast on.\n"));
    286a:	00 d0       	rcall	.+0      	; 0x286c <debugBallast+0x6a>
    286c:	8b e9       	ldi	r24, 0x9B	; 155
    286e:	97 e0       	ldi	r25, 0x07	; 7
    2870:	ed b7       	in	r30, 0x3d	; 61
    2872:	fe b7       	in	r31, 0x3e	; 62
    2874:	92 83       	std	Z+2, r25	; 0x02
    2876:	81 83       	std	Z+1, r24	; 0x01
    2878:	0e 94 77 13 	call	0x26ee	; 0x26ee <lprintf>
    287c:	2f ef       	ldi	r18, 0xFF	; 255
    287e:	3f ef       	ldi	r19, 0xFF	; 255
    2880:	0f 90       	pop	r0
    2882:	0f 90       	pop	r0
    2884:	4c e2       	ldi	r20, 0x2C	; 44
    2886:	51 e0       	ldi	r21, 0x01	; 1
    2888:	ca 01       	movw	r24, r20
    288a:	01 97       	sbiw	r24, 0x01	; 1
    288c:	f1 f7       	brne	.-4      	; 0x288a <debugBallast+0x88>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    288e:	21 50       	subi	r18, 0x01	; 1
    2890:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2892:	d1 f7       	brne	.-12     	; 0x2888 <debugBallast+0x86>
	_delay_ms(10000);
	lprintf("Done waiting\n");
    2894:	00 d0       	rcall	.+0      	; 0x2896 <debugBallast+0x94>
    2896:	85 ec       	ldi	r24, 0xC5	; 197
    2898:	91 e0       	ldi	r25, 0x01	; 1
    289a:	ed b7       	in	r30, 0x3d	; 61
    289c:	fe b7       	in	r31, 0x3e	; 62
    289e:	92 83       	std	Z+2, r25	; 0x02
    28a0:	81 83       	std	Z+1, r24	; 0x01
    28a2:	0e 94 77 13 	call	0x26ee	; 0x26ee <lprintf>
	data = 18;
    28a6:	82 e1       	ldi	r24, 0x12	; 18
    28a8:	89 83       	std	Y+1, r24	; 0x01
    28aa:	0f 90       	pop	r0
    28ac:	0f 90       	pop	r0
	while( (retVal = i2cMasterSendNI(BALLASTMODULE, 1, &data)) != I2C_OK)
    28ae:	7e 01       	movw	r14, r28
    28b0:	08 94       	sec
    28b2:	e1 1c       	adc	r14, r1
    28b4:	f1 1c       	adc	r15, r1
    28b6:	0c e2       	ldi	r16, 0x2C	; 44
    28b8:	11 e0       	ldi	r17, 0x01	; 1
    28ba:	07 c0       	rjmp	.+14     	; 0x28ca <debugBallast+0xc8>
    28bc:	88 e8       	ldi	r24, 0x88	; 136
    28be:	93 e1       	ldi	r25, 0x13	; 19
    28c0:	f8 01       	movw	r30, r16
    28c2:	31 97       	sbiw	r30, 0x01	; 1
    28c4:	f1 f7       	brne	.-4      	; 0x28c2 <debugBallast+0xc0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c8:	d9 f7       	brne	.-10     	; 0x28c0 <debugBallast+0xbe>
    28ca:	82 e1       	ldi	r24, 0x12	; 18
    28cc:	61 e0       	ldi	r22, 0x01	; 1
    28ce:	a7 01       	movw	r20, r14
    28d0:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <i2cMasterSendNI>
    28d4:	88 23       	and	r24, r24
    28d6:	91 f7       	brne	.-28     	; 0x28bc <debugBallast+0xba>
	{
		_delay_ms(500);
	}
	lprintf("out\n");
    28d8:	00 d0       	rcall	.+0      	; 0x28da <debugBallast+0xd8>
    28da:	83 ed       	ldi	r24, 0xD3	; 211
    28dc:	91 e0       	ldi	r25, 0x01	; 1
    28de:	ed b7       	in	r30, 0x3d	; 61
    28e0:	fe b7       	in	r31, 0x3e	; 62
    28e2:	92 83       	std	Z+2, r25	; 0x02
    28e4:	81 83       	std	Z+1, r24	; 0x01
    28e6:	0e 94 77 13 	call	0x26ee	; 0x26ee <lprintf>
}
    28ea:	0f 90       	pop	r0
    28ec:	0f 90       	pop	r0
    28ee:	0f 90       	pop	r0
    28f0:	cf 91       	pop	r28
    28f2:	df 91       	pop	r29
    28f4:	1f 91       	pop	r17
    28f6:	0f 91       	pop	r16
    28f8:	ff 90       	pop	r15
    28fa:	ef 90       	pop	r14
    28fc:	08 95       	ret

000028fe <ioinit>:
}

void ioinit (void)
{
    //1 = output, 0 = input
    DDRA = 0b00010000;
    28fe:	80 e1       	ldi	r24, 0x10	; 16
    2900:	81 b9       	out	0x01, r24	; 1
    DDRB = 0b11111111; //PB4 = MISO
    2902:	8f ef       	ldi	r24, 0xFF	; 255
    2904:	84 b9       	out	0x04, r24	; 4
    DDRC = 0b11111111; //
    2906:	87 b9       	out	0x07, r24	; 7
    DDRD = 0b11011010; //PORTD (RX on PD0)
    2908:	8a ed       	ldi	r24, 0xDA	; 218
    290a:	8a b9       	out	0x0a, r24	; 10

    PORTD |= _BV(TAKEOFFPIN);
    290c:	5d 9a       	sbi	0x0b, 5	; 11

    XCLR_P |= _BV(XCLR);
    290e:	14 9a       	sbi	0x02, 4	; 2
    PORTB &= ~_BV(0) & ~_BV(1);
    2910:	85 b1       	in	r24, 0x05	; 5
    2912:	8c 7f       	andi	r24, 0xFC	; 252
    2914:	85 b9       	out	0x05, r24	; 5

    UBRR1H = MYUBRR >> 8;
    2916:	10 92 cd 00 	sts	0x00CD, r1
    UBRR1L = MYUBRR;
    291a:	8c e0       	ldi	r24, 0x0C	; 12
    291c:	80 93 cc 00 	sts	0x00CC, r24
    UCSR1B = (1<<RXEN1)|(1<<TXEN1);
    2920:	88 e1       	ldi	r24, 0x18	; 24
    2922:	80 93 c9 00 	sts	0x00C9, r24


    stdout = &mystdout; //Required for printf init
    2926:	8c e4       	ldi	r24, 0x4C	; 76
    2928:	92 e0       	ldi	r25, 0x02	; 2
    292a:	90 93 8e 04 	sts	0x048E, r25
    292e:	80 93 8d 04 	sts	0x048D, r24

    i2cInit();
    2932:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <i2cInit>
    //i2cSetBitrate(10);

}
    2936:	08 95       	ret

00002938 <now>:

}


inline uint32_t now(void)
{
    2938:	4f 92       	push	r4
    293a:	5f 92       	push	r5
    293c:	7f 92       	push	r7
    293e:	8f 92       	push	r8
    2940:	9f 92       	push	r9
    2942:	af 92       	push	r10
    2944:	bf 92       	push	r11
    2946:	cf 92       	push	r12
    2948:	df 92       	push	r13
    294a:	ef 92       	push	r14
    294c:	ff 92       	push	r15
    294e:	0f 93       	push	r16
    2950:	1f 93       	push	r17
    2952:	df 93       	push	r29
    2954:	cf 93       	push	r28
    2956:	00 d0       	rcall	.+0      	; 0x2958 <now+0x20>
    2958:	00 d0       	rcall	.+0      	; 0x295a <now+0x22>
    295a:	cd b7       	in	r28, 0x3d	; 61
    295c:	de b7       	in	r29, 0x3e	; 62
	uint8_t seconds, minutes, hours, days;
	uint8_t error;
	error = getTime(&seconds, &minutes, &hours, &days);
    295e:	8e 01       	movw	r16, r28
    2960:	0e 5f       	subi	r16, 0xFE	; 254
    2962:	1f 4f       	sbci	r17, 0xFF	; 255
    2964:	33 e0       	ldi	r19, 0x03	; 3
    2966:	e3 2e       	mov	r14, r19
    2968:	f1 2c       	mov	r15, r1
    296a:	ec 0e       	add	r14, r28
    296c:	fd 1e       	adc	r15, r29
    296e:	24 e0       	ldi	r18, 0x04	; 4
    2970:	c2 2e       	mov	r12, r18
    2972:	d1 2c       	mov	r13, r1
    2974:	cc 0e       	add	r12, r28
    2976:	dd 1e       	adc	r13, r29
    2978:	5e 01       	movw	r10, r28
    297a:	08 94       	sec
    297c:	a1 1c       	adc	r10, r1
    297e:	b1 1c       	adc	r11, r1
    2980:	c5 01       	movw	r24, r10
    2982:	b8 01       	movw	r22, r16
    2984:	a7 01       	movw	r20, r14
    2986:	96 01       	movw	r18, r12
    2988:	0e 94 0a 0c 	call	0x1814	; 0x1814 <getTime>
    298c:	9c e2       	ldi	r25, 0x2C	; 44
    298e:	49 2e       	mov	r4, r25
    2990:	91 e0       	ldi	r25, 0x01	; 1
    2992:	59 2e       	mov	r5, r25
	while(error != 0)
	{
		_delay_ms(50);
		error = getTime(&seconds, &minutes, &hours, &days);
    2994:	70 2e       	mov	r7, r16
    2996:	81 2e       	mov	r8, r17
    2998:	9e 2c       	mov	r9, r14
    299a:	ef 2c       	mov	r14, r15
    299c:	0c 2d       	mov	r16, r12
    299e:	cd 2c       	mov	r12, r13
    29a0:	1a 2d       	mov	r17, r10
    29a2:	ab 2c       	mov	r10, r11
    29a4:	11 c0       	rjmp	.+34     	; 0x29c8 <now+0x90>
inline uint32_t now(void)
{
	uint8_t seconds, minutes, hours, days;
	uint8_t error;
	error = getTime(&seconds, &minutes, &hours, &days);
	while(error != 0)
    29a6:	84 ef       	ldi	r24, 0xF4	; 244
    29a8:	91 e0       	ldi	r25, 0x01	; 1
    29aa:	f2 01       	movw	r30, r4
    29ac:	31 97       	sbiw	r30, 0x01	; 1
    29ae:	f1 f7       	brne	.-4      	; 0x29ac <now+0x74>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29b2:	d9 f7       	brne	.-10     	; 0x29aa <now+0x72>
	{
		_delay_ms(50);
		error = getTime(&seconds, &minutes, &hours, &days);
    29b4:	81 2f       	mov	r24, r17
    29b6:	9a 2d       	mov	r25, r10
    29b8:	67 2d       	mov	r22, r7
    29ba:	78 2d       	mov	r23, r8
    29bc:	49 2d       	mov	r20, r9
    29be:	5e 2d       	mov	r21, r14
    29c0:	20 2f       	mov	r18, r16
    29c2:	3c 2d       	mov	r19, r12
    29c4:	0e 94 0a 0c 	call	0x1814	; 0x1814 <getTime>
inline uint32_t now(void)
{
	uint8_t seconds, minutes, hours, days;
	uint8_t error;
	error = getTime(&seconds, &minutes, &hours, &days);
	while(error != 0)
    29c8:	88 23       	and	r24, r24
    29ca:	69 f7       	brne	.-38     	; 0x29a6 <now+0x6e>
	{
		_delay_ms(50);
		error = getTime(&seconds, &minutes, &hours, &days);
	}
	return getEpochSeconds(seconds, minutes, hours, days);
    29cc:	89 81       	ldd	r24, Y+1	; 0x01
    29ce:	6a 81       	ldd	r22, Y+2	; 0x02
    29d0:	4b 81       	ldd	r20, Y+3	; 0x03
    29d2:	2c 81       	ldd	r18, Y+4	; 0x04
    29d4:	0e 94 4d 28 	call	0x509a	; 0x509a <getEpochSeconds>
}
    29d8:	0f 90       	pop	r0
    29da:	0f 90       	pop	r0
    29dc:	0f 90       	pop	r0
    29de:	0f 90       	pop	r0
    29e0:	cf 91       	pop	r28
    29e2:	df 91       	pop	r29
    29e4:	1f 91       	pop	r17
    29e6:	0f 91       	pop	r16
    29e8:	ff 90       	pop	r15
    29ea:	ef 90       	pop	r14
    29ec:	df 90       	pop	r13
    29ee:	cf 90       	pop	r12
    29f0:	bf 90       	pop	r11
    29f2:	af 90       	pop	r10
    29f4:	9f 90       	pop	r9
    29f6:	8f 90       	pop	r8
    29f8:	7f 90       	pop	r7
    29fa:	5f 90       	pop	r5
    29fc:	4f 90       	pop	r4
    29fe:	08 95       	ret

00002a00 <ballastStaticTickle>:
	}
}


void ballastStaticTickle(uint32_t time)
{
    2a00:	8f 92       	push	r8
    2a02:	9f 92       	push	r9
    2a04:	af 92       	push	r10
    2a06:	bf 92       	push	r11
    2a08:	df 92       	push	r13
    2a0a:	ef 92       	push	r14
    2a0c:	ff 92       	push	r15
    2a0e:	0f 93       	push	r16
    2a10:	1f 93       	push	r17
    2a12:	df 93       	push	r29
    2a14:	cf 93       	push	r28
    2a16:	00 d0       	rcall	.+0      	; 0x2a18 <ballastStaticTickle+0x18>
    2a18:	0f 92       	push	r0
    2a1a:	cd b7       	in	r28, 0x3d	; 61
    2a1c:	de b7       	in	r29, 0x3e	; 62
    2a1e:	7b 01       	movw	r14, r22
    2a20:	8c 01       	movw	r16, r24
	#ifdef FCPUDEBUG
		lprintf_P(PSTR("In ballast tickle\n"));
    2a22:	00 d0       	rcall	.+0      	; 0x2a24 <ballastStaticTickle+0x24>
    2a24:	89 e2       	ldi	r24, 0x29	; 41
    2a26:	91 e0       	ldi	r25, 0x01	; 1
    2a28:	ad b7       	in	r26, 0x3d	; 61
    2a2a:	be b7       	in	r27, 0x3e	; 62
    2a2c:	12 96       	adiw	r26, 0x02	; 2
    2a2e:	9c 93       	st	X, r25
    2a30:	8e 93       	st	-X, r24
    2a32:	11 97       	sbiw	r26, 0x01	; 1
    2a34:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
	#endif
	if((time - lastBallastTime) > 3600)
    2a38:	80 91 54 04 	lds	r24, 0x0454
    2a3c:	90 91 55 04 	lds	r25, 0x0455
    2a40:	a0 91 56 04 	lds	r26, 0x0456
    2a44:	b0 91 57 04 	lds	r27, 0x0457
    2a48:	a8 01       	movw	r20, r16
    2a4a:	97 01       	movw	r18, r14
    2a4c:	28 1b       	sub	r18, r24
    2a4e:	39 0b       	sbc	r19, r25
    2a50:	4a 0b       	sbc	r20, r26
    2a52:	5b 0b       	sbc	r21, r27
    2a54:	da 01       	movw	r26, r20
    2a56:	c9 01       	movw	r24, r18
    2a58:	0f 90       	pop	r0
    2a5a:	0f 90       	pop	r0
    2a5c:	81 51       	subi	r24, 0x11	; 17
    2a5e:	9e 40       	sbci	r25, 0x0E	; 14
    2a60:	a0 40       	sbci	r26, 0x00	; 0
    2a62:	b0 40       	sbci	r27, 0x00	; 0
    2a64:	08 f4       	brcc	.+2      	; 0x2a68 <ballastStaticTickle+0x68>
    2a66:	49 c0       	rjmp	.+146    	; 0x2afa <ballastStaticTickle+0xfa>
	{
		uint8_t retVal;
		uint8_t dataToSend[3] = {20,00,01};
    2a68:	de 01       	movw	r26, r28
    2a6a:	11 96       	adiw	r26, 0x01	; 1
    2a6c:	ea e5       	ldi	r30, 0x5A	; 90
    2a6e:	f2 e0       	ldi	r31, 0x02	; 2
    2a70:	83 e0       	ldi	r24, 0x03	; 3
    2a72:	01 90       	ld	r0, Z+
    2a74:	0d 92       	st	X+, r0
    2a76:	81 50       	subi	r24, 0x01	; 1
    2a78:	e1 f7       	brne	.-8      	; 0x2a72 <ballastStaticTickle+0x72>
    2a7a:	dd 24       	eor	r13, r13
		uint8_t errorTolerance = 0;
		while( ((retVal = i2cMasterSendNI(0x09, 3, dataToSend)) != I2C_OK) && errorTolerance < CRITCOMFAIL)
    2a7c:	4e 01       	movw	r8, r28
    2a7e:	08 94       	sec
    2a80:	81 1c       	adc	r8, r1
    2a82:	91 1c       	adc	r9, r1
    2a84:	4c e2       	ldi	r20, 0x2C	; 44
    2a86:	a4 2e       	mov	r10, r20
    2a88:	41 e0       	ldi	r20, 0x01	; 1
    2a8a:	b4 2e       	mov	r11, r20
    2a8c:	08 c0       	rjmp	.+16     	; 0x2a9e <ballastStaticTickle+0x9e>
    2a8e:	88 e8       	ldi	r24, 0x88	; 136
    2a90:	93 e1       	ldi	r25, 0x13	; 19
    2a92:	f5 01       	movw	r30, r10
    2a94:	31 97       	sbiw	r30, 0x01	; 1
    2a96:	f1 f7       	brne	.-4      	; 0x2a94 <ballastStaticTickle+0x94>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a98:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a9a:	d9 f7       	brne	.-10     	; 0x2a92 <ballastStaticTickle+0x92>
		{
			_delay_ms(500);
			errorTolerance++;
    2a9c:	d3 94       	inc	r13
	if((time - lastBallastTime) > 3600)
	{
		uint8_t retVal;
		uint8_t dataToSend[3] = {20,00,01};
		uint8_t errorTolerance = 0;
		while( ((retVal = i2cMasterSendNI(0x09, 3, dataToSend)) != I2C_OK) && errorTolerance < CRITCOMFAIL)
    2a9e:	89 e0       	ldi	r24, 0x09	; 9
    2aa0:	63 e0       	ldi	r22, 0x03	; 3
    2aa2:	a4 01       	movw	r20, r8
    2aa4:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <i2cMasterSendNI>
    2aa8:	88 23       	and	r24, r24
    2aaa:	21 f0       	breq	.+8      	; 0x2ab4 <ballastStaticTickle+0xb4>
    2aac:	49 e1       	ldi	r20, 0x19	; 25
    2aae:	d4 16       	cp	r13, r20
    2ab0:	71 f7       	brne	.-36     	; 0x2a8e <ballastStaticTickle+0x8e>
    2ab2:	03 c0       	rjmp	.+6      	; 0x2aba <ballastStaticTickle+0xba>
		{
			_delay_ms(500);
			errorTolerance++;
		}
		if(errorTolerance >= CRITCOMFAIL)
    2ab4:	58 e1       	ldi	r21, 0x18	; 24
    2ab6:	5d 15       	cp	r21, r13
    2ab8:	b8 f4       	brcc	.+46     	; 0x2ae8 <ballastStaticTickle+0xe8>
		{
			#ifdef FCPUDEBUG
				lprintf_P(PSTR("Ballast Error\n"));
    2aba:	00 d0       	rcall	.+0      	; 0x2abc <ballastStaticTickle+0xbc>
    2abc:	8a e1       	ldi	r24, 0x1A	; 26
    2abe:	91 e0       	ldi	r25, 0x01	; 1
    2ac0:	ad b7       	in	r26, 0x3d	; 61
    2ac2:	be b7       	in	r27, 0x3e	; 62
    2ac4:	12 96       	adiw	r26, 0x02	; 2
    2ac6:	9c 93       	st	X, r25
    2ac8:	8e 93       	st	-X, r24
    2aca:	11 97       	sbiw	r26, 0x01	; 1
    2acc:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
			#endif
			statusCode = (statusCode & 0xFFFD) | (1 << 1);
    2ad0:	80 91 2f 03 	lds	r24, 0x032F
    2ad4:	90 91 30 03 	lds	r25, 0x0330
    2ad8:	82 60       	ori	r24, 0x02	; 2
    2ada:	90 93 30 03 	sts	0x0330, r25
    2ade:	80 93 2f 03 	sts	0x032F, r24
    2ae2:	0f 90       	pop	r0
    2ae4:	0f 90       	pop	r0
    2ae6:	09 c0       	rjmp	.+18     	; 0x2afa <ballastStaticTickle+0xfa>
		} else {
			statusCode = (statusCode & 0xFFFD);
    2ae8:	80 91 2f 03 	lds	r24, 0x032F
    2aec:	90 91 30 03 	lds	r25, 0x0330
    2af0:	8d 7f       	andi	r24, 0xFD	; 253
    2af2:	90 93 30 03 	sts	0x0330, r25
    2af6:	80 93 2f 03 	sts	0x032F, r24
		}
	}
	scheduleQueueAdd(&ballastStaticTickle, time+600);
    2afa:	28 e5       	ldi	r18, 0x58	; 88
    2afc:	32 e0       	ldi	r19, 0x02	; 2
    2afe:	40 e0       	ldi	r20, 0x00	; 0
    2b00:	50 e0       	ldi	r21, 0x00	; 0
    2b02:	e2 0e       	add	r14, r18
    2b04:	f3 1e       	adc	r15, r19
    2b06:	04 1f       	adc	r16, r20
    2b08:	15 1f       	adc	r17, r21
    2b0a:	80 e0       	ldi	r24, 0x00	; 0
    2b0c:	95 e1       	ldi	r25, 0x15	; 21
    2b0e:	b8 01       	movw	r22, r16
    2b10:	a7 01       	movw	r20, r14
    2b12:	0e 94 75 2f 	call	0x5eea	; 0x5eea <scheduleQueueAdd>
}
    2b16:	0f 90       	pop	r0
    2b18:	0f 90       	pop	r0
    2b1a:	0f 90       	pop	r0
    2b1c:	cf 91       	pop	r28
    2b1e:	df 91       	pop	r29
    2b20:	1f 91       	pop	r17
    2b22:	0f 91       	pop	r16
    2b24:	ff 90       	pop	r15
    2b26:	ef 90       	pop	r14
    2b28:	df 90       	pop	r13
    2b2a:	bf 90       	pop	r11
    2b2c:	af 90       	pop	r10
    2b2e:	9f 90       	pop	r9
    2b30:	8f 90       	pop	r8
    2b32:	08 95       	ret

00002b34 <rapidHFXmit>:

//Simply add this to the scheduler queue if you want it.
//Note: needs to be able to remove itself from the queue.

void rapidHFXmit(uint32_t time)
{
    2b34:	ef 92       	push	r14
    2b36:	ff 92       	push	r15
    2b38:	0f 93       	push	r16
    2b3a:	1f 93       	push	r17
    2b3c:	7b 01       	movw	r14, r22
    2b3e:	8c 01       	movw	r16, r24
	#ifdef FCPUDEBUG
		lprintf_P(PSTR("In Rapid HF TX\n"));
    2b40:	00 d0       	rcall	.+0      	; 0x2b42 <rapidHFXmit+0xe>
    2b42:	8c e3       	ldi	r24, 0x3C	; 60
    2b44:	91 e0       	ldi	r25, 0x01	; 1
    2b46:	ed b7       	in	r30, 0x3d	; 61
    2b48:	fe b7       	in	r31, 0x3e	; 62
    2b4a:	92 83       	std	Z+2, r25	; 0x02
    2b4c:	81 83       	std	Z+1, r24	; 0x01
    2b4e:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
	#endif
	if(rapidHFEnable == 1)
    2b52:	0f 90       	pop	r0
    2b54:	0f 90       	pop	r0
    2b56:	80 91 32 03 	lds	r24, 0x0332
    2b5a:	81 30       	cpi	r24, 0x01	; 1
    2b5c:	71 f4       	brne	.+28     	; 0x2b7a <rapidHFXmit+0x46>
	{
		//send comm controller rapid HF command
		scheduleQueueAdd(&rapidHFXmit, time+eeprom_read_byte(&EEhfRapidTransmit));
    2b5e:	81 e2       	ldi	r24, 0x21	; 33
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	0e 94 34 3d 	call	0x7a68	; 0x7a68 <__eerd_byte_m324p>
    2b66:	e8 0e       	add	r14, r24
    2b68:	f1 1c       	adc	r15, r1
    2b6a:	01 1d       	adc	r16, r1
    2b6c:	11 1d       	adc	r17, r1
    2b6e:	8a e9       	ldi	r24, 0x9A	; 154
    2b70:	95 e1       	ldi	r25, 0x15	; 21
    2b72:	b8 01       	movw	r22, r16
    2b74:	a7 01       	movw	r20, r14
    2b76:	0e 94 75 2f 	call	0x5eea	; 0x5eea <scheduleQueueAdd>
	}
}
    2b7a:	1f 91       	pop	r17
    2b7c:	0f 91       	pop	r16
    2b7e:	ff 90       	pop	r15
    2b80:	ef 90       	pop	r14
    2b82:	08 95       	ret

00002b84 <updateCommHFTelemetry>:


}

void updateCommHFTelemetry(uint32_t time)
{
    2b84:	ef 92       	push	r14
    2b86:	ff 92       	push	r15
    2b88:	0f 93       	push	r16
    2b8a:	1f 93       	push	r17
    2b8c:	7b 01       	movw	r14, r22
    2b8e:	8c 01       	movw	r16, r24
	#ifdef FCPUDEBUG
		lprintf_P(PSTR("In Update HF Telemetry\n"));
    2b90:	00 d0       	rcall	.+0      	; 0x2b92 <updateCommHFTelemetry+0xe>
    2b92:	8c e4       	ldi	r24, 0x4C	; 76
    2b94:	91 e0       	ldi	r25, 0x01	; 1
    2b96:	ad b7       	in	r26, 0x3d	; 61
    2b98:	be b7       	in	r27, 0x3e	; 62
    2b9a:	12 96       	adiw	r26, 0x02	; 2
    2b9c:	9c 93       	st	X, r25
    2b9e:	8e 93       	st	-X, r24
    2ba0:	11 97       	sbiw	r26, 0x01	; 1
    2ba2:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
	//send raw pack voltage
	//send top temp

	//send to comm controller

	scheduleQueueAdd(&updateCommHFTelemetry, time+60);
    2ba6:	0f 90       	pop	r0
    2ba8:	0f 90       	pop	r0
    2baa:	8c e3       	ldi	r24, 0x3C	; 60
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	a0 e0       	ldi	r26, 0x00	; 0
    2bb0:	b0 e0       	ldi	r27, 0x00	; 0
    2bb2:	e8 0e       	add	r14, r24
    2bb4:	f9 1e       	adc	r15, r25
    2bb6:	0a 1f       	adc	r16, r26
    2bb8:	1b 1f       	adc	r17, r27
    2bba:	82 ec       	ldi	r24, 0xC2	; 194
    2bbc:	95 e1       	ldi	r25, 0x15	; 21
    2bbe:	b8 01       	movw	r22, r16
    2bc0:	a7 01       	movw	r20, r14
    2bc2:	0e 94 75 2f 	call	0x5eea	; 0x5eea <scheduleQueueAdd>
}
    2bc6:	1f 91       	pop	r17
    2bc8:	0f 91       	pop	r16
    2bca:	ff 90       	pop	r15
    2bcc:	ef 90       	pop	r14
    2bce:	08 95       	ret

00002bd0 <autoBallast>:
uint8_t ballastBabySit;
int16_t babySitVertSpeed;
int16_t currentTargetVspeed;
uint32_t lastBallastTime;
void autoBallast(uint32_t time)
{
    2bd0:	6f 92       	push	r6
    2bd2:	7f 92       	push	r7
    2bd4:	8f 92       	push	r8
    2bd6:	9f 92       	push	r9
    2bd8:	af 92       	push	r10
    2bda:	bf 92       	push	r11
    2bdc:	cf 92       	push	r12
    2bde:	df 92       	push	r13
    2be0:	ef 92       	push	r14
    2be2:	ff 92       	push	r15
    2be4:	0f 93       	push	r16
    2be6:	1f 93       	push	r17
    2be8:	df 93       	push	r29
    2bea:	cf 93       	push	r28
    2bec:	cd b7       	in	r28, 0x3d	; 61
    2bee:	de b7       	in	r29, 0x3e	; 62
    2bf0:	67 97       	sbiw	r28, 0x17	; 23
    2bf2:	0f b6       	in	r0, 0x3f	; 63
    2bf4:	f8 94       	cli
    2bf6:	de bf       	out	0x3e, r29	; 62
    2bf8:	0f be       	out	0x3f, r0	; 63
    2bfa:	cd bf       	out	0x3d, r28	; 61
    2bfc:	7b 01       	movw	r14, r22
    2bfe:	8c 01       	movw	r16, r24
	#ifdef FCPUDEBUG
		lprintf_P(PSTR("In autoBallast\n"));
    2c00:	00 d0       	rcall	.+0      	; 0x2c02 <autoBallast+0x32>
    2c02:	81 e5       	ldi	r24, 0x51	; 81
    2c04:	93 e0       	ldi	r25, 0x03	; 3
    2c06:	ad b7       	in	r26, 0x3d	; 61
    2c08:	be b7       	in	r27, 0x3e	; 62
    2c0a:	12 96       	adiw	r26, 0x02	; 2
    2c0c:	9c 93       	st	X, r25
    2c0e:	8e 93       	st	-X, r24
    2c10:	11 97       	sbiw	r26, 0x01	; 1
    2c12:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
	#endif
	uint8_t retVal;
	uint16_t targetAltitude = eeprom_read_word(&EEballastTargetAltitude);
    2c16:	0f 90       	pop	r0
    2c18:	0f 90       	pop	r0
    2c1a:	85 e0       	ldi	r24, 0x05	; 5
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
    2c22:	5c 01       	movw	r10, r24
	uint16_t ballastSafety = eeprom_read_word(&EEballastSafetyAltThresh);
    2c24:	8f e0       	ldi	r24, 0x0F	; 15
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
    2c2c:	4c 01       	movw	r8, r24
	uint8_t ballastDisabled = eeprom_read_byte(&EEautoBallastDisable);
    2c2e:	81 e1       	ldi	r24, 0x11	; 17
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	0e 94 34 3d 	call	0x7a68	; 0x7a68 <__eerd_byte_m324p>
    2c36:	78 2e       	mov	r7, r24

	#ifdef FCPUDEBUG
		lprintf_P(PSTR("Got EEPROM Vars\n"));
    2c38:	00 d0       	rcall	.+0      	; 0x2c3a <autoBallast+0x6a>
    2c3a:	80 e4       	ldi	r24, 0x40	; 64
    2c3c:	93 e0       	ldi	r25, 0x03	; 3
    2c3e:	ed b7       	in	r30, 0x3d	; 61
    2c40:	fe b7       	in	r31, 0x3e	; 62
    2c42:	92 83       	std	Z+2, r25	; 0x02
    2c44:	81 83       	std	Z+1, r24	; 0x01
    2c46:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
	#endif

	struct gpsData myGPS = currentPositionData;
    2c4a:	de 01       	movw	r26, r28
    2c4c:	12 96       	adiw	r26, 0x02	; 2
    2c4e:	eb e3       	ldi	r30, 0x3B	; 59
    2c50:	f4 e0       	ldi	r31, 0x04	; 4
    2c52:	86 e1       	ldi	r24, 0x16	; 22
    2c54:	01 90       	ld	r0, Z+
    2c56:	0d 92       	st	X+, r0
    2c58:	81 50       	subi	r24, 0x01	; 1
    2c5a:	e1 f7       	brne	.-8      	; 0x2c54 <autoBallast+0x84>
    2c5c:	cd 88       	ldd	r12, Y+21	; 0x15
    2c5e:	de 88       	ldd	r13, Y+22	; 0x16

	//Failure mode: Try to maintain stability (moderate upward float)
	uint16_t thisAltitude = myGPS.altitude;

	#ifdef FCPUDEBUG
		lprintf_P(PSTR("check 4 babysit\n"));
    2c60:	8f e2       	ldi	r24, 0x2F	; 47
    2c62:	93 e0       	ldi	r25, 0x03	; 3
    2c64:	ad b7       	in	r26, 0x3d	; 61
    2c66:	be b7       	in	r27, 0x3e	; 62
    2c68:	12 96       	adiw	r26, 0x02	; 2
    2c6a:	9c 93       	st	X, r25
    2c6c:	8e 93       	st	-X, r24
    2c6e:	11 97       	sbiw	r26, 0x01	; 1
    2c70:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
	#endif

	if(ballastBabySit == 1)
    2c74:	0f 90       	pop	r0
    2c76:	0f 90       	pop	r0
    2c78:	80 91 5a 04 	lds	r24, 0x045A
    2c7c:	81 30       	cpi	r24, 0x01	; 1
    2c7e:	09 f0       	breq	.+2      	; 0x2c82 <autoBallast+0xb2>
    2c80:	9a c0       	rjmp	.+308    	; 0x2db6 <autoBallast+0x1e6>
	{
			#ifdef FCPUDEBUG
				lprintf_P(PSTR("Ballast Babysit Enable!\n"));
    2c82:	00 d0       	rcall	.+0      	; 0x2c84 <autoBallast+0xb4>
    2c84:	86 e1       	ldi	r24, 0x16	; 22
    2c86:	93 e0       	ldi	r25, 0x03	; 3
    2c88:	ed b7       	in	r30, 0x3d	; 61
    2c8a:	fe b7       	in	r31, 0x3e	; 62
    2c8c:	92 83       	std	Z+2, r25	; 0x02
    2c8e:	81 83       	std	Z+1, r24	; 0x01
    2c90:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
			#endif
		if(vSpeedAvg > (currentTargetVspeed + babySitVertSpeed)/2)
    2c94:	80 91 51 04 	lds	r24, 0x0451
    2c98:	90 91 52 04 	lds	r25, 0x0452
    2c9c:	20 91 58 04 	lds	r18, 0x0458
    2ca0:	30 91 59 04 	lds	r19, 0x0459
    2ca4:	82 0f       	add	r24, r18
    2ca6:	93 1f       	adc	r25, r19
    2ca8:	62 e0       	ldi	r22, 0x02	; 2
    2caa:	70 e0       	ldi	r23, 0x00	; 0
    2cac:	0e 94 91 39 	call	0x7322	; 0x7322 <__divmodhi4>
    2cb0:	0f 90       	pop	r0
    2cb2:	0f 90       	pop	r0
    2cb4:	80 91 38 04 	lds	r24, 0x0438
    2cb8:	90 91 39 04 	lds	r25, 0x0439
    2cbc:	68 17       	cp	r22, r24
    2cbe:	79 07       	cpc	r23, r25
    2cc0:	0c f0       	brlt	.+2      	; 0x2cc4 <autoBallast+0xf4>
    2cc2:	6d c0       	rjmp	.+218    	; 0x2d9e <autoBallast+0x1ce>
		{
			#ifdef FCPUDEBUG
				lprintf_P(PSTR("Babysit: 1/2 T reached\n"));
    2cc4:	00 d0       	rcall	.+0      	; 0x2cc6 <autoBallast+0xf6>
    2cc6:	8e ef       	ldi	r24, 0xFE	; 254
    2cc8:	92 e0       	ldi	r25, 0x02	; 2
    2cca:	ad b7       	in	r26, 0x3d	; 61
    2ccc:	be b7       	in	r27, 0x3e	; 62
    2cce:	12 96       	adiw	r26, 0x02	; 2
    2cd0:	9c 93       	st	X, r25
    2cd2:	8e 93       	st	-X, r24
    2cd4:	11 97       	sbiw	r26, 0x01	; 1
    2cd6:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
			#endif
			//Close ballast
			//Send i2c address 0x09, 0d18
			uint8_t data = 18;
    2cda:	82 e1       	ldi	r24, 0x12	; 18
    2cdc:	89 83       	std	Y+1, r24	; 0x01
    2cde:	dd 24       	eor	r13, r13
    2ce0:	0f 90       	pop	r0
    2ce2:	0f 90       	pop	r0
			uint8_t errorTolerance = 0;
			while( ((retVal = i2cMasterSendNI(BALLASTMODULE, 1, &data)) != I2C_OK) && errorTolerance < CRITCOMFAIL)
    2ce4:	3e 01       	movw	r6, r28
    2ce6:	08 94       	sec
    2ce8:	61 1c       	adc	r6, r1
    2cea:	71 1c       	adc	r7, r1
    2cec:	ac e2       	ldi	r26, 0x2C	; 44
    2cee:	8a 2e       	mov	r8, r26
    2cf0:	a1 e0       	ldi	r26, 0x01	; 1
    2cf2:	9a 2e       	mov	r9, r26
			{
				_delay_ms(500);
				#ifdef FCPUDEBUG
					lprintf_P(PSTR("First Infinite Loop\n"));
    2cf4:	f9 ee       	ldi	r31, 0xE9	; 233
    2cf6:	af 2e       	mov	r10, r31
    2cf8:	f2 e0       	ldi	r31, 0x02	; 2
    2cfa:	bf 2e       	mov	r11, r31
    2cfc:	11 c0       	rjmp	.+34     	; 0x2d20 <autoBallast+0x150>
			#endif
			//Close ballast
			//Send i2c address 0x09, 0d18
			uint8_t data = 18;
			uint8_t errorTolerance = 0;
			while( ((retVal = i2cMasterSendNI(BALLASTMODULE, 1, &data)) != I2C_OK) && errorTolerance < CRITCOMFAIL)
    2cfe:	88 e8       	ldi	r24, 0x88	; 136
    2d00:	93 e1       	ldi	r25, 0x13	; 19
    2d02:	f4 01       	movw	r30, r8
    2d04:	31 97       	sbiw	r30, 0x01	; 1
    2d06:	f1 f7       	brne	.-4      	; 0x2d04 <autoBallast+0x134>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d08:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d0a:	d9 f7       	brne	.-10     	; 0x2d02 <autoBallast+0x132>
			{
				_delay_ms(500);
				#ifdef FCPUDEBUG
					lprintf_P(PSTR("First Infinite Loop\n"));
    2d0c:	00 d0       	rcall	.+0      	; 0x2d0e <autoBallast+0x13e>
    2d0e:	ed b7       	in	r30, 0x3d	; 61
    2d10:	fe b7       	in	r31, 0x3e	; 62
    2d12:	b2 82       	std	Z+2, r11	; 0x02
    2d14:	a1 82       	std	Z+1, r10	; 0x01
    2d16:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
				#endif
				errorTolerance++;
    2d1a:	d3 94       	inc	r13
    2d1c:	0f 90       	pop	r0
    2d1e:	0f 90       	pop	r0
			#endif
			//Close ballast
			//Send i2c address 0x09, 0d18
			uint8_t data = 18;
			uint8_t errorTolerance = 0;
			while( ((retVal = i2cMasterSendNI(BALLASTMODULE, 1, &data)) != I2C_OK) && errorTolerance < CRITCOMFAIL)
    2d20:	82 e1       	ldi	r24, 0x12	; 18
    2d22:	61 e0       	ldi	r22, 0x01	; 1
    2d24:	a3 01       	movw	r20, r6
    2d26:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <i2cMasterSendNI>
    2d2a:	88 23       	and	r24, r24
    2d2c:	21 f0       	breq	.+8      	; 0x2d36 <autoBallast+0x166>
    2d2e:	f9 e1       	ldi	r31, 0x19	; 25
    2d30:	df 16       	cp	r13, r31
    2d32:	29 f7       	brne	.-54     	; 0x2cfe <autoBallast+0x12e>
    2d34:	03 c0       	rjmp	.+6      	; 0x2d3c <autoBallast+0x16c>
				#ifdef FCPUDEBUG
					lprintf_P(PSTR("First Infinite Loop\n"));
				#endif
				errorTolerance++;
			}
			if(errorTolerance >= CRITCOMFAIL)
    2d36:	88 e1       	ldi	r24, 0x18	; 24
    2d38:	8d 15       	cp	r24, r13
    2d3a:	b8 f4       	brcc	.+46     	; 0x2d6a <autoBallast+0x19a>
			{
				#ifdef FCPUDEBUG
					lprintf_P(PSTR("Ballast Error\n"));
    2d3c:	00 d0       	rcall	.+0      	; 0x2d3e <autoBallast+0x16e>
    2d3e:	8a ed       	ldi	r24, 0xDA	; 218
    2d40:	92 e0       	ldi	r25, 0x02	; 2
    2d42:	ad b7       	in	r26, 0x3d	; 61
    2d44:	be b7       	in	r27, 0x3e	; 62
    2d46:	12 96       	adiw	r26, 0x02	; 2
    2d48:	9c 93       	st	X, r25
    2d4a:	8e 93       	st	-X, r24
    2d4c:	11 97       	sbiw	r26, 0x01	; 1
    2d4e:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
				#endif
				statusCode = (statusCode & 0xFFFD) | (1 << 1);
    2d52:	80 91 2f 03 	lds	r24, 0x032F
    2d56:	90 91 30 03 	lds	r25, 0x0330
    2d5a:	82 60       	ori	r24, 0x02	; 2
    2d5c:	90 93 30 03 	sts	0x0330, r25
    2d60:	80 93 2f 03 	sts	0x032F, r24
    2d64:	0f 90       	pop	r0
    2d66:	0f 90       	pop	r0
    2d68:	09 c0       	rjmp	.+18     	; 0x2d7c <autoBallast+0x1ac>
			} else {
				statusCode = (statusCode & 0xFFFD);
    2d6a:	80 91 2f 03 	lds	r24, 0x032F
    2d6e:	90 91 30 03 	lds	r25, 0x0330
    2d72:	8d 7f       	andi	r24, 0xFD	; 253
    2d74:	90 93 30 03 	sts	0x0330, r25
    2d78:	80 93 2f 03 	sts	0x032F, r24
			}
			scheduleQueueAdd(&autoBallast, time+60);
    2d7c:	8c e3       	ldi	r24, 0x3C	; 60
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	a0 e0       	ldi	r26, 0x00	; 0
    2d82:	b0 e0       	ldi	r27, 0x00	; 0
    2d84:	e8 0e       	add	r14, r24
    2d86:	f9 1e       	adc	r15, r25
    2d88:	0a 1f       	adc	r16, r26
    2d8a:	1b 1f       	adc	r17, r27
    2d8c:	88 ee       	ldi	r24, 0xE8	; 232
    2d8e:	95 e1       	ldi	r25, 0x15	; 21
    2d90:	b8 01       	movw	r22, r16
    2d92:	a7 01       	movw	r20, r14
    2d94:	0e 94 75 2f 	call	0x5eea	; 0x5eea <scheduleQueueAdd>
			ballastBabySit = 0;
    2d98:	10 92 5a 04 	sts	0x045A, r1
    2d9c:	45 c1       	rjmp	.+650    	; 0x3028 <autoBallast+0x458>
		} else {
			#ifdef FCPUDEBUG
				lprintf_P(PSTR("Babysit: Still Waiting\n"));
    2d9e:	00 d0       	rcall	.+0      	; 0x2da0 <autoBallast+0x1d0>
    2da0:	82 ec       	ldi	r24, 0xC2	; 194
    2da2:	92 e0       	ldi	r25, 0x02	; 2
    2da4:	ad b7       	in	r26, 0x3d	; 61
    2da6:	be b7       	in	r27, 0x3e	; 62
    2da8:	12 96       	adiw	r26, 0x02	; 2
    2daa:	9c 93       	st	X, r25
    2dac:	8e 93       	st	-X, r24
    2dae:	11 97       	sbiw	r26, 0x01	; 1
    2db0:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
    2db4:	be c0       	rjmp	.+380    	; 0x2f32 <autoBallast+0x362>
			scheduleQueueAdd(&autoBallast, time+10);
		}
	} else {

		#ifdef FCPUDEBUG
			lprintf_P(PSTR("No babysit necessary\n"));
    2db6:	00 d0       	rcall	.+0      	; 0x2db8 <autoBallast+0x1e8>
    2db8:	8c ea       	ldi	r24, 0xAC	; 172
    2dba:	92 e0       	ldi	r25, 0x02	; 2
    2dbc:	ad b7       	in	r26, 0x3d	; 61
    2dbe:	be b7       	in	r27, 0x3e	; 62
    2dc0:	12 96       	adiw	r26, 0x02	; 2
    2dc2:	9c 93       	st	X, r25
    2dc4:	8e 93       	st	-X, r24
    2dc6:	11 97       	sbiw	r26, 0x01	; 1
    2dc8:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
		#endif

		//If we're above the safety threshold
		if(ballastSafety < thisAltitude && ballastDisabled != 1)
    2dcc:	0f 90       	pop	r0
    2dce:	0f 90       	pop	r0
    2dd0:	8c 14       	cp	r8, r12
    2dd2:	9d 04       	cpc	r9, r13
    2dd4:	08 f0       	brcs	.+2      	; 0x2dd8 <autoBallast+0x208>
    2dd6:	be c0       	rjmp	.+380    	; 0x2f54 <autoBallast+0x384>
    2dd8:	b1 e0       	ldi	r27, 0x01	; 1
    2dda:	7b 16       	cp	r7, r27
    2ddc:	09 f4       	brne	.+2      	; 0x2de0 <autoBallast+0x210>
    2dde:	ba c0       	rjmp	.+372    	; 0x2f54 <autoBallast+0x384>
				//Switch to positive target velocity
			//else if current altitude is above target altitude
				//use negative target velocity
			//else if current altitude is below target altitude AND vertical velocity is below target
				//use zero target
			if(thisAltitude <= targetAltitude && vSpeedAvg > currentTargetVspeed)
    2de0:	ac 14       	cp	r10, r12
    2de2:	bd 04       	cpc	r11, r13
    2de4:	d8 f0       	brcs	.+54     	; 0x2e1c <autoBallast+0x24c>
    2de6:	20 91 38 04 	lds	r18, 0x0438
    2dea:	30 91 39 04 	lds	r19, 0x0439
    2dee:	80 91 58 04 	lds	r24, 0x0458
    2df2:	90 91 59 04 	lds	r25, 0x0459
    2df6:	82 17       	cp	r24, r18
    2df8:	93 07       	cpc	r25, r19
    2dfa:	34 f5       	brge	.+76     	; 0x2e48 <autoBallast+0x278>
			{
				#ifdef FCPUDEBUG
					lprintf_P(PSTR("Ballast: TVSpeed+\n"));
    2dfc:	00 d0       	rcall	.+0      	; 0x2dfe <autoBallast+0x22e>
    2dfe:	89 e9       	ldi	r24, 0x99	; 153
    2e00:	92 e0       	ldi	r25, 0x02	; 2
    2e02:	ed b7       	in	r30, 0x3d	; 61
    2e04:	fe b7       	in	r31, 0x3e	; 62
    2e06:	92 83       	std	Z+2, r25	; 0x02
    2e08:	81 83       	std	Z+1, r24	; 0x01
    2e0a:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
				#endif
				currentTargetVspeed = eeprom_read_word(&EEballastTargetPositiveVSpeed);
    2e0e:	0f 90       	pop	r0
    2e10:	0f 90       	pop	r0
    2e12:	87 e0       	ldi	r24, 0x07	; 7
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
    2e1a:	11 c0       	rjmp	.+34     	; 0x2e3e <autoBallast+0x26e>
			} else if(thisAltitude > targetAltitude)
			{
				#ifdef FCPUDEBUG
					lprintf_P(PSTR("Ballast: TVSpeed-\n"));
    2e1c:	00 d0       	rcall	.+0      	; 0x2e1e <autoBallast+0x24e>
    2e1e:	86 e8       	ldi	r24, 0x86	; 134
    2e20:	92 e0       	ldi	r25, 0x02	; 2
    2e22:	ad b7       	in	r26, 0x3d	; 61
    2e24:	be b7       	in	r27, 0x3e	; 62
    2e26:	12 96       	adiw	r26, 0x02	; 2
    2e28:	9c 93       	st	X, r25
    2e2a:	8e 93       	st	-X, r24
    2e2c:	11 97       	sbiw	r26, 0x01	; 1
    2e2e:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
				#endif
				currentTargetVspeed = eeprom_read_word(&EEballastTargetNegativeVSpeed);
    2e32:	0f 90       	pop	r0
    2e34:	0f 90       	pop	r0
    2e36:	89 e0       	ldi	r24, 0x09	; 9
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
    2e3e:	90 93 59 04 	sts	0x0459, r25
    2e42:	80 93 58 04 	sts	0x0458, r24
    2e46:	15 c0       	rjmp	.+42     	; 0x2e72 <autoBallast+0x2a2>
			} else if(thisAltitude < targetAltitude && vSpeedAvg < currentTargetVspeed)
    2e48:	ca 14       	cp	r12, r10
    2e4a:	db 04       	cpc	r13, r11
    2e4c:	90 f4       	brcc	.+36     	; 0x2e72 <autoBallast+0x2a2>
    2e4e:	28 17       	cp	r18, r24
    2e50:	39 07       	cpc	r19, r25
    2e52:	7c f4       	brge	.+30     	; 0x2e72 <autoBallast+0x2a2>
			{
				#ifdef FCPUDEBUG
					lprintf_P(PSTR("Ballast: TVSpeed0\n"));
    2e54:	00 d0       	rcall	.+0      	; 0x2e56 <autoBallast+0x286>
    2e56:	83 e7       	ldi	r24, 0x73	; 115
    2e58:	92 e0       	ldi	r25, 0x02	; 2
    2e5a:	ed b7       	in	r30, 0x3d	; 61
    2e5c:	fe b7       	in	r31, 0x3e	; 62
    2e5e:	92 83       	std	Z+2, r25	; 0x02
    2e60:	81 83       	std	Z+1, r24	; 0x01
    2e62:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
				#endif
				currentTargetVspeed = 0;
    2e66:	10 92 59 04 	sts	0x0459, r1
    2e6a:	10 92 58 04 	sts	0x0458, r1
    2e6e:	0f 90       	pop	r0
    2e70:	0f 90       	pop	r0

			//if vertical velocity is below target
			//save VV
			//set "come back and check" flag
			//turn on the ballast
			if(vSpeedAvg < currentTargetVspeed)
    2e72:	20 91 38 04 	lds	r18, 0x0438
    2e76:	30 91 39 04 	lds	r19, 0x0439
    2e7a:	80 91 58 04 	lds	r24, 0x0458
    2e7e:	90 91 59 04 	lds	r25, 0x0459
    2e82:	28 17       	cp	r18, r24
    2e84:	39 07       	cpc	r19, r25
    2e86:	0c f0       	brlt	.+2      	; 0x2e8a <autoBallast+0x2ba>
    2e88:	c1 c0       	rjmp	.+386    	; 0x300c <autoBallast+0x43c>
			{
				ballastBabySit = 1;
    2e8a:	81 e0       	ldi	r24, 0x01	; 1
    2e8c:	80 93 5a 04 	sts	0x045A, r24
				babySitVertSpeed = vSpeedAvg;
    2e90:	30 93 52 04 	sts	0x0452, r19
    2e94:	20 93 51 04 	sts	0x0451, r18
				lastBallastTime = time;
    2e98:	e0 92 54 04 	sts	0x0454, r14
    2e9c:	f0 92 55 04 	sts	0x0455, r15
    2ea0:	00 93 56 04 	sts	0x0456, r16
    2ea4:	10 93 57 04 	sts	0x0457, r17
				//turn on the ballast
				//send 0x09 0d19
				uint8_t data = 19;
    2ea8:	83 e1       	ldi	r24, 0x13	; 19
    2eaa:	89 83       	std	Y+1, r24	; 0x01
    2eac:	dd 24       	eor	r13, r13
				uint8_t errorTolerance = 0;
				while( ((retVal = i2cMasterSendNI(BALLASTMODULE, 1, &data)) != I2C_OK) && errorTolerance < CRITCOMFAIL)
    2eae:	3e 01       	movw	r6, r28
    2eb0:	08 94       	sec
    2eb2:	61 1c       	adc	r6, r1
    2eb4:	71 1c       	adc	r7, r1
				{
					#ifdef FCPUDEBUG
						lprintf_P(PSTR("Second Infinite Loop\n"));
    2eb6:	ed e5       	ldi	r30, 0x5D	; 93
    2eb8:	8e 2e       	mov	r8, r30
    2eba:	e2 e0       	ldi	r30, 0x02	; 2
    2ebc:	9e 2e       	mov	r9, r30
    2ebe:	7c e2       	ldi	r23, 0x2C	; 44
    2ec0:	a7 2e       	mov	r10, r23
    2ec2:	71 e0       	ldi	r23, 0x01	; 1
    2ec4:	b7 2e       	mov	r11, r23
    2ec6:	13 c0       	rjmp	.+38     	; 0x2eee <autoBallast+0x31e>
    2ec8:	00 d0       	rcall	.+0      	; 0x2eca <autoBallast+0x2fa>
    2eca:	ad b7       	in	r26, 0x3d	; 61
    2ecc:	be b7       	in	r27, 0x3e	; 62
    2ece:	12 96       	adiw	r26, 0x02	; 2
    2ed0:	9c 92       	st	X, r9
    2ed2:	8e 92       	st	-X, r8
    2ed4:	11 97       	sbiw	r26, 0x01	; 1
    2ed6:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
    2eda:	88 e8       	ldi	r24, 0x88	; 136
    2edc:	93 e1       	ldi	r25, 0x13	; 19
    2ede:	0f 90       	pop	r0
    2ee0:	0f 90       	pop	r0
    2ee2:	f5 01       	movw	r30, r10
    2ee4:	31 97       	sbiw	r30, 0x01	; 1
    2ee6:	f1 f7       	brne	.-4      	; 0x2ee4 <autoBallast+0x314>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ee8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eea:	d9 f7       	brne	.-10     	; 0x2ee2 <autoBallast+0x312>
					#endif
					_delay_ms(500);
					errorTolerance++;
    2eec:	d3 94       	inc	r13
				lastBallastTime = time;
				//turn on the ballast
				//send 0x09 0d19
				uint8_t data = 19;
				uint8_t errorTolerance = 0;
				while( ((retVal = i2cMasterSendNI(BALLASTMODULE, 1, &data)) != I2C_OK) && errorTolerance < CRITCOMFAIL)
    2eee:	82 e1       	ldi	r24, 0x12	; 18
    2ef0:	61 e0       	ldi	r22, 0x01	; 1
    2ef2:	a3 01       	movw	r20, r6
    2ef4:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <i2cMasterSendNI>
    2ef8:	88 23       	and	r24, r24
    2efa:	21 f0       	breq	.+8      	; 0x2f04 <autoBallast+0x334>
    2efc:	b9 e1       	ldi	r27, 0x19	; 25
    2efe:	db 16       	cp	r13, r27
    2f00:	19 f7       	brne	.-58     	; 0x2ec8 <autoBallast+0x2f8>
    2f02:	03 c0       	rjmp	.+6      	; 0x2f0a <autoBallast+0x33a>
						lprintf_P(PSTR("Second Infinite Loop\n"));
					#endif
					_delay_ms(500);
					errorTolerance++;
				}
				if(errorTolerance >= CRITCOMFAIL)
    2f04:	e8 e1       	ldi	r30, 0x18	; 24
    2f06:	ed 15       	cp	r30, r13
    2f08:	b8 f4       	brcc	.+46     	; 0x2f38 <autoBallast+0x368>
				{
					#ifdef FCPUDEBUG
						lprintf_P(PSTR("Ballast Error\n"));
    2f0a:	00 d0       	rcall	.+0      	; 0x2f0c <autoBallast+0x33c>
    2f0c:	8e e4       	ldi	r24, 0x4E	; 78
    2f0e:	92 e0       	ldi	r25, 0x02	; 2
    2f10:	ad b7       	in	r26, 0x3d	; 61
    2f12:	be b7       	in	r27, 0x3e	; 62
    2f14:	12 96       	adiw	r26, 0x02	; 2
    2f16:	9c 93       	st	X, r25
    2f18:	8e 93       	st	-X, r24
    2f1a:	11 97       	sbiw	r26, 0x01	; 1
    2f1c:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
					#endif
					statusCode = (statusCode & 0xFFFD) | (1 << 1);
    2f20:	80 91 2f 03 	lds	r24, 0x032F
    2f24:	90 91 30 03 	lds	r25, 0x0330
    2f28:	82 60       	ori	r24, 0x02	; 2
    2f2a:	90 93 30 03 	sts	0x0330, r25
    2f2e:	80 93 2f 03 	sts	0x032F, r24
    2f32:	0f 90       	pop	r0
    2f34:	0f 90       	pop	r0
    2f36:	09 c0       	rjmp	.+18     	; 0x2f4a <autoBallast+0x37a>
				} else {
					statusCode = (statusCode & 0xFFFD);
    2f38:	80 91 2f 03 	lds	r24, 0x032F
    2f3c:	90 91 30 03 	lds	r25, 0x0330
    2f40:	8d 7f       	andi	r24, 0xFD	; 253
    2f42:	90 93 30 03 	sts	0x0330, r25
    2f46:	80 93 2f 03 	sts	0x032F, r24
				}
				scheduleQueueAdd(&autoBallast, time+10);
    2f4a:	8a e0       	ldi	r24, 0x0A	; 10
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	a0 e0       	ldi	r26, 0x00	; 0
    2f50:	b0 e0       	ldi	r27, 0x00	; 0
    2f52:	60 c0       	rjmp	.+192    	; 0x3014 <autoBallast+0x444>
				scheduleQueueAdd(&autoBallast, time+60);
			}
		} else {

			#ifdef FCPUDEBUG
				lprintf_P(PSTR("Ballast Disabled\n"));
    2f54:	00 d0       	rcall	.+0      	; 0x2f56 <autoBallast+0x386>
    2f56:	8c e3       	ldi	r24, 0x3C	; 60
    2f58:	92 e0       	ldi	r25, 0x02	; 2
    2f5a:	ad b7       	in	r26, 0x3d	; 61
    2f5c:	be b7       	in	r27, 0x3e	; 62
    2f5e:	12 96       	adiw	r26, 0x02	; 2
    2f60:	9c 93       	st	X, r25
    2f62:	8e 93       	st	-X, r24
    2f64:	11 97       	sbiw	r26, 0x01	; 1
    2f66:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
			#endif

			//turn off the ballast
			//send 0x09 0d19
			uint8_t data = 18;
    2f6a:	82 e1       	ldi	r24, 0x12	; 18
    2f6c:	89 83       	std	Y+1, r24	; 0x01
    2f6e:	dd 24       	eor	r13, r13
    2f70:	0f 90       	pop	r0
    2f72:	0f 90       	pop	r0
			uint8_t errorTolerance = 0;
			while( ((retVal = i2cMasterSendNI(BALLASTMODULE, 1, &data)) != I2C_OK) && errorTolerance < CRITCOMFAIL)
    2f74:	3e 01       	movw	r6, r28
    2f76:	08 94       	sec
    2f78:	61 1c       	adc	r6, r1
    2f7a:	71 1c       	adc	r7, r1
			{
				#ifdef FCPUDEBUG
					lprintf_P(PSTR("Third Infinite Loop\n"));
    2f7c:	67 e2       	ldi	r22, 0x27	; 39
    2f7e:	86 2e       	mov	r8, r22
    2f80:	62 e0       	ldi	r22, 0x02	; 2
    2f82:	96 2e       	mov	r9, r22
    2f84:	5c e2       	ldi	r21, 0x2C	; 44
    2f86:	a5 2e       	mov	r10, r21
    2f88:	51 e0       	ldi	r21, 0x01	; 1
    2f8a:	b5 2e       	mov	r11, r21
    2f8c:	11 c0       	rjmp	.+34     	; 0x2fb0 <autoBallast+0x3e0>
    2f8e:	00 d0       	rcall	.+0      	; 0x2f90 <autoBallast+0x3c0>
    2f90:	ed b7       	in	r30, 0x3d	; 61
    2f92:	fe b7       	in	r31, 0x3e	; 62
    2f94:	92 82       	std	Z+2, r9	; 0x02
    2f96:	81 82       	std	Z+1, r8	; 0x01
    2f98:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
    2f9c:	88 e8       	ldi	r24, 0x88	; 136
    2f9e:	93 e1       	ldi	r25, 0x13	; 19
    2fa0:	0f 90       	pop	r0
    2fa2:	0f 90       	pop	r0
    2fa4:	f5 01       	movw	r30, r10
    2fa6:	31 97       	sbiw	r30, 0x01	; 1
    2fa8:	f1 f7       	brne	.-4      	; 0x2fa6 <autoBallast+0x3d6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2faa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fac:	d9 f7       	brne	.-10     	; 0x2fa4 <autoBallast+0x3d4>
				#endif
				_delay_ms(500);
				errorTolerance++;
    2fae:	d3 94       	inc	r13

			//turn off the ballast
			//send 0x09 0d19
			uint8_t data = 18;
			uint8_t errorTolerance = 0;
			while( ((retVal = i2cMasterSendNI(BALLASTMODULE, 1, &data)) != I2C_OK) && errorTolerance < CRITCOMFAIL)
    2fb0:	82 e1       	ldi	r24, 0x12	; 18
    2fb2:	61 e0       	ldi	r22, 0x01	; 1
    2fb4:	a3 01       	movw	r20, r6
    2fb6:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <i2cMasterSendNI>
    2fba:	88 23       	and	r24, r24
    2fbc:	21 f0       	breq	.+8      	; 0x2fc6 <autoBallast+0x3f6>
    2fbe:	f9 e1       	ldi	r31, 0x19	; 25
    2fc0:	df 16       	cp	r13, r31
    2fc2:	29 f7       	brne	.-54     	; 0x2f8e <autoBallast+0x3be>
    2fc4:	03 c0       	rjmp	.+6      	; 0x2fcc <autoBallast+0x3fc>
					lprintf_P(PSTR("Third Infinite Loop\n"));
				#endif
				_delay_ms(500);
				errorTolerance++;
			}
			if(errorTolerance >= CRITCOMFAIL)
    2fc6:	88 e1       	ldi	r24, 0x18	; 24
    2fc8:	8d 15       	cp	r24, r13
    2fca:	b8 f4       	brcc	.+46     	; 0x2ffa <autoBallast+0x42a>
			{
				#ifdef FCPUDEBUG
					lprintf_P(PSTR("Ballast Error\n"));
    2fcc:	00 d0       	rcall	.+0      	; 0x2fce <autoBallast+0x3fe>
    2fce:	88 e1       	ldi	r24, 0x18	; 24
    2fd0:	92 e0       	ldi	r25, 0x02	; 2
    2fd2:	ad b7       	in	r26, 0x3d	; 61
    2fd4:	be b7       	in	r27, 0x3e	; 62
    2fd6:	12 96       	adiw	r26, 0x02	; 2
    2fd8:	9c 93       	st	X, r25
    2fda:	8e 93       	st	-X, r24
    2fdc:	11 97       	sbiw	r26, 0x01	; 1
    2fde:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
				#endif
				statusCode = (statusCode & 0xFFFD) | (1 << 1);
    2fe2:	80 91 2f 03 	lds	r24, 0x032F
    2fe6:	90 91 30 03 	lds	r25, 0x0330
    2fea:	82 60       	ori	r24, 0x02	; 2
    2fec:	90 93 30 03 	sts	0x0330, r25
    2ff0:	80 93 2f 03 	sts	0x032F, r24
    2ff4:	0f 90       	pop	r0
    2ff6:	0f 90       	pop	r0
    2ff8:	09 c0       	rjmp	.+18     	; 0x300c <autoBallast+0x43c>
			} else {
				statusCode = (statusCode & 0xFFFD);
    2ffa:	80 91 2f 03 	lds	r24, 0x032F
    2ffe:	90 91 30 03 	lds	r25, 0x0330
    3002:	8d 7f       	andi	r24, 0xFD	; 253
    3004:	90 93 30 03 	sts	0x0330, r25
    3008:	80 93 2f 03 	sts	0x032F, r24
			}
			scheduleQueueAdd(&autoBallast, time+60);
    300c:	8c e3       	ldi	r24, 0x3C	; 60
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	a0 e0       	ldi	r26, 0x00	; 0
    3012:	b0 e0       	ldi	r27, 0x00	; 0
    3014:	e8 0e       	add	r14, r24
    3016:	f9 1e       	adc	r15, r25
    3018:	0a 1f       	adc	r16, r26
    301a:	1b 1f       	adc	r17, r27
    301c:	88 ee       	ldi	r24, 0xE8	; 232
    301e:	95 e1       	ldi	r25, 0x15	; 21
    3020:	b8 01       	movw	r22, r16
    3022:	a7 01       	movw	r20, r14
    3024:	0e 94 75 2f 	call	0x5eea	; 0x5eea <scheduleQueueAdd>
		}
	}

}
    3028:	67 96       	adiw	r28, 0x17	; 23
    302a:	0f b6       	in	r0, 0x3f	; 63
    302c:	f8 94       	cli
    302e:	de bf       	out	0x3e, r29	; 62
    3030:	0f be       	out	0x3f, r0	; 63
    3032:	cd bf       	out	0x3d, r28	; 61
    3034:	cf 91       	pop	r28
    3036:	df 91       	pop	r29
    3038:	1f 91       	pop	r17
    303a:	0f 91       	pop	r16
    303c:	ff 90       	pop	r15
    303e:	ef 90       	pop	r14
    3040:	df 90       	pop	r13
    3042:	cf 90       	pop	r12
    3044:	bf 90       	pop	r11
    3046:	af 90       	pop	r10
    3048:	9f 90       	pop	r9
    304a:	8f 90       	pop	r8
    304c:	7f 90       	pop	r7
    304e:	6f 90       	pop	r6
    3050:	08 95       	ret

00003052 <flightPhaseLogic>:
}

//1 implies that we have cutdown

void flightPhaseLogic(uint32_t time)
{
    3052:	6f 92       	push	r6
    3054:	7f 92       	push	r7
    3056:	8f 92       	push	r8
    3058:	9f 92       	push	r9
    305a:	af 92       	push	r10
    305c:	bf 92       	push	r11
    305e:	cf 92       	push	r12
    3060:	df 92       	push	r13
    3062:	ef 92       	push	r14
    3064:	ff 92       	push	r15
    3066:	0f 93       	push	r16
    3068:	1f 93       	push	r17
    306a:	df 93       	push	r29
    306c:	cf 93       	push	r28
    306e:	cd b7       	in	r28, 0x3d	; 61
    3070:	de b7       	in	r29, 0x3e	; 62
    3072:	66 97       	sbiw	r28, 0x16	; 22
    3074:	0f b6       	in	r0, 0x3f	; 63
    3076:	f8 94       	cli
    3078:	de bf       	out	0x3e, r29	; 62
    307a:	0f be       	out	0x3f, r0	; 63
    307c:	cd bf       	out	0x3d, r28	; 61
    307e:	7b 01       	movw	r14, r22
    3080:	8c 01       	movw	r16, r24
	#ifdef FCPUDEBUG
		lprintf_P(PSTR("In Phase Logic\n"));
    3082:	00 d0       	rcall	.+0      	; 0x3084 <flightPhaseLogic+0x32>
    3084:	8a e0       	ldi	r24, 0x0A	; 10
    3086:	91 e0       	ldi	r25, 0x01	; 1
    3088:	ad b7       	in	r26, 0x3d	; 61
    308a:	be b7       	in	r27, 0x3e	; 62
    308c:	12 96       	adiw	r26, 0x02	; 2
    308e:	9c 93       	st	X, r25
    3090:	8e 93       	st	-X, r24
    3092:	11 97       	sbiw	r26, 0x01	; 1
    3094:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
	#endif
	uint8_t currentPhase = eeprom_read_byte(&EEflightPhase);
    3098:	0f 90       	pop	r0
    309a:	0f 90       	pop	r0
    309c:	82 e3       	ldi	r24, 0x32	; 50
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	0e 94 34 3d 	call	0x7a68	; 0x7a68 <__eerd_byte_m324p>
    30a4:	a8 2e       	mov	r10, r24
	struct gpsData myGPS = currentPositionData;
    30a6:	de 01       	movw	r26, r28
    30a8:	11 96       	adiw	r26, 0x01	; 1
    30aa:	eb e3       	ldi	r30, 0x3B	; 59
    30ac:	f4 e0       	ldi	r31, 0x04	; 4
    30ae:	86 e1       	ldi	r24, 0x16	; 22
    30b0:	01 90       	ld	r0, Z+
    30b2:	0d 92       	st	X+, r0
    30b4:	81 50       	subi	r24, 0x01	; 1
    30b6:	e1 f7       	brne	.-8      	; 0x30b0 <flightPhaseLogic+0x5e>
    30b8:	8c 88       	ldd	r8, Y+20	; 0x14
    30ba:	9d 88       	ldd	r9, Y+21	; 0x15


	//Failure Condition: We will enter mayday mode.
	uint16_t thisAltitude = myGPS.altitude;

	uint16_t maydayAltitude = eeprom_read_word(&EEmaydayAltitude);
    30bc:	8b e0       	ldi	r24, 0x0B	; 11
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
    30c4:	3c 01       	movw	r6, r24
	int16_t maydayVSpeed = eeprom_read_word(&EEmaydayVSpeed);
    30c6:	8d e0       	ldi	r24, 0x0D	; 13
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
    30ce:	6c 01       	movw	r12, r24
	uint8_t myPhase = currentPhase & 0x0F;
    30d0:	4f e0       	ldi	r20, 0x0F	; 15
    30d2:	b4 2e       	mov	r11, r20
    30d4:	ba 20       	and	r11, r10
	uint8_t myFlags = currentPhase >> 4;
    30d6:	a2 94       	swap	r10
    30d8:	3f e0       	ldi	r19, 0x0F	; 15
    30da:	a3 22       	and	r10, r19
	switch(myPhase)
    30dc:	b2 e0       	ldi	r27, 0x02	; 2
    30de:	bb 16       	cp	r11, r27
    30e0:	09 f4       	brne	.+2      	; 0x30e4 <flightPhaseLogic+0x92>
    30e2:	4b c0       	rjmp	.+150    	; 0x317a <flightPhaseLogic+0x128>
    30e4:	bb 15       	cp	r27, r11
    30e6:	38 f0       	brcs	.+14     	; 0x30f6 <flightPhaseLogic+0xa4>
    30e8:	bb 20       	and	r11, r11
    30ea:	71 f0       	breq	.+28     	; 0x3108 <flightPhaseLogic+0xb6>
    30ec:	e1 e0       	ldi	r30, 0x01	; 1
    30ee:	be 16       	cp	r11, r30
    30f0:	09 f0       	breq	.+2      	; 0x30f4 <flightPhaseLogic+0xa2>
    30f2:	bc c0       	rjmp	.+376    	; 0x326c <flightPhaseLogic+0x21a>
    30f4:	0e c0       	rjmp	.+28     	; 0x3112 <flightPhaseLogic+0xc0>
    30f6:	f3 e0       	ldi	r31, 0x03	; 3
    30f8:	bf 16       	cp	r11, r31
    30fa:	09 f4       	brne	.+2      	; 0x30fe <flightPhaseLogic+0xac>
    30fc:	67 c0       	rjmp	.+206    	; 0x31cc <flightPhaseLogic+0x17a>
    30fe:	84 e0       	ldi	r24, 0x04	; 4
    3100:	b8 16       	cp	r11, r24
    3102:	09 f0       	breq	.+2      	; 0x3106 <flightPhaseLogic+0xb4>
    3104:	b3 c0       	rjmp	.+358    	; 0x326c <flightPhaseLogic+0x21a>
    3106:	9a c0       	rjmp	.+308    	; 0x323c <flightPhaseLogic+0x1ea>
	{

		case 0:
			if((PIND & _BV(TAKEOFFPIN)) == 1 && (myFlags & 1 == 1))
    3108:	89 b1       	in	r24, 0x09	; 9
				myPhase = 1;
				_delay_ms(500);
				//Save time
			}
			#ifdef FCPUDEBUG
				lprintf_P(PSTR("Phase 0: Prelaunch\n"));
    310a:	00 d0       	rcall	.+0      	; 0x310c <flightPhaseLogic+0xba>
    310c:	86 ef       	ldi	r24, 0xF6	; 246
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	7f c0       	rjmp	.+254    	; 0x3210 <flightPhaseLogic+0x1be>
			//reschedule 1 second from now
			scheduleQueueAdd(&flightPhaseLogic, time+1);
			break;
		case 1:
			//change sample time to 30 seconds
			eeprom_write_word(&EEdataCollectionInterval, 30);
    3112:	8b e1       	ldi	r24, 0x1B	; 27
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	6e e1       	ldi	r22, 0x1E	; 30
    3118:	70 e0       	ldi	r23, 0x00	; 0
    311a:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__eewr_word_m324p>
			//schedule rapid hf xmit
			if(rapidHFEnable == 0)
    311e:	80 91 32 03 	lds	r24, 0x0332
    3122:	88 23       	and	r24, r24
    3124:	31 f4       	brne	.+12     	; 0x3132 <flightPhaseLogic+0xe0>
			{
				scheduleQueueAdd(&rapidHFXmit, time);
    3126:	8a e9       	ldi	r24, 0x9A	; 154
    3128:	95 e1       	ldi	r25, 0x15	; 21
    312a:	b8 01       	movw	r22, r16
    312c:	a7 01       	movw	r20, r14
    312e:	0e 94 75 2f 	call	0x5eea	; 0x5eea <scheduleQueueAdd>
			}
			//enable rapid hf xmit
			rapidHFEnable = 1;
    3132:	81 e0       	ldi	r24, 0x01	; 1
    3134:	80 93 32 03 	sts	0x0332, r24


			//reschedule 1 minute from now
			if(myGPS.altitude > 8500 && vSpeedAvg < 0 && (myFlags & 1 == 1))
    3138:	b5 e3       	ldi	r27, 0x35	; 53
    313a:	8b 16       	cp	r8, r27
    313c:	b1 e2       	ldi	r27, 0x21	; 33
    313e:	9b 06       	cpc	r9, r27
    3140:	50 f0       	brcs	.+20     	; 0x3156 <flightPhaseLogic+0x104>
    3142:	80 91 38 04 	lds	r24, 0x0438
    3146:	90 91 39 04 	lds	r25, 0x0439
    314a:	97 ff       	sbrs	r25, 7
    314c:	04 c0       	rjmp	.+8      	; 0x3156 <flightPhaseLogic+0x104>
    314e:	a0 fe       	sbrs	r10, 0
    3150:	02 c0       	rjmp	.+4      	; 0x3156 <flightPhaseLogic+0x104>
    3152:	22 e0       	ldi	r18, 0x02	; 2
    3154:	b2 2e       	mov	r11, r18
			{
				myPhase = 2;
			}
			scheduleQueueAdd(&flightPhaseLogic, time+10);
    3156:	8a e0       	ldi	r24, 0x0A	; 10
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	a0 e0       	ldi	r26, 0x00	; 0
    315c:	b0 e0       	ldi	r27, 0x00	; 0
    315e:	e8 0e       	add	r14, r24
    3160:	f9 1e       	adc	r15, r25
    3162:	0a 1f       	adc	r16, r26
    3164:	1b 1f       	adc	r17, r27
    3166:	89 e2       	ldi	r24, 0x29	; 41
    3168:	98 e1       	ldi	r25, 0x18	; 24
    316a:	b8 01       	movw	r22, r16
    316c:	a7 01       	movw	r20, r14
    316e:	0e 94 75 2f 	call	0x5eea	; 0x5eea <scheduleQueueAdd>
			#ifdef FCPUDEBUG
				lprintf_P(PSTR("Phase 1: Climb\n"));
    3172:	00 d0       	rcall	.+0      	; 0x3174 <flightPhaseLogic+0x122>
    3174:	86 ee       	ldi	r24, 0xE6	; 230
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	72 c0       	rjmp	.+228    	; 0x325e <flightPhaseLogic+0x20c>
			#endif
			break;
		case 2:
			//disable rapid hf xmit
			rapidHFEnable = 0;
    317a:	10 92 32 03 	sts	0x0332, r1
			//make sure sat is enabled in here! BEFORE FLIGHT
			if(vSpeedAvg < maydayVSpeed || thisAltitude < maydayAltitude  || (cutdownStatus == 1) && (myFlags & 1 == 1))
    317e:	80 91 38 04 	lds	r24, 0x0438
    3182:	90 91 39 04 	lds	r25, 0x0439
    3186:	8c 15       	cp	r24, r12
    3188:	9d 05       	cpc	r25, r13
    318a:	4c f0       	brlt	.+18     	; 0x319e <flightPhaseLogic+0x14c>
    318c:	86 14       	cp	r8, r6
    318e:	97 04       	cpc	r9, r7
    3190:	30 f0       	brcs	.+12     	; 0x319e <flightPhaseLogic+0x14c>
    3192:	80 91 31 03 	lds	r24, 0x0331
    3196:	81 30       	cpi	r24, 0x01	; 1
    3198:	21 f4       	brne	.+8      	; 0x31a2 <flightPhaseLogic+0x150>
    319a:	a0 fe       	sbrs	r10, 0
    319c:	02 c0       	rjmp	.+4      	; 0x31a2 <flightPhaseLogic+0x150>
    319e:	93 e0       	ldi	r25, 0x03	; 3
    31a0:	b9 2e       	mov	r11, r25
			{
				myPhase = 3;
			}
			#ifdef FCPUDEBUG
				lprintf_P(PSTR("Phase 2: Cruise\n"));
    31a2:	00 d0       	rcall	.+0      	; 0x31a4 <flightPhaseLogic+0x152>
    31a4:	85 ed       	ldi	r24, 0xD5	; 213
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	ed b7       	in	r30, 0x3d	; 61
    31aa:	fe b7       	in	r31, 0x3e	; 62
    31ac:	92 83       	std	Z+2, r25	; 0x02
    31ae:	81 83       	std	Z+1, r24	; 0x01
    31b0:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
			#endif
			scheduleQueueAdd(&flightPhaseLogic, time+30);
    31b4:	0f 90       	pop	r0
    31b6:	0f 90       	pop	r0
    31b8:	b8 01       	movw	r22, r16
    31ba:	a7 01       	movw	r20, r14
    31bc:	42 5e       	subi	r20, 0xE2	; 226
    31be:	5f 4f       	sbci	r21, 0xFF	; 255
    31c0:	6f 4f       	sbci	r22, 0xFF	; 255
    31c2:	7f 4f       	sbci	r23, 0xFF	; 255
    31c4:	89 e2       	ldi	r24, 0x29	; 41
    31c6:	98 e1       	ldi	r25, 0x18	; 24
    31c8:	0e 94 75 2f 	call	0x5eea	; 0x5eea <scheduleQueueAdd>
		case 3:
			//disable sat in here! BEFORE FLIGHT
			//enable rapid hf xmit
			if(rapidHFEnable == 0)
    31cc:	80 91 32 03 	lds	r24, 0x0332
    31d0:	88 23       	and	r24, r24
    31d2:	31 f4       	brne	.+12     	; 0x31e0 <flightPhaseLogic+0x18e>
			{
				scheduleQueueAdd(&rapidHFXmit, time);
    31d4:	8a e9       	ldi	r24, 0x9A	; 154
    31d6:	95 e1       	ldi	r25, 0x15	; 21
    31d8:	b8 01       	movw	r22, r16
    31da:	a7 01       	movw	r20, r14
    31dc:	0e 94 75 2f 	call	0x5eea	; 0x5eea <scheduleQueueAdd>
			}
			rapidHFEnable = 1;
    31e0:	81 e0       	ldi	r24, 0x01	; 1
    31e2:	80 93 32 03 	sts	0x0332, r24
			if((vSpeedAvg > maydayVSpeed && thisAltitude > maydayAltitude) && cutdownStatus != 0 && (myFlags & 1 == 1))
    31e6:	80 91 38 04 	lds	r24, 0x0438
    31ea:	90 91 39 04 	lds	r25, 0x0439
    31ee:	c8 16       	cp	r12, r24
    31f0:	d9 06       	cpc	r13, r25
    31f2:	5c f4       	brge	.+22     	; 0x320a <flightPhaseLogic+0x1b8>
    31f4:	68 14       	cp	r6, r8
    31f6:	79 04       	cpc	r7, r9
    31f8:	40 f4       	brcc	.+16     	; 0x320a <flightPhaseLogic+0x1b8>
    31fa:	80 91 31 03 	lds	r24, 0x0331
    31fe:	88 23       	and	r24, r24
    3200:	21 f0       	breq	.+8      	; 0x320a <flightPhaseLogic+0x1b8>
    3202:	a0 fe       	sbrs	r10, 0
    3204:	02 c0       	rjmp	.+4      	; 0x320a <flightPhaseLogic+0x1b8>
    3206:	82 e0       	ldi	r24, 0x02	; 2
    3208:	b8 2e       	mov	r11, r24
			{
					myPhase = 2;
			}
			#ifdef FCPUDEBUG
				lprintf_P(PSTR("Phase 3: FALLING OUT OF SKY\n"));
    320a:	00 d0       	rcall	.+0      	; 0x320c <flightPhaseLogic+0x1ba>
    320c:	88 eb       	ldi	r24, 0xB8	; 184
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	ad b7       	in	r26, 0x3d	; 61
    3212:	be b7       	in	r27, 0x3e	; 62
    3214:	12 96       	adiw	r26, 0x02	; 2
    3216:	9c 93       	st	X, r25
    3218:	8e 93       	st	-X, r24
    321a:	11 97       	sbiw	r26, 0x01	; 1
    321c:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
			#endif
			scheduleQueueAdd(&flightPhaseLogic, time+1);
    3220:	0f 90       	pop	r0
    3222:	0f 90       	pop	r0
    3224:	08 94       	sec
    3226:	e1 1c       	adc	r14, r1
    3228:	f1 1c       	adc	r15, r1
    322a:	01 1d       	adc	r16, r1
    322c:	11 1d       	adc	r17, r1
    322e:	89 e2       	ldi	r24, 0x29	; 41
    3230:	98 e1       	ldi	r25, 0x18	; 24
    3232:	b8 01       	movw	r22, r16
    3234:	a7 01       	movw	r20, r14
    3236:	0e 94 75 2f 	call	0x5eea	; 0x5eea <scheduleQueueAdd>
    323a:	23 c0       	rjmp	.+70     	; 0x3282 <flightPhaseLogic+0x230>
			break;
		case 4:
			//reset HF and Sat Sample and Transmit Intervals to 1 hour
			scheduleQueueAdd(&flightPhaseLogic, time+3600);
    323c:	80 e1       	ldi	r24, 0x10	; 16
    323e:	9e e0       	ldi	r25, 0x0E	; 14
    3240:	a0 e0       	ldi	r26, 0x00	; 0
    3242:	b0 e0       	ldi	r27, 0x00	; 0
    3244:	e8 0e       	add	r14, r24
    3246:	f9 1e       	adc	r15, r25
    3248:	0a 1f       	adc	r16, r26
    324a:	1b 1f       	adc	r17, r27
    324c:	89 e2       	ldi	r24, 0x29	; 41
    324e:	98 e1       	ldi	r25, 0x18	; 24
    3250:	b8 01       	movw	r22, r16
    3252:	a7 01       	movw	r20, r14
    3254:	0e 94 75 2f 	call	0x5eea	; 0x5eea <scheduleQueueAdd>
			#ifdef FCPUDEBUG
				lprintf_P(PSTR("Phase 4: Landed\n"));
    3258:	00 d0       	rcall	.+0      	; 0x325a <flightPhaseLogic+0x208>
    325a:	87 ea       	ldi	r24, 0xA7	; 167
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	ad b7       	in	r26, 0x3d	; 61
    3260:	be b7       	in	r27, 0x3e	; 62
    3262:	12 96       	adiw	r26, 0x02	; 2
    3264:	9c 93       	st	X, r25
    3266:	8e 93       	st	-X, r24
    3268:	11 97       	sbiw	r26, 0x01	; 1
    326a:	07 c0       	rjmp	.+14     	; 0x327a <flightPhaseLogic+0x228>
			#endif
			break;
		default:
			#ifdef FCPUDEBUG
				lprintf_P(PSTR("ERROR!\n"));
    326c:	00 d0       	rcall	.+0      	; 0x326e <flightPhaseLogic+0x21c>
    326e:	8f e9       	ldi	r24, 0x9F	; 159
    3270:	90 e0       	ldi	r25, 0x00	; 0
    3272:	ed b7       	in	r30, 0x3d	; 61
    3274:	fe b7       	in	r31, 0x3e	; 62
    3276:	92 83       	std	Z+2, r25	; 0x02
    3278:	81 83       	std	Z+1, r24	; 0x01
    327a:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
    327e:	0f 90       	pop	r0
    3280:	0f 90       	pop	r0
			#endif
			break;
		}

	eeprom_write_byte(&EEflightPhase, (myFlags << 4) + myPhase);
    3282:	a2 94       	swap	r10
    3284:	b0 ef       	ldi	r27, 0xF0	; 240
    3286:	ab 22       	and	r10, r27
    3288:	ba 0c       	add	r11, r10
    328a:	82 e3       	ldi	r24, 0x32	; 50
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	6b 2d       	mov	r22, r11
    3290:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <__eewr_byte_m324p>

}
    3294:	66 96       	adiw	r28, 0x16	; 22
    3296:	0f b6       	in	r0, 0x3f	; 63
    3298:	f8 94       	cli
    329a:	de bf       	out	0x3e, r29	; 62
    329c:	0f be       	out	0x3f, r0	; 63
    329e:	cd bf       	out	0x3d, r28	; 61
    32a0:	cf 91       	pop	r28
    32a2:	df 91       	pop	r29
    32a4:	1f 91       	pop	r17
    32a6:	0f 91       	pop	r16
    32a8:	ff 90       	pop	r15
    32aa:	ef 90       	pop	r14
    32ac:	df 90       	pop	r13
    32ae:	cf 90       	pop	r12
    32b0:	bf 90       	pop	r11
    32b2:	af 90       	pop	r10
    32b4:	9f 90       	pop	r9
    32b6:	8f 90       	pop	r8
    32b8:	7f 90       	pop	r7
    32ba:	6f 90       	pop	r6
    32bc:	08 95       	ret

000032be <transmitSamples>:
		//Bogus time means testing time!
	}
}

void transmitSamples(uint32_t time)
{
    32be:	6f 92       	push	r6
    32c0:	7f 92       	push	r7
    32c2:	8f 92       	push	r8
    32c4:	9f 92       	push	r9
    32c6:	af 92       	push	r10
    32c8:	bf 92       	push	r11
    32ca:	cf 92       	push	r12
    32cc:	df 92       	push	r13
    32ce:	ef 92       	push	r14
    32d0:	ff 92       	push	r15
    32d2:	0f 93       	push	r16
    32d4:	1f 93       	push	r17
    32d6:	df 93       	push	r29
    32d8:	cf 93       	push	r28
    32da:	cd b7       	in	r28, 0x3d	; 61
    32dc:	de b7       	in	r29, 0x3e	; 62
    32de:	64 97       	sbiw	r28, 0x14	; 20
    32e0:	0f b6       	in	r0, 0x3f	; 63
    32e2:	f8 94       	cli
    32e4:	de bf       	out	0x3e, r29	; 62
    32e6:	0f be       	out	0x3f, r0	; 63
    32e8:	cd bf       	out	0x3d, r28	; 61
    32ea:	5b 01       	movw	r10, r22
    32ec:	6c 01       	movw	r12, r24
	#ifdef FCPUDEBUG
		lprintf_P(PSTR("In Sample TX\n"));
    32ee:	00 d0       	rcall	.+0      	; 0x32f0 <transmitSamples+0x32>
    32f0:	87 e7       	ldi	r24, 0x77	; 119
    32f2:	91 e0       	ldi	r25, 0x01	; 1
    32f4:	ed b7       	in	r30, 0x3d	; 61
    32f6:	fe b7       	in	r31, 0x3e	; 62
    32f8:	92 83       	std	Z+2, r25	; 0x02
    32fa:	81 83       	std	Z+1, r24	; 0x01
    32fc:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
	#endif
	loadBatch();
    3300:	0f 90       	pop	r0
    3302:	0f 90       	pop	r0
    3304:	0e 94 a4 07 	call	0xf48	; 0xf48 <loadBatch>
	flushSatQueue();
    3308:	0e 94 09 05 	call	0xa12	; 0xa12 <flushSatQueue>
	uint16_t maxTX = eeprom_read_word(&EEmaxAllowableTXInterval);
    330c:	88 e1       	ldi	r24, 0x18	; 24
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
    3314:	3c 01       	movw	r6, r24
	uint16_t desiredTX = eeprom_read_word(&EEdataTransmitInterval);
    3316:	8d e1       	ldi	r24, 0x1D	; 29
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
    331e:	4c 01       	movw	r8, r24
	if(enableReports)
    3320:	80 91 53 04 	lds	r24, 0x0453
    3324:	88 23       	and	r24, r24
    3326:	09 f4       	brne	.+2      	; 0x332a <transmitSamples+0x6c>
    3328:	af c0       	rjmp	.+350    	; 0x3488 <transmitSamples+0x1ca>
	{
		#ifdef FCPUDEBUG
			lprintf_P(PSTR("Generating Report\n"));
    332a:	00 d0       	rcall	.+0      	; 0x332c <transmitSamples+0x6e>
    332c:	84 e6       	ldi	r24, 0x64	; 100
    332e:	91 e0       	ldi	r25, 0x01	; 1
    3330:	ed b7       	in	r30, 0x3d	; 61
    3332:	fe b7       	in	r31, 0x3e	; 62
    3334:	92 83       	std	Z+2, r25	; 0x02
    3336:	81 83       	std	Z+1, r24	; 0x01
    3338:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
		#endif
		long double lon_code, lat_code, tmp1;
		uint8_t packet1[6];
		uint8_t packet2[6];
		if(currentPositionData.longitude < 0.0)
    333c:	e0 90 40 04 	lds	r14, 0x0440
    3340:	f0 90 41 04 	lds	r15, 0x0441
    3344:	00 91 42 04 	lds	r16, 0x0442
    3348:	10 91 43 04 	lds	r17, 0x0443
    334c:	0f 90       	pop	r0
    334e:	0f 90       	pop	r0
    3350:	c8 01       	movw	r24, r16
    3352:	b7 01       	movw	r22, r14
    3354:	20 e0       	ldi	r18, 0x00	; 0
    3356:	30 e0       	ldi	r19, 0x00	; 0
    3358:	40 e0       	ldi	r20, 0x00	; 0
    335a:	50 e0       	ldi	r21, 0x00	; 0
    335c:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <__cmpsf2>
    3360:	88 23       	and	r24, r24
    3362:	4c f4       	brge	.+18     	; 0x3376 <transmitSamples+0xb8>
		{
			tmp1 = (currentPositionData.longitude + 360.)/360.;
    3364:	c8 01       	movw	r24, r16
    3366:	b7 01       	movw	r22, r14
    3368:	20 e0       	ldi	r18, 0x00	; 0
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	44 eb       	ldi	r20, 0xB4	; 180
    336e:	53 e4       	ldi	r21, 0x43	; 67
    3370:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <__addsf3>
    3374:	02 c0       	rjmp	.+4      	; 0x337a <transmitSamples+0xbc>
		} else {
			tmp1 = currentPositionData.longitude/360.;
    3376:	c8 01       	movw	r24, r16
    3378:	b7 01       	movw	r22, r14
    337a:	20 e0       	ldi	r18, 0x00	; 0
    337c:	30 e0       	ldi	r19, 0x00	; 0
    337e:	44 eb       	ldi	r20, 0xB4	; 180
    3380:	53 e4       	ldi	r21, 0x43	; 67
    3382:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__divsf3>
		}
		lon_code = (unsigned long) (tmp1 * 0x0ffffff) & 0x0ffffff;
    3386:	2f ef       	ldi	r18, 0xFF	; 255
    3388:	3f ef       	ldi	r19, 0xFF	; 255
    338a:	4f e7       	ldi	r20, 0x7F	; 127
    338c:	5b e4       	ldi	r21, 0x4B	; 75
    338e:	0e 94 03 39 	call	0x7206	; 0x7206 <__mulsf3>
    3392:	0e 94 25 38 	call	0x704a	; 0x704a <__fixunssfsi>
    3396:	90 70       	andi	r25, 0x00	; 0
    3398:	0e 94 51 38 	call	0x70a2	; 0x70a2 <__floatunsisf>
    339c:	69 83       	std	Y+1, r22	; 0x01
    339e:	7a 83       	std	Y+2, r23	; 0x02
    33a0:	8b 83       	std	Y+3, r24	; 0x03
    33a2:	9c 83       	std	Y+4, r25	; 0x04
		tmp1 = -(currentPositionData.latitude - 90.)/180.;
		lat_code = (unsigned long) (tmp1 * 0x0ffffff) & 0x0ffffff;
    33a4:	60 91 3c 04 	lds	r22, 0x043C
    33a8:	70 91 3d 04 	lds	r23, 0x043D
    33ac:	80 91 3e 04 	lds	r24, 0x043E
    33b0:	90 91 3f 04 	lds	r25, 0x043F
    33b4:	20 e0       	ldi	r18, 0x00	; 0
    33b6:	30 e0       	ldi	r19, 0x00	; 0
    33b8:	44 eb       	ldi	r20, 0xB4	; 180
    33ba:	52 e4       	ldi	r21, 0x42	; 66
    33bc:	0e 94 4f 37 	call	0x6e9e	; 0x6e9e <__subsf3>
    33c0:	20 e0       	ldi	r18, 0x00	; 0
    33c2:	30 e0       	ldi	r19, 0x00	; 0
    33c4:	44 e3       	ldi	r20, 0x34	; 52
    33c6:	53 ec       	ldi	r21, 0xC3	; 195
    33c8:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__divsf3>
    33cc:	2f ef       	ldi	r18, 0xFF	; 255
    33ce:	3f ef       	ldi	r19, 0xFF	; 255
    33d0:	4f e7       	ldi	r20, 0x7F	; 127
    33d2:	5b e4       	ldi	r21, 0x4B	; 75
    33d4:	0e 94 03 39 	call	0x7206	; 0x7206 <__mulsf3>
    33d8:	0e 94 25 38 	call	0x704a	; 0x704a <__fixunssfsi>
    33dc:	90 70       	andi	r25, 0x00	; 0
    33de:	0e 94 51 38 	call	0x70a2	; 0x70a2 <__floatunsisf>
    33e2:	6d 83       	std	Y+5, r22	; 0x05
    33e4:	7e 83       	std	Y+6, r23	; 0x06
    33e6:	8f 83       	std	Y+7, r24	; 0x07
    33e8:	98 87       	std	Y+8, r25	; 0x08
		memcpy(packet1, &lon_code, 3*sizeof(uint8_t));
    33ea:	de 01       	movw	r26, r28
    33ec:	19 96       	adiw	r26, 0x09	; 9
    33ee:	fe 01       	movw	r30, r28
    33f0:	31 96       	adiw	r30, 0x01	; 1
    33f2:	83 e0       	ldi	r24, 0x03	; 3
    33f4:	01 90       	ld	r0, Z+
    33f6:	0d 92       	st	X+, r0
    33f8:	81 50       	subi	r24, 0x01	; 1
    33fa:	e1 f7       	brne	.-8      	; 0x33f4 <transmitSamples+0x136>
		packet1[3] = currentPositionData.bearing >> 1;
    33fc:	80 91 45 04 	lds	r24, 0x0445
    3400:	90 91 46 04 	lds	r25, 0x0446
    3404:	96 95       	lsr	r25
    3406:	87 95       	ror	r24
    3408:	8c 87       	std	Y+12, r24	; 0x0c
		packet1[4] = currentPositionData.altitude >> 8;
    340a:	80 91 4e 04 	lds	r24, 0x044E
    340e:	90 91 4f 04 	lds	r25, 0x044F
    3412:	9d 87       	std	Y+13, r25	; 0x0d
		packet1[5] = (currentPositionData.altitude && 0x00F0) | (reportCounter && 0x000F);
    3414:	20 e0       	ldi	r18, 0x00	; 0
    3416:	89 2b       	or	r24, r25
    3418:	09 f0       	breq	.+2      	; 0x341c <transmitSamples+0x15e>
    341a:	21 e0       	ldi	r18, 0x01	; 1
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	80 91 3a 04 	lds	r24, 0x043A
    3422:	81 11       	cpse	r24, r1
    3424:	91 e0       	ldi	r25, 0x01	; 1
    3426:	29 2b       	or	r18, r25
    3428:	2e 87       	std	Y+14, r18	; 0x0e

		uint32_t rightNow = now();
    342a:	0e 94 9c 14 	call	0x2938	; 0x2938 <now>
    342e:	7b 01       	movw	r14, r22
    3430:	8c 01       	movw	r16, r24
		memcpy(packet2, &lat_code, 3*sizeof(uint8_t));
    3432:	de 01       	movw	r26, r28
    3434:	1f 96       	adiw	r26, 0x0f	; 15
    3436:	fe 01       	movw	r30, r28
    3438:	35 96       	adiw	r30, 0x05	; 5
    343a:	83 e0       	ldi	r24, 0x03	; 3
    343c:	01 90       	ld	r0, Z+
    343e:	0d 92       	st	X+, r0
    3440:	81 50       	subi	r24, 0x01	; 1
    3442:	e1 f7       	brne	.-8      	; 0x343c <transmitSamples+0x17e>
		packet2[3] = currentPositionData.speed;
    3444:	80 91 44 04 	lds	r24, 0x0444
    3448:	8a 8b       	std	Y+18, r24	; 0x12
		packet2[4] = (rightNow/60) >> 8;
    344a:	c8 01       	movw	r24, r16
    344c:	b7 01       	movw	r22, r14
    344e:	2c e3       	ldi	r18, 0x3C	; 60
    3450:	30 e0       	ldi	r19, 0x00	; 0
    3452:	40 e0       	ldi	r20, 0x00	; 0
    3454:	50 e0       	ldi	r21, 0x00	; 0
    3456:	0e 94 a4 39 	call	0x7348	; 0x7348 <__udivmodsi4>
    345a:	23 2f       	mov	r18, r19
    345c:	34 2f       	mov	r19, r20
    345e:	45 2f       	mov	r20, r21
    3460:	55 27       	eor	r21, r21
    3462:	2b 8b       	std	Y+19, r18	; 0x13
		packet2[5] = ((rightNow/60) && 0x00F0) | (reportCounter && 0x000F);
    3464:	90 91 3a 04 	lds	r25, 0x043A
    3468:	80 e0       	ldi	r24, 0x00	; 0
    346a:	fc e3       	ldi	r31, 0x3C	; 60
    346c:	ef 16       	cp	r14, r31
    346e:	f1 04       	cpc	r15, r1
    3470:	01 05       	cpc	r16, r1
    3472:	11 05       	cpc	r17, r1
    3474:	08 f0       	brcs	.+2      	; 0x3478 <transmitSamples+0x1ba>
    3476:	81 e0       	ldi	r24, 0x01	; 1
    3478:	20 e0       	ldi	r18, 0x00	; 0
    347a:	91 11       	cpse	r25, r1
    347c:	21 e0       	ldi	r18, 0x01	; 1
    347e:	82 2b       	or	r24, r18
    3480:	8c 8b       	std	Y+20, r24	; 0x14

		reportCounter++;
    3482:	9f 5f       	subi	r25, 0xFF	; 255
    3484:	90 93 3a 04 	sts	0x043A, r25

		//BEFORE FLIGHT Send this data to the comm controller
	}

	if(maxTX > desiredTX)
    3488:	86 14       	cp	r8, r6
    348a:	97 04       	cpc	r9, r7
    348c:	10 f4       	brcc	.+4      	; 0x3492 <transmitSamples+0x1d4>
		scheduleQueueAdd(&transmitSamples, time+desiredTX);
    348e:	a4 01       	movw	r20, r8
    3490:	01 c0       	rjmp	.+2      	; 0x3494 <transmitSamples+0x1d6>
	else
		scheduleQueueAdd(&transmitSamples, time+maxTX);
    3492:	a3 01       	movw	r20, r6
    3494:	60 e0       	ldi	r22, 0x00	; 0
    3496:	70 e0       	ldi	r23, 0x00	; 0
    3498:	4a 0d       	add	r20, r10
    349a:	5b 1d       	adc	r21, r11
    349c:	6c 1d       	adc	r22, r12
    349e:	7d 1d       	adc	r23, r13
    34a0:	8f e5       	ldi	r24, 0x5F	; 95
    34a2:	99 e1       	ldi	r25, 0x19	; 25
    34a4:	0e 94 75 2f 	call	0x5eea	; 0x5eea <scheduleQueueAdd>


}
    34a8:	64 96       	adiw	r28, 0x14	; 20
    34aa:	0f b6       	in	r0, 0x3f	; 63
    34ac:	f8 94       	cli
    34ae:	de bf       	out	0x3e, r29	; 62
    34b0:	0f be       	out	0x3f, r0	; 63
    34b2:	cd bf       	out	0x3d, r28	; 61
    34b4:	cf 91       	pop	r28
    34b6:	df 91       	pop	r29
    34b8:	1f 91       	pop	r17
    34ba:	0f 91       	pop	r16
    34bc:	ff 90       	pop	r15
    34be:	ef 90       	pop	r14
    34c0:	df 90       	pop	r13
    34c2:	cf 90       	pop	r12
    34c4:	bf 90       	pop	r11
    34c6:	af 90       	pop	r10
    34c8:	9f 90       	pop	r9
    34ca:	8f 90       	pop	r8
    34cc:	7f 90       	pop	r7
    34ce:	6f 90       	pop	r6
    34d0:	08 95       	ret

000034d2 <bmpTest>:
	}
	lprintf("out\n");
}

void bmpTest(void)
{
    34d2:	df 93       	push	r29
    34d4:	cf 93       	push	r28
    34d6:	cd b7       	in	r28, 0x3d	; 61
    34d8:	de b7       	in	r29, 0x3e	; 62
    34da:	28 97       	sbiw	r28, 0x08	; 8
    34dc:	0f b6       	in	r0, 0x3f	; 63
    34de:	f8 94       	cli
    34e0:	de bf       	out	0x3e, r29	; 62
    34e2:	0f be       	out	0x3f, r0	; 63
    34e4:	cd bf       	out	0x3d, r28	; 61
	long myPressure;
	long myTemp;
	bmp085Convert(&myTemp, &myPressure);
    34e6:	ce 01       	movw	r24, r28
    34e8:	05 96       	adiw	r24, 0x05	; 5
    34ea:	be 01       	movw	r22, r28
    34ec:	6f 5f       	subi	r22, 0xFF	; 255
    34ee:	7f 4f       	sbci	r23, 0xFF	; 255
    34f0:	0e 94 2a 09 	call	0x1254	; 0x1254 <bmp085Convert>

	//lprintf_P(PSTR("BMP085 Temp: %ld Pressure %ld\n"), myTemp, myPressure);
	lprintf_P(PSTR("BMP T: %ld\n"), myTemp);
    34f4:	00 d0       	rcall	.+0      	; 0x34f6 <bmpTest+0x24>
    34f6:	00 d0       	rcall	.+0      	; 0x34f8 <bmpTest+0x26>
    34f8:	00 d0       	rcall	.+0      	; 0x34fa <bmpTest+0x28>
    34fa:	8f e8       	ldi	r24, 0x8F	; 143
    34fc:	97 e0       	ldi	r25, 0x07	; 7
    34fe:	ed b7       	in	r30, 0x3d	; 61
    3500:	fe b7       	in	r31, 0x3e	; 62
    3502:	92 83       	std	Z+2, r25	; 0x02
    3504:	81 83       	std	Z+1, r24	; 0x01
    3506:	8d 81       	ldd	r24, Y+5	; 0x05
    3508:	9e 81       	ldd	r25, Y+6	; 0x06
    350a:	af 81       	ldd	r26, Y+7	; 0x07
    350c:	b8 85       	ldd	r27, Y+8	; 0x08
    350e:	83 83       	std	Z+3, r24	; 0x03
    3510:	94 83       	std	Z+4, r25	; 0x04
    3512:	a5 83       	std	Z+5, r26	; 0x05
    3514:	b6 83       	std	Z+6, r27	; 0x06
    3516:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
	lprintf_P(PSTR("BMP P: %ld\n"), myPressure);
    351a:	83 e8       	ldi	r24, 0x83	; 131
    351c:	97 e0       	ldi	r25, 0x07	; 7
    351e:	ed b7       	in	r30, 0x3d	; 61
    3520:	fe b7       	in	r31, 0x3e	; 62
    3522:	92 83       	std	Z+2, r25	; 0x02
    3524:	81 83       	std	Z+1, r24	; 0x01
    3526:	89 81       	ldd	r24, Y+1	; 0x01
    3528:	9a 81       	ldd	r25, Y+2	; 0x02
    352a:	ab 81       	ldd	r26, Y+3	; 0x03
    352c:	bc 81       	ldd	r27, Y+4	; 0x04
    352e:	83 83       	std	Z+3, r24	; 0x03
    3530:	94 83       	std	Z+4, r25	; 0x04
    3532:	a5 83       	std	Z+5, r26	; 0x05
    3534:	b6 83       	std	Z+6, r27	; 0x06
    3536:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
	lprintf("Test\n");
    353a:	0f 90       	pop	r0
    353c:	0f 90       	pop	r0
    353e:	0f 90       	pop	r0
    3540:	0f 90       	pop	r0
    3542:	88 ed       	ldi	r24, 0xD8	; 216
    3544:	91 e0       	ldi	r25, 0x01	; 1
    3546:	ed b7       	in	r30, 0x3d	; 61
    3548:	fe b7       	in	r31, 0x3e	; 62
    354a:	92 83       	std	Z+2, r25	; 0x02
    354c:	81 83       	std	Z+1, r24	; 0x01
    354e:	0e 94 77 13 	call	0x26ee	; 0x26ee <lprintf>
    3552:	0f 90       	pop	r0
    3554:	0f 90       	pop	r0
}
    3556:	28 96       	adiw	r28, 0x08	; 8
    3558:	0f b6       	in	r0, 0x3f	; 63
    355a:	f8 94       	cli
    355c:	de bf       	out	0x3e, r29	; 62
    355e:	0f be       	out	0x3f, r0	; 63
    3560:	cd bf       	out	0x3d, r28	; 61
    3562:	cf 91       	pop	r28
    3564:	df 91       	pop	r29
    3566:	08 95       	ret

00003568 <dumpTemps>:

void dumpTemps(void)
{
    3568:	8f 92       	push	r8
    356a:	9f 92       	push	r9
    356c:	af 92       	push	r10
    356e:	bf 92       	push	r11
    3570:	cf 92       	push	r12
    3572:	df 92       	push	r13
    3574:	ef 92       	push	r14
    3576:	ff 92       	push	r15
    3578:	0f 93       	push	r16
    357a:	1f 93       	push	r17
    357c:	cf 93       	push	r28
    357e:	df 93       	push	r29
	//get FC temp
	uint16_t rawFCTemp;
	int8_t internalTemp;
	rawFCTemp = tmp100rawTemp(TMP100FC)>>4;
    3580:	8e e9       	ldi	r24, 0x9E	; 158
    3582:	0e 94 56 10 	call	0x20ac	; 0x20ac <tmp100rawTemp>
    3586:	ec 01       	movw	r28, r24
    3588:	a4 e0       	ldi	r26, 0x04	; 4
    358a:	d6 95       	lsr	r29
    358c:	c7 95       	ror	r28
    358e:	aa 95       	dec	r26
    3590:	e1 f7       	brne	.-8      	; 0x358a <dumpTemps+0x22>
	int16_t fctinm = get12bit2scomp(rawFCTemp);
    3592:	ce 01       	movw	r24, r28
    3594:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <get12bit2scomp>
    3598:	6c 01       	movw	r12, r24
	internalTemp = (int8_t)(fctinm/16);
	//Convert to 8 bit

	//get ext temp
	uint16_t rawExtTemp = tmp100rawTemp(TMP100EXT)>>4;
    359a:	86 e9       	ldi	r24, 0x96	; 150
    359c:	0e 94 56 10 	call	0x20ac	; 0x20ac <tmp100rawTemp>
    35a0:	8c 01       	movw	r16, r24
    35a2:	f4 e0       	ldi	r31, 0x04	; 4
    35a4:	16 95       	lsr	r17
    35a6:	07 95       	ror	r16
    35a8:	fa 95       	dec	r31
    35aa:	e1 f7       	brne	.-8      	; 0x35a4 <dumpTemps+0x3c>
	int16_t externalTemperature = get12bit2scomp(rawExtTemp);
    35ac:	c8 01       	movw	r24, r16
    35ae:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <get12bit2scomp>
    35b2:	5c 01       	movw	r10, r24

	//get battetry temp
	uint16_t rawBattTemp = tmp100rawTemp(TMP101BH)>>4;
    35b4:	82 e9       	ldi	r24, 0x92	; 146
    35b6:	0e 94 56 10 	call	0x20ac	; 0x20ac <tmp100rawTemp>
    35ba:	7c 01       	movw	r14, r24
    35bc:	e4 e0       	ldi	r30, 0x04	; 4
    35be:	f6 94       	lsr	r15
    35c0:	e7 94       	ror	r14
    35c2:	ea 95       	dec	r30
    35c4:	e1 f7       	brne	.-8      	; 0x35be <dumpTemps+0x56>
	int16_t btinm = get12bit2scomp(rawBattTemp);
    35c6:	c7 01       	movw	r24, r14
    35c8:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <get12bit2scomp>
    35cc:	4c 01       	movw	r8, r24
	int8_t batteryTemperature = (int8_t)(btinm/16);
	//conver to 8 bit

	if(rawFCTemp != 0xEFF)
    35ce:	8e e0       	ldi	r24, 0x0E	; 14
    35d0:	cf 3f       	cpi	r28, 0xFF	; 255
    35d2:	d8 07       	cpc	r29, r24
    35d4:	29 f1       	breq	.+74     	; 0x3620 <dumpTemps+0xb8>
	{
		lprintf_P(PSTR("FC: Raw: %x Calc: %d\n"), rawFCTemp, internalTemp);
    35d6:	00 d0       	rcall	.+0      	; 0x35d8 <dumpTemps+0x70>
    35d8:	00 d0       	rcall	.+0      	; 0x35da <dumpTemps+0x72>
    35da:	00 d0       	rcall	.+0      	; 0x35dc <dumpTemps+0x74>
    35dc:	ed b7       	in	r30, 0x3d	; 61
    35de:	fe b7       	in	r31, 0x3e	; 62
    35e0:	31 96       	adiw	r30, 0x01	; 1
    35e2:	8d e6       	ldi	r24, 0x6D	; 109
    35e4:	97 e0       	ldi	r25, 0x07	; 7
    35e6:	ad b7       	in	r26, 0x3d	; 61
    35e8:	be b7       	in	r27, 0x3e	; 62
    35ea:	12 96       	adiw	r26, 0x02	; 2
    35ec:	9c 93       	st	X, r25
    35ee:	8e 93       	st	-X, r24
    35f0:	11 97       	sbiw	r26, 0x01	; 1
    35f2:	d3 83       	std	Z+3, r29	; 0x03
    35f4:	c2 83       	std	Z+2, r28	; 0x02
    35f6:	c6 01       	movw	r24, r12
    35f8:	60 e1       	ldi	r22, 0x10	; 16
    35fa:	70 e0       	ldi	r23, 0x00	; 0
    35fc:	0e 94 91 39 	call	0x7322	; 0x7322 <__divmodhi4>
    3600:	77 27       	eor	r23, r23
    3602:	67 fd       	sbrc	r22, 7
    3604:	70 95       	com	r23
    3606:	75 83       	std	Z+5, r23	; 0x05
    3608:	64 83       	std	Z+4, r22	; 0x04
    360a:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
    360e:	ed b7       	in	r30, 0x3d	; 61
    3610:	fe b7       	in	r31, 0x3e	; 62
    3612:	36 96       	adiw	r30, 0x06	; 6
    3614:	0f b6       	in	r0, 0x3f	; 63
    3616:	f8 94       	cli
    3618:	fe bf       	out	0x3e, r31	; 62
    361a:	0f be       	out	0x3f, r0	; 63
    361c:	ed bf       	out	0x3d, r30	; 61
    361e:	0d c0       	rjmp	.+26     	; 0x363a <dumpTemps+0xd2>
	} else {
		lprintf_P(PSTR("Error Reading FC Temp\n"));
    3620:	00 d0       	rcall	.+0      	; 0x3622 <dumpTemps+0xba>
    3622:	86 e5       	ldi	r24, 0x56	; 86
    3624:	97 e0       	ldi	r25, 0x07	; 7
    3626:	ad b7       	in	r26, 0x3d	; 61
    3628:	be b7       	in	r27, 0x3e	; 62
    362a:	12 96       	adiw	r26, 0x02	; 2
    362c:	9c 93       	st	X, r25
    362e:	8e 93       	st	-X, r24
    3630:	11 97       	sbiw	r26, 0x01	; 1
    3632:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
    3636:	0f 90       	pop	r0
    3638:	0f 90       	pop	r0
	}

	if(rawExtTemp != 0xEFF)
    363a:	be e0       	ldi	r27, 0x0E	; 14
    363c:	0f 3f       	cpi	r16, 0xFF	; 255
    363e:	1b 07       	cpc	r17, r27
    3640:	e9 f0       	breq	.+58     	; 0x367c <dumpTemps+0x114>
	{
		lprintf_P(PSTR("Ext: Raw: %x Calc: %d\n"), rawExtTemp, externalTemperature);
    3642:	00 d0       	rcall	.+0      	; 0x3644 <dumpTemps+0xdc>
    3644:	00 d0       	rcall	.+0      	; 0x3646 <dumpTemps+0xde>
    3646:	00 d0       	rcall	.+0      	; 0x3648 <dumpTemps+0xe0>
    3648:	ed b7       	in	r30, 0x3d	; 61
    364a:	fe b7       	in	r31, 0x3e	; 62
    364c:	31 96       	adiw	r30, 0x01	; 1
    364e:	8f e3       	ldi	r24, 0x3F	; 63
    3650:	97 e0       	ldi	r25, 0x07	; 7
    3652:	ad b7       	in	r26, 0x3d	; 61
    3654:	be b7       	in	r27, 0x3e	; 62
    3656:	12 96       	adiw	r26, 0x02	; 2
    3658:	9c 93       	st	X, r25
    365a:	8e 93       	st	-X, r24
    365c:	11 97       	sbiw	r26, 0x01	; 1
    365e:	13 83       	std	Z+3, r17	; 0x03
    3660:	02 83       	std	Z+2, r16	; 0x02
    3662:	b5 82       	std	Z+5, r11	; 0x05
    3664:	a4 82       	std	Z+4, r10	; 0x04
    3666:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
    366a:	ed b7       	in	r30, 0x3d	; 61
    366c:	fe b7       	in	r31, 0x3e	; 62
    366e:	36 96       	adiw	r30, 0x06	; 6
    3670:	0f b6       	in	r0, 0x3f	; 63
    3672:	f8 94       	cli
    3674:	fe bf       	out	0x3e, r31	; 62
    3676:	0f be       	out	0x3f, r0	; 63
    3678:	ed bf       	out	0x3d, r30	; 61
    367a:	0d c0       	rjmp	.+26     	; 0x3696 <dumpTemps+0x12e>
	} else {
		lprintf_P(PSTR("Error Reading External Temp\n"));
    367c:	00 d0       	rcall	.+0      	; 0x367e <dumpTemps+0x116>
    367e:	82 e2       	ldi	r24, 0x22	; 34
    3680:	97 e0       	ldi	r25, 0x07	; 7
    3682:	ad b7       	in	r26, 0x3d	; 61
    3684:	be b7       	in	r27, 0x3e	; 62
    3686:	12 96       	adiw	r26, 0x02	; 2
    3688:	9c 93       	st	X, r25
    368a:	8e 93       	st	-X, r24
    368c:	11 97       	sbiw	r26, 0x01	; 1
    368e:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
    3692:	0f 90       	pop	r0
    3694:	0f 90       	pop	r0
	}

	if(rawBattTemp != 0xEFF)
    3696:	bf ef       	ldi	r27, 0xFF	; 255
    3698:	eb 16       	cp	r14, r27
    369a:	be e0       	ldi	r27, 0x0E	; 14
    369c:	fb 06       	cpc	r15, r27
    369e:	29 f1       	breq	.+74     	; 0x36ea <dumpTemps+0x182>
	{
		lprintf_P(PSTR("Batt: Raw: %x Calc: %d\n"), rawBattTemp, batteryTemperature);
    36a0:	00 d0       	rcall	.+0      	; 0x36a2 <dumpTemps+0x13a>
    36a2:	00 d0       	rcall	.+0      	; 0x36a4 <dumpTemps+0x13c>
    36a4:	00 d0       	rcall	.+0      	; 0x36a6 <dumpTemps+0x13e>
    36a6:	ed b7       	in	r30, 0x3d	; 61
    36a8:	fe b7       	in	r31, 0x3e	; 62
    36aa:	31 96       	adiw	r30, 0x01	; 1
    36ac:	8a e0       	ldi	r24, 0x0A	; 10
    36ae:	97 e0       	ldi	r25, 0x07	; 7
    36b0:	ad b7       	in	r26, 0x3d	; 61
    36b2:	be b7       	in	r27, 0x3e	; 62
    36b4:	12 96       	adiw	r26, 0x02	; 2
    36b6:	9c 93       	st	X, r25
    36b8:	8e 93       	st	-X, r24
    36ba:	11 97       	sbiw	r26, 0x01	; 1
    36bc:	f3 82       	std	Z+3, r15	; 0x03
    36be:	e2 82       	std	Z+2, r14	; 0x02
    36c0:	c4 01       	movw	r24, r8
    36c2:	60 e1       	ldi	r22, 0x10	; 16
    36c4:	70 e0       	ldi	r23, 0x00	; 0
    36c6:	0e 94 91 39 	call	0x7322	; 0x7322 <__divmodhi4>
    36ca:	77 27       	eor	r23, r23
    36cc:	67 fd       	sbrc	r22, 7
    36ce:	70 95       	com	r23
    36d0:	75 83       	std	Z+5, r23	; 0x05
    36d2:	64 83       	std	Z+4, r22	; 0x04
    36d4:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
    36d8:	ed b7       	in	r30, 0x3d	; 61
    36da:	fe b7       	in	r31, 0x3e	; 62
    36dc:	36 96       	adiw	r30, 0x06	; 6
    36de:	0f b6       	in	r0, 0x3f	; 63
    36e0:	f8 94       	cli
    36e2:	fe bf       	out	0x3e, r31	; 62
    36e4:	0f be       	out	0x3f, r0	; 63
    36e6:	ed bf       	out	0x3d, r30	; 61
    36e8:	0d c0       	rjmp	.+26     	; 0x3704 <dumpTemps+0x19c>
	} else {
		lprintf_P(PSTR("Error Reading Battery Temp\n"));
    36ea:	00 d0       	rcall	.+0      	; 0x36ec <dumpTemps+0x184>
    36ec:	8e ee       	ldi	r24, 0xEE	; 238
    36ee:	96 e0       	ldi	r25, 0x06	; 6
    36f0:	ad b7       	in	r26, 0x3d	; 61
    36f2:	be b7       	in	r27, 0x3e	; 62
    36f4:	12 96       	adiw	r26, 0x02	; 2
    36f6:	9c 93       	st	X, r25
    36f8:	8e 93       	st	-X, r24
    36fa:	11 97       	sbiw	r26, 0x01	; 1
    36fc:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
    3700:	0f 90       	pop	r0
    3702:	0f 90       	pop	r0
	}
}
    3704:	df 91       	pop	r29
    3706:	cf 91       	pop	r28
    3708:	1f 91       	pop	r17
    370a:	0f 91       	pop	r16
    370c:	ff 90       	pop	r15
    370e:	ef 90       	pop	r14
    3710:	df 90       	pop	r13
    3712:	cf 90       	pop	r12
    3714:	bf 90       	pop	r11
    3716:	af 90       	pop	r10
    3718:	9f 90       	pop	r9
    371a:	8f 90       	pop	r8
    371c:	08 95       	ret

0000371e <collectData>:

}


void collectData(uint32_t time)
{
    371e:	2f 92       	push	r2
    3720:	3f 92       	push	r3
    3722:	4f 92       	push	r4
    3724:	5f 92       	push	r5
    3726:	6f 92       	push	r6
    3728:	7f 92       	push	r7
    372a:	8f 92       	push	r8
    372c:	9f 92       	push	r9
    372e:	af 92       	push	r10
    3730:	bf 92       	push	r11
    3732:	cf 92       	push	r12
    3734:	df 92       	push	r13
    3736:	ef 92       	push	r14
    3738:	ff 92       	push	r15
    373a:	0f 93       	push	r16
    373c:	1f 93       	push	r17
    373e:	df 93       	push	r29
    3740:	cf 93       	push	r28
    3742:	cd b7       	in	r28, 0x3d	; 61
    3744:	de b7       	in	r29, 0x3e	; 62
    3746:	c7 53       	subi	r28, 0x37	; 55
    3748:	d1 40       	sbci	r29, 0x01	; 1
    374a:	0f b6       	in	r0, 0x3f	; 63
    374c:	f8 94       	cli
    374e:	de bf       	out	0x3e, r29	; 62
    3750:	0f be       	out	0x3f, r0	; 63
    3752:	cd bf       	out	0x3d, r28	; 61
    3754:	c0 5d       	subi	r28, 0xD0	; 208
    3756:	de 4f       	sbci	r29, 0xFE	; 254
    3758:	68 83       	st	Y, r22
    375a:	79 83       	std	Y+1, r23	; 0x01
    375c:	8a 83       	std	Y+2, r24	; 0x02
    375e:	9b 83       	std	Y+3, r25	; 0x03
    3760:	c0 53       	subi	r28, 0x30	; 48
    3762:	d1 40       	sbci	r29, 0x01	; 1
	#ifdef FCPUDEBUG
		lprintf_P(PSTR("In Data Collector\n"));
    3764:	00 d0       	rcall	.+0      	; 0x3766 <collectData+0x48>
    3766:	85 e0       	ldi	r24, 0x05	; 5
    3768:	92 e0       	ldi	r25, 0x02	; 2
    376a:	ad b7       	in	r26, 0x3d	; 61
    376c:	be b7       	in	r27, 0x3e	; 62
    376e:	12 96       	adiw	r26, 0x02	; 2
    3770:	9c 93       	st	X, r25
    3772:	8e 93       	st	-X, r24
    3774:	11 97       	sbiw	r26, 0x01	; 1
    3776:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
	#endif
	char sampleString[SAMPLESTRINGSIZEINCHARS];
	memset(sampleString, 0x00, SAMPLESTRINGSIZEINCHARS);
    377a:	81 ee       	ldi	r24, 0xE1	; 225
    377c:	fe 01       	movw	r30, r28
    377e:	7f 96       	adiw	r30, 0x1f	; 31
    3780:	df 01       	movw	r26, r30
    3782:	1d 92       	st	X+, r1
    3784:	8a 95       	dec	r24
    3786:	e9 f7       	brne	.-6      	; 0x3782 <collectData+0x64>

	//get time
	uint32_t epochNow = now();
    3788:	0f 90       	pop	r0
    378a:	0f 90       	pop	r0
    378c:	0e 94 9c 14 	call	0x2938	; 0x2938 <now>
    3790:	c2 5e       	subi	r28, 0xE2	; 226
    3792:	de 4f       	sbci	r29, 0xFE	; 254
    3794:	68 83       	st	Y, r22
    3796:	79 83       	std	Y+1, r23	; 0x01
    3798:	8a 83       	std	Y+2, r24	; 0x02
    379a:	9b 83       	std	Y+3, r25	; 0x03
    379c:	ce 51       	subi	r28, 0x1E	; 30
    379e:	d1 40       	sbci	r29, 0x01	; 1
	//get ambient pressure
	long myPressure;
	long myTemp;
	bmp085Convert(&myTemp, &myPressure);
    37a0:	ce 01       	movw	r24, r28
    37a2:	05 96       	adiw	r24, 0x05	; 5
    37a4:	be 01       	movw	r22, r28
    37a6:	6f 5f       	subi	r22, 0xFF	; 255
    37a8:	7f 4f       	sbci	r23, 0xFF	; 255
    37aa:	0e 94 2a 09 	call	0x1254	; 0x1254 <bmp085Convert>
	//get FC temp
	uint16_t rawFCTemp;
	int8_t internalTemp;
	rawFCTemp = tmp100rawTemp(TMP100FC)>>4;
    37ae:	8e e9       	ldi	r24, 0x9E	; 158
    37b0:	0e 94 56 10 	call	0x20ac	; 0x20ac <tmp100rawTemp>
    37b4:	44 e0       	ldi	r20, 0x04	; 4
    37b6:	96 95       	lsr	r25
    37b8:	87 95       	ror	r24
    37ba:	4a 95       	dec	r20
    37bc:	e1 f7       	brne	.-8      	; 0x37b6 <collectData+0x98>
    37be:	c4 5e       	subi	r28, 0xE4	; 228
    37c0:	de 4f       	sbci	r29, 0xFE	; 254
    37c2:	99 83       	std	Y+1, r25	; 0x01
    37c4:	88 83       	st	Y, r24
    37c6:	cc 51       	subi	r28, 0x1C	; 28
    37c8:	d1 40       	sbci	r29, 0x01	; 1
	int16_t fctinm = get12bit2scomp(rawFCTemp);
    37ca:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <get12bit2scomp>
    37ce:	c6 5e       	subi	r28, 0xE6	; 230
    37d0:	de 4f       	sbci	r29, 0xFE	; 254
    37d2:	99 83       	std	Y+1, r25	; 0x01
    37d4:	88 83       	st	Y, r24
    37d6:	ca 51       	subi	r28, 0x1A	; 26
    37d8:	d1 40       	sbci	r29, 0x01	; 1
	internalTemp = (int8_t)(fctinm/16);
	//Convert to 8 bit

	//get ext temp
	uint16_t rawExtTemp = tmp100rawTemp(TMP100EXT)>>4;
    37da:	86 e9       	ldi	r24, 0x96	; 150
    37dc:	0e 94 56 10 	call	0x20ac	; 0x20ac <tmp100rawTemp>
    37e0:	34 e0       	ldi	r19, 0x04	; 4
    37e2:	96 95       	lsr	r25
    37e4:	87 95       	ror	r24
    37e6:	3a 95       	dec	r19
    37e8:	e1 f7       	brne	.-8      	; 0x37e2 <collectData+0xc4>
    37ea:	c8 5e       	subi	r28, 0xE8	; 232
    37ec:	de 4f       	sbci	r29, 0xFE	; 254
    37ee:	99 83       	std	Y+1, r25	; 0x01
    37f0:	88 83       	st	Y, r24
    37f2:	c8 51       	subi	r28, 0x18	; 24
    37f4:	d1 40       	sbci	r29, 0x01	; 1
	int16_t externalTemperature = get12bit2scomp(rawExtTemp);
    37f6:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <get12bit2scomp>
    37fa:	ca 5e       	subi	r28, 0xEA	; 234
    37fc:	de 4f       	sbci	r29, 0xFE	; 254
    37fe:	99 83       	std	Y+1, r25	; 0x01
    3800:	88 83       	st	Y, r24
    3802:	c6 51       	subi	r28, 0x16	; 22
    3804:	d1 40       	sbci	r29, 0x01	; 1

	//get battetry temp
	uint16_t rawBattTemp = tmp100rawTemp(TMP101BH)>>4;
    3806:	82 e9       	ldi	r24, 0x92	; 146
    3808:	0e 94 56 10 	call	0x20ac	; 0x20ac <tmp100rawTemp>
    380c:	24 e0       	ldi	r18, 0x04	; 4
    380e:	96 95       	lsr	r25
    3810:	87 95       	ror	r24
    3812:	2a 95       	dec	r18
    3814:	e1 f7       	brne	.-8      	; 0x380e <collectData+0xf0>
    3816:	cc 5e       	subi	r28, 0xEC	; 236
    3818:	de 4f       	sbci	r29, 0xFE	; 254
    381a:	99 83       	std	Y+1, r25	; 0x01
    381c:	88 83       	st	Y, r24
    381e:	c4 51       	subi	r28, 0x14	; 20
    3820:	d1 40       	sbci	r29, 0x01	; 1
	int16_t btinm = get12bit2scomp(rawBattTemp);
    3822:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <get12bit2scomp>
    3826:	ce 5e       	subi	r28, 0xEE	; 238
    3828:	de 4f       	sbci	r29, 0xFE	; 254
    382a:	99 83       	std	Y+1, r25	; 0x01
    382c:	88 83       	st	Y, r24
    382e:	c2 51       	subi	r28, 0x12	; 18
    3830:	d1 40       	sbci	r29, 0x01	; 1

	//get humidity
	//NEED COMMANDS FROM TIM
	uint8_t humidity[2] = {0,0};
	uint8_t humFinal;
	i2cSendStart();
    3832:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <i2cSendStart>
	i2cWaitForComplete();
    3836:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
	i2cSendByte(INTSENSOR);
    383a:	84 e1       	ldi	r24, 0x14	; 20
    383c:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
	i2cWaitForComplete();
    3840:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
	i2cSendByte(0x04);
    3844:	84 e0       	ldi	r24, 0x04	; 4
    3846:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
	i2cWaitForComplete();
    384a:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
	i2cSendStop();
    384e:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <i2cSendStop>
    3852:	00 e3       	ldi	r16, 0x30	; 48
    3854:	15 e7       	ldi	r17, 0x75	; 117
    3856:	c8 01       	movw	r24, r16
    3858:	01 97       	sbiw	r24, 0x01	; 1
    385a:	f1 f7       	brne	.-4      	; 0x3858 <collectData+0x13a>

	_delay_ms(10);

	i2cSendStart();
    385c:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <i2cSendStart>
	i2cWaitForComplete();
    3860:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
	i2cSendByte(INTSENSOR+1);
    3864:	85 e1       	ldi	r24, 0x15	; 21
    3866:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
	i2cWaitForComplete();
    386a:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
	i2cReceiveByte(1);
    386e:	81 e0       	ldi	r24, 0x01	; 1
    3870:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <i2cReceiveByte>
	i2cWaitForComplete();
    3874:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
	humidity[0] = i2cGetReceivedByte();
    3878:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <i2cGetReceivedByte>
    387c:	c1 5d       	subi	r28, 0xD1	; 209
    387e:	de 4f       	sbci	r29, 0xFE	; 254
    3880:	88 83       	st	Y, r24
    3882:	cf 52       	subi	r28, 0x2F	; 47
    3884:	d1 40       	sbci	r29, 0x01	; 1
	i2cWaitForComplete();
    3886:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
	i2cReceiveByte(0);
    388a:	80 e0       	ldi	r24, 0x00	; 0
    388c:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <i2cReceiveByte>
	i2cWaitForComplete();
    3890:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
	humidity[1] += i2cGetReceivedByte();
    3894:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <i2cGetReceivedByte>
    3898:	c2 5d       	subi	r28, 0xD2	; 210
    389a:	de 4f       	sbci	r29, 0xFE	; 254
    389c:	88 83       	st	Y, r24
    389e:	ce 52       	subi	r28, 0x2E	; 46
    38a0:	d1 40       	sbci	r29, 0x01	; 1
	i2cWaitForComplete();
    38a2:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
	i2cSendStop();
    38a6:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <i2cSendStop>
	humFinal = (uint8_t)(humInt*2);

	//get coud sensor value
	uint8_t cloudVal[2]= {0,0};
	uint8_t cloudFinal;
	i2cSendStart();
    38aa:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <i2cSendStart>
	i2cWaitForComplete();
    38ae:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
	i2cSendByte(INTSENSOR);
    38b2:	84 e1       	ldi	r24, 0x14	; 20
    38b4:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
	i2cWaitForComplete();
    38b8:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
	i2cSendByte(0x09);
    38bc:	89 e0       	ldi	r24, 0x09	; 9
    38be:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
	i2cWaitForComplete();
    38c2:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
	i2cSendStop();
    38c6:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <i2cSendStop>
    38ca:	c8 01       	movw	r24, r16
    38cc:	01 97       	sbiw	r24, 0x01	; 1
    38ce:	f1 f7       	brne	.-4      	; 0x38cc <collectData+0x1ae>

	_delay_ms(10);

	i2cSendStart();
    38d0:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <i2cSendStart>
	i2cWaitForComplete();
    38d4:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
	i2cSendByte(INTSENSOR+1);
    38d8:	85 e1       	ldi	r24, 0x15	; 21
    38da:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
	i2cWaitForComplete();
    38de:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
	i2cReceiveByte(1);
    38e2:	81 e0       	ldi	r24, 0x01	; 1
    38e4:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <i2cReceiveByte>
	i2cWaitForComplete();
    38e8:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
	cloudVal[0] = i2cGetReceivedByte();
    38ec:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <i2cGetReceivedByte>
	i2cWaitForComplete();
    38f0:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
	i2cReceiveByte(0);
    38f4:	80 e0       	ldi	r24, 0x00	; 0
    38f6:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <i2cReceiveByte>
	i2cWaitForComplete();
    38fa:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
	cloudVal[1] += i2cGetReceivedByte();
    38fe:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <i2cGetReceivedByte>
	i2cWaitForComplete();
    3902:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
	i2cSendStop();
    3906:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <i2cSendStop>
	//get heading
	//get ground speed
	//get gps fix
	//get HDOP
	//get VDOP
	struct gpsData myGPS = currentPositionData;
    390a:	de 01       	movw	r26, r28
    390c:	19 96       	adiw	r26, 0x09	; 9
    390e:	eb e3       	ldi	r30, 0x3B	; 59
    3910:	f4 e0       	ldi	r31, 0x04	; 4
    3912:	86 e1       	ldi	r24, 0x16	; 22
    3914:	01 90       	ld	r0, Z+
    3916:	0d 92       	st	X+, r0
    3918:	81 50       	subi	r24, 0x01	; 1
    391a:	e1 f7       	brne	.-8      	; 0x3914 <collectData+0x1f6>
    391c:	8e 85       	ldd	r24, Y+14	; 0x0e
    391e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3920:	a8 89       	ldd	r26, Y+16	; 0x10
    3922:	b9 89       	ldd	r27, Y+17	; 0x11
    3924:	c2 5f       	subi	r28, 0xF2	; 242
    3926:	de 4f       	sbci	r29, 0xFE	; 254
    3928:	88 83       	st	Y, r24
    392a:	99 83       	std	Y+1, r25	; 0x01
    392c:	aa 83       	std	Y+2, r26	; 0x02
    392e:	bb 83       	std	Y+3, r27	; 0x03
    3930:	ce 50       	subi	r28, 0x0E	; 14
    3932:	d1 40       	sbci	r29, 0x01	; 1
    3934:	8a 85       	ldd	r24, Y+10	; 0x0a
    3936:	9b 85       	ldd	r25, Y+11	; 0x0b
    3938:	ac 85       	ldd	r26, Y+12	; 0x0c
    393a:	bd 85       	ldd	r27, Y+13	; 0x0d
    393c:	c6 5f       	subi	r28, 0xF6	; 246
    393e:	de 4f       	sbci	r29, 0xFE	; 254
    3940:	88 83       	st	Y, r24
    3942:	99 83       	std	Y+1, r25	; 0x01
    3944:	aa 83       	std	Y+2, r26	; 0x02
    3946:	bb 83       	std	Y+3, r27	; 0x03
    3948:	ca 50       	subi	r28, 0x0A	; 10
    394a:	d1 40       	sbci	r29, 0x01	; 1
    394c:	ac 8d       	ldd	r26, Y+28	; 0x1c
    394e:	bd 8d       	ldd	r27, Y+29	; 0x1d
    3950:	c8 5f       	subi	r28, 0xF8	; 248
    3952:	de 4f       	sbci	r29, 0xFE	; 254
    3954:	b9 83       	std	Y+1, r27	; 0x01
    3956:	a8 83       	st	Y, r26
    3958:	c8 50       	subi	r28, 0x08	; 8
    395a:	d1 40       	sbci	r29, 0x01	; 1
    395c:	eb 89       	ldd	r30, Y+19	; 0x13
    395e:	fc 89       	ldd	r31, Y+20	; 0x14
    3960:	ca 5f       	subi	r28, 0xFA	; 250
    3962:	de 4f       	sbci	r29, 0xFE	; 254
    3964:	f9 83       	std	Y+1, r31	; 0x01
    3966:	e8 83       	st	Y, r30
    3968:	c6 50       	subi	r28, 0x06	; 6
    396a:	d1 40       	sbci	r29, 0x01	; 1
    396c:	fa 89       	ldd	r31, Y+18	; 0x12
    396e:	cb 5f       	subi	r28, 0xFB	; 251
    3970:	de 4f       	sbci	r29, 0xFE	; 254
    3972:	f8 83       	st	Y, r31
    3974:	c5 50       	subi	r28, 0x05	; 5
    3976:	d1 40       	sbci	r29, 0x01	; 1
    3978:	29 85       	ldd	r18, Y+9	; 0x09
    397a:	cc 5f       	subi	r28, 0xFC	; 252
    397c:	de 4f       	sbci	r29, 0xFE	; 254
    397e:	28 83       	st	Y, r18
    3980:	c4 50       	subi	r28, 0x04	; 4
    3982:	d1 40       	sbci	r29, 0x01	; 1
    3984:	8d 89       	ldd	r24, Y+21	; 0x15
    3986:	9e 89       	ldd	r25, Y+22	; 0x16
    3988:	ce 5f       	subi	r28, 0xFE	; 254
    398a:	de 4f       	sbci	r29, 0xFE	; 254
    398c:	99 83       	std	Y+1, r25	; 0x01
    398e:	88 83       	st	Y, r24
    3990:	c2 50       	subi	r28, 0x02	; 2
    3992:	d1 40       	sbci	r29, 0x01	; 1
    3994:	af 89       	ldd	r26, Y+23	; 0x17
    3996:	b8 8d       	ldd	r27, Y+24	; 0x18
    3998:	c0 50       	subi	r28, 0x00	; 0
    399a:	df 4f       	sbci	r29, 0xFF	; 255
    399c:	b9 83       	std	Y+1, r27	; 0x01
    399e:	a8 83       	st	Y, r26
    39a0:	c0 50       	subi	r28, 0x00	; 0
    39a2:	d1 40       	sbci	r29, 0x01	; 1
	//get climb rate
	//This is global variable VSpeedAvg

	//get raw pack voltage
	//AD7998 Interfacing
	i2cSendStart();
    39a4:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <i2cSendStart>
	i2cWaitForComplete();
    39a8:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
	i2cSendByte(AD7992);
    39ac:	80 e4       	ldi	r24, 0x40	; 64
    39ae:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
	i2cWaitForComplete();
    39b2:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
	i2cSendByte(0x10);
    39b6:	80 e1       	ldi	r24, 0x10	; 16
    39b8:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
	i2cWaitForComplete();
    39bc:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
	i2cSendStop();
    39c0:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <i2cSendStop>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    39c4:	84 e1       	ldi	r24, 0x14	; 20
    39c6:	8a 95       	dec	r24
    39c8:	f1 f7       	brne	.-4      	; 0x39c6 <collectData+0x2a8>

	_delay_us(5);

	i2cSendStart();
    39ca:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <i2cSendStart>
	i2cWaitForComplete();
    39ce:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
	i2cSendByte(AD7992+1);
    39d2:	81 e4       	ldi	r24, 0x41	; 65
    39d4:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
	i2cWaitForComplete();
    39d8:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
	i2cReceiveByte(1);
    39dc:	81 e0       	ldi	r24, 0x01	; 1
    39de:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <i2cReceiveByte>
	i2cWaitForComplete();
    39e2:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
	uint16_t batteryValue = (uint16_t)i2cGetReceivedByte() << 8;
    39e6:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <i2cGetReceivedByte>
    39ea:	c3 5d       	subi	r28, 0xD3	; 211
    39ec:	de 4f       	sbci	r29, 0xFE	; 254
    39ee:	88 83       	st	Y, r24
    39f0:	cd 52       	subi	r28, 0x2D	; 45
    39f2:	d1 40       	sbci	r29, 0x01	; 1
	i2cWaitForComplete();
    39f4:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
	i2cReceiveByte(0);
    39f8:	80 e0       	ldi	r24, 0x00	; 0
    39fa:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <i2cReceiveByte>
	i2cWaitForComplete();
    39fe:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
	batteryValue += i2cGetReceivedByte();
    3a02:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <i2cGetReceivedByte>
    3a06:	c4 5d       	subi	r28, 0xD4	; 212
    3a08:	de 4f       	sbci	r29, 0xFE	; 254
    3a0a:	88 83       	st	Y, r24
    3a0c:	cc 52       	subi	r28, 0x2C	; 44
    3a0e:	d1 40       	sbci	r29, 0x01	; 1
	i2cWaitForComplete();
    3a10:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
	i2cSendStop();
    3a14:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <i2cSendStop>
	batteryValue = (uint16_t)((((float)batteryValue*0.0047647))*10.);
	uint8_t outputVoltage = (uint8_t)batteryValue;

	//get ballast valve state
	uint8_t ballastError = 0;
	i2cSendStart();
    3a18:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <i2cSendStart>
	ballastError |= i2cWaitForComplete();
    3a1c:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    3a20:	c5 5d       	subi	r28, 0xD5	; 213
    3a22:	de 4f       	sbci	r29, 0xFE	; 254
    3a24:	88 83       	st	Y, r24
    3a26:	cb 52       	subi	r28, 0x2B	; 43
    3a28:	d1 40       	sbci	r29, 0x01	; 1
	i2cSendByte(18);
    3a2a:	82 e1       	ldi	r24, 0x12	; 18
    3a2c:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
	ballastError |= i2cWaitForComplete();
    3a30:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    3a34:	88 2e       	mov	r8, r24
	i2cSendByte(9);
    3a36:	89 e0       	ldi	r24, 0x09	; 9
    3a38:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
	ballastError |= i2cWaitForComplete();
    3a3c:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    3a40:	c6 5d       	subi	r28, 0xD6	; 214
    3a42:	de 4f       	sbci	r29, 0xFE	; 254
    3a44:	88 83       	st	Y, r24
    3a46:	ca 52       	subi	r28, 0x2A	; 42
    3a48:	d1 40       	sbci	r29, 0x01	; 1
	i2cSendByte(1);
    3a4a:	81 e0       	ldi	r24, 0x01	; 1
    3a4c:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
	ballastError |= i2cWaitForComplete();
    3a50:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    3a54:	c7 5d       	subi	r28, 0xD7	; 215
    3a56:	de 4f       	sbci	r29, 0xFE	; 254
    3a58:	88 83       	st	Y, r24
    3a5a:	c9 52       	subi	r28, 0x29	; 41
    3a5c:	d1 40       	sbci	r29, 0x01	; 1
	i2cSendStop();
    3a5e:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <i2cSendStop>
    3a62:	80 e1       	ldi	r24, 0x10	; 16
    3a64:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3a66:	2c e2       	ldi	r18, 0x2C	; 44
    3a68:	31 e0       	ldi	r19, 0x01	; 1
    3a6a:	f9 01       	movw	r30, r18
    3a6c:	31 97       	sbiw	r30, 0x01	; 1
    3a6e:	f1 f7       	brne	.-4      	; 0x3a6c <collectData+0x34e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a70:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a72:	d9 f7       	brne	.-10     	; 0x3a6a <collectData+0x34c>

	_delay_ms(1000);

	i2cSendStart();
    3a74:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <i2cSendStart>
	ballastError |= i2cWaitForComplete();
    3a78:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    3a7c:	c8 5d       	subi	r28, 0xD8	; 216
    3a7e:	de 4f       	sbci	r29, 0xFE	; 254
    3a80:	88 83       	st	Y, r24
    3a82:	c8 52       	subi	r28, 0x28	; 40
    3a84:	d1 40       	sbci	r29, 0x01	; 1
	i2cSendByte(0x13);
    3a86:	83 e1       	ldi	r24, 0x13	; 19
    3a88:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
	ballastError |= i2cWaitForComplete();
    3a8c:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    3a90:	c9 5d       	subi	r28, 0xD9	; 217
    3a92:	de 4f       	sbci	r29, 0xFE	; 254
    3a94:	88 83       	st	Y, r24
    3a96:	c7 52       	subi	r28, 0x27	; 39
    3a98:	d1 40       	sbci	r29, 0x01	; 1
	i2cReceiveByte(1);
    3a9a:	81 e0       	ldi	r24, 0x01	; 1
    3a9c:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <i2cReceiveByte>
	ballastError |= i2cWaitForComplete();
    3aa0:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    3aa4:	ca 5d       	subi	r28, 0xDA	; 218
    3aa6:	de 4f       	sbci	r29, 0xFE	; 254
    3aa8:	88 83       	st	Y, r24
    3aaa:	c6 52       	subi	r28, 0x26	; 38
    3aac:	d1 40       	sbci	r29, 0x01	; 1
	uint16_t valveStatus = (uint16_t)i2cGetReceivedByte() << 8;
    3aae:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <i2cGetReceivedByte>
    3ab2:	cb 5d       	subi	r28, 0xDB	; 219
    3ab4:	de 4f       	sbci	r29, 0xFE	; 254
    3ab6:	88 83       	st	Y, r24
    3ab8:	c5 52       	subi	r28, 0x25	; 37
    3aba:	d1 40       	sbci	r29, 0x01	; 1
	ballastError |= i2cWaitForComplete();
    3abc:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    3ac0:	38 2e       	mov	r3, r24
	i2cReceiveByte(0);
    3ac2:	80 e0       	ldi	r24, 0x00	; 0
    3ac4:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <i2cReceiveByte>
	ballastError |= i2cWaitForComplete();
    3ac8:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    3acc:	48 2e       	mov	r4, r24
	valveStatus += i2cGetReceivedByte();
    3ace:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <i2cGetReceivedByte>
    3ad2:	cc 5d       	subi	r28, 0xDC	; 220
    3ad4:	de 4f       	sbci	r29, 0xFE	; 254
    3ad6:	88 83       	st	Y, r24
    3ad8:	c4 52       	subi	r28, 0x24	; 36
    3ada:	d1 40       	sbci	r29, 0x01	; 1
	ballastError |= i2cWaitForComplete();
    3adc:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    3ae0:	58 2e       	mov	r5, r24
	i2cSendStop();
    3ae2:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <i2cSendStop>

	//1 = open, 0 = closed

	//get ballast remaining
	i2cSendStart();
    3ae6:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <i2cSendStart>
	ballastError |= i2cWaitForComplete();
    3aea:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    3aee:	78 2e       	mov	r7, r24
	i2cSendByte(18);
    3af0:	82 e1       	ldi	r24, 0x12	; 18
    3af2:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
	ballastError |= i2cWaitForComplete();
    3af6:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    3afa:	28 2e       	mov	r2, r24
	i2cSendByte(9);
    3afc:	89 e0       	ldi	r24, 0x09	; 9
    3afe:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
	ballastError |= i2cWaitForComplete();
    3b02:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    3b06:	68 2e       	mov	r6, r24
	i2cSendByte(2);
    3b08:	82 e0       	ldi	r24, 0x02	; 2
    3b0a:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
	ballastError |= i2cWaitForComplete();
    3b0e:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    3b12:	98 2e       	mov	r9, r24
	i2cSendStop();
    3b14:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <i2cSendStop>
    3b18:	80 e1       	ldi	r24, 0x10	; 16
    3b1a:	97 e2       	ldi	r25, 0x27	; 39
    3b1c:	2c e2       	ldi	r18, 0x2C	; 44
    3b1e:	31 e0       	ldi	r19, 0x01	; 1
    3b20:	f9 01       	movw	r30, r18
    3b22:	31 97       	sbiw	r30, 0x01	; 1
    3b24:	f1 f7       	brne	.-4      	; 0x3b22 <collectData+0x404>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b26:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b28:	d9 f7       	brne	.-10     	; 0x3b20 <collectData+0x402>

	_delay_ms(1000);

	i2cSendStart();
    3b2a:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <i2cSendStart>
	ballastError |= i2cWaitForComplete();
    3b2e:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    3b32:	a8 2e       	mov	r10, r24
	i2cSendByte(18+1);
    3b34:	83 e1       	ldi	r24, 0x13	; 19
    3b36:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
	ballastError |= i2cWaitForComplete();
    3b3a:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    3b3e:	b8 2e       	mov	r11, r24
	i2cReceiveByte(1);
    3b40:	81 e0       	ldi	r24, 0x01	; 1
    3b42:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <i2cReceiveByte>
	ballastError |= i2cWaitForComplete();
    3b46:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    3b4a:	e8 2e       	mov	r14, r24
	uint16_t ballastRemaining = (uint16_t)i2cGetReceivedByte() << 8;
    3b4c:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <i2cGetReceivedByte>
    3b50:	d8 2e       	mov	r13, r24
    3b52:	cc 24       	eor	r12, r12
	ballastError |= i2cWaitForComplete();
    3b54:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    3b58:	f8 2e       	mov	r15, r24
	i2cReceiveByte(0);
    3b5a:	80 e0       	ldi	r24, 0x00	; 0
    3b5c:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <i2cReceiveByte>
	ballastError |= i2cWaitForComplete();
    3b60:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    3b64:	08 2f       	mov	r16, r24
	ballastRemaining += (uint16_t)i2cGetReceivedByte();
    3b66:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <i2cGetReceivedByte>
    3b6a:	cd 5d       	subi	r28, 0xDD	; 221
    3b6c:	de 4f       	sbci	r29, 0xFE	; 254
    3b6e:	88 83       	st	Y, r24
    3b70:	c3 52       	subi	r28, 0x23	; 35
    3b72:	d1 40       	sbci	r29, 0x01	; 1
	ballastError |= i2cWaitForComplete();
    3b74:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
    3b78:	18 2f       	mov	r17, r24
	//get ballast valve state
	uint8_t ballastError = 0;
	i2cSendStart();
	ballastError |= i2cWaitForComplete();
	i2cSendByte(18);
	ballastError |= i2cWaitForComplete();
    3b7a:	c5 5d       	subi	r28, 0xD5	; 213
    3b7c:	de 4f       	sbci	r29, 0xFE	; 254
    3b7e:	b8 81       	ld	r27, Y
    3b80:	cb 52       	subi	r28, 0x2B	; 43
    3b82:	d1 40       	sbci	r29, 0x01	; 1
    3b84:	8b 2a       	or	r8, r27
	i2cSendByte(9);
	ballastError |= i2cWaitForComplete();
    3b86:	c6 5d       	subi	r28, 0xD6	; 214
    3b88:	de 4f       	sbci	r29, 0xFE	; 254
    3b8a:	e8 81       	ld	r30, Y
    3b8c:	ca 52       	subi	r28, 0x2A	; 42
    3b8e:	d1 40       	sbci	r29, 0x01	; 1
    3b90:	8e 2a       	or	r8, r30
	i2cSendByte(1);
	ballastError |= i2cWaitForComplete();
    3b92:	c7 5d       	subi	r28, 0xD7	; 215
    3b94:	de 4f       	sbci	r29, 0xFE	; 254
    3b96:	f8 81       	ld	r31, Y
    3b98:	c9 52       	subi	r28, 0x29	; 41
    3b9a:	d1 40       	sbci	r29, 0x01	; 1
    3b9c:	8f 2a       	or	r8, r31
	i2cSendStop();

	_delay_ms(1000);

	i2cSendStart();
	ballastError |= i2cWaitForComplete();
    3b9e:	c8 5d       	subi	r28, 0xD8	; 216
    3ba0:	de 4f       	sbci	r29, 0xFE	; 254
    3ba2:	28 81       	ld	r18, Y
    3ba4:	c8 52       	subi	r28, 0x28	; 40
    3ba6:	d1 40       	sbci	r29, 0x01	; 1
    3ba8:	82 2a       	or	r8, r18
	i2cSendByte(0x13);
	ballastError |= i2cWaitForComplete();
    3baa:	c9 5d       	subi	r28, 0xD9	; 217
    3bac:	de 4f       	sbci	r29, 0xFE	; 254
    3bae:	38 81       	ld	r19, Y
    3bb0:	c7 52       	subi	r28, 0x27	; 39
    3bb2:	d1 40       	sbci	r29, 0x01	; 1
    3bb4:	83 2a       	or	r8, r19
	i2cReceiveByte(1);
	ballastError |= i2cWaitForComplete();
    3bb6:	ca 5d       	subi	r28, 0xDA	; 218
    3bb8:	de 4f       	sbci	r29, 0xFE	; 254
    3bba:	88 81       	ld	r24, Y
    3bbc:	c6 52       	subi	r28, 0x26	; 38
    3bbe:	d1 40       	sbci	r29, 0x01	; 1
    3bc0:	88 2a       	or	r8, r24
	uint16_t valveStatus = (uint16_t)i2cGetReceivedByte() << 8;
	ballastError |= i2cWaitForComplete();
    3bc2:	83 28       	or	r8, r3
	i2cReceiveByte(0);
	ballastError |= i2cWaitForComplete();
    3bc4:	84 28       	or	r8, r4
	valveStatus += i2cGetReceivedByte();
	ballastError |= i2cWaitForComplete();
    3bc6:	85 28       	or	r8, r5

	//1 = open, 0 = closed

	//get ballast remaining
	i2cSendStart();
	ballastError |= i2cWaitForComplete();
    3bc8:	87 28       	or	r8, r7
	i2cSendByte(18);
	ballastError |= i2cWaitForComplete();
    3bca:	82 28       	or	r8, r2
	i2cSendByte(9);
	ballastError |= i2cWaitForComplete();
    3bcc:	86 28       	or	r8, r6
	i2cSendByte(2);
	ballastError |= i2cWaitForComplete();
    3bce:	89 28       	or	r8, r9
	i2cSendStop();

	_delay_ms(1000);

	i2cSendStart();
	ballastError |= i2cWaitForComplete();
    3bd0:	8a 28       	or	r8, r10
	i2cSendByte(18+1);
	ballastError |= i2cWaitForComplete();
    3bd2:	8b 28       	or	r8, r11
	i2cReceiveByte(1);
	ballastError |= i2cWaitForComplete();
    3bd4:	8e 28       	or	r8, r14
	uint16_t ballastRemaining = (uint16_t)i2cGetReceivedByte() << 8;
	ballastError |= i2cWaitForComplete();
    3bd6:	8f 28       	or	r8, r15
	i2cReceiveByte(0);
	ballastError |= i2cWaitForComplete();
    3bd8:	80 2a       	or	r8, r16
	ballastRemaining += (uint16_t)i2cGetReceivedByte();
	ballastError |= i2cWaitForComplete();
	i2cSendStop();
    3bda:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <i2cSendStop>

	statusCode = (statusCode & 0xFFFD) | (ballastError << 1);
    3bde:	81 2a       	or	r8, r17
    3be0:	28 2d       	mov	r18, r8
    3be2:	30 e0       	ldi	r19, 0x00	; 0
    3be4:	22 0f       	add	r18, r18
    3be6:	33 1f       	adc	r19, r19
    3be8:	80 91 2f 03 	lds	r24, 0x032F
    3bec:	90 91 30 03 	lds	r25, 0x0330
    3bf0:	8d 7f       	andi	r24, 0xFD	; 253
    3bf2:	28 2b       	or	r18, r24
    3bf4:	39 2b       	or	r19, r25
    3bf6:	30 93 30 03 	sts	0x0330, r19
    3bfa:	20 93 2f 03 	sts	0x032F, r18
	//variable StatusCode

	//Get Helium temperature
	uint16_t heliumTemperature;
	uint8_t helVal[2]= {0,0};
	i2cSendStart();
    3bfe:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <i2cSendStart>
	i2cWaitForComplete();
    3c02:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
	i2cSendByte(INTSENSOR);
    3c06:	84 e1       	ldi	r24, 0x14	; 20
    3c08:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
	i2cWaitForComplete();
    3c0c:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
	i2cSendByte(0x0A);
    3c10:	8a e0       	ldi	r24, 0x0A	; 10
    3c12:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
	i2cWaitForComplete();
    3c16:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
	i2cSendStop();
    3c1a:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <i2cSendStop>
    3c1e:	80 e3       	ldi	r24, 0x30	; 48
    3c20:	95 e7       	ldi	r25, 0x75	; 117
    3c22:	01 97       	sbiw	r24, 0x01	; 1
    3c24:	f1 f7       	brne	.-4      	; 0x3c22 <collectData+0x504>

	_delay_ms(10);

	i2cSendStart();
    3c26:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <i2cSendStart>
	i2cWaitForComplete();
    3c2a:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
	i2cSendByte(INTSENSOR+1);
    3c2e:	85 e1       	ldi	r24, 0x15	; 21
    3c30:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <i2cSendByte>
	i2cWaitForComplete();
    3c34:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
	i2cReceiveByte(1);
    3c38:	81 e0       	ldi	r24, 0x01	; 1
    3c3a:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <i2cReceiveByte>
	i2cWaitForComplete();
    3c3e:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
	helVal[0] = i2cGetReceivedByte();
    3c42:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <i2cGetReceivedByte>
	i2cWaitForComplete();
    3c46:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
	i2cReceiveByte(0);
    3c4a:	80 e0       	ldi	r24, 0x00	; 0
    3c4c:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <i2cReceiveByte>
	i2cWaitForComplete();
    3c50:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
	helVal[1] += i2cGetReceivedByte();
    3c54:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <i2cGetReceivedByte>
    3c58:	ce 5d       	subi	r28, 0xDE	; 222
    3c5a:	de 4f       	sbci	r29, 0xFE	; 254
    3c5c:	88 83       	st	Y, r24
    3c5e:	c2 52       	subi	r28, 0x22	; 34
    3c60:	d1 40       	sbci	r29, 0x01	; 1
	i2cWaitForComplete();
    3c62:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <i2cWaitForComplete>
	i2cSendStop();
    3c66:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <i2cSendStop>
	cloudFinal = (helVal[0] << 8) | (helVal[1]);
	//NEED COMMANDS FROM TIM

	//format into string
	sprintf_P(sampleString, PSTR("%ld," //Epoch
    3c6a:	29 80       	ldd	r2, Y+1	; 0x01
    3c6c:	3a 80       	ldd	r3, Y+2	; 0x02
    3c6e:	4b 80       	ldd	r4, Y+3	; 0x03
    3c70:	5c 80       	ldd	r5, Y+4	; 0x04
    3c72:	c1 5d       	subi	r28, 0xD1	; 209
    3c74:	de 4f       	sbci	r29, 0xFE	; 254
    3c76:	78 81       	ld	r23, Y
    3c78:	cf 52       	subi	r28, 0x2F	; 47
    3c7a:	d1 40       	sbci	r29, 0x01	; 1
    3c7c:	60 e0       	ldi	r22, 0x00	; 0
    3c7e:	c2 5d       	subi	r28, 0xD2	; 210
    3c80:	de 4f       	sbci	r29, 0xFE	; 254
    3c82:	98 81       	ld	r25, Y
    3c84:	ce 52       	subi	r28, 0x2E	; 46
    3c86:	d1 40       	sbci	r29, 0x01	; 1
    3c88:	29 2f       	mov	r18, r25
    3c8a:	30 e0       	ldi	r19, 0x00	; 0
    3c8c:	62 2b       	or	r22, r18
    3c8e:	73 2b       	or	r23, r19
    3c90:	80 e0       	ldi	r24, 0x00	; 0
    3c92:	90 e0       	ldi	r25, 0x00	; 0
    3c94:	0e 94 51 38 	call	0x70a2	; 0x70a2 <__floatunsisf>
    3c98:	20 e0       	ldi	r18, 0x00	; 0
    3c9a:	30 e0       	ldi	r19, 0x00	; 0
    3c9c:	40 e8       	ldi	r20, 0x80	; 128
    3c9e:	5a e3       	ldi	r21, 0x3A	; 58
    3ca0:	0e 94 03 39 	call	0x7206	; 0x7206 <__mulsf3>
    3ca4:	2a e0       	ldi	r18, 0x0A	; 10
    3ca6:	37 ed       	ldi	r19, 0xD7	; 215
    3ca8:	43 e2       	ldi	r20, 0x23	; 35
    3caa:	5e e3       	ldi	r21, 0x3E	; 62
    3cac:	0e 94 4f 37 	call	0x6e9e	; 0x6e9e <__subsf3>
    3cb0:	2f e5       	ldi	r18, 0x5F	; 95
    3cb2:	39 e2       	ldi	r19, 0x29	; 41
    3cb4:	4b ec       	ldi	r20, 0xCB	; 203
    3cb6:	5b e3       	ldi	r21, 0x3B	; 59
    3cb8:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__divsf3>
    3cbc:	9b 01       	movw	r18, r22
    3cbe:	ac 01       	movw	r20, r24
    3cc0:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <__addsf3>
    3cc4:	0e 94 25 38 	call	0x704a	; 0x704a <__fixunssfsi>
    3cc8:	4b 01       	movw	r8, r22
    3cca:	5c 01       	movw	r10, r24
	i2cWaitForComplete();
	i2cSendByte(AD7992+1);
	i2cWaitForComplete();
	i2cReceiveByte(1);
	i2cWaitForComplete();
	uint16_t batteryValue = (uint16_t)i2cGetReceivedByte() << 8;
    3ccc:	c3 5d       	subi	r28, 0xD3	; 211
    3cce:	de 4f       	sbci	r29, 0xFE	; 254
    3cd0:	78 81       	ld	r23, Y
    3cd2:	cd 52       	subi	r28, 0x2D	; 45
    3cd4:	d1 40       	sbci	r29, 0x01	; 1
    3cd6:	60 e0       	ldi	r22, 0x00	; 0
	i2cWaitForComplete();
	i2cReceiveByte(0);
	i2cWaitForComplete();
	batteryValue += i2cGetReceivedByte();
    3cd8:	c4 5d       	subi	r28, 0xD4	; 212
    3cda:	de 4f       	sbci	r29, 0xFE	; 254
    3cdc:	a8 81       	ld	r26, Y
    3cde:	cc 52       	subi	r28, 0x2C	; 44
    3ce0:	d1 40       	sbci	r29, 0x01	; 1
    3ce2:	6a 0f       	add	r22, r26
    3ce4:	71 1d       	adc	r23, r1
	batteryValue &= 0x0FFF;
	//This is not such a magic value.  12 bits AD = 4096
	//Divider network = 4.07 kohms and 20 khoms
	//(3.3 volts / 4096) * (24.07/4.07) = 0.0047647
	//Multiply by 10 to get bigger value.
	batteryValue = (uint16_t)((((float)batteryValue*0.0047647))*10.);
    3ce6:	7f 70       	andi	r23, 0x0F	; 15
    3ce8:	80 e0       	ldi	r24, 0x00	; 0
    3cea:	90 e0       	ldi	r25, 0x00	; 0
    3cec:	0e 94 51 38 	call	0x70a2	; 0x70a2 <__floatunsisf>
    3cf0:	23 e3       	ldi	r18, 0x33	; 51
    3cf2:	31 e2       	ldi	r19, 0x21	; 33
    3cf4:	4c e9       	ldi	r20, 0x9C	; 156
    3cf6:	5b e3       	ldi	r21, 0x3B	; 59
    3cf8:	0e 94 03 39 	call	0x7206	; 0x7206 <__mulsf3>
    3cfc:	20 e0       	ldi	r18, 0x00	; 0
    3cfe:	30 e0       	ldi	r19, 0x00	; 0
    3d00:	40 e2       	ldi	r20, 0x20	; 32
    3d02:	51 e4       	ldi	r21, 0x41	; 65
    3d04:	0e 94 03 39 	call	0x7206	; 0x7206 <__mulsf3>
    3d08:	cc 5c       	subi	r28, 0xCC	; 204
    3d0a:	de 4f       	sbci	r29, 0xFE	; 254
    3d0c:	68 83       	st	Y, r22
    3d0e:	79 83       	std	Y+1, r23	; 0x01
    3d10:	8a 83       	std	Y+2, r24	; 0x02
    3d12:	9b 83       	std	Y+3, r25	; 0x03
    3d14:	c4 53       	subi	r28, 0x34	; 52
    3d16:	d1 40       	sbci	r29, 0x01	; 1
	ballastError |= i2cWaitForComplete();
	i2cSendByte(0x13);
	ballastError |= i2cWaitForComplete();
	i2cReceiveByte(1);
	ballastError |= i2cWaitForComplete();
	uint16_t valveStatus = (uint16_t)i2cGetReceivedByte() << 8;
    3d18:	cb 5d       	subi	r28, 0xDB	; 219
    3d1a:	de 4f       	sbci	r29, 0xFE	; 254
    3d1c:	f8 80       	ld	r15, Y
    3d1e:	c5 52       	subi	r28, 0x25	; 37
    3d20:	d1 40       	sbci	r29, 0x01	; 1
    3d22:	ee 24       	eor	r14, r14
	i2cSendStop();
	cloudFinal = (helVal[0] << 8) | (helVal[1]);
	//NEED COMMANDS FROM TIM

	//format into string
	sprintf_P(sampleString, PSTR("%ld," //Epoch
    3d24:	ed b7       	in	r30, 0x3d	; 61
    3d26:	fe b7       	in	r31, 0x3e	; 62
    3d28:	e6 55       	subi	r30, 0x56	; 86
    3d2a:	f0 40       	sbci	r31, 0x00	; 0
    3d2c:	0f b6       	in	r0, 0x3f	; 63
    3d2e:	f8 94       	cli
    3d30:	fe bf       	out	0x3e, r31	; 62
    3d32:	0f be       	out	0x3f, r0	; 63
    3d34:	ed bf       	out	0x3d, r30	; 61
    3d36:	0d b7       	in	r16, 0x3d	; 61
    3d38:	1e b7       	in	r17, 0x3e	; 62
    3d3a:	0f 5f       	subi	r16, 0xFF	; 255
    3d3c:	1f 4f       	sbci	r17, 0xFF	; 255
    3d3e:	8f e1       	ldi	r24, 0x1F	; 31
    3d40:	68 2e       	mov	r6, r24
    3d42:	71 2c       	mov	r7, r1
    3d44:	6c 0e       	add	r6, r28
    3d46:	7d 1e       	adc	r7, r29
    3d48:	72 82       	std	Z+2, r7	; 0x02
    3d4a:	61 82       	std	Z+1, r6	; 0x01
    3d4c:	86 e9       	ldi	r24, 0x96	; 150
    3d4e:	91 e0       	ldi	r25, 0x01	; 1
    3d50:	d8 01       	movw	r26, r16
    3d52:	13 96       	adiw	r26, 0x03	; 3
    3d54:	9c 93       	st	X, r25
    3d56:	8e 93       	st	-X, r24
    3d58:	12 97       	sbiw	r26, 0x02	; 2
    3d5a:	c2 5e       	subi	r28, 0xE2	; 226
    3d5c:	de 4f       	sbci	r29, 0xFE	; 254
    3d5e:	88 81       	ld	r24, Y
    3d60:	99 81       	ldd	r25, Y+1	; 0x01
    3d62:	aa 81       	ldd	r26, Y+2	; 0x02
    3d64:	bb 81       	ldd	r27, Y+3	; 0x03
    3d66:	ce 51       	subi	r28, 0x1E	; 30
    3d68:	d1 40       	sbci	r29, 0x01	; 1
    3d6a:	f8 01       	movw	r30, r16
    3d6c:	84 83       	std	Z+4, r24	; 0x04
    3d6e:	95 83       	std	Z+5, r25	; 0x05
    3d70:	a6 83       	std	Z+6, r26	; 0x06
    3d72:	b7 83       	std	Z+7, r27	; 0x07
    3d74:	d8 01       	movw	r26, r16
    3d76:	18 96       	adiw	r26, 0x08	; 8
    3d78:	2d 92       	st	X+, r2
    3d7a:	3d 92       	st	X+, r3
    3d7c:	4d 92       	st	X+, r4
    3d7e:	5c 92       	st	X, r5
    3d80:	1b 97       	sbiw	r26, 0x0b	; 11
    3d82:	24 86       	std	Z+12, r2	; 0x0c
    3d84:	35 86       	std	Z+13, r3	; 0x0d
    3d86:	46 86       	std	Z+14, r4	; 0x0e
    3d88:	57 86       	std	Z+15, r5	; 0x0f
    3d8a:	c4 5e       	subi	r28, 0xE4	; 228
    3d8c:	de 4f       	sbci	r29, 0xFE	; 254
    3d8e:	28 81       	ld	r18, Y
    3d90:	39 81       	ldd	r19, Y+1	; 0x01
    3d92:	cc 51       	subi	r28, 0x1C	; 28
    3d94:	d1 40       	sbci	r29, 0x01	; 1
    3d96:	31 8b       	std	Z+17, r19	; 0x11
    3d98:	20 8b       	std	Z+16, r18	; 0x10
    3d9a:	c6 5e       	subi	r28, 0xE6	; 230
    3d9c:	de 4f       	sbci	r29, 0xFE	; 254
    3d9e:	88 81       	ld	r24, Y
    3da0:	99 81       	ldd	r25, Y+1	; 0x01
    3da2:	ca 51       	subi	r28, 0x1A	; 26
    3da4:	d1 40       	sbci	r29, 0x01	; 1
    3da6:	60 e1       	ldi	r22, 0x10	; 16
    3da8:	70 e0       	ldi	r23, 0x00	; 0
    3daa:	0e 94 91 39 	call	0x7322	; 0x7322 <__divmodhi4>
    3dae:	77 27       	eor	r23, r23
    3db0:	67 fd       	sbrc	r22, 7
    3db2:	70 95       	com	r23
    3db4:	73 8b       	std	Z+19, r23	; 0x13
    3db6:	62 8b       	std	Z+18, r22	; 0x12
    3db8:	c8 5e       	subi	r28, 0xE8	; 232
    3dba:	de 4f       	sbci	r29, 0xFE	; 254
    3dbc:	88 81       	ld	r24, Y
    3dbe:	99 81       	ldd	r25, Y+1	; 0x01
    3dc0:	c8 51       	subi	r28, 0x18	; 24
    3dc2:	d1 40       	sbci	r29, 0x01	; 1
    3dc4:	95 8b       	std	Z+21, r25	; 0x15
    3dc6:	84 8b       	std	Z+20, r24	; 0x14
    3dc8:	ca 5e       	subi	r28, 0xEA	; 234
    3dca:	de 4f       	sbci	r29, 0xFE	; 254
    3dcc:	a8 81       	ld	r26, Y
    3dce:	b9 81       	ldd	r27, Y+1	; 0x01
    3dd0:	c6 51       	subi	r28, 0x16	; 22
    3dd2:	d1 40       	sbci	r29, 0x01	; 1
    3dd4:	b7 8b       	std	Z+23, r27	; 0x17
    3dd6:	a6 8b       	std	Z+22, r26	; 0x16
    3dd8:	cc 5e       	subi	r28, 0xEC	; 236
    3dda:	de 4f       	sbci	r29, 0xFE	; 254
    3ddc:	28 81       	ld	r18, Y
    3dde:	39 81       	ldd	r19, Y+1	; 0x01
    3de0:	c4 51       	subi	r28, 0x14	; 20
    3de2:	d1 40       	sbci	r29, 0x01	; 1
    3de4:	31 8f       	std	Z+25, r19	; 0x19
    3de6:	20 8f       	std	Z+24, r18	; 0x18
    3de8:	ce 5e       	subi	r28, 0xEE	; 238
    3dea:	de 4f       	sbci	r29, 0xFE	; 254
    3dec:	88 81       	ld	r24, Y
    3dee:	99 81       	ldd	r25, Y+1	; 0x01
    3df0:	c2 51       	subi	r28, 0x12	; 18
    3df2:	d1 40       	sbci	r29, 0x01	; 1
    3df4:	60 e1       	ldi	r22, 0x10	; 16
    3df6:	70 e0       	ldi	r23, 0x00	; 0
    3df8:	0e 94 91 39 	call	0x7322	; 0x7322 <__divmodhi4>
    3dfc:	77 27       	eor	r23, r23
    3dfe:	67 fd       	sbrc	r22, 7
    3e00:	70 95       	com	r23
    3e02:	73 8f       	std	Z+27, r23	; 0x1b
    3e04:	62 8f       	std	Z+26, r22	; 0x1a
    3e06:	84 8e       	std	Z+28, r8	; 0x1c
    3e08:	15 8e       	std	Z+29, r1	; 0x1d
    3e0a:	86 8e       	std	Z+30, r8	; 0x1e
    3e0c:	17 8e       	std	Z+31, r1	; 0x1f
    3e0e:	ce 5d       	subi	r28, 0xDE	; 222
    3e10:	de 4f       	sbci	r29, 0xFE	; 254
    3e12:	38 81       	ld	r19, Y
    3e14:	c2 52       	subi	r28, 0x22	; 34
    3e16:	d1 40       	sbci	r29, 0x01	; 1
    3e18:	30 a3       	std	Z+32, r19	; 0x20
    3e1a:	11 a2       	std	Z+33, r1	; 0x21
    3e1c:	8e ed       	ldi	r24, 0xDE	; 222
    3e1e:	91 e0       	ldi	r25, 0x01	; 1
    3e20:	93 a3       	std	Z+35, r25	; 0x23
    3e22:	82 a3       	std	Z+34, r24	; 0x22
    3e24:	c2 5f       	subi	r28, 0xF2	; 242
    3e26:	de 4f       	sbci	r29, 0xFE	; 254
    3e28:	88 81       	ld	r24, Y
    3e2a:	99 81       	ldd	r25, Y+1	; 0x01
    3e2c:	aa 81       	ldd	r26, Y+2	; 0x02
    3e2e:	bb 81       	ldd	r27, Y+3	; 0x03
    3e30:	ce 50       	subi	r28, 0x0E	; 14
    3e32:	d1 40       	sbci	r29, 0x01	; 1
    3e34:	84 a3       	std	Z+36, r24	; 0x24
    3e36:	95 a3       	std	Z+37, r25	; 0x25
    3e38:	a6 a3       	std	Z+38, r26	; 0x26
    3e3a:	b7 a3       	std	Z+39, r27	; 0x27
    3e3c:	82 ee       	ldi	r24, 0xE2	; 226
    3e3e:	91 e0       	ldi	r25, 0x01	; 1
    3e40:	91 a7       	std	Z+41, r25	; 0x29
    3e42:	80 a7       	std	Z+40, r24	; 0x28
    3e44:	c6 5f       	subi	r28, 0xF6	; 246
    3e46:	de 4f       	sbci	r29, 0xFE	; 254
    3e48:	88 81       	ld	r24, Y
    3e4a:	99 81       	ldd	r25, Y+1	; 0x01
    3e4c:	aa 81       	ldd	r26, Y+2	; 0x02
    3e4e:	bb 81       	ldd	r27, Y+3	; 0x03
    3e50:	ca 50       	subi	r28, 0x0A	; 10
    3e52:	d1 40       	sbci	r29, 0x01	; 1
    3e54:	82 a7       	std	Z+42, r24	; 0x2a
    3e56:	93 a7       	std	Z+43, r25	; 0x2b
    3e58:	a4 a7       	std	Z+44, r26	; 0x2c
    3e5a:	b5 a7       	std	Z+45, r27	; 0x2d
    3e5c:	86 ee       	ldi	r24, 0xE6	; 230
    3e5e:	91 e0       	ldi	r25, 0x01	; 1
    3e60:	97 a7       	std	Z+47, r25	; 0x2f
    3e62:	86 a7       	std	Z+46, r24	; 0x2e
    3e64:	c8 5f       	subi	r28, 0xF8	; 248
    3e66:	de 4f       	sbci	r29, 0xFE	; 254
    3e68:	28 81       	ld	r18, Y
    3e6a:	39 81       	ldd	r19, Y+1	; 0x01
    3e6c:	c8 50       	subi	r28, 0x08	; 8
    3e6e:	d1 40       	sbci	r29, 0x01	; 1
    3e70:	31 ab       	std	Z+49, r19	; 0x31
    3e72:	20 ab       	std	Z+48, r18	; 0x30
    3e74:	8a ee       	ldi	r24, 0xEA	; 234
    3e76:	91 e0       	ldi	r25, 0x01	; 1
    3e78:	93 ab       	std	Z+51, r25	; 0x33
    3e7a:	82 ab       	std	Z+50, r24	; 0x32
    3e7c:	ca 5f       	subi	r28, 0xFA	; 250
    3e7e:	de 4f       	sbci	r29, 0xFE	; 254
    3e80:	88 81       	ld	r24, Y
    3e82:	99 81       	ldd	r25, Y+1	; 0x01
    3e84:	c6 50       	subi	r28, 0x06	; 6
    3e86:	d1 40       	sbci	r29, 0x01	; 1
    3e88:	95 ab       	std	Z+53, r25	; 0x35
    3e8a:	84 ab       	std	Z+52, r24	; 0x34
    3e8c:	8e ee       	ldi	r24, 0xEE	; 238
    3e8e:	91 e0       	ldi	r25, 0x01	; 1
    3e90:	97 ab       	std	Z+55, r25	; 0x37
    3e92:	86 ab       	std	Z+54, r24	; 0x36
    3e94:	cb 5f       	subi	r28, 0xFB	; 251
    3e96:	de 4f       	sbci	r29, 0xFE	; 254
    3e98:	98 81       	ld	r25, Y
    3e9a:	c5 50       	subi	r28, 0x05	; 5
    3e9c:	d1 40       	sbci	r29, 0x01	; 1
    3e9e:	90 af       	std	Z+56, r25	; 0x38
    3ea0:	11 ae       	std	Z+57, r1	; 0x39
    3ea2:	13 ae       	std	Z+59, r1	; 0x3b
    3ea4:	12 ae       	std	Z+58, r1	; 0x3a
    3ea6:	15 ae       	std	Z+61, r1	; 0x3d
    3ea8:	14 ae       	std	Z+60, r1	; 0x3c
    3eaa:	cc 5f       	subi	r28, 0xFC	; 252
    3eac:	de 4f       	sbci	r29, 0xFE	; 254
    3eae:	a8 81       	ld	r26, Y
    3eb0:	c4 50       	subi	r28, 0x04	; 4
    3eb2:	d1 40       	sbci	r29, 0x01	; 1
    3eb4:	a6 af       	std	Z+62, r26	; 0x3e
    3eb6:	17 ae       	std	Z+63, r1	; 0x3f
    3eb8:	ed b7       	in	r30, 0x3d	; 61
    3eba:	fe b7       	in	r31, 0x3e	; 62
    3ebc:	ef 5b       	subi	r30, 0xBF	; 191
    3ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec0:	82 ef       	ldi	r24, 0xF2	; 242
    3ec2:	91 e0       	ldi	r25, 0x01	; 1
    3ec4:	91 83       	std	Z+1, r25	; 0x01
    3ec6:	80 83       	st	Z, r24
    3ec8:	ed b7       	in	r30, 0x3d	; 61
    3eca:	fe b7       	in	r31, 0x3e	; 62
    3ecc:	ed 5b       	subi	r30, 0xBD	; 189
    3ece:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed0:	ce 5f       	subi	r28, 0xFE	; 254
    3ed2:	de 4f       	sbci	r29, 0xFE	; 254
    3ed4:	28 81       	ld	r18, Y
    3ed6:	39 81       	ldd	r19, Y+1	; 0x01
    3ed8:	c2 50       	subi	r28, 0x02	; 2
    3eda:	d1 40       	sbci	r29, 0x01	; 1
    3edc:	31 83       	std	Z+1, r19	; 0x01
    3ede:	20 83       	st	Z, r18
    3ee0:	ed b7       	in	r30, 0x3d	; 61
    3ee2:	fe b7       	in	r31, 0x3e	; 62
    3ee4:	eb 5b       	subi	r30, 0xBB	; 187
    3ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee8:	86 ef       	ldi	r24, 0xF6	; 246
    3eea:	91 e0       	ldi	r25, 0x01	; 1
    3eec:	91 83       	std	Z+1, r25	; 0x01
    3eee:	80 83       	st	Z, r24
    3ef0:	ed b7       	in	r30, 0x3d	; 61
    3ef2:	fe b7       	in	r31, 0x3e	; 62
    3ef4:	e9 5b       	subi	r30, 0xB9	; 185
    3ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef8:	c0 50       	subi	r28, 0x00	; 0
    3efa:	df 4f       	sbci	r29, 0xFF	; 255
    3efc:	88 81       	ld	r24, Y
    3efe:	99 81       	ldd	r25, Y+1	; 0x01
    3f00:	c0 50       	subi	r28, 0x00	; 0
    3f02:	d1 40       	sbci	r29, 0x01	; 1
    3f04:	91 83       	std	Z+1, r25	; 0x01
    3f06:	80 83       	st	Z, r24
    3f08:	ed b7       	in	r30, 0x3d	; 61
    3f0a:	fe b7       	in	r31, 0x3e	; 62
    3f0c:	e7 5b       	subi	r30, 0xB7	; 183
    3f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f10:	80 91 38 04 	lds	r24, 0x0438
    3f14:	90 91 39 04 	lds	r25, 0x0439
    3f18:	91 83       	std	Z+1, r25	; 0x01
    3f1a:	80 83       	st	Z, r24
    3f1c:	cc 5c       	subi	r28, 0xCC	; 204
    3f1e:	de 4f       	sbci	r29, 0xFE	; 254
    3f20:	68 81       	ld	r22, Y
    3f22:	79 81       	ldd	r23, Y+1	; 0x01
    3f24:	8a 81       	ldd	r24, Y+2	; 0x02
    3f26:	9b 81       	ldd	r25, Y+3	; 0x03
    3f28:	c4 53       	subi	r28, 0x34	; 52
    3f2a:	d1 40       	sbci	r29, 0x01	; 1
    3f2c:	0e 94 25 38 	call	0x704a	; 0x704a <__fixunssfsi>
    3f30:	f8 01       	movw	r30, r16
    3f32:	e6 5b       	subi	r30, 0xB6	; 182
    3f34:	ff 4f       	sbci	r31, 0xFF	; 255
    3f36:	60 83       	st	Z, r22
    3f38:	11 82       	std	Z+1, r1	; 0x01
    3f3a:	cc 5d       	subi	r28, 0xDC	; 220
    3f3c:	de 4f       	sbci	r29, 0xFE	; 254
    3f3e:	98 81       	ld	r25, Y
    3f40:	c4 52       	subi	r28, 0x24	; 36
    3f42:	d1 40       	sbci	r29, 0x01	; 1
    3f44:	e9 0e       	add	r14, r25
    3f46:	f1 1c       	adc	r15, r1
    3f48:	f8 01       	movw	r30, r16
    3f4a:	e4 5b       	subi	r30, 0xB4	; 180
    3f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f4e:	e0 82       	st	Z, r14
    3f50:	11 82       	std	Z+1, r1	; 0x01
    3f52:	cd 5d       	subi	r28, 0xDD	; 221
    3f54:	de 4f       	sbci	r29, 0xFE	; 254
    3f56:	a8 81       	ld	r26, Y
    3f58:	c3 52       	subi	r28, 0x23	; 35
    3f5a:	d1 40       	sbci	r29, 0x01	; 1
    3f5c:	ca 0e       	add	r12, r26
    3f5e:	d1 1c       	adc	r13, r1
    3f60:	02 5b       	subi	r16, 0xB2	; 178
    3f62:	1f 4f       	sbci	r17, 0xFF	; 255
    3f64:	f8 01       	movw	r30, r16
    3f66:	c1 92       	st	Z+, r12
    3f68:	d1 92       	st	Z+, r13
    3f6a:	82 ef       	ldi	r24, 0xF2	; 242
    3f6c:	9f ef       	ldi	r25, 0xFF	; 255
    3f6e:	df 01       	movw	r26, r30
    3f70:	8d 93       	st	X+, r24
    3f72:	9d 93       	st	X+, r25
    3f74:	80 91 2f 03 	lds	r24, 0x032F
    3f78:	90 91 30 03 	lds	r25, 0x0330
    3f7c:	fd 01       	movw	r30, r26
    3f7e:	81 93       	st	Z+, r24
    3f80:	91 93       	st	Z+, r25
    3f82:	11 82       	std	Z+1, r1	; 0x01
    3f84:	10 82       	st	Z, r1
    3f86:	0e 94 1a 3c 	call	0x7834	; 0x7834 <sprintf_P>
		ballastRemaining,
		-14,
		statusCode, heliumTemperature);

	//Pad with spaces
	uint8_t ssLen = strlen(sampleString);
    3f8a:	f3 01       	movw	r30, r6
    3f8c:	01 90       	ld	r0, Z+
    3f8e:	00 20       	and	r0, r0
    3f90:	e9 f7       	brne	.-6      	; 0x3f8c <collectData+0x86e>
	for(uint8_t i = ssLen+1; i > SAMPLESTRINGSIZEINCHARS - 2; i++)
    3f92:	8e 2f       	mov	r24, r30
    3f94:	86 19       	sub	r24, r6
    3f96:	ed b7       	in	r30, 0x3d	; 61
    3f98:	fe b7       	in	r31, 0x3e	; 62
    3f9a:	ea 5a       	subi	r30, 0xAA	; 170
    3f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f9e:	0f b6       	in	r0, 0x3f	; 63
    3fa0:	f8 94       	cli
    3fa2:	fe bf       	out	0x3e, r31	; 62
    3fa4:	0f be       	out	0x3f, r0	; 63
    3fa6:	ed bf       	out	0x3d, r30	; 61
    3fa8:	73 01       	movw	r14, r6
	{
		sampleString[i] = ' ';
    3faa:	90 e2       	ldi	r25, 0x20	; 32
    3fac:	05 c0       	rjmp	.+10     	; 0x3fb8 <collectData+0x89a>
    3fae:	f7 01       	movw	r30, r14
    3fb0:	e8 0f       	add	r30, r24
    3fb2:	f1 1d       	adc	r31, r1
    3fb4:	90 83       	st	Z, r25
		-14,
		statusCode, heliumTemperature);

	//Pad with spaces
	uint8_t ssLen = strlen(sampleString);
	for(uint8_t i = ssLen+1; i > SAMPLESTRINGSIZEINCHARS - 2; i++)
    3fb6:	8f 5f       	subi	r24, 0xFF	; 255
    3fb8:	80 3e       	cpi	r24, 0xE0	; 224
    3fba:	c8 f7       	brcc	.-14     	; 0x3fae <collectData+0x890>
	{
		sampleString[i] = ' ';
	}

	sampleString[SAMPLESTRINGSIZEINCHARS-2] = '\r';
    3fbc:	8d e0       	ldi	r24, 0x0D	; 13
    3fbe:	fe 01       	movw	r30, r28
    3fc0:	e2 50       	subi	r30, 0x02	; 2
    3fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc4:	80 83       	st	Z, r24
	sampleString[SAMPLESTRINGSIZEINCHARS-1] = '\n';
    3fc6:	8a e0       	ldi	r24, 0x0A	; 10
    3fc8:	fe 01       	movw	r30, r28
    3fca:	e1 50       	subi	r30, 0x01	; 1
    3fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fce:	80 83       	st	Z, r24
	sampleString[SAMPLESTRINGSIZEINCHARS] = '\0';
    3fd0:	8e 01       	movw	r16, r28
    3fd2:	00 50       	subi	r16, 0x00	; 0
    3fd4:	1f 4f       	sbci	r17, 0xFF	; 255
    3fd6:	d8 01       	movw	r26, r16
    3fd8:	1c 92       	st	X, r1

	//store in openlog
	#ifdef FCPUDEBUG
		lprintf_P(PSTR("Sample String: \n"));
    3fda:	00 d0       	rcall	.+0      	; 0x3fdc <collectData+0x8be>
    3fdc:	85 e8       	ldi	r24, 0x85	; 133
    3fde:	91 e0       	ldi	r25, 0x01	; 1
    3fe0:	ed b7       	in	r30, 0x3d	; 61
    3fe2:	fe b7       	in	r31, 0x3e	; 62
    3fe4:	92 83       	std	Z+2, r25	; 0x02
    3fe6:	81 83       	std	Z+1, r24	; 0x01
    3fe8:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
    3fec:	0f 90       	pop	r0
    3fee:	0f 90       	pop	r0
		for(int i=0; i < SAMPLESTRINGSIZEINCHARS; i++)
		{
			lprintf("%c", sampleString[i]);
    3ff0:	ba ef       	ldi	r27, 0xFA	; 250
    3ff2:	8b 2e       	mov	r8, r27
    3ff4:	b1 e0       	ldi	r27, 0x01	; 1
    3ff6:	9b 2e       	mov	r9, r27
	sampleString[SAMPLESTRINGSIZEINCHARS] = '\0';

	//store in openlog
	#ifdef FCPUDEBUG
		lprintf_P(PSTR("Sample String: \n"));
		for(int i=0; i < SAMPLESTRINGSIZEINCHARS; i++)
    3ff8:	c7 01       	movw	r24, r14
    3ffa:	ce 2c       	mov	r12, r14
    3ffc:	b9 2e       	mov	r11, r25
		{
			lprintf("%c", sampleString[i]);
    3ffe:	00 d0       	rcall	.+0      	; 0x4000 <collectData+0x8e2>
    4000:	00 d0       	rcall	.+0      	; 0x4002 <collectData+0x8e4>
    4002:	ed b7       	in	r30, 0x3d	; 61
    4004:	fe b7       	in	r31, 0x3e	; 62
    4006:	31 96       	adiw	r30, 0x01	; 1
    4008:	ad b7       	in	r26, 0x3d	; 61
    400a:	be b7       	in	r27, 0x3e	; 62
    400c:	12 96       	adiw	r26, 0x02	; 2
    400e:	9c 92       	st	X, r9
    4010:	8e 92       	st	-X, r8
    4012:	11 97       	sbiw	r26, 0x01	; 1
    4014:	d7 01       	movw	r26, r14
    4016:	8d 91       	ld	r24, X+
    4018:	7d 01       	movw	r14, r26
    401a:	82 83       	std	Z+2, r24	; 0x02
    401c:	13 82       	std	Z+3, r1	; 0x03
    401e:	0e 94 77 13 	call	0x26ee	; 0x26ee <lprintf>
	sampleString[SAMPLESTRINGSIZEINCHARS] = '\0';

	//store in openlog
	#ifdef FCPUDEBUG
		lprintf_P(PSTR("Sample String: \n"));
		for(int i=0; i < SAMPLESTRINGSIZEINCHARS; i++)
    4022:	0f 90       	pop	r0
    4024:	0f 90       	pop	r0
    4026:	0f 90       	pop	r0
    4028:	0f 90       	pop	r0
    402a:	e0 16       	cp	r14, r16
    402c:	f1 06       	cpc	r15, r17
    402e:	39 f7       	brne	.-50     	; 0x3ffe <collectData+0x8e0>
		{
			lprintf("%c", sampleString[i]);
		}
	#endif
	putDataSample(sampleString);
    4030:	8c 2d       	mov	r24, r12
    4032:	9b 2d       	mov	r25, r11
    4034:	0e 94 b4 11 	call	0x2368	; 0x2368 <putDataSample>

	//reschedule myself
	if(time != 0xFFFFFFFF)
    4038:	c0 5d       	subi	r28, 0xD0	; 208
    403a:	de 4f       	sbci	r29, 0xFE	; 254
    403c:	88 81       	ld	r24, Y
    403e:	99 81       	ldd	r25, Y+1	; 0x01
    4040:	aa 81       	ldd	r26, Y+2	; 0x02
    4042:	bb 81       	ldd	r27, Y+3	; 0x03
    4044:	c0 53       	subi	r28, 0x30	; 48
    4046:	d1 40       	sbci	r29, 0x01	; 1
    4048:	8f 5f       	subi	r24, 0xFF	; 255
    404a:	9f 4f       	sbci	r25, 0xFF	; 255
    404c:	af 4f       	sbci	r26, 0xFF	; 255
    404e:	bf 4f       	sbci	r27, 0xFF	; 255
    4050:	b9 f0       	breq	.+46     	; 0x4080 <collectData+0x962>
	{
		scheduleQueueAdd(&collectData, time+eeprom_read_word(&EEdataCollectionInterval));
    4052:	8b e1       	ldi	r24, 0x1B	; 27
    4054:	90 e0       	ldi	r25, 0x00	; 0
    4056:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
    405a:	ac 01       	movw	r20, r24
    405c:	60 e0       	ldi	r22, 0x00	; 0
    405e:	70 e0       	ldi	r23, 0x00	; 0
    4060:	c0 5d       	subi	r28, 0xD0	; 208
    4062:	de 4f       	sbci	r29, 0xFE	; 254
    4064:	88 81       	ld	r24, Y
    4066:	99 81       	ldd	r25, Y+1	; 0x01
    4068:	aa 81       	ldd	r26, Y+2	; 0x02
    406a:	bb 81       	ldd	r27, Y+3	; 0x03
    406c:	c0 53       	subi	r28, 0x30	; 48
    406e:	d1 40       	sbci	r29, 0x01	; 1
    4070:	48 0f       	add	r20, r24
    4072:	59 1f       	adc	r21, r25
    4074:	6a 1f       	adc	r22, r26
    4076:	7b 1f       	adc	r23, r27
    4078:	8f e8       	ldi	r24, 0x8F	; 143
    407a:	9b e1       	ldi	r25, 0x1B	; 27
    407c:	0e 94 75 2f 	call	0x5eea	; 0x5eea <scheduleQueueAdd>
	} else {
		//Bogus time means testing time!
	}
}
    4080:	c9 5c       	subi	r28, 0xC9	; 201
    4082:	de 4f       	sbci	r29, 0xFE	; 254
    4084:	0f b6       	in	r0, 0x3f	; 63
    4086:	f8 94       	cli
    4088:	de bf       	out	0x3e, r29	; 62
    408a:	0f be       	out	0x3f, r0	; 63
    408c:	cd bf       	out	0x3d, r28	; 61
    408e:	cf 91       	pop	r28
    4090:	df 91       	pop	r29
    4092:	1f 91       	pop	r17
    4094:	0f 91       	pop	r16
    4096:	ff 90       	pop	r15
    4098:	ef 90       	pop	r14
    409a:	df 90       	pop	r13
    409c:	cf 90       	pop	r12
    409e:	bf 90       	pop	r11
    40a0:	af 90       	pop	r10
    40a2:	9f 90       	pop	r9
    40a4:	8f 90       	pop	r8
    40a6:	7f 90       	pop	r7
    40a8:	6f 90       	pop	r6
    40aa:	5f 90       	pop	r5
    40ac:	4f 90       	pop	r4
    40ae:	3f 90       	pop	r3
    40b0:	2f 90       	pop	r2
    40b2:	08 95       	ret

000040b4 <calculateVspeed>:
//THIS IS DEFINED IN EEPROMVARS.H, GOD THIS IS STUPID
#define VSPEEDSAMPLESDESIRED 20


void calculateVspeed(uint32_t time)
{
    40b4:	3f 92       	push	r3
    40b6:	4f 92       	push	r4
    40b8:	5f 92       	push	r5
    40ba:	6f 92       	push	r6
    40bc:	7f 92       	push	r7
    40be:	8f 92       	push	r8
    40c0:	9f 92       	push	r9
    40c2:	af 92       	push	r10
    40c4:	bf 92       	push	r11
    40c6:	cf 92       	push	r12
    40c8:	df 92       	push	r13
    40ca:	ef 92       	push	r14
    40cc:	ff 92       	push	r15
    40ce:	0f 93       	push	r16
    40d0:	1f 93       	push	r17
    40d2:	df 93       	push	r29
    40d4:	cf 93       	push	r28
    40d6:	cd b7       	in	r28, 0x3d	; 61
    40d8:	de b7       	in	r29, 0x3e	; 62
    40da:	ee 97       	sbiw	r28, 0x3e	; 62
    40dc:	0f b6       	in	r0, 0x3f	; 63
    40de:	f8 94       	cli
    40e0:	de bf       	out	0x3e, r29	; 62
    40e2:	0f be       	out	0x3f, r0	; 63
    40e4:	cd bf       	out	0x3d, r28	; 61
    40e6:	3b 01       	movw	r6, r22
    40e8:	4c 01       	movw	r8, r24
	#ifdef FCPUDEBUG
		lprintf_P(PSTR("In Vspeed Calculator\n"));
    40ea:	00 d0       	rcall	.+0      	; 0x40ec <calculateVspeed+0x38>
    40ec:	87 e8       	ldi	r24, 0x87	; 135
    40ee:	93 e0       	ldi	r25, 0x03	; 3
    40f0:	ad b7       	in	r26, 0x3d	; 61
    40f2:	be b7       	in	r27, 0x3e	; 62
    40f4:	12 96       	adiw	r26, 0x02	; 2
    40f6:	9c 93       	st	X, r25
    40f8:	8e 93       	st	-X, r24
    40fa:	11 97       	sbiw	r26, 0x01	; 1
    40fc:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
	#endif
	struct gpsData myGPS = currentPositionData;
    4100:	de 01       	movw	r26, r28
    4102:	11 96       	adiw	r26, 0x01	; 1
    4104:	eb e3       	ldi	r30, 0x3B	; 59
    4106:	f4 e0       	ldi	r31, 0x04	; 4
    4108:	86 e1       	ldi	r24, 0x16	; 22
    410a:	01 90       	ld	r0, Z+
    410c:	0d 92       	st	X+, r0
    410e:	81 50       	subi	r24, 0x01	; 1
    4110:	e1 f7       	brne	.-8      	; 0x410a <calculateVspeed+0x56>
    4112:	4c 88       	ldd	r4, Y+20	; 0x14
    4114:	5d 88       	ldd	r5, Y+21	; 0x15
	//Failure mode: Assume we're at the same altitude we were at.
	//This means
	uint16_t thisAltitude = myGPS.altitude;

	int16_t vSpeedInstant[VSPEEDSAMPLESDESIRED];
	eeprom_read_block(vSpeedInstant, &EEvSpeedHolderSamples, sizeof(int16_t)*VSPEEDSAMPLESDESIRED);
    4116:	0f 90       	pop	r0
    4118:	0f 90       	pop	r0
    411a:	8e 01       	movw	r16, r28
    411c:	09 5e       	subi	r16, 0xE9	; 233
    411e:	1f 4f       	sbci	r17, 0xFF	; 255
    4120:	c8 01       	movw	r24, r16
    4122:	61 e4       	ldi	r22, 0x41	; 65
    4124:	70 e0       	ldi	r23, 0x00	; 0
    4126:	48 e2       	ldi	r20, 0x28	; 40
    4128:	50 e0       	ldi	r21, 0x00	; 0
    412a:	0e 94 24 3d 	call	0x7a48	; 0x7a48 <__eerd_block_m324p>
	if(numberOfVSpeedSamples == VSPEEDSAMPLESDESIRED)
    412e:	80 91 2a 03 	lds	r24, 0x032A
    4132:	84 31       	cpi	r24, 0x14	; 20
    4134:	61 f4       	brne	.+24     	; 0x414e <calculateVspeed+0x9a>
    4136:	f8 01       	movw	r30, r16
	{
		for(int i=1; i <= VSPEEDSAMPLESDESIRED; i++)
    4138:	9e 01       	movw	r18, r28
    413a:	21 5c       	subi	r18, 0xC1	; 193
    413c:	3f 4f       	sbci	r19, 0xFF	; 255
		{
			vSpeedInstant[i-1] = vSpeedInstant[i];
    413e:	82 81       	ldd	r24, Z+2	; 0x02
    4140:	93 81       	ldd	r25, Z+3	; 0x03
    4142:	81 93       	st	Z+, r24
    4144:	91 93       	st	Z+, r25

	int16_t vSpeedInstant[VSPEEDSAMPLESDESIRED];
	eeprom_read_block(vSpeedInstant, &EEvSpeedHolderSamples, sizeof(int16_t)*VSPEEDSAMPLESDESIRED);
	if(numberOfVSpeedSamples == VSPEEDSAMPLESDESIRED)
	{
		for(int i=1; i <= VSPEEDSAMPLESDESIRED; i++)
    4146:	e2 17       	cp	r30, r18
    4148:	f3 07       	cpc	r31, r19
    414a:	c9 f7       	brne	.-14     	; 0x413e <calculateVspeed+0x8a>
    414c:	03 c0       	rjmp	.+6      	; 0x4154 <calculateVspeed+0xa0>
		{
			vSpeedInstant[i-1] = vSpeedInstant[i];
		}
	} else {
		numberOfVSpeedSamples++;
    414e:	8f 5f       	subi	r24, 0xFF	; 255
    4150:	80 93 2a 03 	sts	0x032A, r24
	}

	int16_t thisVspeed = (thisAltitude - lastAltitude) / ((float)(time - lastRunTime)/60.);
	vSpeedInstant[numberOfVSpeedSamples-1] = thisVspeed;
    4154:	30 90 2a 03 	lds	r3, 0x032A
    4158:	a3 2c       	mov	r10, r3
    415a:	bb 24       	eor	r11, r11
    415c:	c5 01       	movw	r24, r10
    415e:	01 97       	sbiw	r24, 0x01	; 1
    4160:	88 0f       	add	r24, r24
    4162:	99 1f       	adc	r25, r25
    4164:	6e 01       	movw	r12, r28
    4166:	08 94       	sec
    4168:	c1 1c       	adc	r12, r1
    416a:	d1 1c       	adc	r13, r1
    416c:	c8 0e       	add	r12, r24
    416e:	d9 1e       	adc	r13, r25
    4170:	80 91 2b 03 	lds	r24, 0x032B
    4174:	90 91 2c 03 	lds	r25, 0x032C
    4178:	b2 01       	movw	r22, r4
    417a:	68 1b       	sub	r22, r24
    417c:	79 0b       	sbc	r23, r25
    417e:	80 e0       	ldi	r24, 0x00	; 0
    4180:	90 e0       	ldi	r25, 0x00	; 0
    4182:	0e 94 51 38 	call	0x70a2	; 0x70a2 <__floatunsisf>
    4186:	7b 01       	movw	r14, r22
    4188:	8c 01       	movw	r16, r24
    418a:	80 91 2d 03 	lds	r24, 0x032D
    418e:	90 91 2e 03 	lds	r25, 0x032E
    4192:	a0 e0       	ldi	r26, 0x00	; 0
    4194:	b0 e0       	ldi	r27, 0x00	; 0
    4196:	a4 01       	movw	r20, r8
    4198:	93 01       	movw	r18, r6
    419a:	28 1b       	sub	r18, r24
    419c:	39 0b       	sbc	r19, r25
    419e:	4a 0b       	sbc	r20, r26
    41a0:	5b 0b       	sbc	r21, r27
    41a2:	ca 01       	movw	r24, r20
    41a4:	b9 01       	movw	r22, r18
    41a6:	0e 94 51 38 	call	0x70a2	; 0x70a2 <__floatunsisf>
    41aa:	20 e0       	ldi	r18, 0x00	; 0
    41ac:	30 e0       	ldi	r19, 0x00	; 0
    41ae:	40 e7       	ldi	r20, 0x70	; 112
    41b0:	52 e4       	ldi	r21, 0x42	; 66
    41b2:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__divsf3>
    41b6:	9b 01       	movw	r18, r22
    41b8:	ac 01       	movw	r20, r24
    41ba:	c8 01       	movw	r24, r16
    41bc:	b7 01       	movw	r22, r14
    41be:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__divsf3>
    41c2:	0e 94 20 38 	call	0x7040	; 0x7040 <__fixsfsi>
    41c6:	d6 01       	movw	r26, r12
    41c8:	57 96       	adiw	r26, 0x17	; 23
    41ca:	7c 93       	st	X, r23
    41cc:	6e 93       	st	-X, r22
    41ce:	56 97       	sbiw	r26, 0x16	; 22
    41d0:	fe 01       	movw	r30, r28
    41d2:	77 96       	adiw	r30, 0x17	; 23
    41d4:	40 e0       	ldi	r20, 0x00	; 0
    41d6:	50 e0       	ldi	r21, 0x00	; 0
	int16_t vSpeedAdder=0;
	for(int i = 0; i < numberOfVSpeedSamples; i++)
    41d8:	cf 01       	movw	r24, r30
    41da:	1e 2f       	mov	r17, r30
    41dc:	09 2f       	mov	r16, r25
    41de:	95 01       	movw	r18, r10
    41e0:	22 0f       	add	r18, r18
    41e2:	33 1f       	adc	r19, r19
    41e4:	2e 0f       	add	r18, r30
    41e6:	3f 1f       	adc	r19, r31
    41e8:	04 c0       	rjmp	.+8      	; 0x41f2 <calculateVspeed+0x13e>
	{
		vSpeedAdder += vSpeedInstant[i];
    41ea:	81 91       	ld	r24, Z+
    41ec:	91 91       	ld	r25, Z+
    41ee:	48 0f       	add	r20, r24
    41f0:	59 1f       	adc	r21, r25
	}

	int16_t thisVspeed = (thisAltitude - lastAltitude) / ((float)(time - lastRunTime)/60.);
	vSpeedInstant[numberOfVSpeedSamples-1] = thisVspeed;
	int16_t vSpeedAdder=0;
	for(int i = 0; i < numberOfVSpeedSamples; i++)
    41f2:	e2 17       	cp	r30, r18
    41f4:	f3 07       	cpc	r31, r19
    41f6:	c9 f7       	brne	.-14     	; 0x41ea <calculateVspeed+0x136>
	{
		vSpeedAdder += vSpeedInstant[i];
	}
	vSpeedAvg = vSpeedAdder / (int8_t)numberOfVSpeedSamples;
    41f8:	63 2d       	mov	r22, r3
    41fa:	77 27       	eor	r23, r23
    41fc:	67 fd       	sbrc	r22, 7
    41fe:	70 95       	com	r23
    4200:	ca 01       	movw	r24, r20
    4202:	0e 94 91 39 	call	0x7322	; 0x7322 <__divmodhi4>
    4206:	60 93 38 04 	sts	0x0438, r22
    420a:	70 93 39 04 	sts	0x0439, r23

	#ifdef FCPUDEBUG
		lprintf_P(PSTR("Current VSpeedAvg: %d\n"), vSpeedAvg);
    420e:	00 d0       	rcall	.+0      	; 0x4210 <calculateVspeed+0x15c>
    4210:	00 d0       	rcall	.+0      	; 0x4212 <calculateVspeed+0x15e>
    4212:	ed b7       	in	r30, 0x3d	; 61
    4214:	fe b7       	in	r31, 0x3e	; 62
    4216:	31 96       	adiw	r30, 0x01	; 1
    4218:	80 e7       	ldi	r24, 0x70	; 112
    421a:	93 e0       	ldi	r25, 0x03	; 3
    421c:	ad b7       	in	r26, 0x3d	; 61
    421e:	be b7       	in	r27, 0x3e	; 62
    4220:	12 96       	adiw	r26, 0x02	; 2
    4222:	9c 93       	st	X, r25
    4224:	8e 93       	st	-X, r24
    4226:	11 97       	sbiw	r26, 0x01	; 1
    4228:	62 83       	std	Z+2, r22	; 0x02
    422a:	73 83       	std	Z+3, r23	; 0x03
    422c:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
		lprintf_P(PSTR("LA: %d TA: %d\n"), lastAltitude, thisAltitude);
    4230:	00 d0       	rcall	.+0      	; 0x4232 <calculateVspeed+0x17e>
    4232:	ed b7       	in	r30, 0x3d	; 61
    4234:	fe b7       	in	r31, 0x3e	; 62
    4236:	31 96       	adiw	r30, 0x01	; 1
    4238:	81 e6       	ldi	r24, 0x61	; 97
    423a:	93 e0       	ldi	r25, 0x03	; 3
    423c:	ad b7       	in	r26, 0x3d	; 61
    423e:	be b7       	in	r27, 0x3e	; 62
    4240:	12 96       	adiw	r26, 0x02	; 2
    4242:	9c 93       	st	X, r25
    4244:	8e 93       	st	-X, r24
    4246:	11 97       	sbiw	r26, 0x01	; 1
    4248:	80 91 2b 03 	lds	r24, 0x032B
    424c:	90 91 2c 03 	lds	r25, 0x032C
    4250:	93 83       	std	Z+3, r25	; 0x03
    4252:	82 83       	std	Z+2, r24	; 0x02
    4254:	55 82       	std	Z+5, r5	; 0x05
    4256:	44 82       	std	Z+4, r4	; 0x04
    4258:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
	#endif

	lastRunTime = time;
    425c:	70 92 2e 03 	sts	0x032E, r7
    4260:	60 92 2d 03 	sts	0x032D, r6
	lastAltitude = thisAltitude;
    4264:	50 92 2c 03 	sts	0x032C, r5
    4268:	40 92 2b 03 	sts	0x032B, r4
	eeprom_write_block(vSpeedInstant, &EEvSpeedHolderSamples, sizeof(int16_t)*VSPEEDSAMPLESDESIRED);
    426c:	ed b7       	in	r30, 0x3d	; 61
    426e:	fe b7       	in	r31, 0x3e	; 62
    4270:	36 96       	adiw	r30, 0x06	; 6
    4272:	0f b6       	in	r0, 0x3f	; 63
    4274:	f8 94       	cli
    4276:	fe bf       	out	0x3e, r31	; 62
    4278:	0f be       	out	0x3f, r0	; 63
    427a:	ed bf       	out	0x3d, r30	; 61
    427c:	81 2f       	mov	r24, r17
    427e:	90 2f       	mov	r25, r16
    4280:	61 e4       	ldi	r22, 0x41	; 65
    4282:	70 e0       	ldi	r23, 0x00	; 0
    4284:	48 e2       	ldi	r20, 0x28	; 40
    4286:	50 e0       	ldi	r21, 0x00	; 0
    4288:	0e 94 48 3d 	call	0x7a90	; 0x7a90 <__eewr_block_m324p>



	scheduleQueueAdd(&calculateVspeed, time+5);
    428c:	25 e0       	ldi	r18, 0x05	; 5
    428e:	30 e0       	ldi	r19, 0x00	; 0
    4290:	40 e0       	ldi	r20, 0x00	; 0
    4292:	50 e0       	ldi	r21, 0x00	; 0
    4294:	62 0e       	add	r6, r18
    4296:	73 1e       	adc	r7, r19
    4298:	84 1e       	adc	r8, r20
    429a:	95 1e       	adc	r9, r21
    429c:	8a e5       	ldi	r24, 0x5A	; 90
    429e:	90 e2       	ldi	r25, 0x20	; 32
    42a0:	b4 01       	movw	r22, r8
    42a2:	a3 01       	movw	r20, r6
    42a4:	0e 94 75 2f 	call	0x5eea	; 0x5eea <scheduleQueueAdd>
}
    42a8:	ee 96       	adiw	r28, 0x3e	; 62
    42aa:	0f b6       	in	r0, 0x3f	; 63
    42ac:	f8 94       	cli
    42ae:	de bf       	out	0x3e, r29	; 62
    42b0:	0f be       	out	0x3f, r0	; 63
    42b2:	cd bf       	out	0x3d, r28	; 61
    42b4:	cf 91       	pop	r28
    42b6:	df 91       	pop	r29
    42b8:	1f 91       	pop	r17
    42ba:	0f 91       	pop	r16
    42bc:	ff 90       	pop	r15
    42be:	ef 90       	pop	r14
    42c0:	df 90       	pop	r13
    42c2:	cf 90       	pop	r12
    42c4:	bf 90       	pop	r11
    42c6:	af 90       	pop	r10
    42c8:	9f 90       	pop	r9
    42ca:	8f 90       	pop	r8
    42cc:	7f 90       	pop	r7
    42ce:	6f 90       	pop	r6
    42d0:	5f 90       	pop	r5
    42d2:	4f 90       	pop	r4
    42d4:	3f 90       	pop	r3
    42d6:	08 95       	ret

000042d8 <dumpVarsToGSP>:
		lprintf_P(PSTR("Error Reading Battery Temp\n"));
	}
}

void dumpVarsToGSP(void)
{
    42d8:	af 92       	push	r10
    42da:	bf 92       	push	r11
    42dc:	cf 92       	push	r12
    42de:	df 92       	push	r13
    42e0:	ef 92       	push	r14
    42e2:	ff 92       	push	r15
    42e4:	0f 93       	push	r16
    42e6:	1f 93       	push	r17

	lprintf_P(PSTR("epochStartSeconds: %d\n"), eeprom_read_byte(&EEepochStartSeconds));
    42e8:	81 e0       	ldi	r24, 0x01	; 1
    42ea:	90 e0       	ldi	r25, 0x00	; 0
    42ec:	0e 94 34 3d 	call	0x7a68	; 0x7a68 <__eerd_byte_m324p>
    42f0:	00 d0       	rcall	.+0      	; 0x42f2 <dumpVarsToGSP+0x1a>
    42f2:	00 d0       	rcall	.+0      	; 0x42f4 <dumpVarsToGSP+0x1c>
    42f4:	ed b7       	in	r30, 0x3d	; 61
    42f6:	fe b7       	in	r31, 0x3e	; 62
    42f8:	31 96       	adiw	r30, 0x01	; 1
    42fa:	27 ed       	ldi	r18, 0xD7	; 215
    42fc:	36 e0       	ldi	r19, 0x06	; 6
    42fe:	ad b7       	in	r26, 0x3d	; 61
    4300:	be b7       	in	r27, 0x3e	; 62
    4302:	12 96       	adiw	r26, 0x02	; 2
    4304:	3c 93       	st	X, r19
    4306:	2e 93       	st	-X, r18
    4308:	11 97       	sbiw	r26, 0x01	; 1
    430a:	82 83       	std	Z+2, r24	; 0x02
    430c:	13 82       	std	Z+3, r1	; 0x03
    430e:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
	lprintf_P(PSTR("epochStartMinutes: %d\n"), eeprom_read_byte(&EEepochStartMinutes));
    4312:	0f 90       	pop	r0
    4314:	0f 90       	pop	r0
    4316:	0f 90       	pop	r0
    4318:	0f 90       	pop	r0
    431a:	82 e0       	ldi	r24, 0x02	; 2
    431c:	90 e0       	ldi	r25, 0x00	; 0
    431e:	0e 94 34 3d 	call	0x7a68	; 0x7a68 <__eerd_byte_m324p>
    4322:	00 d0       	rcall	.+0      	; 0x4324 <dumpVarsToGSP+0x4c>
    4324:	00 d0       	rcall	.+0      	; 0x4326 <dumpVarsToGSP+0x4e>
    4326:	ed b7       	in	r30, 0x3d	; 61
    4328:	fe b7       	in	r31, 0x3e	; 62
    432a:	31 96       	adiw	r30, 0x01	; 1
    432c:	20 ec       	ldi	r18, 0xC0	; 192
    432e:	36 e0       	ldi	r19, 0x06	; 6
    4330:	ad b7       	in	r26, 0x3d	; 61
    4332:	be b7       	in	r27, 0x3e	; 62
    4334:	12 96       	adiw	r26, 0x02	; 2
    4336:	3c 93       	st	X, r19
    4338:	2e 93       	st	-X, r18
    433a:	11 97       	sbiw	r26, 0x01	; 1
    433c:	82 83       	std	Z+2, r24	; 0x02
    433e:	13 82       	std	Z+3, r1	; 0x03
    4340:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
	lprintf_P(PSTR("epochStartHours: %d\n"), eeprom_read_byte(&EEepochStartHours));
    4344:	0f 90       	pop	r0
    4346:	0f 90       	pop	r0
    4348:	0f 90       	pop	r0
    434a:	0f 90       	pop	r0
    434c:	83 e0       	ldi	r24, 0x03	; 3
    434e:	90 e0       	ldi	r25, 0x00	; 0
    4350:	0e 94 34 3d 	call	0x7a68	; 0x7a68 <__eerd_byte_m324p>
    4354:	00 d0       	rcall	.+0      	; 0x4356 <dumpVarsToGSP+0x7e>
    4356:	00 d0       	rcall	.+0      	; 0x4358 <dumpVarsToGSP+0x80>
    4358:	ed b7       	in	r30, 0x3d	; 61
    435a:	fe b7       	in	r31, 0x3e	; 62
    435c:	31 96       	adiw	r30, 0x01	; 1
    435e:	2b ea       	ldi	r18, 0xAB	; 171
    4360:	36 e0       	ldi	r19, 0x06	; 6
    4362:	ad b7       	in	r26, 0x3d	; 61
    4364:	be b7       	in	r27, 0x3e	; 62
    4366:	12 96       	adiw	r26, 0x02	; 2
    4368:	3c 93       	st	X, r19
    436a:	2e 93       	st	-X, r18
    436c:	11 97       	sbiw	r26, 0x01	; 1
    436e:	82 83       	std	Z+2, r24	; 0x02
    4370:	13 82       	std	Z+3, r1	; 0x03
    4372:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
	lprintf_P(PSTR("epochStartDays: %d\n"), eeprom_read_byte(&EEepochStartDays));
    4376:	0f 90       	pop	r0
    4378:	0f 90       	pop	r0
    437a:	0f 90       	pop	r0
    437c:	0f 90       	pop	r0
    437e:	84 e0       	ldi	r24, 0x04	; 4
    4380:	90 e0       	ldi	r25, 0x00	; 0
    4382:	0e 94 34 3d 	call	0x7a68	; 0x7a68 <__eerd_byte_m324p>
    4386:	00 d0       	rcall	.+0      	; 0x4388 <dumpVarsToGSP+0xb0>
    4388:	00 d0       	rcall	.+0      	; 0x438a <dumpVarsToGSP+0xb2>
    438a:	ed b7       	in	r30, 0x3d	; 61
    438c:	fe b7       	in	r31, 0x3e	; 62
    438e:	31 96       	adiw	r30, 0x01	; 1
    4390:	27 e9       	ldi	r18, 0x97	; 151
    4392:	36 e0       	ldi	r19, 0x06	; 6
    4394:	ad b7       	in	r26, 0x3d	; 61
    4396:	be b7       	in	r27, 0x3e	; 62
    4398:	12 96       	adiw	r26, 0x02	; 2
    439a:	3c 93       	st	X, r19
    439c:	2e 93       	st	-X, r18
    439e:	11 97       	sbiw	r26, 0x01	; 1
    43a0:	82 83       	std	Z+2, r24	; 0x02
    43a2:	13 82       	std	Z+3, r1	; 0x03
    43a4:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
    43a8:	28 e8       	ldi	r18, 0x88	; 136
    43aa:	33 e1       	ldi	r19, 0x13	; 19
    43ac:	0f 90       	pop	r0
    43ae:	0f 90       	pop	r0
    43b0:	0f 90       	pop	r0
    43b2:	0f 90       	pop	r0
    43b4:	4c e2       	ldi	r20, 0x2C	; 44
    43b6:	51 e0       	ldi	r21, 0x01	; 1
    43b8:	ca 01       	movw	r24, r20
    43ba:	01 97       	sbiw	r24, 0x01	; 1
    43bc:	f1 f7       	brne	.-4      	; 0x43ba <dumpVarsToGSP+0xe2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43be:	21 50       	subi	r18, 0x01	; 1
    43c0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43c2:	d1 f7       	brne	.-12     	; 0x43b8 <dumpVarsToGSP+0xe0>
	_delay_ms(500);

	lprintf_P(PSTR("ballastTargetAlt: %d\n"), eeprom_read_word(&EEballastTargetAltitude));
    43c4:	85 e0       	ldi	r24, 0x05	; 5
    43c6:	90 e0       	ldi	r25, 0x00	; 0
    43c8:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
    43cc:	00 d0       	rcall	.+0      	; 0x43ce <dumpVarsToGSP+0xf6>
    43ce:	00 d0       	rcall	.+0      	; 0x43d0 <dumpVarsToGSP+0xf8>
    43d0:	21 e8       	ldi	r18, 0x81	; 129
    43d2:	36 e0       	ldi	r19, 0x06	; 6
    43d4:	ed b7       	in	r30, 0x3d	; 61
    43d6:	fe b7       	in	r31, 0x3e	; 62
    43d8:	32 83       	std	Z+2, r19	; 0x02
    43da:	21 83       	std	Z+1, r18	; 0x01
    43dc:	94 83       	std	Z+4, r25	; 0x04
    43de:	83 83       	std	Z+3, r24	; 0x03
    43e0:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
	lprintf_P(PSTR("ballastTarget +Vspeed: %d\n"), eeprom_read_word(&EEballastTargetPositiveVSpeed));
    43e4:	0f 90       	pop	r0
    43e6:	0f 90       	pop	r0
    43e8:	0f 90       	pop	r0
    43ea:	0f 90       	pop	r0
    43ec:	87 e0       	ldi	r24, 0x07	; 7
    43ee:	90 e0       	ldi	r25, 0x00	; 0
    43f0:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
    43f4:	00 d0       	rcall	.+0      	; 0x43f6 <dumpVarsToGSP+0x11e>
    43f6:	00 d0       	rcall	.+0      	; 0x43f8 <dumpVarsToGSP+0x120>
    43f8:	26 e6       	ldi	r18, 0x66	; 102
    43fa:	36 e0       	ldi	r19, 0x06	; 6
    43fc:	ad b7       	in	r26, 0x3d	; 61
    43fe:	be b7       	in	r27, 0x3e	; 62
    4400:	12 96       	adiw	r26, 0x02	; 2
    4402:	3c 93       	st	X, r19
    4404:	2e 93       	st	-X, r18
    4406:	11 97       	sbiw	r26, 0x01	; 1
    4408:	14 96       	adiw	r26, 0x04	; 4
    440a:	9c 93       	st	X, r25
    440c:	8e 93       	st	-X, r24
    440e:	13 97       	sbiw	r26, 0x03	; 3
    4410:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
	lprintf_P(PSTR("ballastTarget -Vspeed: %d\n"), eeprom_read_word(&EEballastTargetNegativeVSpeed));
    4414:	0f 90       	pop	r0
    4416:	0f 90       	pop	r0
    4418:	0f 90       	pop	r0
    441a:	0f 90       	pop	r0
    441c:	89 e0       	ldi	r24, 0x09	; 9
    441e:	90 e0       	ldi	r25, 0x00	; 0
    4420:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
    4424:	00 d0       	rcall	.+0      	; 0x4426 <dumpVarsToGSP+0x14e>
    4426:	00 d0       	rcall	.+0      	; 0x4428 <dumpVarsToGSP+0x150>
    4428:	2b e4       	ldi	r18, 0x4B	; 75
    442a:	36 e0       	ldi	r19, 0x06	; 6
    442c:	ed b7       	in	r30, 0x3d	; 61
    442e:	fe b7       	in	r31, 0x3e	; 62
    4430:	32 83       	std	Z+2, r19	; 0x02
    4432:	21 83       	std	Z+1, r18	; 0x01
    4434:	94 83       	std	Z+4, r25	; 0x04
    4436:	83 83       	std	Z+3, r24	; 0x03
    4438:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>

	lprintf_P(PSTR("maydayAltitude: %d\n"), eeprom_read_word(&EEmaydayAltitude));
    443c:	0f 90       	pop	r0
    443e:	0f 90       	pop	r0
    4440:	0f 90       	pop	r0
    4442:	0f 90       	pop	r0
    4444:	8b e0       	ldi	r24, 0x0B	; 11
    4446:	90 e0       	ldi	r25, 0x00	; 0
    4448:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
    444c:	00 d0       	rcall	.+0      	; 0x444e <dumpVarsToGSP+0x176>
    444e:	00 d0       	rcall	.+0      	; 0x4450 <dumpVarsToGSP+0x178>
    4450:	27 e3       	ldi	r18, 0x37	; 55
    4452:	36 e0       	ldi	r19, 0x06	; 6
    4454:	ad b7       	in	r26, 0x3d	; 61
    4456:	be b7       	in	r27, 0x3e	; 62
    4458:	12 96       	adiw	r26, 0x02	; 2
    445a:	3c 93       	st	X, r19
    445c:	2e 93       	st	-X, r18
    445e:	11 97       	sbiw	r26, 0x01	; 1
    4460:	14 96       	adiw	r26, 0x04	; 4
    4462:	9c 93       	st	X, r25
    4464:	8e 93       	st	-X, r24
    4466:	13 97       	sbiw	r26, 0x03	; 3
    4468:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
	lprintf_P(PSTR("maydayVSpeed: %d\n"), eeprom_read_word(&EEmaydayVSpeed));
    446c:	0f 90       	pop	r0
    446e:	0f 90       	pop	r0
    4470:	0f 90       	pop	r0
    4472:	0f 90       	pop	r0
    4474:	8d e0       	ldi	r24, 0x0D	; 13
    4476:	90 e0       	ldi	r25, 0x00	; 0
    4478:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
    447c:	00 d0       	rcall	.+0      	; 0x447e <dumpVarsToGSP+0x1a6>
    447e:	00 d0       	rcall	.+0      	; 0x4480 <dumpVarsToGSP+0x1a8>
    4480:	25 e2       	ldi	r18, 0x25	; 37
    4482:	36 e0       	ldi	r19, 0x06	; 6
    4484:	ed b7       	in	r30, 0x3d	; 61
    4486:	fe b7       	in	r31, 0x3e	; 62
    4488:	32 83       	std	Z+2, r19	; 0x02
    448a:	21 83       	std	Z+1, r18	; 0x01
    448c:	94 83       	std	Z+4, r25	; 0x04
    448e:	83 83       	std	Z+3, r24	; 0x03
    4490:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
    4494:	28 e8       	ldi	r18, 0x88	; 136
    4496:	33 e1       	ldi	r19, 0x13	; 19
    4498:	0f 90       	pop	r0
    449a:	0f 90       	pop	r0
    449c:	0f 90       	pop	r0
    449e:	0f 90       	pop	r0
    44a0:	4c e2       	ldi	r20, 0x2C	; 44
    44a2:	51 e0       	ldi	r21, 0x01	; 1
    44a4:	ca 01       	movw	r24, r20
    44a6:	01 97       	sbiw	r24, 0x01	; 1
    44a8:	f1 f7       	brne	.-4      	; 0x44a6 <dumpVarsToGSP+0x1ce>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44aa:	21 50       	subi	r18, 0x01	; 1
    44ac:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44ae:	d1 f7       	brne	.-12     	; 0x44a4 <dumpVarsToGSP+0x1cc>
	_delay_ms(500);

	lprintf_P(PSTR("ballastSafetyAlt: %d\n"), eeprom_read_word(&EEballastSafetyAltThresh));
    44b0:	8f e0       	ldi	r24, 0x0F	; 15
    44b2:	90 e0       	ldi	r25, 0x00	; 0
    44b4:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
    44b8:	00 d0       	rcall	.+0      	; 0x44ba <dumpVarsToGSP+0x1e2>
    44ba:	00 d0       	rcall	.+0      	; 0x44bc <dumpVarsToGSP+0x1e4>
    44bc:	2f e0       	ldi	r18, 0x0F	; 15
    44be:	36 e0       	ldi	r19, 0x06	; 6
    44c0:	ad b7       	in	r26, 0x3d	; 61
    44c2:	be b7       	in	r27, 0x3e	; 62
    44c4:	12 96       	adiw	r26, 0x02	; 2
    44c6:	3c 93       	st	X, r19
    44c8:	2e 93       	st	-X, r18
    44ca:	11 97       	sbiw	r26, 0x01	; 1
    44cc:	14 96       	adiw	r26, 0x04	; 4
    44ce:	9c 93       	st	X, r25
    44d0:	8e 93       	st	-X, r24
    44d2:	13 97       	sbiw	r26, 0x03	; 3
    44d4:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
	lprintf_P(PSTR("autoBallast on/off flag: %d\n"), eeprom_read_byte(&EEautoBallastDisable));
    44d8:	0f 90       	pop	r0
    44da:	0f 90       	pop	r0
    44dc:	0f 90       	pop	r0
    44de:	0f 90       	pop	r0
    44e0:	81 e1       	ldi	r24, 0x11	; 17
    44e2:	90 e0       	ldi	r25, 0x00	; 0
    44e4:	0e 94 34 3d 	call	0x7a68	; 0x7a68 <__eerd_byte_m324p>
    44e8:	00 d0       	rcall	.+0      	; 0x44ea <dumpVarsToGSP+0x212>
    44ea:	00 d0       	rcall	.+0      	; 0x44ec <dumpVarsToGSP+0x214>
    44ec:	ed b7       	in	r30, 0x3d	; 61
    44ee:	fe b7       	in	r31, 0x3e	; 62
    44f0:	31 96       	adiw	r30, 0x01	; 1
    44f2:	22 ef       	ldi	r18, 0xF2	; 242
    44f4:	35 e0       	ldi	r19, 0x05	; 5
    44f6:	ad b7       	in	r26, 0x3d	; 61
    44f8:	be b7       	in	r27, 0x3e	; 62
    44fa:	12 96       	adiw	r26, 0x02	; 2
    44fc:	3c 93       	st	X, r19
    44fe:	2e 93       	st	-X, r18
    4500:	11 97       	sbiw	r26, 0x01	; 1
    4502:	82 83       	std	Z+2, r24	; 0x02
    4504:	13 82       	std	Z+3, r1	; 0x03
    4506:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>

	lprintf_P(PSTR("over ocean flag: %d\n"), eeprom_read_byte(&EEoverOceanFlag));
    450a:	0f 90       	pop	r0
    450c:	0f 90       	pop	r0
    450e:	0f 90       	pop	r0
    4510:	0f 90       	pop	r0
    4512:	82 e1       	ldi	r24, 0x12	; 18
    4514:	90 e0       	ldi	r25, 0x00	; 0
    4516:	0e 94 34 3d 	call	0x7a68	; 0x7a68 <__eerd_byte_m324p>
    451a:	00 d0       	rcall	.+0      	; 0x451c <dumpVarsToGSP+0x244>
    451c:	00 d0       	rcall	.+0      	; 0x451e <dumpVarsToGSP+0x246>
    451e:	ed b7       	in	r30, 0x3d	; 61
    4520:	fe b7       	in	r31, 0x3e	; 62
    4522:	31 96       	adiw	r30, 0x01	; 1
    4524:	2d ed       	ldi	r18, 0xDD	; 221
    4526:	35 e0       	ldi	r19, 0x05	; 5
    4528:	ad b7       	in	r26, 0x3d	; 61
    452a:	be b7       	in	r27, 0x3e	; 62
    452c:	12 96       	adiw	r26, 0x02	; 2
    452e:	3c 93       	st	X, r19
    4530:	2e 93       	st	-X, r18
    4532:	11 97       	sbiw	r26, 0x01	; 1
    4534:	82 83       	std	Z+2, r24	; 0x02
    4536:	13 82       	std	Z+3, r1	; 0x03
    4538:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>

	lprintf_P(PSTR("nightTempForecast: %d\n"), eeprom_read_byte(&EEnightTemperatureForecast));
    453c:	0f 90       	pop	r0
    453e:	0f 90       	pop	r0
    4540:	0f 90       	pop	r0
    4542:	0f 90       	pop	r0
    4544:	83 e1       	ldi	r24, 0x13	; 19
    4546:	90 e0       	ldi	r25, 0x00	; 0
    4548:	0e 94 34 3d 	call	0x7a68	; 0x7a68 <__eerd_byte_m324p>
    454c:	00 d0       	rcall	.+0      	; 0x454e <dumpVarsToGSP+0x276>
    454e:	00 d0       	rcall	.+0      	; 0x4550 <dumpVarsToGSP+0x278>
    4550:	ed b7       	in	r30, 0x3d	; 61
    4552:	fe b7       	in	r31, 0x3e	; 62
    4554:	31 96       	adiw	r30, 0x01	; 1
    4556:	26 ec       	ldi	r18, 0xC6	; 198
    4558:	35 e0       	ldi	r19, 0x05	; 5
    455a:	ad b7       	in	r26, 0x3d	; 61
    455c:	be b7       	in	r27, 0x3e	; 62
    455e:	12 96       	adiw	r26, 0x02	; 2
    4560:	3c 93       	st	X, r19
    4562:	2e 93       	st	-X, r18
    4564:	11 97       	sbiw	r26, 0x01	; 1
    4566:	82 83       	std	Z+2, r24	; 0x02
    4568:	13 82       	std	Z+3, r1	; 0x03
    456a:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
	lprintf_P(PSTR("sunriseAnticipationTime: %ld\n"), eeprom_read_dword(&EEsunriseAnticipation));
    456e:	0f 90       	pop	r0
    4570:	0f 90       	pop	r0
    4572:	0f 90       	pop	r0
    4574:	0f 90       	pop	r0
    4576:	84 e1       	ldi	r24, 0x14	; 20
    4578:	90 e0       	ldi	r25, 0x00	; 0
    457a:	0e 94 3c 3d 	call	0x7a78	; 0x7a78 <__eerd_dword_m324p>
    457e:	00 d0       	rcall	.+0      	; 0x4580 <dumpVarsToGSP+0x2a8>
    4580:	00 d0       	rcall	.+0      	; 0x4582 <dumpVarsToGSP+0x2aa>
    4582:	00 d0       	rcall	.+0      	; 0x4584 <dumpVarsToGSP+0x2ac>
    4584:	28 ea       	ldi	r18, 0xA8	; 168
    4586:	35 e0       	ldi	r19, 0x05	; 5
    4588:	ed b7       	in	r30, 0x3d	; 61
    458a:	fe b7       	in	r31, 0x3e	; 62
    458c:	32 83       	std	Z+2, r19	; 0x02
    458e:	21 83       	std	Z+1, r18	; 0x01
    4590:	ad b7       	in	r26, 0x3d	; 61
    4592:	be b7       	in	r27, 0x3e	; 62
    4594:	13 96       	adiw	r26, 0x03	; 3
    4596:	6d 93       	st	X+, r22
    4598:	7d 93       	st	X+, r23
    459a:	8d 93       	st	X+, r24
    459c:	9c 93       	st	X, r25
    459e:	16 97       	sbiw	r26, 0x06	; 6
    45a0:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
    45a4:	28 e8       	ldi	r18, 0x88	; 136
    45a6:	33 e1       	ldi	r19, 0x13	; 19
    45a8:	ed b7       	in	r30, 0x3d	; 61
    45aa:	fe b7       	in	r31, 0x3e	; 62
    45ac:	36 96       	adiw	r30, 0x06	; 6
    45ae:	0f b6       	in	r0, 0x3f	; 63
    45b0:	f8 94       	cli
    45b2:	fe bf       	out	0x3e, r31	; 62
    45b4:	0f be       	out	0x3f, r0	; 63
    45b6:	ed bf       	out	0x3d, r30	; 61
    45b8:	4c e2       	ldi	r20, 0x2C	; 44
    45ba:	51 e0       	ldi	r21, 0x01	; 1
    45bc:	ca 01       	movw	r24, r20
    45be:	01 97       	sbiw	r24, 0x01	; 1
    45c0:	f1 f7       	brne	.-4      	; 0x45be <dumpVarsToGSP+0x2e6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45c2:	21 50       	subi	r18, 0x01	; 1
    45c4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45c6:	d1 f7       	brne	.-12     	; 0x45bc <dumpVarsToGSP+0x2e4>
	_delay_ms(500);

	lprintf_P(PSTR("maxAllowableTXInterval: %d\n"), eeprom_read_word(&EEmaxAllowableTXInterval));
    45c8:	88 e1       	ldi	r24, 0x18	; 24
    45ca:	90 e0       	ldi	r25, 0x00	; 0
    45cc:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
    45d0:	00 d0       	rcall	.+0      	; 0x45d2 <dumpVarsToGSP+0x2fa>
    45d2:	00 d0       	rcall	.+0      	; 0x45d4 <dumpVarsToGSP+0x2fc>
    45d4:	2c e8       	ldi	r18, 0x8C	; 140
    45d6:	35 e0       	ldi	r19, 0x05	; 5
    45d8:	ad b7       	in	r26, 0x3d	; 61
    45da:	be b7       	in	r27, 0x3e	; 62
    45dc:	12 96       	adiw	r26, 0x02	; 2
    45de:	3c 93       	st	X, r19
    45e0:	2e 93       	st	-X, r18
    45e2:	11 97       	sbiw	r26, 0x01	; 1
    45e4:	14 96       	adiw	r26, 0x04	; 4
    45e6:	9c 93       	st	X, r25
    45e8:	8e 93       	st	-X, r24
    45ea:	13 97       	sbiw	r26, 0x03	; 3
    45ec:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>

	lprintf_P(PSTR("batteryHeaterSetpoint: %d\n"), eeprom_read_byte(&EEbatteryHeaterSetpoint));
    45f0:	0f 90       	pop	r0
    45f2:	0f 90       	pop	r0
    45f4:	0f 90       	pop	r0
    45f6:	0f 90       	pop	r0
    45f8:	8a e1       	ldi	r24, 0x1A	; 26
    45fa:	90 e0       	ldi	r25, 0x00	; 0
    45fc:	0e 94 34 3d 	call	0x7a68	; 0x7a68 <__eerd_byte_m324p>
    4600:	00 d0       	rcall	.+0      	; 0x4602 <dumpVarsToGSP+0x32a>
    4602:	00 d0       	rcall	.+0      	; 0x4604 <dumpVarsToGSP+0x32c>
    4604:	ed b7       	in	r30, 0x3d	; 61
    4606:	fe b7       	in	r31, 0x3e	; 62
    4608:	31 96       	adiw	r30, 0x01	; 1
    460a:	21 e7       	ldi	r18, 0x71	; 113
    460c:	35 e0       	ldi	r19, 0x05	; 5
    460e:	ad b7       	in	r26, 0x3d	; 61
    4610:	be b7       	in	r27, 0x3e	; 62
    4612:	12 96       	adiw	r26, 0x02	; 2
    4614:	3c 93       	st	X, r19
    4616:	2e 93       	st	-X, r18
    4618:	11 97       	sbiw	r26, 0x01	; 1
    461a:	82 83       	std	Z+2, r24	; 0x02
    461c:	13 82       	std	Z+3, r1	; 0x03
    461e:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>

	lprintf_P(PSTR("dataSampleInterval: %d\n"), eeprom_read_word(&EEdataCollectionInterval));
    4622:	0f 90       	pop	r0
    4624:	0f 90       	pop	r0
    4626:	0f 90       	pop	r0
    4628:	0f 90       	pop	r0
    462a:	8b e1       	ldi	r24, 0x1B	; 27
    462c:	90 e0       	ldi	r25, 0x00	; 0
    462e:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
    4632:	00 d0       	rcall	.+0      	; 0x4634 <dumpVarsToGSP+0x35c>
    4634:	00 d0       	rcall	.+0      	; 0x4636 <dumpVarsToGSP+0x35e>
    4636:	29 e5       	ldi	r18, 0x59	; 89
    4638:	35 e0       	ldi	r19, 0x05	; 5
    463a:	ed b7       	in	r30, 0x3d	; 61
    463c:	fe b7       	in	r31, 0x3e	; 62
    463e:	32 83       	std	Z+2, r19	; 0x02
    4640:	21 83       	std	Z+1, r18	; 0x01
    4642:	94 83       	std	Z+4, r25	; 0x04
    4644:	83 83       	std	Z+3, r24	; 0x03
    4646:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
	lprintf_P(PSTR("batchTXInterval: %d\n"), eeprom_read_word(&EEdataTransmitInterval));
    464a:	0f 90       	pop	r0
    464c:	0f 90       	pop	r0
    464e:	0f 90       	pop	r0
    4650:	0f 90       	pop	r0
    4652:	8d e1       	ldi	r24, 0x1D	; 29
    4654:	90 e0       	ldi	r25, 0x00	; 0
    4656:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
    465a:	00 d0       	rcall	.+0      	; 0x465c <dumpVarsToGSP+0x384>
    465c:	00 d0       	rcall	.+0      	; 0x465e <dumpVarsToGSP+0x386>
    465e:	24 e4       	ldi	r18, 0x44	; 68
    4660:	35 e0       	ldi	r19, 0x05	; 5
    4662:	ad b7       	in	r26, 0x3d	; 61
    4664:	be b7       	in	r27, 0x3e	; 62
    4666:	12 96       	adiw	r26, 0x02	; 2
    4668:	3c 93       	st	X, r19
    466a:	2e 93       	st	-X, r18
    466c:	11 97       	sbiw	r26, 0x01	; 1
    466e:	14 96       	adiw	r26, 0x04	; 4
    4670:	9c 93       	st	X, r25
    4672:	8e 93       	st	-X, r24
    4674:	13 97       	sbiw	r26, 0x03	; 3
    4676:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
    467a:	28 e8       	ldi	r18, 0x88	; 136
    467c:	33 e1       	ldi	r19, 0x13	; 19
    467e:	0f 90       	pop	r0
    4680:	0f 90       	pop	r0
    4682:	0f 90       	pop	r0
    4684:	0f 90       	pop	r0
    4686:	4c e2       	ldi	r20, 0x2C	; 44
    4688:	51 e0       	ldi	r21, 0x01	; 1
    468a:	ca 01       	movw	r24, r20
    468c:	01 97       	sbiw	r24, 0x01	; 1
    468e:	f1 f7       	brne	.-4      	; 0x468c <dumpVarsToGSP+0x3b4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4690:	21 50       	subi	r18, 0x01	; 1
    4692:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4694:	d1 f7       	brne	.-12     	; 0x468a <dumpVarsToGSP+0x3b2>
	_delay_ms(500);

	lprintf_P(PSTR("HFdataTransmitInterval: %d\n"), eeprom_read_word(&EEhfDataTransmitInterval));
    4696:	8f e1       	ldi	r24, 0x1F	; 31
    4698:	90 e0       	ldi	r25, 0x00	; 0
    469a:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
    469e:	00 d0       	rcall	.+0      	; 0x46a0 <dumpVarsToGSP+0x3c8>
    46a0:	00 d0       	rcall	.+0      	; 0x46a2 <dumpVarsToGSP+0x3ca>
    46a2:	28 e2       	ldi	r18, 0x28	; 40
    46a4:	35 e0       	ldi	r19, 0x05	; 5
    46a6:	ed b7       	in	r30, 0x3d	; 61
    46a8:	fe b7       	in	r31, 0x3e	; 62
    46aa:	32 83       	std	Z+2, r19	; 0x02
    46ac:	21 83       	std	Z+1, r18	; 0x01
    46ae:	94 83       	std	Z+4, r25	; 0x04
    46b0:	83 83       	std	Z+3, r24	; 0x03
    46b2:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
	lprintf_P(PSTR("HFrapidTransmitInterval: %d\n"), eeprom_read_byte(&EEhfRapidTransmit));
    46b6:	0f 90       	pop	r0
    46b8:	0f 90       	pop	r0
    46ba:	0f 90       	pop	r0
    46bc:	0f 90       	pop	r0
    46be:	81 e2       	ldi	r24, 0x21	; 33
    46c0:	90 e0       	ldi	r25, 0x00	; 0
    46c2:	0e 94 34 3d 	call	0x7a68	; 0x7a68 <__eerd_byte_m324p>
    46c6:	00 d0       	rcall	.+0      	; 0x46c8 <dumpVarsToGSP+0x3f0>
    46c8:	00 d0       	rcall	.+0      	; 0x46ca <dumpVarsToGSP+0x3f2>
    46ca:	ed b7       	in	r30, 0x3d	; 61
    46cc:	fe b7       	in	r31, 0x3e	; 62
    46ce:	31 96       	adiw	r30, 0x01	; 1
    46d0:	2b e0       	ldi	r18, 0x0B	; 11
    46d2:	35 e0       	ldi	r19, 0x05	; 5
    46d4:	ad b7       	in	r26, 0x3d	; 61
    46d6:	be b7       	in	r27, 0x3e	; 62
    46d8:	12 96       	adiw	r26, 0x02	; 2
    46da:	3c 93       	st	X, r19
    46dc:	2e 93       	st	-X, r18
    46de:	11 97       	sbiw	r26, 0x01	; 1
    46e0:	82 83       	std	Z+2, r24	; 0x02
    46e2:	13 82       	std	Z+3, r1	; 0x03
    46e4:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>

	lprintf_P(PSTR("epochOfLastBatchTX: %ld\n"), eeprom_read_dword(&EEepochOfLastBatchTransmit));
    46e8:	0f 90       	pop	r0
    46ea:	0f 90       	pop	r0
    46ec:	0f 90       	pop	r0
    46ee:	0f 90       	pop	r0
    46f0:	82 e2       	ldi	r24, 0x22	; 34
    46f2:	90 e0       	ldi	r25, 0x00	; 0
    46f4:	0e 94 3c 3d 	call	0x7a78	; 0x7a78 <__eerd_dword_m324p>
    46f8:	00 d0       	rcall	.+0      	; 0x46fa <dumpVarsToGSP+0x422>
    46fa:	00 d0       	rcall	.+0      	; 0x46fc <dumpVarsToGSP+0x424>
    46fc:	00 d0       	rcall	.+0      	; 0x46fe <dumpVarsToGSP+0x426>
    46fe:	22 ef       	ldi	r18, 0xF2	; 242
    4700:	34 e0       	ldi	r19, 0x04	; 4
    4702:	ed b7       	in	r30, 0x3d	; 61
    4704:	fe b7       	in	r31, 0x3e	; 62
    4706:	32 83       	std	Z+2, r19	; 0x02
    4708:	21 83       	std	Z+1, r18	; 0x01
    470a:	ad b7       	in	r26, 0x3d	; 61
    470c:	be b7       	in	r27, 0x3e	; 62
    470e:	13 96       	adiw	r26, 0x03	; 3
    4710:	6d 93       	st	X+, r22
    4712:	7d 93       	st	X+, r23
    4714:	8d 93       	st	X+, r24
    4716:	9c 93       	st	X, r25
    4718:	16 97       	sbiw	r26, 0x06	; 6
    471a:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>

	lprintf_P(PSTR("currentBatchNumber: %d\n"), eeprom_read_word(&EEcurrentBatchNumber));
    471e:	ed b7       	in	r30, 0x3d	; 61
    4720:	fe b7       	in	r31, 0x3e	; 62
    4722:	36 96       	adiw	r30, 0x06	; 6
    4724:	0f b6       	in	r0, 0x3f	; 63
    4726:	f8 94       	cli
    4728:	fe bf       	out	0x3e, r31	; 62
    472a:	0f be       	out	0x3f, r0	; 63
    472c:	ed bf       	out	0x3d, r30	; 61
    472e:	86 e2       	ldi	r24, 0x26	; 38
    4730:	90 e0       	ldi	r25, 0x00	; 0
    4732:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
    4736:	00 d0       	rcall	.+0      	; 0x4738 <dumpVarsToGSP+0x460>
    4738:	00 d0       	rcall	.+0      	; 0x473a <dumpVarsToGSP+0x462>
    473a:	2a ed       	ldi	r18, 0xDA	; 218
    473c:	34 e0       	ldi	r19, 0x04	; 4
    473e:	ad b7       	in	r26, 0x3d	; 61
    4740:	be b7       	in	r27, 0x3e	; 62
    4742:	12 96       	adiw	r26, 0x02	; 2
    4744:	3c 93       	st	X, r19
    4746:	2e 93       	st	-X, r18
    4748:	11 97       	sbiw	r26, 0x01	; 1
    474a:	14 96       	adiw	r26, 0x04	; 4
    474c:	9c 93       	st	X, r25
    474e:	8e 93       	st	-X, r24
    4750:	13 97       	sbiw	r26, 0x03	; 3
    4752:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
	lprintf_P(PSTR("batchSampleStart: %d\n"), eeprom_read_word(&EEbatchSampleStart));
    4756:	0f 90       	pop	r0
    4758:	0f 90       	pop	r0
    475a:	0f 90       	pop	r0
    475c:	0f 90       	pop	r0
    475e:	88 e2       	ldi	r24, 0x28	; 40
    4760:	90 e0       	ldi	r25, 0x00	; 0
    4762:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
    4766:	00 d0       	rcall	.+0      	; 0x4768 <dumpVarsToGSP+0x490>
    4768:	00 d0       	rcall	.+0      	; 0x476a <dumpVarsToGSP+0x492>
    476a:	24 ec       	ldi	r18, 0xC4	; 196
    476c:	34 e0       	ldi	r19, 0x04	; 4
    476e:	ed b7       	in	r30, 0x3d	; 61
    4770:	fe b7       	in	r31, 0x3e	; 62
    4772:	32 83       	std	Z+2, r19	; 0x02
    4774:	21 83       	std	Z+1, r18	; 0x01
    4776:	94 83       	std	Z+4, r25	; 0x04
    4778:	83 83       	std	Z+3, r24	; 0x03
    477a:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
	lprintf_P(PSTR("batchSampleEnd: %d\n"), eeprom_read_word(&EEbatchSampleEnd));
    477e:	0f 90       	pop	r0
    4780:	0f 90       	pop	r0
    4782:	0f 90       	pop	r0
    4784:	0f 90       	pop	r0
    4786:	8a e2       	ldi	r24, 0x2A	; 42
    4788:	90 e0       	ldi	r25, 0x00	; 0
    478a:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
    478e:	00 d0       	rcall	.+0      	; 0x4790 <dumpVarsToGSP+0x4b8>
    4790:	00 d0       	rcall	.+0      	; 0x4792 <dumpVarsToGSP+0x4ba>
    4792:	20 eb       	ldi	r18, 0xB0	; 176
    4794:	34 e0       	ldi	r19, 0x04	; 4
    4796:	ad b7       	in	r26, 0x3d	; 61
    4798:	be b7       	in	r27, 0x3e	; 62
    479a:	12 96       	adiw	r26, 0x02	; 2
    479c:	3c 93       	st	X, r19
    479e:	2e 93       	st	-X, r18
    47a0:	11 97       	sbiw	r26, 0x01	; 1
    47a2:	14 96       	adiw	r26, 0x04	; 4
    47a4:	9c 93       	st	X, r25
    47a6:	8e 93       	st	-X, r24
    47a8:	13 97       	sbiw	r26, 0x03	; 3
    47aa:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
    47ae:	28 e8       	ldi	r18, 0x88	; 136
    47b0:	33 e1       	ldi	r19, 0x13	; 19
    47b2:	0f 90       	pop	r0
    47b4:	0f 90       	pop	r0
    47b6:	0f 90       	pop	r0
    47b8:	0f 90       	pop	r0
    47ba:	4c e2       	ldi	r20, 0x2C	; 44
    47bc:	51 e0       	ldi	r21, 0x01	; 1
    47be:	ca 01       	movw	r24, r20
    47c0:	01 97       	sbiw	r24, 0x01	; 1
    47c2:	f1 f7       	brne	.-4      	; 0x47c0 <dumpVarsToGSP+0x4e8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47c4:	21 50       	subi	r18, 0x01	; 1
    47c6:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47c8:	d1 f7       	brne	.-12     	; 0x47be <dumpVarsToGSP+0x4e6>
	_delay_ms(500);

	lprintf_P(PSTR("comm EEPROM Start: %d\n"), eeprom_read_word(&EEcommPromStart));
    47ca:	8c e2       	ldi	r24, 0x2C	; 44
    47cc:	90 e0       	ldi	r25, 0x00	; 0
    47ce:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
    47d2:	00 d0       	rcall	.+0      	; 0x47d4 <dumpVarsToGSP+0x4fc>
    47d4:	00 d0       	rcall	.+0      	; 0x47d6 <dumpVarsToGSP+0x4fe>
    47d6:	29 e9       	ldi	r18, 0x99	; 153
    47d8:	34 e0       	ldi	r19, 0x04	; 4
    47da:	ed b7       	in	r30, 0x3d	; 61
    47dc:	fe b7       	in	r31, 0x3e	; 62
    47de:	32 83       	std	Z+2, r19	; 0x02
    47e0:	21 83       	std	Z+1, r18	; 0x01
    47e2:	94 83       	std	Z+4, r25	; 0x04
    47e4:	83 83       	std	Z+3, r24	; 0x03
    47e6:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
	lprintf_P(PSTR("comm EEPROM End: %d\n"), eeprom_read_word(&EEcommPromEnd));
    47ea:	0f 90       	pop	r0
    47ec:	0f 90       	pop	r0
    47ee:	0f 90       	pop	r0
    47f0:	0f 90       	pop	r0
    47f2:	8e e2       	ldi	r24, 0x2E	; 46
    47f4:	90 e0       	ldi	r25, 0x00	; 0
    47f6:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
    47fa:	00 d0       	rcall	.+0      	; 0x47fc <dumpVarsToGSP+0x524>
    47fc:	00 d0       	rcall	.+0      	; 0x47fe <dumpVarsToGSP+0x526>
    47fe:	24 e8       	ldi	r18, 0x84	; 132
    4800:	34 e0       	ldi	r19, 0x04	; 4
    4802:	ad b7       	in	r26, 0x3d	; 61
    4804:	be b7       	in	r27, 0x3e	; 62
    4806:	12 96       	adiw	r26, 0x02	; 2
    4808:	3c 93       	st	X, r19
    480a:	2e 93       	st	-X, r18
    480c:	11 97       	sbiw	r26, 0x01	; 1
    480e:	14 96       	adiw	r26, 0x04	; 4
    4810:	9c 93       	st	X, r25
    4812:	8e 93       	st	-X, r24
    4814:	13 97       	sbiw	r26, 0x03	; 3
    4816:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>

	lprintf_P(PSTR("flightComputerResetCount: %d\n"), eeprom_read_byte(&EEflightComputerResetCount));
    481a:	0f 90       	pop	r0
    481c:	0f 90       	pop	r0
    481e:	0f 90       	pop	r0
    4820:	0f 90       	pop	r0
    4822:	80 e3       	ldi	r24, 0x30	; 48
    4824:	90 e0       	ldi	r25, 0x00	; 0
    4826:	0e 94 34 3d 	call	0x7a68	; 0x7a68 <__eerd_byte_m324p>
    482a:	00 d0       	rcall	.+0      	; 0x482c <dumpVarsToGSP+0x554>
    482c:	00 d0       	rcall	.+0      	; 0x482e <dumpVarsToGSP+0x556>
    482e:	ed b7       	in	r30, 0x3d	; 61
    4830:	fe b7       	in	r31, 0x3e	; 62
    4832:	31 96       	adiw	r30, 0x01	; 1
    4834:	26 e6       	ldi	r18, 0x66	; 102
    4836:	34 e0       	ldi	r19, 0x04	; 4
    4838:	ad b7       	in	r26, 0x3d	; 61
    483a:	be b7       	in	r27, 0x3e	; 62
    483c:	12 96       	adiw	r26, 0x02	; 2
    483e:	3c 93       	st	X, r19
    4840:	2e 93       	st	-X, r18
    4842:	11 97       	sbiw	r26, 0x01	; 1
    4844:	82 83       	std	Z+2, r24	; 0x02
    4846:	13 82       	std	Z+3, r1	; 0x03
    4848:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
	lprintf_P(PSTR("commModuleResetCount: %d\n"), eeprom_read_byte(&EEcommModuleResetCount));
    484c:	0f 90       	pop	r0
    484e:	0f 90       	pop	r0
    4850:	0f 90       	pop	r0
    4852:	0f 90       	pop	r0
    4854:	81 e3       	ldi	r24, 0x31	; 49
    4856:	90 e0       	ldi	r25, 0x00	; 0
    4858:	0e 94 34 3d 	call	0x7a68	; 0x7a68 <__eerd_byte_m324p>
    485c:	00 d0       	rcall	.+0      	; 0x485e <dumpVarsToGSP+0x586>
    485e:	00 d0       	rcall	.+0      	; 0x4860 <dumpVarsToGSP+0x588>
    4860:	ed b7       	in	r30, 0x3d	; 61
    4862:	fe b7       	in	r31, 0x3e	; 62
    4864:	31 96       	adiw	r30, 0x01	; 1
    4866:	2c e4       	ldi	r18, 0x4C	; 76
    4868:	34 e0       	ldi	r19, 0x04	; 4
    486a:	ad b7       	in	r26, 0x3d	; 61
    486c:	be b7       	in	r27, 0x3e	; 62
    486e:	12 96       	adiw	r26, 0x02	; 2
    4870:	3c 93       	st	X, r19
    4872:	2e 93       	st	-X, r18
    4874:	11 97       	sbiw	r26, 0x01	; 1
    4876:	82 83       	std	Z+2, r24	; 0x02
    4878:	13 82       	std	Z+3, r1	; 0x03
    487a:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>

	lprintf_P(PSTR("flightPhase: %d\n"), eeprom_read_byte(&EEflightPhase));
    487e:	0f 90       	pop	r0
    4880:	0f 90       	pop	r0
    4882:	0f 90       	pop	r0
    4884:	0f 90       	pop	r0
    4886:	82 e3       	ldi	r24, 0x32	; 50
    4888:	90 e0       	ldi	r25, 0x00	; 0
    488a:	0e 94 34 3d 	call	0x7a68	; 0x7a68 <__eerd_byte_m324p>
    488e:	00 d0       	rcall	.+0      	; 0x4890 <dumpVarsToGSP+0x5b8>
    4890:	00 d0       	rcall	.+0      	; 0x4892 <dumpVarsToGSP+0x5ba>
    4892:	ed b7       	in	r30, 0x3d	; 61
    4894:	fe b7       	in	r31, 0x3e	; 62
    4896:	31 96       	adiw	r30, 0x01	; 1
    4898:	2b e3       	ldi	r18, 0x3B	; 59
    489a:	34 e0       	ldi	r19, 0x04	; 4
    489c:	ad b7       	in	r26, 0x3d	; 61
    489e:	be b7       	in	r27, 0x3e	; 62
    48a0:	12 96       	adiw	r26, 0x02	; 2
    48a2:	3c 93       	st	X, r19
    48a4:	2e 93       	st	-X, r18
    48a6:	11 97       	sbiw	r26, 0x01	; 1
    48a8:	82 83       	std	Z+2, r24	; 0x02
    48aa:	13 82       	std	Z+3, r1	; 0x03
    48ac:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
    48b0:	28 e8       	ldi	r18, 0x88	; 136
    48b2:	33 e1       	ldi	r19, 0x13	; 19
    48b4:	0f 90       	pop	r0
    48b6:	0f 90       	pop	r0
    48b8:	0f 90       	pop	r0
    48ba:	0f 90       	pop	r0
    48bc:	4c e2       	ldi	r20, 0x2C	; 44
    48be:	51 e0       	ldi	r21, 0x01	; 1
    48c0:	ca 01       	movw	r24, r20
    48c2:	01 97       	sbiw	r24, 0x01	; 1
    48c4:	f1 f7       	brne	.-4      	; 0x48c2 <dumpVarsToGSP+0x5ea>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48c6:	21 50       	subi	r18, 0x01	; 1
    48c8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48ca:	d1 f7       	brne	.-12     	; 0x48c0 <dumpVarsToGSP+0x5e8>
	_delay_ms(500);

	lprintf_P(PSTR("TelemBitmap: %ld%ld%ld\n"), eeprom_read_dword(&EEcurrentTelemetryBitmap[0]),
    48cc:	83 e3       	ldi	r24, 0x33	; 51
    48ce:	90 e0       	ldi	r25, 0x00	; 0
    48d0:	0e 94 3c 3d 	call	0x7a78	; 0x7a78 <__eerd_dword_m324p>
    48d4:	5b 01       	movw	r10, r22
    48d6:	6c 01       	movw	r12, r24
    48d8:	87 e3       	ldi	r24, 0x37	; 55
    48da:	90 e0       	ldi	r25, 0x00	; 0
    48dc:	0e 94 3c 3d 	call	0x7a78	; 0x7a78 <__eerd_dword_m324p>
    48e0:	7b 01       	movw	r14, r22
    48e2:	8c 01       	movw	r16, r24
    48e4:	8b e3       	ldi	r24, 0x3B	; 59
    48e6:	90 e0       	ldi	r25, 0x00	; 0
    48e8:	0e 94 3c 3d 	call	0x7a78	; 0x7a78 <__eerd_dword_m324p>
    48ec:	ed b7       	in	r30, 0x3d	; 61
    48ee:	fe b7       	in	r31, 0x3e	; 62
    48f0:	3e 97       	sbiw	r30, 0x0e	; 14
    48f2:	0f b6       	in	r0, 0x3f	; 63
    48f4:	f8 94       	cli
    48f6:	fe bf       	out	0x3e, r31	; 62
    48f8:	0f be       	out	0x3f, r0	; 63
    48fa:	ed bf       	out	0x3d, r30	; 61
    48fc:	31 96       	adiw	r30, 0x01	; 1
    48fe:	23 e2       	ldi	r18, 0x23	; 35
    4900:	34 e0       	ldi	r19, 0x04	; 4
    4902:	ad b7       	in	r26, 0x3d	; 61
    4904:	be b7       	in	r27, 0x3e	; 62
    4906:	12 96       	adiw	r26, 0x02	; 2
    4908:	3c 93       	st	X, r19
    490a:	2e 93       	st	-X, r18
    490c:	11 97       	sbiw	r26, 0x01	; 1
    490e:	a2 82       	std	Z+2, r10	; 0x02
    4910:	b3 82       	std	Z+3, r11	; 0x03
    4912:	c4 82       	std	Z+4, r12	; 0x04
    4914:	d5 82       	std	Z+5, r13	; 0x05
    4916:	e6 82       	std	Z+6, r14	; 0x06
    4918:	f7 82       	std	Z+7, r15	; 0x07
    491a:	00 87       	std	Z+8, r16	; 0x08
    491c:	11 87       	std	Z+9, r17	; 0x09
    491e:	62 87       	std	Z+10, r22	; 0x0a
    4920:	73 87       	std	Z+11, r23	; 0x0b
    4922:	84 87       	std	Z+12, r24	; 0x0c
    4924:	95 87       	std	Z+13, r25	; 0x0d
    4926:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
		eeprom_read_dword(&EEcurrentTelemetryBitmap[1]), eeprom_read_dword(&EEcurrentTelemetryBitmap[2]));
	lprintf_P(PSTR("telemetrySpeedDial: %d\n"), eeprom_read_word(&EEcurrentTelemetryVersion));
    492a:	ed b7       	in	r30, 0x3d	; 61
    492c:	fe b7       	in	r31, 0x3e	; 62
    492e:	3e 96       	adiw	r30, 0x0e	; 14
    4930:	0f b6       	in	r0, 0x3f	; 63
    4932:	f8 94       	cli
    4934:	fe bf       	out	0x3e, r31	; 62
    4936:	0f be       	out	0x3f, r0	; 63
    4938:	ed bf       	out	0x3d, r30	; 61
    493a:	8f e3       	ldi	r24, 0x3F	; 63
    493c:	90 e0       	ldi	r25, 0x00	; 0
    493e:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__eerd_word_m324p>
    4942:	00 d0       	rcall	.+0      	; 0x4944 <dumpVarsToGSP+0x66c>
    4944:	00 d0       	rcall	.+0      	; 0x4946 <dumpVarsToGSP+0x66e>
    4946:	2b e0       	ldi	r18, 0x0B	; 11
    4948:	34 e0       	ldi	r19, 0x04	; 4
    494a:	ad b7       	in	r26, 0x3d	; 61
    494c:	be b7       	in	r27, 0x3e	; 62
    494e:	12 96       	adiw	r26, 0x02	; 2
    4950:	3c 93       	st	X, r19
    4952:	2e 93       	st	-X, r18
    4954:	11 97       	sbiw	r26, 0x01	; 1
    4956:	14 96       	adiw	r26, 0x04	; 4
    4958:	9c 93       	st	X, r25
    495a:	8e 93       	st	-X, r24
    495c:	13 97       	sbiw	r26, 0x03	; 3
    495e:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
    4962:	0f 90       	pop	r0
    4964:	0f 90       	pop	r0
    4966:	0f 90       	pop	r0
    4968:	0f 90       	pop	r0

	//int16_t EEMEM EEvSpeedHolderSamples[VSPEEDSAMPLESDESIRED];
	//Maybe should print this for debug...

}
    496a:	1f 91       	pop	r17
    496c:	0f 91       	pop	r16
    496e:	ff 90       	pop	r15
    4970:	ef 90       	pop	r14
    4972:	df 90       	pop	r13
    4974:	cf 90       	pop	r12
    4976:	bf 90       	pop	r11
    4978:	af 90       	pop	r10
    497a:	08 95       	ret

0000497c <processMonitor>:
}

uint8_t gpsFailures = 0;

void processMonitor(uint32_t time)
{
    497c:	af 92       	push	r10
    497e:	bf 92       	push	r11
    4980:	cf 92       	push	r12
    4982:	df 92       	push	r13
    4984:	ef 92       	push	r14
    4986:	ff 92       	push	r15
    4988:	0f 93       	push	r16
    498a:	1f 93       	push	r17
    498c:	5b 01       	movw	r10, r22
    498e:	6c 01       	movw	r12, r24
	#ifdef FCPUDEBUG
		lprintf_P(PSTR("In Process Monitor\n"));
    4990:	00 d0       	rcall	.+0      	; 0x4992 <processMonitor+0x16>
    4992:	81 ec       	ldi	r24, 0xC1	; 193
    4994:	93 e0       	ldi	r25, 0x03	; 3
    4996:	ad b7       	in	r26, 0x3d	; 61
    4998:	be b7       	in	r27, 0x3e	; 62
    499a:	12 96       	adiw	r26, 0x02	; 2
    499c:	9c 93       	st	X, r25
    499e:	8e 93       	st	-X, r24
    49a0:	11 97       	sbiw	r26, 0x01	; 1
    49a2:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
	#endif

	uint32_t currentBitmask[3];
	currentBitmask[0] = eeprom_read_dword(&EEcurrentTelemetryBitmap[0]);
    49a6:	0f 90       	pop	r0
    49a8:	0f 90       	pop	r0
    49aa:	83 e3       	ldi	r24, 0x33	; 51
    49ac:	90 e0       	ldi	r25, 0x00	; 0
    49ae:	0e 94 3c 3d 	call	0x7a78	; 0x7a78 <__eerd_dword_m324p>
    49b2:	7b 01       	movw	r14, r22
    49b4:	8c 01       	movw	r16, r24
	currentBitmask[1] = eeprom_read_dword(&EEcurrentTelemetryBitmap[1]);
	currentBitmask[2] = eeprom_read_dword(&EEcurrentTelemetryBitmap[2]);

	getGPS(&currentPositionData);
    49b6:	8b e3       	ldi	r24, 0x3B	; 59
    49b8:	94 e0       	ldi	r25, 0x04	; 4
    49ba:	0e 94 bf 2b 	call	0x577e	; 0x577e <getGPS>
	if(currentPositionData.status == 0)
    49be:	80 91 3b 04 	lds	r24, 0x043B
    49c2:	88 23       	and	r24, r24
    49c4:	41 f4       	brne	.+16     	; 0x49d6 <processMonitor+0x5a>
	{
		gpsFailures = 0;
    49c6:	10 92 33 03 	sts	0x0333, r1
		//This is bad, because it means we can't tell the difference between auto ballasting and ballast disable.
		eeprom_write_byte(&EEautoBallastDisable, 0);
    49ca:	81 e1       	ldi	r24, 0x11	; 17
    49cc:	90 e0       	ldi	r25, 0x00	; 0
    49ce:	60 e0       	ldi	r22, 0x00	; 0
    49d0:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <__eewr_byte_m324p>
    49d4:	1a c0       	rjmp	.+52     	; 0x4a0a <processMonitor+0x8e>
	} else {
		#ifdef FCPUDEBUG
			lprintf_P(PSTR("Bad GPS Data\n"));
    49d6:	00 d0       	rcall	.+0      	; 0x49d8 <processMonitor+0x5c>
    49d8:	83 eb       	ldi	r24, 0xB3	; 179
    49da:	93 e0       	ldi	r25, 0x03	; 3
    49dc:	ed b7       	in	r30, 0x3d	; 61
    49de:	fe b7       	in	r31, 0x3e	; 62
    49e0:	92 83       	std	Z+2, r25	; 0x02
    49e2:	81 83       	std	Z+1, r24	; 0x01
    49e4:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
		#endif
		#ifndef OSHITDISABLE
		//flush Vspeed
		numberOfVSpeedSamples=0;
    49e8:	10 92 2a 03 	sts	0x032A, r1
		gpsFailures++;
    49ec:	80 91 33 03 	lds	r24, 0x0333
    49f0:	8f 5f       	subi	r24, 0xFF	; 255
    49f2:	80 93 33 03 	sts	0x0333, r24
		//turn on GPS status telemetry channel
		currentBitmask[0] |= _BV(7);
    49f6:	80 e8       	ldi	r24, 0x80	; 128
    49f8:	90 e0       	ldi	r25, 0x00	; 0
    49fa:	a0 e0       	ldi	r26, 0x00	; 0
    49fc:	b0 e0       	ldi	r27, 0x00	; 0
    49fe:	e8 2a       	or	r14, r24
    4a00:	f9 2a       	or	r15, r25
    4a02:	0a 2b       	or	r16, r26
    4a04:	1b 2b       	or	r17, r27
    4a06:	0f 90       	pop	r0
    4a08:	0f 90       	pop	r0
		#endif
	}

	if(gpsFailures >= CRITGPSFAIL)
    4a0a:	80 91 33 03 	lds	r24, 0x0333
    4a0e:	84 31       	cpi	r24, 0x14	; 20
    4a10:	e8 f0       	brcs	.+58     	; 0x4a4c <processMonitor+0xd0>
	{
		//Setting altitude to 0 will kick us into flight phase 3
		#ifdef FCPUDEBUG
			lprintf_P(PSTR("Critical GPS Failure\n"));
    4a12:	00 d0       	rcall	.+0      	; 0x4a14 <processMonitor+0x98>
    4a14:	8d e9       	ldi	r24, 0x9D	; 157
    4a16:	93 e0       	ldi	r25, 0x03	; 3
    4a18:	ad b7       	in	r26, 0x3d	; 61
    4a1a:	be b7       	in	r27, 0x3e	; 62
    4a1c:	12 96       	adiw	r26, 0x02	; 2
    4a1e:	9c 93       	st	X, r25
    4a20:	8e 93       	st	-X, r24
    4a22:	11 97       	sbiw	r26, 0x01	; 1
    4a24:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
		#endif
		gpsFailures = CRITGPSFAIL + 1;
    4a28:	85 e1       	ldi	r24, 0x15	; 21
    4a2a:	80 93 33 03 	sts	0x0333, r24
		currentPositionData.altitude = 0;
    4a2e:	10 92 4f 04 	sts	0x044F, r1
    4a32:	10 92 4e 04 	sts	0x044E, r1
		vSpeedAvg = 0;
    4a36:	10 92 39 04 	sts	0x0439, r1
    4a3a:	10 92 38 04 	sts	0x0438, r1
		eeprom_write_byte(&EEautoBallastDisable, 1);
    4a3e:	0f 90       	pop	r0
    4a40:	0f 90       	pop	r0
    4a42:	81 e1       	ldi	r24, 0x11	; 17
    4a44:	90 e0       	ldi	r25, 0x00	; 0
    4a46:	61 e0       	ldi	r22, 0x01	; 1
    4a48:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <__eewr_byte_m324p>
	}

	//get battetry temp
	uint16_t rawBattTemp = tmp100rawTemp(TMP101BH)>>4;
    4a4c:	82 e9       	ldi	r24, 0x92	; 146
    4a4e:	0e 94 56 10 	call	0x20ac	; 0x20ac <tmp100rawTemp>
	int16_t btinm = get12bit2scomp(rawBattTemp);
    4a52:	e4 e0       	ldi	r30, 0x04	; 4
    4a54:	96 95       	lsr	r25
    4a56:	87 95       	ror	r24
    4a58:	ea 95       	dec	r30
    4a5a:	e1 f7       	brne	.-8      	; 0x4a54 <processMonitor+0xd8>
    4a5c:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <get12bit2scomp>
	//if(batteryVoltage < NominalVoltage)
	//{
		//currentBitmask[0] |= _BV(1);
	//}

	eeprom_write_block((uint16_t*)currentBitmask[0], &EEcurrentTelemetryBitmap, sizeof(uint32_t)*3);
    4a60:	c7 01       	movw	r24, r14
    4a62:	63 e3       	ldi	r22, 0x33	; 51
    4a64:	70 e0       	ldi	r23, 0x00	; 0
    4a66:	4c e0       	ldi	r20, 0x0C	; 12
    4a68:	50 e0       	ldi	r21, 0x00	; 0
    4a6a:	0e 94 48 3d 	call	0x7a90	; 0x7a90 <__eewr_block_m324p>

	scheduleQueueAdd(&processMonitor, time+5);
    4a6e:	85 e0       	ldi	r24, 0x05	; 5
    4a70:	90 e0       	ldi	r25, 0x00	; 0
    4a72:	a0 e0       	ldi	r26, 0x00	; 0
    4a74:	b0 e0       	ldi	r27, 0x00	; 0
    4a76:	a8 0e       	add	r10, r24
    4a78:	b9 1e       	adc	r11, r25
    4a7a:	ca 1e       	adc	r12, r26
    4a7c:	db 1e       	adc	r13, r27
    4a7e:	8e eb       	ldi	r24, 0xBE	; 190
    4a80:	94 e2       	ldi	r25, 0x24	; 36
    4a82:	b6 01       	movw	r22, r12
    4a84:	a5 01       	movw	r20, r10
    4a86:	0e 94 75 2f 	call	0x5eea	; 0x5eea <scheduleQueueAdd>
}
    4a8a:	1f 91       	pop	r17
    4a8c:	0f 91       	pop	r16
    4a8e:	ff 90       	pop	r15
    4a90:	ef 90       	pop	r14
    4a92:	df 90       	pop	r13
    4a94:	cf 90       	pop	r12
    4a96:	bf 90       	pop	r11
    4a98:	af 90       	pop	r10
    4a9a:	08 95       	ret

00004a9c <receiveCommandHandler>:
}

uint8_t cutdownStatus = 0;
uint8_t rapidHFEnable=0;
void receiveCommandHandler(uint8_t receiveDataLength, uint8_t* recieveData)
{
    4a9c:	1f 93       	push	r17
    4a9e:	fb 01       	movw	r30, r22
	switch(recieveData[0])
    4aa0:	20 81       	ld	r18, Z
    4aa2:	22 31       	cpi	r18, 0x12	; 18
    4aa4:	09 f4       	brne	.+2      	; 0x4aa8 <receiveCommandHandler+0xc>
    4aa6:	51 c1       	rjmp	.+674    	; 0x4d4a <receiveCommandHandler+0x2ae>
    4aa8:	23 31       	cpi	r18, 0x13	; 19
    4aaa:	c0 f5       	brcc	.+112    	; 0x4b1c <receiveCommandHandler+0x80>
    4aac:	27 30       	cpi	r18, 0x07	; 7
    4aae:	09 f4       	brne	.+2      	; 0x4ab2 <receiveCommandHandler+0x16>
    4ab0:	b4 c0       	rjmp	.+360    	; 0x4c1a <receiveCommandHandler+0x17e>
    4ab2:	28 30       	cpi	r18, 0x08	; 8
    4ab4:	a8 f4       	brcc	.+42     	; 0x4ae0 <receiveCommandHandler+0x44>
    4ab6:	23 30       	cpi	r18, 0x03	; 3
    4ab8:	09 f4       	brne	.+2      	; 0x4abc <receiveCommandHandler+0x20>
    4aba:	7c c0       	rjmp	.+248    	; 0x4bb4 <receiveCommandHandler+0x118>
    4abc:	24 30       	cpi	r18, 0x04	; 4
    4abe:	38 f4       	brcc	.+14     	; 0x4ace <receiveCommandHandler+0x32>
    4ac0:	21 30       	cpi	r18, 0x01	; 1
    4ac2:	09 f4       	brne	.+2      	; 0x4ac6 <receiveCommandHandler+0x2a>
    4ac4:	65 c0       	rjmp	.+202    	; 0x4b90 <receiveCommandHandler+0xf4>
    4ac6:	22 30       	cpi	r18, 0x02	; 2
    4ac8:	08 f0       	brcs	.+2      	; 0x4acc <receiveCommandHandler+0x30>
    4aca:	6a c0       	rjmp	.+212    	; 0x4ba0 <receiveCommandHandler+0x104>
    4acc:	5e c0       	rjmp	.+188    	; 0x4b8a <receiveCommandHandler+0xee>
    4ace:	25 30       	cpi	r18, 0x05	; 5
    4ad0:	09 f4       	brne	.+2      	; 0x4ad4 <receiveCommandHandler+0x38>
    4ad2:	99 c0       	rjmp	.+306    	; 0x4c06 <receiveCommandHandler+0x16a>
    4ad4:	81 81       	ldd	r24, Z+1	; 0x01
    4ad6:	32 81       	ldd	r19, Z+2	; 0x02
    4ad8:	26 30       	cpi	r18, 0x06	; 6
    4ada:	08 f0       	brcs	.+2      	; 0x4ade <receiveCommandHandler+0x42>
    4adc:	97 c0       	rjmp	.+302    	; 0x4c0c <receiveCommandHandler+0x170>
    4ade:	70 c0       	rjmp	.+224    	; 0x4bc0 <receiveCommandHandler+0x124>
    4ae0:	2b 30       	cpi	r18, 0x0B	; 11
    4ae2:	09 f4       	brne	.+2      	; 0x4ae6 <receiveCommandHandler+0x4a>
    4ae4:	b9 c0       	rjmp	.+370    	; 0x4c58 <receiveCommandHandler+0x1bc>
    4ae6:	2c 30       	cpi	r18, 0x0C	; 12
    4ae8:	48 f4       	brcc	.+18     	; 0x4afc <receiveCommandHandler+0x60>
    4aea:	29 30       	cpi	r18, 0x09	; 9
    4aec:	09 f4       	brne	.+2      	; 0x4af0 <receiveCommandHandler+0x54>
    4aee:	a4 c0       	rjmp	.+328    	; 0x4c38 <receiveCommandHandler+0x19c>
    4af0:	81 81       	ldd	r24, Z+1	; 0x01
    4af2:	32 81       	ldd	r19, Z+2	; 0x02
    4af4:	2a 30       	cpi	r18, 0x0A	; 10
    4af6:	08 f0       	brcs	.+2      	; 0x4afa <receiveCommandHandler+0x5e>
    4af8:	a8 c0       	rjmp	.+336    	; 0x4c4a <receiveCommandHandler+0x1ae>
    4afa:	97 c0       	rjmp	.+302    	; 0x4c2a <receiveCommandHandler+0x18e>
    4afc:	2e 30       	cpi	r18, 0x0E	; 14
    4afe:	09 f4       	brne	.+2      	; 0x4b02 <receiveCommandHandler+0x66>
    4b00:	ec c0       	rjmp	.+472    	; 0x4cda <receiveCommandHandler+0x23e>
    4b02:	2f 30       	cpi	r18, 0x0F	; 15
    4b04:	20 f4       	brcc	.+8      	; 0x4b0e <receiveCommandHandler+0x72>
    4b06:	2d 30       	cpi	r18, 0x0D	; 13
    4b08:	09 f0       	breq	.+2      	; 0x4b0c <receiveCommandHandler+0x70>
    4b0a:	67 c1       	rjmp	.+718    	; 0x4dda <receiveCommandHandler+0x33e>
    4b0c:	de c0       	rjmp	.+444    	; 0x4cca <receiveCommandHandler+0x22e>
    4b0e:	2f 30       	cpi	r18, 0x0F	; 15
    4b10:	09 f4       	brne	.+2      	; 0x4b14 <receiveCommandHandler+0x78>
    4b12:	eb c0       	rjmp	.+470    	; 0x4cea <receiveCommandHandler+0x24e>
    4b14:	20 31       	cpi	r18, 0x10	; 16
    4b16:	09 f0       	breq	.+2      	; 0x4b1a <receiveCommandHandler+0x7e>
    4b18:	60 c1       	rjmp	.+704    	; 0x4dda <receiveCommandHandler+0x33e>
    4b1a:	f3 c0       	rjmp	.+486    	; 0x4d02 <receiveCommandHandler+0x266>
    4b1c:	27 3f       	cpi	r18, 0xF7	; 247
    4b1e:	09 f4       	brne	.+2      	; 0x4b22 <receiveCommandHandler+0x86>
    4b20:	3e c1       	rjmp	.+636    	; 0x4d9e <receiveCommandHandler+0x302>
    4b22:	28 3f       	cpi	r18, 0xF8	; 248
    4b24:	c8 f4       	brcc	.+50     	; 0x4b58 <receiveCommandHandler+0xbc>
    4b26:	27 31       	cpi	r18, 0x17	; 23
    4b28:	09 f4       	brne	.+2      	; 0x4b2c <receiveCommandHandler+0x90>
    4b2a:	27 c1       	rjmp	.+590    	; 0x4d7a <receiveCommandHandler+0x2de>
    4b2c:	28 31       	cpi	r18, 0x18	; 24
    4b2e:	50 f4       	brcc	.+20     	; 0x4b44 <receiveCommandHandler+0xa8>
    4b30:	24 31       	cpi	r18, 0x14	; 20
    4b32:	09 f4       	brne	.+2      	; 0x4b36 <receiveCommandHandler+0x9a>
    4b34:	12 c1       	rjmp	.+548    	; 0x4d5a <receiveCommandHandler+0x2be>
    4b36:	24 31       	cpi	r18, 0x14	; 20
    4b38:	08 f4       	brcc	.+2      	; 0x4b3c <receiveCommandHandler+0xa0>
    4b3a:	0b c1       	rjmp	.+534    	; 0x4d52 <receiveCommandHandler+0x2b6>
    4b3c:	25 31       	cpi	r18, 0x15	; 21
    4b3e:	09 f0       	breq	.+2      	; 0x4b42 <receiveCommandHandler+0xa6>
    4b40:	4c c1       	rjmp	.+664    	; 0x4dda <receiveCommandHandler+0x33e>
    4b42:	13 c1       	rjmp	.+550    	; 0x4d6a <receiveCommandHandler+0x2ce>
    4b44:	29 31       	cpi	r18, 0x19	; 25
    4b46:	09 f4       	brne	.+2      	; 0x4b4a <receiveCommandHandler+0xae>
    4b48:	23 c1       	rjmp	.+582    	; 0x4d90 <receiveCommandHandler+0x2f4>
    4b4a:	29 31       	cpi	r18, 0x19	; 25
    4b4c:	08 f4       	brcc	.+2      	; 0x4b50 <receiveCommandHandler+0xb4>
    4b4e:	18 c1       	rjmp	.+560    	; 0x4d80 <receiveCommandHandler+0x2e4>
    4b50:	2a 31       	cpi	r18, 0x1A	; 26
    4b52:	09 f0       	breq	.+2      	; 0x4b56 <receiveCommandHandler+0xba>
    4b54:	42 c1       	rjmp	.+644    	; 0x4dda <receiveCommandHandler+0x33e>
    4b56:	20 c1       	rjmp	.+576    	; 0x4d98 <receiveCommandHandler+0x2fc>
    4b58:	2b 3f       	cpi	r18, 0xFB	; 251
    4b5a:	09 f4       	brne	.+2      	; 0x4b5e <receiveCommandHandler+0xc2>
    4b5c:	2c c1       	rjmp	.+600    	; 0x4db6 <receiveCommandHandler+0x31a>
    4b5e:	2c 3f       	cpi	r18, 0xFC	; 252
    4b60:	38 f4       	brcc	.+14     	; 0x4b70 <receiveCommandHandler+0xd4>
    4b62:	29 3f       	cpi	r18, 0xF9	; 249
    4b64:	09 f4       	brne	.+2      	; 0x4b68 <receiveCommandHandler+0xcc>
    4b66:	21 c1       	rjmp	.+578    	; 0x4daa <receiveCommandHandler+0x30e>
    4b68:	2a 3f       	cpi	r18, 0xFA	; 250
    4b6a:	08 f0       	brcs	.+2      	; 0x4b6e <receiveCommandHandler+0xd2>
    4b6c:	21 c1       	rjmp	.+578    	; 0x4db0 <receiveCommandHandler+0x314>
    4b6e:	1a c1       	rjmp	.+564    	; 0x4da4 <receiveCommandHandler+0x308>
    4b70:	2d 3f       	cpi	r18, 0xFD	; 253
    4b72:	09 f4       	brne	.+2      	; 0x4b76 <receiveCommandHandler+0xda>
    4b74:	2a c1       	rjmp	.+596    	; 0x4dca <receiveCommandHandler+0x32e>
    4b76:	2d 3f       	cpi	r18, 0xFD	; 253
    4b78:	08 f4       	brcc	.+2      	; 0x4b7c <receiveCommandHandler+0xe0>
    4b7a:	20 c1       	rjmp	.+576    	; 0x4dbc <receiveCommandHandler+0x320>
    4b7c:	2e 3f       	cpi	r18, 0xFE	; 254
    4b7e:	09 f4       	brne	.+2      	; 0x4b82 <receiveCommandHandler+0xe6>
    4b80:	27 c1       	rjmp	.+590    	; 0x4dd0 <receiveCommandHandler+0x334>
    4b82:	2f 3f       	cpi	r18, 0xFF	; 255
    4b84:	09 f0       	breq	.+2      	; 0x4b88 <receiveCommandHandler+0xec>
    4b86:	29 c1       	rjmp	.+594    	; 0x4dda <receiveCommandHandler+0x33e>
    4b88:	26 c1       	rjmp	.+588    	; 0x4dd6 <receiveCommandHandler+0x33a>
	{
		case 0x00:
			//verify we have received the right data
			//if(receiveDataLength == 2)
			{
				eeprom_write_byte(&EEflightPhase, recieveData[1]);
    4b8a:	82 e3       	ldi	r24, 0x32	; 50
    4b8c:	90 e0       	ldi	r25, 0x00	; 0
    4b8e:	14 c0       	rjmp	.+40     	; 0x4bb8 <receiveCommandHandler+0x11c>
		case 0x01:
			//ballast altitude target
			//if(receiveDataLength == 3)
			{
				uint16_t holder = ((uint16_t)recieveData[1]<<8) + recieveData[2];
				eeprom_write_word(&EEballastTargetAltitude, holder);
    4b90:	71 81       	ldd	r23, Z+1	; 0x01
    4b92:	60 e0       	ldi	r22, 0x00	; 0
    4b94:	82 81       	ldd	r24, Z+2	; 0x02
    4b96:	68 0f       	add	r22, r24
    4b98:	71 1d       	adc	r23, r1
    4b9a:	85 e0       	ldi	r24, 0x05	; 5
    4b9c:	90 e0       	ldi	r25, 0x00	; 0
    4b9e:	07 c0       	rjmp	.+14     	; 0x4bae <receiveCommandHandler+0x112>
		case 0x02:
			//Ballast Positive Vertical Speed Target
			//if(receiveDataLength == 3)
			{
				int16_t holder = ((uint16_t)recieveData[1]<<8) + recieveData[2];
				eeprom_write_word(&EEballastTargetPositiveVSpeed, holder);
    4ba0:	71 81       	ldd	r23, Z+1	; 0x01
    4ba2:	60 e0       	ldi	r22, 0x00	; 0
    4ba4:	82 81       	ldd	r24, Z+2	; 0x02
    4ba6:	68 0f       	add	r22, r24
    4ba8:	71 1d       	adc	r23, r1
    4baa:	87 e0       	ldi	r24, 0x07	; 7
    4bac:	90 e0       	ldi	r25, 0x00	; 0
    4bae:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__eewr_word_m324p>
    4bb2:	13 c1       	rjmp	.+550    	; 0x4dda <receiveCommandHandler+0x33e>
			break;
		case 0x03:
			//set Over Ocean Flag
			//if(receiveDataLength == 2)
			{
				eeprom_write_byte(&EEoverOceanFlag, recieveData[1]);
    4bb4:	82 e1       	ldi	r24, 0x12	; 18
    4bb6:	90 e0       	ldi	r25, 0x00	; 0
    4bb8:	61 81       	ldd	r22, Z+1	; 0x01
    4bba:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <__eewr_byte_m324p>
    4bbe:	0d c1       	rjmp	.+538    	; 0x4dda <receiveCommandHandler+0x33e>
		case 0x04:
			//set Sunrise Anticipation Time
			//if(receiveDataLength == 5)
			{
				uint32_t holder = ((uint32_t)recieveData[0] << 24) + ((uint32_t)recieveData[1] << 16) + ((uint32_t)recieveData[2] << 8) + recieveData[3];
				eeprom_write_dword(&EEsunriseAnticipation, holder);
    4bc0:	43 81       	ldd	r20, Z+3	; 0x03
    4bc2:	50 e0       	ldi	r21, 0x00	; 0
    4bc4:	60 e0       	ldi	r22, 0x00	; 0
    4bc6:	70 e0       	ldi	r23, 0x00	; 0
    4bc8:	40 50       	subi	r20, 0x00	; 0
    4bca:	50 40       	sbci	r21, 0x00	; 0
    4bcc:	60 40       	sbci	r22, 0x00	; 0
    4bce:	7c 4f       	sbci	r23, 0xFC	; 252
    4bd0:	90 e0       	ldi	r25, 0x00	; 0
    4bd2:	a0 e0       	ldi	r26, 0x00	; 0
    4bd4:	b0 e0       	ldi	r27, 0x00	; 0
    4bd6:	dc 01       	movw	r26, r24
    4bd8:	99 27       	eor	r25, r25
    4bda:	88 27       	eor	r24, r24
    4bdc:	48 0f       	add	r20, r24
    4bde:	59 1f       	adc	r21, r25
    4be0:	6a 1f       	adc	r22, r26
    4be2:	7b 1f       	adc	r23, r27
    4be4:	83 2f       	mov	r24, r19
    4be6:	90 e0       	ldi	r25, 0x00	; 0
    4be8:	a0 e0       	ldi	r26, 0x00	; 0
    4bea:	b0 e0       	ldi	r27, 0x00	; 0
    4bec:	ba 2f       	mov	r27, r26
    4bee:	a9 2f       	mov	r26, r25
    4bf0:	98 2f       	mov	r25, r24
    4bf2:	88 27       	eor	r24, r24
    4bf4:	48 0f       	add	r20, r24
    4bf6:	59 1f       	adc	r21, r25
    4bf8:	6a 1f       	adc	r22, r26
    4bfa:	7b 1f       	adc	r23, r27
    4bfc:	84 e1       	ldi	r24, 0x14	; 20
    4bfe:	90 e0       	ldi	r25, 0x00	; 0
    4c00:	0e 94 60 3d 	call	0x7ac0	; 0x7ac0 <__eewr_dword_m324p>
    4c04:	ea c0       	rjmp	.+468    	; 0x4dda <receiveCommandHandler+0x33e>
			break;
		case 0x05:
			//set Night Temperature Forecast
			//if(receiveDataLength == 2)
			{
				eeprom_write_byte(&EEnightTemperatureForecast, recieveData[1]);
    4c06:	83 e1       	ldi	r24, 0x13	; 19
    4c08:	90 e0       	ldi	r25, 0x00	; 0
    4c0a:	d6 cf       	rjmp	.-84     	; 0x4bb8 <receiveCommandHandler+0x11c>
		case 0x06:
			//set Data Sample Interval
			//if(receiveDataLength == 3)
			{
				uint16_t holder = ((uint16_t)recieveData[1]<<8) + recieveData[2];
				eeprom_write_word(&EEdataCollectionInterval, holder);
    4c0c:	78 2f       	mov	r23, r24
    4c0e:	60 e0       	ldi	r22, 0x00	; 0
    4c10:	63 0f       	add	r22, r19
    4c12:	71 1d       	adc	r23, r1
    4c14:	8b e1       	ldi	r24, 0x1B	; 27
    4c16:	90 e0       	ldi	r25, 0x00	; 0
    4c18:	ca cf       	rjmp	.-108    	; 0x4bae <receiveCommandHandler+0x112>
		case 0x07:
			//set Data Transmit Interval
			//if(receiveDataLength == 3)
			{
				uint16_t holder = ((uint16_t)recieveData[1]<<8) + recieveData[2];
				eeprom_write_word(&EEdataTransmitInterval, holder);
    4c1a:	71 81       	ldd	r23, Z+1	; 0x01
    4c1c:	60 e0       	ldi	r22, 0x00	; 0
    4c1e:	82 81       	ldd	r24, Z+2	; 0x02
    4c20:	68 0f       	add	r22, r24
    4c22:	71 1d       	adc	r23, r1
    4c24:	8d e1       	ldi	r24, 0x1D	; 29
    4c26:	90 e0       	ldi	r25, 0x00	; 0
    4c28:	c2 cf       	rjmp	.-124    	; 0x4bae <receiveCommandHandler+0x112>
		case 0x08:
			//set Predefined Bitmask Select
			//if(receiveDataLength == 3)
			{
				uint16_t holder = ((uint16_t)recieveData[1]<<8) + recieveData[2];
				eeprom_write_word(&EEcurrentTelemetryVersion, holder);
    4c2a:	78 2f       	mov	r23, r24
    4c2c:	60 e0       	ldi	r22, 0x00	; 0
    4c2e:	63 0f       	add	r22, r19
    4c30:	71 1d       	adc	r23, r1
    4c32:	8f e3       	ldi	r24, 0x3F	; 63
    4c34:	90 e0       	ldi	r25, 0x00	; 0
    4c36:	bb cf       	rjmp	.-138    	; 0x4bae <receiveCommandHandler+0x112>
			break;
		case 0x09:
			//set Custom Bitmask Select
			//if(receiveDataLength == 13)
			{
				eeprom_write_block((uint16_t*)recieveData[1], &EEcurrentTelemetryBitmap, sizeof(uint32_t)*3);
    4c38:	81 81       	ldd	r24, Z+1	; 0x01
    4c3a:	90 e0       	ldi	r25, 0x00	; 0
    4c3c:	63 e3       	ldi	r22, 0x33	; 51
    4c3e:	70 e0       	ldi	r23, 0x00	; 0
    4c40:	4c e0       	ldi	r20, 0x0C	; 12
    4c42:	50 e0       	ldi	r21, 0x00	; 0
    4c44:	0e 94 48 3d 	call	0x7a90	; 0x7a90 <__eewr_block_m324p>
    4c48:	c8 c0       	rjmp	.+400    	; 0x4dda <receiveCommandHandler+0x33e>
		case 0x0A:
			//set Max Allowable TX Interval
			//if(receiveDataLength == 3)
			{
				uint16_t holder = ((uint16_t)recieveData[1] << 8) + recieveData[2];
				eeprom_write_word(&EEmaxAllowableTXInterval, holder);
    4c4a:	78 2f       	mov	r23, r24
    4c4c:	60 e0       	ldi	r22, 0x00	; 0
    4c4e:	63 0f       	add	r22, r19
    4c50:	71 1d       	adc	r23, r1
    4c52:	88 e1       	ldi	r24, 0x18	; 24
    4c54:	90 e0       	ldi	r25, 0x00	; 0
    4c56:	ab cf       	rjmp	.-170    	; 0x4bae <receiveCommandHandler+0x112>
		case 0x0B:
			//set Battery Heater Setpoint
			//if(receiveDataLength == 2)
			{
				uint8_t error;
				eeprom_write_byte(&EEbatteryHeaterSetpoint, recieveData[1]);
    4c58:	8a e1       	ldi	r24, 0x1A	; 26
    4c5a:	90 e0       	ldi	r25, 0x00	; 0
    4c5c:	61 81       	ldd	r22, Z+1	; 0x01
    4c5e:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <__eewr_byte_m324p>
				error |= setTMP101Thermo(TMP101BH, set12bit2scomp(eeprom_read_byte(&EEbatteryHeaterSetpoint))*16, 0);
    4c62:	8a e1       	ldi	r24, 0x1A	; 26
    4c64:	90 e0       	ldi	r25, 0x00	; 0
    4c66:	0e 94 34 3d 	call	0x7a68	; 0x7a68 <__eerd_byte_m324p>
    4c6a:	90 e0       	ldi	r25, 0x00	; 0
    4c6c:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <set12bit2scomp>
    4c70:	bc 01       	movw	r22, r24
    4c72:	94 e0       	ldi	r25, 0x04	; 4
    4c74:	66 0f       	add	r22, r22
    4c76:	77 1f       	adc	r23, r23
    4c78:	9a 95       	dec	r25
    4c7a:	e1 f7       	brne	.-8      	; 0x4c74 <receiveCommandHandler+0x1d8>
    4c7c:	82 e9       	ldi	r24, 0x92	; 146
    4c7e:	40 e0       	ldi	r20, 0x00	; 0
    4c80:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <setTMP101Thermo>
    4c84:	18 2f       	mov	r17, r24
				error |= setTMP101Thermo(TMP101BH, set12bit2scomp(eeprom_read_byte(&EEbatteryHeaterSetpoint))*16+32, 1);
    4c86:	8a e1       	ldi	r24, 0x1A	; 26
    4c88:	90 e0       	ldi	r25, 0x00	; 0
    4c8a:	0e 94 34 3d 	call	0x7a68	; 0x7a68 <__eerd_byte_m324p>
    4c8e:	90 e0       	ldi	r25, 0x00	; 0
    4c90:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <set12bit2scomp>
    4c94:	bc 01       	movw	r22, r24
    4c96:	6e 5f       	subi	r22, 0xFE	; 254
    4c98:	7f 4f       	sbci	r23, 0xFF	; 255
    4c9a:	84 e0       	ldi	r24, 0x04	; 4
    4c9c:	66 0f       	add	r22, r22
    4c9e:	77 1f       	adc	r23, r23
    4ca0:	8a 95       	dec	r24
    4ca2:	e1 f7       	brne	.-8      	; 0x4c9c <receiveCommandHandler+0x200>
    4ca4:	82 e9       	ldi	r24, 0x92	; 146
    4ca6:	41 e0       	ldi	r20, 0x01	; 1
    4ca8:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <setTMP101Thermo>
				#ifdef GSPDEBUG
					if(error != 0)
    4cac:	18 2b       	or	r17, r24
    4cae:	09 f4       	brne	.+2      	; 0x4cb2 <receiveCommandHandler+0x216>
    4cb0:	94 c0       	rjmp	.+296    	; 0x4dda <receiveCommandHandler+0x33e>
					{
						lprintf_P(PSTR("Error Setting thermometer\n"));
    4cb2:	00 d0       	rcall	.+0      	; 0x4cb4 <receiveCommandHandler+0x218>
    4cb4:	80 ec       	ldi	r24, 0xC0	; 192
    4cb6:	97 e0       	ldi	r25, 0x07	; 7
    4cb8:	ed b7       	in	r30, 0x3d	; 61
    4cba:	fe b7       	in	r31, 0x3e	; 62
    4cbc:	92 83       	std	Z+2, r25	; 0x02
    4cbe:	81 83       	std	Z+1, r24	; 0x01
    4cc0:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
    4cc4:	0f 90       	pop	r0
    4cc6:	0f 90       	pop	r0
    4cc8:	88 c0       	rjmp	.+272    	; 0x4dda <receiveCommandHandler+0x33e>
			break;
		case 0x0D:
			//if(receiveDataLength == 3)
			{
				uint16_t holder = ((uint16_t)recieveData[1] << 8) + recieveData[2];
				eeprom_write_word(&EEballastSafetyAltThresh, holder);
    4cca:	71 81       	ldd	r23, Z+1	; 0x01
    4ccc:	60 e0       	ldi	r22, 0x00	; 0
    4cce:	82 81       	ldd	r24, Z+2	; 0x02
    4cd0:	68 0f       	add	r22, r24
    4cd2:	71 1d       	adc	r23, r1
    4cd4:	8f e0       	ldi	r24, 0x0F	; 15
    4cd6:	90 e0       	ldi	r25, 0x00	; 0
    4cd8:	6a cf       	rjmp	.-300    	; 0x4bae <receiveCommandHandler+0x112>
		case 0x0E:
			//set HF Transmit Interval
			//if(receiveDataLength == 3)
			{
				uint16_t holder = ((uint16_t)recieveData[1] << 8) + recieveData[2];
				eeprom_write_word(&EEhfDataTransmitInterval, holder);
    4cda:	71 81       	ldd	r23, Z+1	; 0x01
    4cdc:	60 e0       	ldi	r22, 0x00	; 0
    4cde:	82 81       	ldd	r24, Z+2	; 0x02
    4ce0:	68 0f       	add	r22, r24
    4ce2:	71 1d       	adc	r23, r1
    4ce4:	8f e1       	ldi	r24, 0x1F	; 31
    4ce6:	90 e0       	ldi	r25, 0x00	; 0
    4ce8:	62 cf       	rjmp	.-316    	; 0x4bae <receiveCommandHandler+0x112>
			}
			break;
		case 0x0F:
			//if(receiveDataLength == 1)
			{
				cutdownStatus= 1;
    4cea:	81 e0       	ldi	r24, 0x01	; 1
    4cec:	80 93 31 03 	sts	0x0331, r24
				//enable rapid hf xmit
				rapidHFEnable = 1;
    4cf0:	80 93 32 03 	sts	0x0332, r24
				//schedule rapid hf xmit
				scheduleQueueAdd(&rapidHFXmit, now());
    4cf4:	0e 94 9c 14 	call	0x2938	; 0x2938 <now>
    4cf8:	ab 01       	movw	r20, r22
    4cfa:	bc 01       	movw	r22, r24
    4cfc:	8a e9       	ldi	r24, 0x9A	; 154
    4cfe:	95 e1       	ldi	r25, 0x15	; 21
    4d00:	21 c0       	rjmp	.+66     	; 0x4d44 <receiveCommandHandler+0x2a8>
		case 0x10:
			//if(receiveDataLength == 5)
			{
				//It Looks Like You're trying to Schedule a cutdown!
				uint32_t time = ((uint32_t)recieveData[0] << 24) + ((uint32_t)recieveData[1] << 16) + ((uint32_t)recieveData[2] << 8) + recieveData[3];
				scheduleQueueAdd(&timedCutdown, time);
    4d02:	43 81       	ldd	r20, Z+3	; 0x03
    4d04:	50 e0       	ldi	r21, 0x00	; 0
    4d06:	60 e0       	ldi	r22, 0x00	; 0
    4d08:	70 e0       	ldi	r23, 0x00	; 0
    4d0a:	40 50       	subi	r20, 0x00	; 0
    4d0c:	50 40       	sbci	r21, 0x00	; 0
    4d0e:	60 40       	sbci	r22, 0x00	; 0
    4d10:	70 4f       	sbci	r23, 0xF0	; 240
    4d12:	81 81       	ldd	r24, Z+1	; 0x01
    4d14:	90 e0       	ldi	r25, 0x00	; 0
    4d16:	a0 e0       	ldi	r26, 0x00	; 0
    4d18:	b0 e0       	ldi	r27, 0x00	; 0
    4d1a:	dc 01       	movw	r26, r24
    4d1c:	99 27       	eor	r25, r25
    4d1e:	88 27       	eor	r24, r24
    4d20:	48 0f       	add	r20, r24
    4d22:	59 1f       	adc	r21, r25
    4d24:	6a 1f       	adc	r22, r26
    4d26:	7b 1f       	adc	r23, r27
    4d28:	82 81       	ldd	r24, Z+2	; 0x02
    4d2a:	90 e0       	ldi	r25, 0x00	; 0
    4d2c:	a0 e0       	ldi	r26, 0x00	; 0
    4d2e:	b0 e0       	ldi	r27, 0x00	; 0
    4d30:	ba 2f       	mov	r27, r26
    4d32:	a9 2f       	mov	r26, r25
    4d34:	98 2f       	mov	r25, r24
    4d36:	88 27       	eor	r24, r24
    4d38:	48 0f       	add	r20, r24
    4d3a:	59 1f       	adc	r21, r25
    4d3c:	6a 1f       	adc	r22, r26
    4d3e:	7b 1f       	adc	r23, r27
    4d40:	80 eb       	ldi	r24, 0xB0	; 176
    4d42:	92 e1       	ldi	r25, 0x12	; 18
    4d44:	0e 94 75 2f 	call	0x5eea	; 0x5eea <scheduleQueueAdd>
    4d48:	48 c0       	rjmp	.+144    	; 0x4dda <receiveCommandHandler+0x33e>
			break;
		case 0x12:
			//set Disarm Auto Ballast
			//if(receiveDataLength == 1)
			{
				eeprom_write_byte(&EEautoBallastDisable, 1);
    4d4a:	81 e1       	ldi	r24, 0x11	; 17
    4d4c:	90 e0       	ldi	r25, 0x00	; 0
    4d4e:	61 e0       	ldi	r22, 0x01	; 1
    4d50:	34 cf       	rjmp	.-408    	; 0x4bba <receiveCommandHandler+0x11e>
			}
			break;
		case 0x13:
			//if(receiveDataLength == 1)
			{
				eeprom_write_byte(&EEautoBallastDisable, 0);
    4d52:	81 e1       	ldi	r24, 0x11	; 17
    4d54:	90 e0       	ldi	r25, 0x00	; 0
    4d56:	60 e0       	ldi	r22, 0x00	; 0
    4d58:	30 cf       	rjmp	.-416    	; 0x4bba <receiveCommandHandler+0x11e>
		case 0x14:
			//set mayday vspeed threshold
			//if(receiveDataLength == 3)
			{
				uint16_t holder = ((uint16_t)recieveData[1] << 8) + recieveData[2];
				eeprom_write_word(&EEmaydayVSpeed, holder);
    4d5a:	71 81       	ldd	r23, Z+1	; 0x01
    4d5c:	60 e0       	ldi	r22, 0x00	; 0
    4d5e:	82 81       	ldd	r24, Z+2	; 0x02
    4d60:	68 0f       	add	r22, r24
    4d62:	71 1d       	adc	r23, r1
    4d64:	8d e0       	ldi	r24, 0x0D	; 13
    4d66:	90 e0       	ldi	r25, 0x00	; 0
    4d68:	22 cf       	rjmp	.-444    	; 0x4bae <receiveCommandHandler+0x112>
		case 0x15:
			//set mayday altitude Thresh
			//if(receiveDataLength == 3)
			{
				uint16_t holder = ((uint16_t)recieveData[1] << 8) + recieveData[2];
				eeprom_write_word(&EEmaydayAltitude, holder);
    4d6a:	71 81       	ldd	r23, Z+1	; 0x01
    4d6c:	60 e0       	ldi	r22, 0x00	; 0
    4d6e:	82 81       	ldd	r24, Z+2	; 0x02
    4d70:	68 0f       	add	r22, r24
    4d72:	71 1d       	adc	r23, r1
    4d74:	8b e0       	ldi	r24, 0x0B	; 11
    4d76:	90 e0       	ldi	r25, 0x00	; 0
    4d78:	1a cf       	rjmp	.-460    	; 0x4bae <receiveCommandHandler+0x112>
			break;
		case 0x17:
			//set Set Rapid HF Transmit Period
			//if(receiveDataLength == 2)
			{
				eeprom_write_byte(&EEhfRapidTransmit, recieveData[1]);
    4d7a:	81 e2       	ldi	r24, 0x21	; 33
    4d7c:	90 e0       	ldi	r25, 0x00	; 0
    4d7e:	1c cf       	rjmp	.-456    	; 0x4bb8 <receiveCommandHandler+0x11c>
			break;
		case 0x18:
			//if(receiveDataLength == 3)
			{
				int16_t holder = ((uint16_t)recieveData[1]<<8) + recieveData[2];
				eeprom_write_word(&EEballastTargetNegativeVSpeed, holder);
    4d80:	71 81       	ldd	r23, Z+1	; 0x01
    4d82:	60 e0       	ldi	r22, 0x00	; 0
    4d84:	82 81       	ldd	r24, Z+2	; 0x02
    4d86:	68 0f       	add	r22, r24
    4d88:	71 1d       	adc	r23, r1
    4d8a:	89 e0       	ldi	r24, 0x09	; 9
    4d8c:	90 e0       	ldi	r25, 0x00	; 0
    4d8e:	0f cf       	rjmp	.-482    	; 0x4bae <receiveCommandHandler+0x112>
			}
			break;
		case 0x19:
			enableReports = 1;
    4d90:	81 e0       	ldi	r24, 0x01	; 1
    4d92:	80 93 53 04 	sts	0x0453, r24
    4d96:	21 c0       	rjmp	.+66     	; 0x4dda <receiveCommandHandler+0x33e>
			break;
		case 0x1A:
			enableReports = 0;
    4d98:	10 92 53 04 	sts	0x0453, r1
    4d9c:	1e c0       	rjmp	.+60     	; 0x4dda <receiveCommandHandler+0x33e>
			break;
		case 0xF7:
			eeprom_write_byte(&EEEpochLock, recieveData[1]);
    4d9e:	80 e0       	ldi	r24, 0x00	; 0
    4da0:	90 e0       	ldi	r25, 0x00	; 0
    4da2:	0a cf       	rjmp	.-492    	; 0x4bb8 <receiveCommandHandler+0x11c>
			break;
		case 0xF8:
			dumpGPS();
    4da4:	0e 94 0d 13 	call	0x261a	; 0x261a <dumpGPS>
    4da8:	18 c0       	rjmp	.+48     	; 0x4dda <receiveCommandHandler+0x33e>
			break;
		case 0xF9:
			debugBallast();
    4daa:	0e 94 01 14 	call	0x2802	; 0x2802 <debugBallast>
    4dae:	15 c0       	rjmp	.+42     	; 0x4dda <receiveCommandHandler+0x33e>
			break;
		case 0xFA:
			debugPrintRawStrings();
    4db0:	0e 94 7f 29 	call	0x52fe	; 0x52fe <debugPrintRawStrings>
    4db4:	12 c0       	rjmp	.+36     	; 0x4dda <receiveCommandHandler+0x33e>
			break;
		case 0xFB:
			//lprintf_P(PSTR("Defaulting the EEPROM...\n"));
			defaultEEPROM();
    4db6:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <defaultEEPROM>
    4dba:	0f c0       	rjmp	.+30     	; 0x4dda <receiveCommandHandler+0x33e>
			break;
		case 0xFC:
			collectData(0xFFFFFFFF);
    4dbc:	6f ef       	ldi	r22, 0xFF	; 255
    4dbe:	7f ef       	ldi	r23, 0xFF	; 255
    4dc0:	8f ef       	ldi	r24, 0xFF	; 255
    4dc2:	9f ef       	ldi	r25, 0xFF	; 255
    4dc4:	0e 94 8f 1b 	call	0x371e	; 0x371e <collectData>
    4dc8:	08 c0       	rjmp	.+16     	; 0x4dda <receiveCommandHandler+0x33e>
			break;
		case 0xFD:
			dumpTemps();
    4dca:	0e 94 b4 1a 	call	0x3568	; 0x3568 <dumpTemps>
    4dce:	05 c0       	rjmp	.+10     	; 0x4dda <receiveCommandHandler+0x33e>
			break;
		case 0xFE:
			bmpTest();
    4dd0:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <bmpTest>
    4dd4:	02 c0       	rjmp	.+4      	; 0x4dda <receiveCommandHandler+0x33e>
			break;
		case 0xFF:
			dumpVarsToGSP();
    4dd6:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <dumpVarsToGSP>
			break;
	}
}
    4dda:	1f 91       	pop	r17
    4ddc:	08 95       	ret

00004dde <main>:
//======================



int main (void)
{
    4dde:	cf 92       	push	r12
    4de0:	df 92       	push	r13
    4de2:	ef 92       	push	r14
    4de4:	ff 92       	push	r15
    4de6:	0f 93       	push	r16
    4de8:	1f 93       	push	r17
    4dea:	df 93       	push	r29
    4dec:	cf 93       	push	r28
    4dee:	cd b7       	in	r28, 0x3d	; 61
    4df0:	de b7       	in	r29, 0x3e	; 62
    4df2:	2f 97       	sbiw	r28, 0x0f	; 15
    4df4:	0f b6       	in	r0, 0x3f	; 63
    4df6:	f8 94       	cli
    4df8:	de bf       	out	0x3e, r29	; 62
    4dfa:	0f be       	out	0x3f, r0	; 63
    4dfc:	cd bf       	out	0x3d, r28	; 61
	uint8_t seconds,  minutes, hours, days;
	uint8_t error;

	ioinit(); //Setup IO pins and defaults
    4dfe:	0e 94 7f 14 	call	0x28fe	; 0x28fe <ioinit>
	i2cSetTheDamnTWBRMyself(10);
    4e02:	8a e0       	ldi	r24, 0x0A	; 10
    4e04:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <i2cSetTheDamnTWBRMyself>

	i2cSetLocalDeviceAddr(0b00001010, 0x00, 0, 0, 0);
    4e08:	8a e0       	ldi	r24, 0x0A	; 10
    4e0a:	60 e0       	ldi	r22, 0x00	; 0
    4e0c:	40 e0       	ldi	r20, 0x00	; 0
    4e0e:	20 e0       	ldi	r18, 0x00	; 0
    4e10:	00 e0       	ldi	r16, 0x00	; 0
    4e12:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <i2cSetLocalDeviceAddr>
	i2cSetSlaveReceiveHandler(receiveCommandHandler);
    4e16:	8e e4       	ldi	r24, 0x4E	; 78
    4e18:	95 e2       	ldi	r25, 0x25	; 37
    4e1a:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <i2cSetSlaveReceiveHandler>
	i2cEnableInt();
    4e1e:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <i2cEnableInt>
	sei();
    4e22:	78 94       	sei
    4e24:	88 e8       	ldi	r24, 0x88	; 136
    4e26:	93 e1       	ldi	r25, 0x13	; 19
    4e28:	2c e2       	ldi	r18, 0x2C	; 44
    4e2a:	31 e0       	ldi	r19, 0x01	; 1
    4e2c:	f9 01       	movw	r30, r18
    4e2e:	31 97       	sbiw	r30, 0x01	; 1
    4e30:	f1 f7       	brne	.-4      	; 0x4e2e <main+0x50>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e32:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e34:	d9 f7       	brne	.-10     	; 0x4e2c <main+0x4e>

	_delay_ms(500);

	lprintf("WSB CPU Alive\n");
    4e36:	00 d0       	rcall	.+0      	; 0x4e38 <main+0x5a>
    4e38:	8d ef       	ldi	r24, 0xFD	; 253
    4e3a:	91 e0       	ldi	r25, 0x01	; 1
    4e3c:	ad b7       	in	r26, 0x3d	; 61
    4e3e:	be b7       	in	r27, 0x3e	; 62
    4e40:	12 96       	adiw	r26, 0x02	; 2
    4e42:	9c 93       	st	X, r25
    4e44:	8e 93       	st	-X, r24
    4e46:	11 97       	sbiw	r26, 0x01	; 1
    4e48:	0e 94 77 13 	call	0x26ee	; 0x26ee <lprintf>

	error = getTime(&seconds, &minutes, &hours, &days);
    4e4c:	0f 90       	pop	r0
    4e4e:	0f 90       	pop	r0
    4e50:	ce 01       	movw	r24, r28
    4e52:	01 96       	adiw	r24, 0x01	; 1
    4e54:	be 01       	movw	r22, r28
    4e56:	6e 5f       	subi	r22, 0xFE	; 254
    4e58:	7f 4f       	sbci	r23, 0xFF	; 255
    4e5a:	ae 01       	movw	r20, r28
    4e5c:	4d 5f       	subi	r20, 0xFD	; 253
    4e5e:	5f 4f       	sbci	r21, 0xFF	; 255
    4e60:	9e 01       	movw	r18, r28
    4e62:	2c 5f       	subi	r18, 0xFC	; 252
    4e64:	3f 4f       	sbci	r19, 0xFF	; 255
    4e66:	0e 94 0a 0c 	call	0x1814	; 0x1814 <getTime>
	lprintf("E: %d\n", error);
    4e6a:	00 d0       	rcall	.+0      	; 0x4e6c <main+0x8e>
    4e6c:	00 d0       	rcall	.+0      	; 0x4e6e <main+0x90>
    4e6e:	ed b7       	in	r30, 0x3d	; 61
    4e70:	fe b7       	in	r31, 0x3e	; 62
    4e72:	31 96       	adiw	r30, 0x01	; 1
    4e74:	2c e0       	ldi	r18, 0x0C	; 12
    4e76:	32 e0       	ldi	r19, 0x02	; 2
    4e78:	ad b7       	in	r26, 0x3d	; 61
    4e7a:	be b7       	in	r27, 0x3e	; 62
    4e7c:	12 96       	adiw	r26, 0x02	; 2
    4e7e:	3c 93       	st	X, r19
    4e80:	2e 93       	st	-X, r18
    4e82:	11 97       	sbiw	r26, 0x01	; 1
    4e84:	82 83       	std	Z+2, r24	; 0x02
    4e86:	13 82       	std	Z+3, r1	; 0x03
    4e88:	0e 94 77 13 	call	0x26ee	; 0x26ee <lprintf>
	lprintf("S: %d M: %d H: %d D: %d\n", seconds, minutes, hours, days);
    4e8c:	00 d0       	rcall	.+0      	; 0x4e8e <main+0xb0>
    4e8e:	00 d0       	rcall	.+0      	; 0x4e90 <main+0xb2>
    4e90:	00 d0       	rcall	.+0      	; 0x4e92 <main+0xb4>
    4e92:	ed b7       	in	r30, 0x3d	; 61
    4e94:	fe b7       	in	r31, 0x3e	; 62
    4e96:	31 96       	adiw	r30, 0x01	; 1
    4e98:	83 e1       	ldi	r24, 0x13	; 19
    4e9a:	92 e0       	ldi	r25, 0x02	; 2
    4e9c:	ad b7       	in	r26, 0x3d	; 61
    4e9e:	be b7       	in	r27, 0x3e	; 62
    4ea0:	12 96       	adiw	r26, 0x02	; 2
    4ea2:	9c 93       	st	X, r25
    4ea4:	8e 93       	st	-X, r24
    4ea6:	11 97       	sbiw	r26, 0x01	; 1
    4ea8:	89 81       	ldd	r24, Y+1	; 0x01
    4eaa:	82 83       	std	Z+2, r24	; 0x02
    4eac:	13 82       	std	Z+3, r1	; 0x03
    4eae:	8a 81       	ldd	r24, Y+2	; 0x02
    4eb0:	84 83       	std	Z+4, r24	; 0x04
    4eb2:	15 82       	std	Z+5, r1	; 0x05
    4eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    4eb6:	86 83       	std	Z+6, r24	; 0x06
    4eb8:	17 82       	std	Z+7, r1	; 0x07
    4eba:	8c 81       	ldd	r24, Y+4	; 0x04
    4ebc:	80 87       	std	Z+8, r24	; 0x08
    4ebe:	11 86       	std	Z+9, r1	; 0x09
    4ec0:	0e 94 77 13 	call	0x26ee	; 0x26ee <lprintf>

	if(eeprom_read_byte(&EEEpochLock) == 0)
    4ec4:	ed b7       	in	r30, 0x3d	; 61
    4ec6:	fe b7       	in	r31, 0x3e	; 62
    4ec8:	3a 96       	adiw	r30, 0x0a	; 10
    4eca:	0f b6       	in	r0, 0x3f	; 63
    4ecc:	f8 94       	cli
    4ece:	fe bf       	out	0x3e, r31	; 62
    4ed0:	0f be       	out	0x3f, r0	; 63
    4ed2:	ed bf       	out	0x3d, r30	; 61
    4ed4:	80 e0       	ldi	r24, 0x00	; 0
    4ed6:	90 e0       	ldi	r25, 0x00	; 0
    4ed8:	0e 94 34 3d 	call	0x7a68	; 0x7a68 <__eerd_byte_m324p>
    4edc:	88 23       	and	r24, r24
    4ede:	99 f4       	brne	.+38     	; 0x4f06 <main+0x128>
	{
		#ifdef FCPUDEBUG
			lprintf_P(PSTR("Setting Epoch Start\n"));
    4ee0:	00 d0       	rcall	.+0      	; 0x4ee2 <main+0x104>
    4ee2:	8b ed       	ldi	r24, 0xDB	; 219
    4ee4:	97 e0       	ldi	r25, 0x07	; 7
    4ee6:	ad b7       	in	r26, 0x3d	; 61
    4ee8:	be b7       	in	r27, 0x3e	; 62
    4eea:	12 96       	adiw	r26, 0x02	; 2
    4eec:	9c 93       	st	X, r25
    4eee:	8e 93       	st	-X, r24
    4ef0:	11 97       	sbiw	r26, 0x01	; 1
    4ef2:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
		#endif
		writeEpochStart(seconds, minutes, hours, days);
    4ef6:	0f 90       	pop	r0
    4ef8:	0f 90       	pop	r0
    4efa:	89 81       	ldd	r24, Y+1	; 0x01
    4efc:	6a 81       	ldd	r22, Y+2	; 0x02
    4efe:	4b 81       	ldd	r20, Y+3	; 0x03
    4f00:	2c 81       	ldd	r18, Y+4	; 0x04
    4f02:	0e 94 2e 28 	call	0x505c	; 0x505c <writeEpochStart>
	}

	lprintf("Still Alive\n");
    4f06:	00 d0       	rcall	.+0      	; 0x4f08 <main+0x12a>
    4f08:	8c e2       	ldi	r24, 0x2C	; 44
    4f0a:	92 e0       	ldi	r25, 0x02	; 2
    4f0c:	ed b7       	in	r30, 0x3d	; 61
    4f0e:	fe b7       	in	r31, 0x3e	; 62
    4f10:	92 83       	std	Z+2, r25	; 0x02
    4f12:	81 83       	std	Z+1, r24	; 0x01
    4f14:	0e 94 77 13 	call	0x26ee	; 0x26ee <lprintf>

	// TMP100
	setTMP100config(TMP100FC, 0xE0);
    4f18:	0f 90       	pop	r0
    4f1a:	0f 90       	pop	r0
    4f1c:	8e e9       	ldi	r24, 0x9E	; 158
    4f1e:	60 ee       	ldi	r22, 0xE0	; 224
    4f20:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <setTMP100config>
	// TMP101 END

	// BMP085
	//long temperature = 0;
	//long pressure = 0;
	BMP085_Calibration();
    4f24:	0e 94 10 0b 	call	0x1620	; 0x1620 <BMP085_Calibration>
	// BMP085 END
	//defaultEEPROM();
	if(eeprom_read_byte(&EEEpochLock) == 0)
    4f28:	80 e0       	ldi	r24, 0x00	; 0
    4f2a:	90 e0       	ldi	r25, 0x00	; 0
    4f2c:	0e 94 34 3d 	call	0x7a68	; 0x7a68 <__eerd_byte_m324p>
    4f30:	88 23       	and	r24, r24
    4f32:	29 f4       	brne	.+10     	; 0x4f3e <main+0x160>
	{
		defaultEEPROM();
    4f34:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <defaultEEPROM>
		initOpenLogTest();
    4f38:	0e 94 35 12 	call	0x246a	; 0x246a <initOpenLogTest>
    4f3c:	02 c0       	rjmp	.+4      	; 0x4f42 <main+0x164>
	} else {
		initOpenLogFlight();
    4f3e:	0e 94 79 11 	call	0x22f2	; 0x22f2 <initOpenLogFlight>
	}


	lprintf("Still Still Alive\n");
    4f42:	00 d0       	rcall	.+0      	; 0x4f44 <main+0x166>
    4f44:	89 e3       	ldi	r24, 0x39	; 57
    4f46:	92 e0       	ldi	r25, 0x02	; 2
    4f48:	ad b7       	in	r26, 0x3d	; 61
    4f4a:	be b7       	in	r27, 0x3e	; 62
    4f4c:	12 96       	adiw	r26, 0x02	; 2
    4f4e:	9c 93       	st	X, r25
    4f50:	8e 93       	st	-X, r24
    4f52:	11 97       	sbiw	r26, 0x01	; 1
    4f54:	0e 94 77 13 	call	0x26ee	; 0x26ee <lprintf>
		lprintf("stat: %c sats: %d\n", testStruct.status, testStruct.numberOfSats);
		lprintf("lat: %f lon: %f\n", testStruct.latitude, testStruct.longitude);
		lprintf("now: %ld\n", now());

	}*/
	uint32_t rnow = now();
    4f58:	0f 90       	pop	r0
    4f5a:	0f 90       	pop	r0
    4f5c:	0e 94 9c 14 	call	0x2938	; 0x2938 <now>
    4f60:	7b 01       	movw	r14, r22
    4f62:	8c 01       	movw	r16, r24
	scheduleQueueAdd(&processMonitor, rnow);
    4f64:	8e eb       	ldi	r24, 0xBE	; 190
    4f66:	94 e2       	ldi	r25, 0x24	; 36
    4f68:	b8 01       	movw	r22, r16
    4f6a:	a7 01       	movw	r20, r14
    4f6c:	0e 94 75 2f 	call	0x5eea	; 0x5eea <scheduleQueueAdd>
	scheduleQueueAdd(&calculateVspeed, rnow);
    4f70:	8a e5       	ldi	r24, 0x5A	; 90
    4f72:	90 e2       	ldi	r25, 0x20	; 32
    4f74:	b8 01       	movw	r22, r16
    4f76:	a7 01       	movw	r20, r14
    4f78:	0e 94 75 2f 	call	0x5eea	; 0x5eea <scheduleQueueAdd>
	scheduleQueueAdd(&collectData, rnow);
    4f7c:	8f e8       	ldi	r24, 0x8F	; 143
    4f7e:	9b e1       	ldi	r25, 0x1B	; 27
    4f80:	b8 01       	movw	r22, r16
    4f82:	a7 01       	movw	r20, r14
    4f84:	0e 94 75 2f 	call	0x5eea	; 0x5eea <scheduleQueueAdd>
	scheduleQueueAdd(&transmitSamples, rnow);
    4f88:	8f e5       	ldi	r24, 0x5F	; 95
    4f8a:	99 e1       	ldi	r25, 0x19	; 25
    4f8c:	b8 01       	movw	r22, r16
    4f8e:	a7 01       	movw	r20, r14
    4f90:	0e 94 75 2f 	call	0x5eea	; 0x5eea <scheduleQueueAdd>
	scheduleQueueAdd(&updateCommHFTelemetry, rnow);
    4f94:	82 ec       	ldi	r24, 0xC2	; 194
    4f96:	95 e1       	ldi	r25, 0x15	; 21
    4f98:	b8 01       	movw	r22, r16
    4f9a:	a7 01       	movw	r20, r14
    4f9c:	0e 94 75 2f 	call	0x5eea	; 0x5eea <scheduleQueueAdd>
	scheduleQueueAdd(&ballastStaticTickle, rnow);
    4fa0:	80 e0       	ldi	r24, 0x00	; 0
    4fa2:	95 e1       	ldi	r25, 0x15	; 21
    4fa4:	b8 01       	movw	r22, r16
    4fa6:	a7 01       	movw	r20, r14
    4fa8:	0e 94 75 2f 	call	0x5eea	; 0x5eea <scheduleQueueAdd>
	scheduleQueueAdd(&autoBallast, rnow);
    4fac:	88 ee       	ldi	r24, 0xE8	; 232
    4fae:	95 e1       	ldi	r25, 0x15	; 21
    4fb0:	b8 01       	movw	r22, r16
    4fb2:	a7 01       	movw	r20, r14
    4fb4:	0e 94 75 2f 	call	0x5eea	; 0x5eea <scheduleQueueAdd>
	scheduleQueueAdd(&flightPhaseLogic, rnow);
    4fb8:	89 e2       	ldi	r24, 0x29	; 41
    4fba:	98 e1       	ldi	r25, 0x18	; 24
    4fbc:	b8 01       	movw	r22, r16
    4fbe:	a7 01       	movw	r20, r14
    4fc0:	0e 94 75 2f 	call	0x5eea	; 0x5eea <scheduleQueueAdd>
		uint32_t scheduleTime;
		scheduledFunction thisFunction;
		volatile int8_t error;
		volatile uint32_t rightNow = now();

		error = scheduleQueueGetTop(&thisFunction, &scheduleTime);
    4fc4:	a6 e0       	ldi	r26, 0x06	; 6
    4fc6:	ca 2e       	mov	r12, r26
    4fc8:	d1 2c       	mov	r13, r1
    4fca:	cc 0e       	add	r12, r28
    4fcc:	dd 1e       	adc	r13, r29
    4fce:	f8 e0       	ldi	r31, 0x08	; 8
    4fd0:	ef 2e       	mov	r14, r31
    4fd2:	f1 2c       	mov	r15, r1
    4fd4:	ec 0e       	add	r14, r28
    4fd6:	fd 1e       	adc	r15, r29
    4fd8:	0c e2       	ldi	r16, 0x2C	; 44
    4fda:	11 e0       	ldi	r17, 0x01	; 1
	while(1)
	{
		uint32_t scheduleTime;
		scheduledFunction thisFunction;
		volatile int8_t error;
		volatile uint32_t rightNow = now();
    4fdc:	0e 94 9c 14 	call	0x2938	; 0x2938 <now>
    4fe0:	6c 87       	std	Y+12, r22	; 0x0c
    4fe2:	7d 87       	std	Y+13, r23	; 0x0d
    4fe4:	8e 87       	std	Y+14, r24	; 0x0e
    4fe6:	9f 87       	std	Y+15, r25	; 0x0f

		error = scheduleQueueGetTop(&thisFunction, &scheduleTime);
    4fe8:	c6 01       	movw	r24, r12
    4fea:	b7 01       	movw	r22, r14
    4fec:	0e 94 37 2f 	call	0x5e6e	; 0x5e6e <scheduleQueueGetTop>
    4ff0:	8d 83       	std	Y+5, r24	; 0x05
		//lprintf("PTR: %p time: %lud now: %lud\n", ptrToFunction, scheduleTime, rightNow);

		if(error == 0 && scheduleTime <= rightNow)
    4ff2:	8d 81       	ldd	r24, Y+5	; 0x05
    4ff4:	88 23       	and	r24, r24
    4ff6:	a9 f4       	brne	.+42     	; 0x5022 <main+0x244>
    4ff8:	2c 85       	ldd	r18, Y+12	; 0x0c
    4ffa:	3d 85       	ldd	r19, Y+13	; 0x0d
    4ffc:	4e 85       	ldd	r20, Y+14	; 0x0e
    4ffe:	5f 85       	ldd	r21, Y+15	; 0x0f
    5000:	88 85       	ldd	r24, Y+8	; 0x08
    5002:	99 85       	ldd	r25, Y+9	; 0x09
    5004:	aa 85       	ldd	r26, Y+10	; 0x0a
    5006:	bb 85       	ldd	r27, Y+11	; 0x0b
    5008:	28 17       	cp	r18, r24
    500a:	39 07       	cpc	r19, r25
    500c:	4a 07       	cpc	r20, r26
    500e:	5b 07       	cpc	r21, r27
    5010:	40 f0       	brcs	.+16     	; 0x5022 <main+0x244>
		{
			/*#ifdef FCPUDEBUG
				lprintf_P(PSTR("Running some function\n"));
			#endif*/
			thisFunction(rightNow);
    5012:	6c 85       	ldd	r22, Y+12	; 0x0c
    5014:	7d 85       	ldd	r23, Y+13	; 0x0d
    5016:	8e 85       	ldd	r24, Y+14	; 0x0e
    5018:	9f 85       	ldd	r25, Y+15	; 0x0f
    501a:	ee 81       	ldd	r30, Y+6	; 0x06
    501c:	ff 81       	ldd	r31, Y+7	; 0x07
    501e:	09 95       	icall
    5020:	14 c0       	rjmp	.+40     	; 0x504a <main+0x26c>
		} else if (error == 0 && scheduleTime > rightNow)
    5022:	8d 81       	ldd	r24, Y+5	; 0x05
    5024:	88 23       	and	r24, r24
    5026:	89 f4       	brne	.+34     	; 0x504a <main+0x26c>
    5028:	48 85       	ldd	r20, Y+8	; 0x08
    502a:	59 85       	ldd	r21, Y+9	; 0x09
    502c:	6a 85       	ldd	r22, Y+10	; 0x0a
    502e:	7b 85       	ldd	r23, Y+11	; 0x0b
    5030:	8c 85       	ldd	r24, Y+12	; 0x0c
    5032:	9d 85       	ldd	r25, Y+13	; 0x0d
    5034:	ae 85       	ldd	r26, Y+14	; 0x0e
    5036:	bf 85       	ldd	r27, Y+15	; 0x0f
    5038:	84 17       	cp	r24, r20
    503a:	95 07       	cpc	r25, r21
    503c:	a6 07       	cpc	r26, r22
    503e:	b7 07       	cpc	r27, r23
    5040:	20 f4       	brcc	.+8      	; 0x504a <main+0x26c>
		{
			/*#ifdef FCPUDEBUG
				lprintf_P(PSTR("ReScheduling some function\n"));
			#endif*/
			scheduleQueueAdd(thisFunction, scheduleTime);
    5042:	8e 81       	ldd	r24, Y+6	; 0x06
    5044:	9f 81       	ldd	r25, Y+7	; 0x07
    5046:	0e 94 75 2f 	call	0x5eea	; 0x5eea <scheduleQueueAdd>
    504a:	84 ef       	ldi	r24, 0xF4	; 244
    504c:	91 e0       	ldi	r25, 0x01	; 1
    504e:	f8 01       	movw	r30, r16
    5050:	31 97       	sbiw	r30, 0x01	; 1
    5052:	f1 f7       	brne	.-4      	; 0x5050 <main+0x272>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5054:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5056:	09 f4       	brne	.+2      	; 0x505a <main+0x27c>
    5058:	c1 cf       	rjmp	.-126    	; 0x4fdc <main+0x1fe>
    505a:	f9 cf       	rjmp	.-14     	; 0x504e <main+0x270>

0000505c <writeEpochStart>:
    505c:	ff 92       	push	r15
    505e:	0f 93       	push	r16
    5060:	1f 93       	push	r17
    5062:	38 2f       	mov	r19, r24
    5064:	16 2f       	mov	r17, r22
    5066:	04 2f       	mov	r16, r20
    5068:	f2 2e       	mov	r15, r18
    506a:	81 e0       	ldi	r24, 0x01	; 1
    506c:	90 e0       	ldi	r25, 0x00	; 0
    506e:	63 2f       	mov	r22, r19
    5070:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <__eewr_byte_m324p>
    5074:	82 e0       	ldi	r24, 0x02	; 2
    5076:	90 e0       	ldi	r25, 0x00	; 0
    5078:	61 2f       	mov	r22, r17
    507a:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <__eewr_byte_m324p>
    507e:	83 e0       	ldi	r24, 0x03	; 3
    5080:	90 e0       	ldi	r25, 0x00	; 0
    5082:	60 2f       	mov	r22, r16
    5084:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <__eewr_byte_m324p>
    5088:	84 e0       	ldi	r24, 0x04	; 4
    508a:	90 e0       	ldi	r25, 0x00	; 0
    508c:	6f 2d       	mov	r22, r15
    508e:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <__eewr_byte_m324p>
    5092:	1f 91       	pop	r17
    5094:	0f 91       	pop	r16
    5096:	ff 90       	pop	r15
    5098:	08 95       	ret

0000509a <getEpochSeconds>:
    509a:	2f 92       	push	r2
    509c:	3f 92       	push	r3
    509e:	4f 92       	push	r4
    50a0:	5f 92       	push	r5
    50a2:	6f 92       	push	r6
    50a4:	7f 92       	push	r7
    50a6:	8f 92       	push	r8
    50a8:	9f 92       	push	r9
    50aa:	af 92       	push	r10
    50ac:	bf 92       	push	r11
    50ae:	cf 92       	push	r12
    50b0:	df 92       	push	r13
    50b2:	ef 92       	push	r14
    50b4:	ff 92       	push	r15
    50b6:	0f 93       	push	r16
    50b8:	1f 93       	push	r17
    50ba:	df 93       	push	r29
    50bc:	cf 93       	push	r28
    50be:	0f 92       	push	r0
    50c0:	cd b7       	in	r28, 0x3d	; 61
    50c2:	de b7       	in	r29, 0x3e	; 62
    50c4:	e8 2e       	mov	r14, r24
    50c6:	a6 2e       	mov	r10, r22
    50c8:	64 2e       	mov	r6, r20
    50ca:	22 2e       	mov	r2, r18
    50cc:	81 e0       	ldi	r24, 0x01	; 1
    50ce:	90 e0       	ldi	r25, 0x00	; 0
    50d0:	0e 94 34 3d 	call	0x7a68	; 0x7a68 <__eerd_byte_m324p>
    50d4:	d8 2e       	mov	r13, r24
    50d6:	82 e0       	ldi	r24, 0x02	; 2
    50d8:	90 e0       	ldi	r25, 0x00	; 0
    50da:	0e 94 34 3d 	call	0x7a68	; 0x7a68 <__eerd_byte_m324p>
    50de:	98 2e       	mov	r9, r24
    50e0:	83 e0       	ldi	r24, 0x03	; 3
    50e2:	90 e0       	ldi	r25, 0x00	; 0
    50e4:	0e 94 34 3d 	call	0x7a68	; 0x7a68 <__eerd_byte_m324p>
    50e8:	58 2e       	mov	r5, r24
    50ea:	84 e0       	ldi	r24, 0x04	; 4
    50ec:	90 e0       	ldi	r25, 0x00	; 0
    50ee:	0e 94 34 3d 	call	0x7a68	; 0x7a68 <__eerd_byte_m324p>
    50f2:	89 83       	std	Y+1, r24	; 0x01
    50f4:	ff 24       	eor	r15, r15
    50f6:	00 e0       	ldi	r16, 0x00	; 0
    50f8:	10 e0       	ldi	r17, 0x00	; 0
    50fa:	ed 18       	sub	r14, r13
    50fc:	f1 08       	sbc	r15, r1
    50fe:	01 09       	sbc	r16, r1
    5100:	11 09       	sbc	r17, r1
    5102:	bb 24       	eor	r11, r11
    5104:	cc 24       	eor	r12, r12
    5106:	dd 24       	eor	r13, r13
    5108:	a9 18       	sub	r10, r9
    510a:	b1 08       	sbc	r11, r1
    510c:	c1 08       	sbc	r12, r1
    510e:	d1 08       	sbc	r13, r1
    5110:	c6 01       	movw	r24, r12
    5112:	b5 01       	movw	r22, r10
    5114:	2c e3       	ldi	r18, 0x3C	; 60
    5116:	30 e0       	ldi	r19, 0x00	; 0
    5118:	40 e0       	ldi	r20, 0x00	; 0
    511a:	50 e0       	ldi	r21, 0x00	; 0
    511c:	0e 94 66 39 	call	0x72cc	; 0x72cc <__mulsi3>
    5120:	e6 0e       	add	r14, r22
    5122:	f7 1e       	adc	r15, r23
    5124:	08 1f       	adc	r16, r24
    5126:	19 1f       	adc	r17, r25
    5128:	77 24       	eor	r7, r7
    512a:	88 24       	eor	r8, r8
    512c:	99 24       	eor	r9, r9
    512e:	65 18       	sub	r6, r5
    5130:	71 08       	sbc	r7, r1
    5132:	81 08       	sbc	r8, r1
    5134:	91 08       	sbc	r9, r1
    5136:	c4 01       	movw	r24, r8
    5138:	b3 01       	movw	r22, r6
    513a:	20 e1       	ldi	r18, 0x10	; 16
    513c:	3e e0       	ldi	r19, 0x0E	; 14
    513e:	40 e0       	ldi	r20, 0x00	; 0
    5140:	50 e0       	ldi	r21, 0x00	; 0
    5142:	0e 94 66 39 	call	0x72cc	; 0x72cc <__mulsi3>
    5146:	e6 0e       	add	r14, r22
    5148:	f7 1e       	adc	r15, r23
    514a:	08 1f       	adc	r16, r24
    514c:	19 1f       	adc	r17, r25
    514e:	33 24       	eor	r3, r3
    5150:	44 24       	eor	r4, r4
    5152:	55 24       	eor	r5, r5
    5154:	89 81       	ldd	r24, Y+1	; 0x01
    5156:	28 1a       	sub	r2, r24
    5158:	31 08       	sbc	r3, r1
    515a:	41 08       	sbc	r4, r1
    515c:	51 08       	sbc	r5, r1
    515e:	c2 01       	movw	r24, r4
    5160:	b1 01       	movw	r22, r2
    5162:	20 e8       	ldi	r18, 0x80	; 128
    5164:	31 e5       	ldi	r19, 0x51	; 81
    5166:	41 e0       	ldi	r20, 0x01	; 1
    5168:	50 e0       	ldi	r21, 0x00	; 0
    516a:	0e 94 66 39 	call	0x72cc	; 0x72cc <__mulsi3>
    516e:	e6 0e       	add	r14, r22
    5170:	f7 1e       	adc	r15, r23
    5172:	08 1f       	adc	r16, r24
    5174:	19 1f       	adc	r17, r25
    5176:	b7 01       	movw	r22, r14
    5178:	c8 01       	movw	r24, r16
    517a:	0f 90       	pop	r0
    517c:	cf 91       	pop	r28
    517e:	df 91       	pop	r29
    5180:	1f 91       	pop	r17
    5182:	0f 91       	pop	r16
    5184:	ff 90       	pop	r15
    5186:	ef 90       	pop	r14
    5188:	df 90       	pop	r13
    518a:	cf 90       	pop	r12
    518c:	bf 90       	pop	r11
    518e:	af 90       	pop	r10
    5190:	9f 90       	pop	r9
    5192:	8f 90       	pop	r8
    5194:	7f 90       	pop	r7
    5196:	6f 90       	pop	r6
    5198:	5f 90       	pop	r5
    519a:	4f 90       	pop	r4
    519c:	3f 90       	pop	r3
    519e:	2f 90       	pop	r2
    51a0:	08 95       	ret

000051a2 <defaultEEPROM>:
    51a2:	0f 93       	push	r16
    51a4:	1f 93       	push	r17
    51a6:	8f e0       	ldi	r24, 0x0F	; 15
    51a8:	90 e0       	ldi	r25, 0x00	; 0
    51aa:	6c ed       	ldi	r22, 0xDC	; 220
    51ac:	75 e0       	ldi	r23, 0x05	; 5
    51ae:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__eewr_word_m324p>
    51b2:	82 e1       	ldi	r24, 0x12	; 18
    51b4:	90 e0       	ldi	r25, 0x00	; 0
    51b6:	60 e0       	ldi	r22, 0x00	; 0
    51b8:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <__eewr_byte_m324p>
    51bc:	88 e1       	ldi	r24, 0x18	; 24
    51be:	90 e0       	ldi	r25, 0x00	; 0
    51c0:	60 e1       	ldi	r22, 0x10	; 16
    51c2:	7e e0       	ldi	r23, 0x0E	; 14
    51c4:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__eewr_word_m324p>
    51c8:	8a e1       	ldi	r24, 0x1A	; 26
    51ca:	90 e0       	ldi	r25, 0x00	; 0
    51cc:	6c ee       	ldi	r22, 0xEC	; 236
    51ce:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <__eewr_byte_m324p>
    51d2:	8b e1       	ldi	r24, 0x1B	; 27
    51d4:	90 e0       	ldi	r25, 0x00	; 0
    51d6:	6c e3       	ldi	r22, 0x3C	; 60
    51d8:	70 e0       	ldi	r23, 0x00	; 0
    51da:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__eewr_word_m324p>
    51de:	8d e1       	ldi	r24, 0x1D	; 29
    51e0:	90 e0       	ldi	r25, 0x00	; 0
    51e2:	64 e8       	ldi	r22, 0x84	; 132
    51e4:	73 e0       	ldi	r23, 0x03	; 3
    51e6:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__eewr_word_m324p>
    51ea:	82 e2       	ldi	r24, 0x22	; 34
    51ec:	90 e0       	ldi	r25, 0x00	; 0
    51ee:	40 e0       	ldi	r20, 0x00	; 0
    51f0:	50 e0       	ldi	r21, 0x00	; 0
    51f2:	60 e0       	ldi	r22, 0x00	; 0
    51f4:	70 e0       	ldi	r23, 0x00	; 0
    51f6:	0e 94 60 3d 	call	0x7ac0	; 0x7ac0 <__eewr_dword_m324p>
    51fa:	86 e2       	ldi	r24, 0x26	; 38
    51fc:	90 e0       	ldi	r25, 0x00	; 0
    51fe:	60 e0       	ldi	r22, 0x00	; 0
    5200:	70 e0       	ldi	r23, 0x00	; 0
    5202:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__eewr_word_m324p>
    5206:	88 e2       	ldi	r24, 0x28	; 40
    5208:	90 e0       	ldi	r25, 0x00	; 0
    520a:	60 e0       	ldi	r22, 0x00	; 0
    520c:	70 e0       	ldi	r23, 0x00	; 0
    520e:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__eewr_word_m324p>
    5212:	8a e2       	ldi	r24, 0x2A	; 42
    5214:	90 e0       	ldi	r25, 0x00	; 0
    5216:	60 e0       	ldi	r22, 0x00	; 0
    5218:	70 e0       	ldi	r23, 0x00	; 0
    521a:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__eewr_word_m324p>
    521e:	8c e2       	ldi	r24, 0x2C	; 44
    5220:	90 e0       	ldi	r25, 0x00	; 0
    5222:	60 e0       	ldi	r22, 0x00	; 0
    5224:	70 e0       	ldi	r23, 0x00	; 0
    5226:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__eewr_word_m324p>
    522a:	8e e2       	ldi	r24, 0x2E	; 46
    522c:	90 e0       	ldi	r25, 0x00	; 0
    522e:	60 e0       	ldi	r22, 0x00	; 0
    5230:	70 e0       	ldi	r23, 0x00	; 0
    5232:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__eewr_word_m324p>
    5236:	80 e3       	ldi	r24, 0x30	; 48
    5238:	90 e0       	ldi	r25, 0x00	; 0
    523a:	60 e0       	ldi	r22, 0x00	; 0
    523c:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <__eewr_byte_m324p>
    5240:	81 e3       	ldi	r24, 0x31	; 49
    5242:	90 e0       	ldi	r25, 0x00	; 0
    5244:	60 e0       	ldi	r22, 0x00	; 0
    5246:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <__eewr_byte_m324p>
    524a:	82 e3       	ldi	r24, 0x32	; 50
    524c:	90 e0       	ldi	r25, 0x00	; 0
    524e:	60 e1       	ldi	r22, 0x10	; 16
    5250:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <__eewr_byte_m324p>
    5254:	03 e3       	ldi	r16, 0x33	; 51
    5256:	10 e0       	ldi	r17, 0x00	; 0
    5258:	c8 01       	movw	r24, r16
    525a:	40 e0       	ldi	r20, 0x00	; 0
    525c:	50 e0       	ldi	r21, 0x00	; 0
    525e:	60 e0       	ldi	r22, 0x00	; 0
    5260:	74 e5       	ldi	r23, 0x54	; 84
    5262:	0e 94 60 3d 	call	0x7ac0	; 0x7ac0 <__eewr_dword_m324p>
    5266:	c8 01       	movw	r24, r16
    5268:	04 96       	adiw	r24, 0x04	; 4
    526a:	40 e0       	ldi	r20, 0x00	; 0
    526c:	50 e0       	ldi	r21, 0x00	; 0
    526e:	60 e0       	ldi	r22, 0x00	; 0
    5270:	70 e0       	ldi	r23, 0x00	; 0
    5272:	0e 94 60 3d 	call	0x7ac0	; 0x7ac0 <__eewr_dword_m324p>
    5276:	c8 01       	movw	r24, r16
    5278:	08 96       	adiw	r24, 0x08	; 8
    527a:	40 e0       	ldi	r20, 0x00	; 0
    527c:	50 e0       	ldi	r21, 0x00	; 0
    527e:	60 e0       	ldi	r22, 0x00	; 0
    5280:	70 e0       	ldi	r23, 0x00	; 0
    5282:	0e 94 60 3d 	call	0x7ac0	; 0x7ac0 <__eewr_dword_m324p>
    5286:	8f e3       	ldi	r24, 0x3F	; 63
    5288:	90 e0       	ldi	r25, 0x00	; 0
    528a:	60 e0       	ldi	r22, 0x00	; 0
    528c:	70 e0       	ldi	r23, 0x00	; 0
    528e:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__eewr_word_m324p>
    5292:	85 e0       	ldi	r24, 0x05	; 5
    5294:	90 e0       	ldi	r25, 0x00	; 0
    5296:	60 e1       	ldi	r22, 0x10	; 16
    5298:	77 e2       	ldi	r23, 0x27	; 39
    529a:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__eewr_word_m324p>
    529e:	87 e0       	ldi	r24, 0x07	; 7
    52a0:	90 e0       	ldi	r25, 0x00	; 0
    52a2:	65 e0       	ldi	r22, 0x05	; 5
    52a4:	70 e0       	ldi	r23, 0x00	; 0
    52a6:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__eewr_word_m324p>
    52aa:	89 e0       	ldi	r24, 0x09	; 9
    52ac:	90 e0       	ldi	r25, 0x00	; 0
    52ae:	6b ef       	ldi	r22, 0xFB	; 251
    52b0:	7f ef       	ldi	r23, 0xFF	; 255
    52b2:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__eewr_word_m324p>
    52b6:	8b e0       	ldi	r24, 0x0B	; 11
    52b8:	90 e0       	ldi	r25, 0x00	; 0
    52ba:	68 ee       	ldi	r22, 0xE8	; 232
    52bc:	73 e0       	ldi	r23, 0x03	; 3
    52be:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__eewr_word_m324p>
    52c2:	8d e0       	ldi	r24, 0x0D	; 13
    52c4:	90 e0       	ldi	r25, 0x00	; 0
    52c6:	6c e9       	ldi	r22, 0x9C	; 156
    52c8:	7f ef       	ldi	r23, 0xFF	; 255
    52ca:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__eewr_word_m324p>
    52ce:	81 e1       	ldi	r24, 0x11	; 17
    52d0:	90 e0       	ldi	r25, 0x00	; 0
    52d2:	60 e0       	ldi	r22, 0x00	; 0
    52d4:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <__eewr_byte_m324p>
    52d8:	8f e1       	ldi	r24, 0x1F	; 31
    52da:	90 e0       	ldi	r25, 0x00	; 0
    52dc:	60 e1       	ldi	r22, 0x10	; 16
    52de:	7e e0       	ldi	r23, 0x0E	; 14
    52e0:	0e 94 68 3d 	call	0x7ad0	; 0x7ad0 <__eewr_word_m324p>
    52e4:	81 e2       	ldi	r24, 0x21	; 33
    52e6:	90 e0       	ldi	r25, 0x00	; 0
    52e8:	6e e1       	ldi	r22, 0x1E	; 30
    52ea:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <__eewr_byte_m324p>
    52ee:	80 e0       	ldi	r24, 0x00	; 0
    52f0:	90 e0       	ldi	r25, 0x00	; 0
    52f2:	60 e0       	ldi	r22, 0x00	; 0
    52f4:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <__eewr_byte_m324p>
    52f8:	1f 91       	pop	r17
    52fa:	0f 91       	pop	r16
    52fc:	08 95       	ret

000052fe <debugPrintRawStrings>:

}

//REMOVE BEFORE FLIGHT
void debugPrintRawStrings(void)
{
    52fe:	8f 92       	push	r8
    5300:	9f 92       	push	r9
    5302:	af 92       	push	r10
    5304:	bf 92       	push	r11
    5306:	cf 92       	push	r12
    5308:	df 92       	push	r13
    530a:	ef 92       	push	r14
    530c:	ff 92       	push	r15
    530e:	0f 93       	push	r16
    5310:	1f 93       	push	r17
    5312:	df 93       	push	r29
    5314:	cf 93       	push	r28
    5316:	00 d0       	rcall	.+0      	; 0x5318 <debugPrintRawStrings+0x1a>
    5318:	00 d0       	rcall	.+0      	; 0x531a <debugPrintRawStrings+0x1c>
    531a:	cd b7       	in	r28, 0x3d	; 61
    531c:	de b7       	in	r29, 0x3e	; 62
	static char lineBuff[100];
	char tempChar;
	uint8_t i;
	uint8_t errorTracker;
	//Needed so the first comparison works out correctly
	memset(lineBuff, 0x00, 100);
    531e:	84 e6       	ldi	r24, 0x64	; 100
    5320:	e4 e3       	ldi	r30, 0x34	; 52
    5322:	f3 e0       	ldi	r31, 0x03	; 3
    5324:	df 01       	movw	r26, r30
    5326:	1d 92       	st	X+, r1
    5328:	8a 95       	dec	r24
    532a:	e9 f7       	brne	.-6      	; 0x5326 <debugPrintRawStrings+0x28>

	lprintf_P(PSTR("In Ur GPS Debug\n"));
    532c:	00 d0       	rcall	.+0      	; 0x532e <debugPrintRawStrings+0x30>
    532e:	80 e5       	ldi	r24, 0x50	; 80
    5330:	98 e0       	ldi	r25, 0x08	; 8
    5332:	ed b7       	in	r30, 0x3d	; 61
    5334:	fe b7       	in	r31, 0x3e	; 62
    5336:	92 83       	std	Z+2, r25	; 0x02
    5338:	81 83       	std	Z+1, r24	; 0x01
    533a:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
    533e:	dd 24       	eor	r13, r13
    5340:	0f 90       	pop	r0
    5342:	0f 90       	pop	r0
    5344:	06 c0       	rjmp	.+12     	; 0x5352 <debugPrintRawStrings+0x54>
	{
		i=0;
		//i < 99 to leave room for the null terminator
		while(((tempChar = (char)uart_getchar()) != '\n') && i < 99)
		{
			lineBuff[i] = tempChar;
    5346:	ed 2d       	mov	r30, r13
    5348:	f0 e0       	ldi	r31, 0x00	; 0
    534a:	ec 5c       	subi	r30, 0xCC	; 204
    534c:	fc 4f       	sbci	r31, 0xFC	; 252
    534e:	80 83       	st	Z, r24
			i++;
    5350:	d3 94       	inc	r13

	do
	{
		i=0;
		//i < 99 to leave room for the null terminator
		while(((tempChar = (char)uart_getchar()) != '\n') && i < 99)
    5352:	0e 94 c2 13 	call	0x2784	; 0x2784 <uart_getchar>
    5356:	8a 30       	cpi	r24, 0x0A	; 10
    5358:	19 f0       	breq	.+6      	; 0x5360 <debugPrintRawStrings+0x62>
    535a:	f2 e6       	ldi	r31, 0x62	; 98
    535c:	fd 15       	cp	r31, r13
    535e:	98 f7       	brcc	.-26     	; 0x5346 <debugPrintRawStrings+0x48>
		{
			lineBuff[i] = tempChar;
			i++;
		}
		lineBuff[i] = '\0';
    5360:	ed 2c       	mov	r14, r13
    5362:	ff 24       	eor	r15, r15
    5364:	87 01       	movw	r16, r14
    5366:	0c 5c       	subi	r16, 0xCC	; 204
    5368:	1c 4f       	sbci	r17, 0xFC	; 252
    536a:	d8 01       	movw	r26, r16
    536c:	1c 92       	st	X, r1
		errorTracker++;
	} while((strncmp("$GPRMC", lineBuff, 6) != 0));
    536e:	8d e5       	ldi	r24, 0x5D	; 93
    5370:	92 e0       	ldi	r25, 0x02	; 2
    5372:	64 e3       	ldi	r22, 0x34	; 52
    5374:	73 e0       	ldi	r23, 0x03	; 3
    5376:	46 e0       	ldi	r20, 0x06	; 6
    5378:	50 e0       	ldi	r21, 0x00	; 0
    537a:	0e 94 2f 3b 	call	0x765e	; 0x765e <strncmp>
    537e:	00 97       	sbiw	r24, 0x00	; 0
    5380:	11 f0       	breq	.+4      	; 0x5386 <debugPrintRawStrings+0x88>
    5382:	dd 24       	eor	r13, r13
    5384:	e6 cf       	rjmp	.-52     	; 0x5352 <debugPrintRawStrings+0x54>


	char targetChecksum[3];
	uint8_t  tSum;
	uint8_t checksum = 0;
	targetChecksum[0] = lineBuff[i-3];
    5386:	f8 01       	movw	r30, r16
    5388:	33 97       	sbiw	r30, 0x03	; 3
    538a:	80 81       	ld	r24, Z
    538c:	8a 83       	std	Y+2, r24	; 0x02
	targetChecksum[1] = lineBuff[i-2];
    538e:	f8 01       	movw	r30, r16
    5390:	32 97       	sbiw	r30, 0x02	; 2
    5392:	80 81       	ld	r24, Z
    5394:	8b 83       	std	Y+3, r24	; 0x03
	targetChecksum[2] = '\0';
    5396:	1c 82       	std	Y+4, r1	; 0x04
	sscanf(targetChecksum, "%x", &tSum);
    5398:	00 d0       	rcall	.+0      	; 0x539a <debugPrintRawStrings+0x9c>
    539a:	00 d0       	rcall	.+0      	; 0x539c <debugPrintRawStrings+0x9e>
    539c:	00 d0       	rcall	.+0      	; 0x539e <debugPrintRawStrings+0xa0>
    539e:	ed b7       	in	r30, 0x3d	; 61
    53a0:	fe b7       	in	r31, 0x3e	; 62
    53a2:	31 96       	adiw	r30, 0x01	; 1
    53a4:	ce 01       	movw	r24, r28
    53a6:	02 96       	adiw	r24, 0x02	; 2
    53a8:	ad b7       	in	r26, 0x3d	; 61
    53aa:	be b7       	in	r27, 0x3e	; 62
    53ac:	12 96       	adiw	r26, 0x02	; 2
    53ae:	9c 93       	st	X, r25
    53b0:	8e 93       	st	-X, r24
    53b2:	11 97       	sbiw	r26, 0x01	; 1
    53b4:	84 e6       	ldi	r24, 0x64	; 100
    53b6:	92 e0       	ldi	r25, 0x02	; 2
    53b8:	93 83       	std	Z+3, r25	; 0x03
    53ba:	82 83       	std	Z+2, r24	; 0x02
    53bc:	ce 01       	movw	r24, r28
    53be:	01 96       	adiw	r24, 0x01	; 1
    53c0:	95 83       	std	Z+5, r25	; 0x05
    53c2:	84 83       	std	Z+4, r24	; 0x04
    53c4:	0e 94 3e 3c 	call	0x787c	; 0x787c <sscanf>
    53c8:	cc 24       	eor	r12, r12
    53ca:	91 e0       	ldi	r25, 0x01	; 1
    53cc:	ed b7       	in	r30, 0x3d	; 61
    53ce:	fe b7       	in	r31, 0x3e	; 62
    53d0:	36 96       	adiw	r30, 0x06	; 6
    53d2:	0f b6       	in	r0, 0x3f	; 63
    53d4:	f8 94       	cli
    53d6:	fe bf       	out	0x3e, r31	; 62
    53d8:	0f be       	out	0x3f, r0	; 63
    53da:	ed bf       	out	0x3d, r30	; 61
	for(uint8_t j = 1; j < i-4; j++)
    53dc:	97 01       	movw	r18, r14
    53de:	24 50       	subi	r18, 0x04	; 4
    53e0:	30 40       	sbci	r19, 0x00	; 0
    53e2:	05 c0       	rjmp	.+10     	; 0x53ee <debugPrintRawStrings+0xf0>
	{
		 checksum = checksum ^ lineBuff[j];
    53e4:	ec 5c       	subi	r30, 0xCC	; 204
    53e6:	fc 4f       	sbci	r31, 0xFC	; 252
    53e8:	80 81       	ld	r24, Z
    53ea:	c8 26       	eor	r12, r24
	uint8_t checksum = 0;
	targetChecksum[0] = lineBuff[i-3];
	targetChecksum[1] = lineBuff[i-2];
	targetChecksum[2] = '\0';
	sscanf(targetChecksum, "%x", &tSum);
	for(uint8_t j = 1; j < i-4; j++)
    53ec:	9f 5f       	subi	r25, 0xFF	; 255
    53ee:	e9 2f       	mov	r30, r25
    53f0:	f0 e0       	ldi	r31, 0x00	; 0
    53f2:	e2 17       	cp	r30, r18
    53f4:	f3 07       	cpc	r31, r19
    53f6:	b4 f3       	brlt	.-20     	; 0x53e4 <debugPrintRawStrings+0xe6>
	{
		 checksum = checksum ^ lineBuff[j];
	}

	lprintf_P(PSTR("CS: %x TCS: %x\n"), checksum, tSum);
    53f8:	00 d0       	rcall	.+0      	; 0x53fa <debugPrintRawStrings+0xfc>
    53fa:	00 d0       	rcall	.+0      	; 0x53fc <debugPrintRawStrings+0xfe>
    53fc:	00 d0       	rcall	.+0      	; 0x53fe <debugPrintRawStrings+0x100>
    53fe:	ed b7       	in	r30, 0x3d	; 61
    5400:	fe b7       	in	r31, 0x3e	; 62
    5402:	31 96       	adiw	r30, 0x01	; 1
    5404:	80 e4       	ldi	r24, 0x40	; 64
    5406:	98 e0       	ldi	r25, 0x08	; 8
    5408:	ad b7       	in	r26, 0x3d	; 61
    540a:	be b7       	in	r27, 0x3e	; 62
    540c:	12 96       	adiw	r26, 0x02	; 2
    540e:	9c 93       	st	X, r25
    5410:	8e 93       	st	-X, r24
    5412:	11 97       	sbiw	r26, 0x01	; 1
    5414:	c2 82       	std	Z+2, r12	; 0x02
    5416:	13 82       	std	Z+3, r1	; 0x03
    5418:	89 81       	ldd	r24, Y+1	; 0x01
    541a:	84 83       	std	Z+4, r24	; 0x04
    541c:	15 82       	std	Z+5, r1	; 0x05
    541e:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
    5422:	44 e3       	ldi	r20, 0x34	; 52
    5424:	84 2e       	mov	r8, r20
    5426:	43 e0       	ldi	r20, 0x03	; 3
    5428:	94 2e       	mov	r9, r20
    542a:	74 01       	movw	r14, r8
    542c:	ed b7       	in	r30, 0x3d	; 61
    542e:	fe b7       	in	r31, 0x3e	; 62
    5430:	36 96       	adiw	r30, 0x06	; 6
    5432:	0f b6       	in	r0, 0x3f	; 63
    5434:	f8 94       	cli
    5436:	fe bf       	out	0x3e, r31	; 62
    5438:	0f be       	out	0x3f, r0	; 63
    543a:	ed bf       	out	0x3d, r30	; 61

	for(uint8_t j = 0; j < i; j++)
    543c:	0d 2d       	mov	r16, r13
    543e:	10 e0       	ldi	r17, 0x00	; 0
    5440:	08 0d       	add	r16, r8
    5442:	19 1d       	adc	r17, r9
	{
		lprintf("%c", lineBuff[j]);
    5444:	37 e6       	ldi	r19, 0x67	; 103
    5446:	a3 2e       	mov	r10, r19
    5448:	32 e0       	ldi	r19, 0x02	; 2
    544a:	b3 2e       	mov	r11, r19
    544c:	16 c0       	rjmp	.+44     	; 0x547a <debugPrintRawStrings+0x17c>
    544e:	00 d0       	rcall	.+0      	; 0x5450 <debugPrintRawStrings+0x152>
    5450:	00 d0       	rcall	.+0      	; 0x5452 <debugPrintRawStrings+0x154>
    5452:	ed b7       	in	r30, 0x3d	; 61
    5454:	fe b7       	in	r31, 0x3e	; 62
    5456:	31 96       	adiw	r30, 0x01	; 1
    5458:	ad b7       	in	r26, 0x3d	; 61
    545a:	be b7       	in	r27, 0x3e	; 62
    545c:	12 96       	adiw	r26, 0x02	; 2
    545e:	bc 92       	st	X, r11
    5460:	ae 92       	st	-X, r10
    5462:	11 97       	sbiw	r26, 0x01	; 1
    5464:	d7 01       	movw	r26, r14
    5466:	8d 91       	ld	r24, X+
    5468:	7d 01       	movw	r14, r26
    546a:	82 83       	std	Z+2, r24	; 0x02
    546c:	13 82       	std	Z+3, r1	; 0x03
    546e:	0e 94 77 13 	call	0x26ee	; 0x26ee <lprintf>
    5472:	0f 90       	pop	r0
    5474:	0f 90       	pop	r0
    5476:	0f 90       	pop	r0
    5478:	0f 90       	pop	r0
		 checksum = checksum ^ lineBuff[j];
	}

	lprintf_P(PSTR("CS: %x TCS: %x\n"), checksum, tSum);

	for(uint8_t j = 0; j < i; j++)
    547a:	e0 16       	cp	r14, r16
    547c:	f1 06       	cpc	r15, r17
    547e:	39 f7       	brne	.-50     	; 0x544e <debugPrintRawStrings+0x150>
	{
		lprintf("%c", lineBuff[j]);
	}
	if(tSum == checksum)
    5480:	89 81       	ldd	r24, Y+1	; 0x01
    5482:	8c 15       	cp	r24, r12
    5484:	59 f4       	brne	.+22     	; 0x549c <debugPrintRawStrings+0x19e>
	{
		lprintf_P(PSTR("Checksum Valid\n"));
    5486:	00 d0       	rcall	.+0      	; 0x5488 <debugPrintRawStrings+0x18a>
    5488:	80 e3       	ldi	r24, 0x30	; 48
    548a:	98 e0       	ldi	r25, 0x08	; 8
    548c:	ed b7       	in	r30, 0x3d	; 61
    548e:	fe b7       	in	r31, 0x3e	; 62
    5490:	92 83       	std	Z+2, r25	; 0x02
    5492:	81 83       	std	Z+1, r24	; 0x01
    5494:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
    5498:	0f 90       	pop	r0
    549a:	0f 90       	pop	r0
	}

	memset(lineBuff, 0x00, 100);
    549c:	84 e6       	ldi	r24, 0x64	; 100
    549e:	e4 e3       	ldi	r30, 0x34	; 52
    54a0:	f3 e0       	ldi	r31, 0x03	; 3
    54a2:	df 01       	movw	r26, r30
    54a4:	1d 92       	st	X+, r1
    54a6:	8a 95       	dec	r24
    54a8:	e9 f7       	brne	.-6      	; 0x54a4 <debugPrintRawStrings+0x1a6>
    54aa:	1e c0       	rjmp	.+60     	; 0x54e8 <debugPrintRawStrings+0x1ea>
	{
		i=0;
		//i < 99 to leave room for the null terminator
		while(((tempChar = (char)uart_getchar()) != '\n') && i < 99)
		{
			lineBuff[i] = tempChar;
    54ac:	ed 2d       	mov	r30, r13
    54ae:	f0 e0       	ldi	r31, 0x00	; 0
    54b0:	ec 5c       	subi	r30, 0xCC	; 204
    54b2:	fc 4f       	sbci	r31, 0xFC	; 252
    54b4:	80 83       	st	Z, r24
			i++;
    54b6:	d3 94       	inc	r13

	do
	{
		i=0;
		//i < 99 to leave room for the null terminator
		while(((tempChar = (char)uart_getchar()) != '\n') && i < 99)
    54b8:	0e 94 c2 13 	call	0x2784	; 0x2784 <uart_getchar>
    54bc:	8a 30       	cpi	r24, 0x0A	; 10
    54be:	19 f0       	breq	.+6      	; 0x54c6 <debugPrintRawStrings+0x1c8>
    54c0:	b2 e6       	ldi	r27, 0x62	; 98
    54c2:	bd 15       	cp	r27, r13
    54c4:	98 f7       	brcc	.-26     	; 0x54ac <debugPrintRawStrings+0x1ae>
		{
			lineBuff[i] = tempChar;
			i++;
		}
		lineBuff[i] = '\0';
    54c6:	ed 2c       	mov	r14, r13
    54c8:	ff 24       	eor	r15, r15
    54ca:	87 01       	movw	r16, r14
    54cc:	0c 5c       	subi	r16, 0xCC	; 204
    54ce:	1c 4f       	sbci	r17, 0xFC	; 252
    54d0:	f8 01       	movw	r30, r16
    54d2:	10 82       	st	Z, r1
	} while((strncmp("$GPGSA", lineBuff, 6) != 0));
    54d4:	8a e6       	ldi	r24, 0x6A	; 106
    54d6:	92 e0       	ldi	r25, 0x02	; 2
    54d8:	64 e3       	ldi	r22, 0x34	; 52
    54da:	73 e0       	ldi	r23, 0x03	; 3
    54dc:	46 e0       	ldi	r20, 0x06	; 6
    54de:	50 e0       	ldi	r21, 0x00	; 0
    54e0:	0e 94 2f 3b 	call	0x765e	; 0x765e <strncmp>
    54e4:	00 97       	sbiw	r24, 0x00	; 0
    54e6:	11 f0       	breq	.+4      	; 0x54ec <debugPrintRawStrings+0x1ee>
    54e8:	dd 24       	eor	r13, r13
    54ea:	e6 cf       	rjmp	.-52     	; 0x54b8 <debugPrintRawStrings+0x1ba>
	// End GPGSA Acquisition Section

	checksum = 0;
	targetChecksum[0] = lineBuff[i-3];
    54ec:	f8 01       	movw	r30, r16
    54ee:	33 97       	sbiw	r30, 0x03	; 3
    54f0:	80 81       	ld	r24, Z
    54f2:	8a 83       	std	Y+2, r24	; 0x02
	targetChecksum[1] = lineBuff[i-2];
    54f4:	f8 01       	movw	r30, r16
    54f6:	32 97       	sbiw	r30, 0x02	; 2
    54f8:	80 81       	ld	r24, Z
    54fa:	8b 83       	std	Y+3, r24	; 0x03
	targetChecksum[2] = '\0';
    54fc:	1c 82       	std	Y+4, r1	; 0x04
	sscanf(targetChecksum, "%x", &tSum);
    54fe:	00 d0       	rcall	.+0      	; 0x5500 <debugPrintRawStrings+0x202>
    5500:	00 d0       	rcall	.+0      	; 0x5502 <debugPrintRawStrings+0x204>
    5502:	00 d0       	rcall	.+0      	; 0x5504 <debugPrintRawStrings+0x206>
    5504:	ed b7       	in	r30, 0x3d	; 61
    5506:	fe b7       	in	r31, 0x3e	; 62
    5508:	31 96       	adiw	r30, 0x01	; 1
    550a:	ce 01       	movw	r24, r28
    550c:	02 96       	adiw	r24, 0x02	; 2
    550e:	ad b7       	in	r26, 0x3d	; 61
    5510:	be b7       	in	r27, 0x3e	; 62
    5512:	12 96       	adiw	r26, 0x02	; 2
    5514:	9c 93       	st	X, r25
    5516:	8e 93       	st	-X, r24
    5518:	11 97       	sbiw	r26, 0x01	; 1
    551a:	84 e6       	ldi	r24, 0x64	; 100
    551c:	92 e0       	ldi	r25, 0x02	; 2
    551e:	93 83       	std	Z+3, r25	; 0x03
    5520:	82 83       	std	Z+2, r24	; 0x02
    5522:	ce 01       	movw	r24, r28
    5524:	01 96       	adiw	r24, 0x01	; 1
    5526:	95 83       	std	Z+5, r25	; 0x05
    5528:	84 83       	std	Z+4, r24	; 0x04
    552a:	0e 94 3e 3c 	call	0x787c	; 0x787c <sscanf>
    552e:	cc 24       	eor	r12, r12
    5530:	91 e0       	ldi	r25, 0x01	; 1
    5532:	ed b7       	in	r30, 0x3d	; 61
    5534:	fe b7       	in	r31, 0x3e	; 62
    5536:	36 96       	adiw	r30, 0x06	; 6
    5538:	0f b6       	in	r0, 0x3f	; 63
    553a:	f8 94       	cli
    553c:	fe bf       	out	0x3e, r31	; 62
    553e:	0f be       	out	0x3f, r0	; 63
    5540:	ed bf       	out	0x3d, r30	; 61
	for(uint8_t j = 1; j < i-4; j++)
    5542:	97 01       	movw	r18, r14
    5544:	24 50       	subi	r18, 0x04	; 4
    5546:	30 40       	sbci	r19, 0x00	; 0
    5548:	05 c0       	rjmp	.+10     	; 0x5554 <debugPrintRawStrings+0x256>
	{
		 checksum = checksum ^ lineBuff[j];
    554a:	ec 5c       	subi	r30, 0xCC	; 204
    554c:	fc 4f       	sbci	r31, 0xFC	; 252
    554e:	80 81       	ld	r24, Z
    5550:	c8 26       	eor	r12, r24
	checksum = 0;
	targetChecksum[0] = lineBuff[i-3];
	targetChecksum[1] = lineBuff[i-2];
	targetChecksum[2] = '\0';
	sscanf(targetChecksum, "%x", &tSum);
	for(uint8_t j = 1; j < i-4; j++)
    5552:	9f 5f       	subi	r25, 0xFF	; 255
    5554:	e9 2f       	mov	r30, r25
    5556:	f0 e0       	ldi	r31, 0x00	; 0
    5558:	e2 17       	cp	r30, r18
    555a:	f3 07       	cpc	r31, r19
    555c:	b4 f3       	brlt	.-20     	; 0x554a <debugPrintRawStrings+0x24c>
	{
		 checksum = checksum ^ lineBuff[j];
	}

	lprintf_P(PSTR("CS: %x TCS: %x\n"), checksum, tSum);
    555e:	00 d0       	rcall	.+0      	; 0x5560 <debugPrintRawStrings+0x262>
    5560:	00 d0       	rcall	.+0      	; 0x5562 <debugPrintRawStrings+0x264>
    5562:	00 d0       	rcall	.+0      	; 0x5564 <debugPrintRawStrings+0x266>
    5564:	ed b7       	in	r30, 0x3d	; 61
    5566:	fe b7       	in	r31, 0x3e	; 62
    5568:	31 96       	adiw	r30, 0x01	; 1
    556a:	80 e2       	ldi	r24, 0x20	; 32
    556c:	98 e0       	ldi	r25, 0x08	; 8
    556e:	ad b7       	in	r26, 0x3d	; 61
    5570:	be b7       	in	r27, 0x3e	; 62
    5572:	12 96       	adiw	r26, 0x02	; 2
    5574:	9c 93       	st	X, r25
    5576:	8e 93       	st	-X, r24
    5578:	11 97       	sbiw	r26, 0x01	; 1
    557a:	c2 82       	std	Z+2, r12	; 0x02
    557c:	13 82       	std	Z+3, r1	; 0x03
    557e:	89 81       	ldd	r24, Y+1	; 0x01
    5580:	84 83       	std	Z+4, r24	; 0x04
    5582:	15 82       	std	Z+5, r1	; 0x05
    5584:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
    5588:	24 e3       	ldi	r18, 0x34	; 52
    558a:	e2 2e       	mov	r14, r18
    558c:	23 e0       	ldi	r18, 0x03	; 3
    558e:	f2 2e       	mov	r15, r18
    5590:	ed b7       	in	r30, 0x3d	; 61
    5592:	fe b7       	in	r31, 0x3e	; 62
    5594:	36 96       	adiw	r30, 0x06	; 6
    5596:	0f b6       	in	r0, 0x3f	; 63
    5598:	f8 94       	cli
    559a:	fe bf       	out	0x3e, r31	; 62
    559c:	0f be       	out	0x3f, r0	; 63
    559e:	ed bf       	out	0x3d, r30	; 61

	for(uint8_t j = 0; j < i; j++)
    55a0:	0d 2d       	mov	r16, r13
    55a2:	10 e0       	ldi	r17, 0x00	; 0
    55a4:	0e 0d       	add	r16, r14
    55a6:	1f 1d       	adc	r17, r15
	{
		lprintf("%c", lineBuff[j]);
    55a8:	97 e6       	ldi	r25, 0x67	; 103
    55aa:	a9 2e       	mov	r10, r25
    55ac:	92 e0       	ldi	r25, 0x02	; 2
    55ae:	b9 2e       	mov	r11, r25
    55b0:	16 c0       	rjmp	.+44     	; 0x55de <debugPrintRawStrings+0x2e0>
    55b2:	00 d0       	rcall	.+0      	; 0x55b4 <debugPrintRawStrings+0x2b6>
    55b4:	00 d0       	rcall	.+0      	; 0x55b6 <debugPrintRawStrings+0x2b8>
    55b6:	ed b7       	in	r30, 0x3d	; 61
    55b8:	fe b7       	in	r31, 0x3e	; 62
    55ba:	31 96       	adiw	r30, 0x01	; 1
    55bc:	ad b7       	in	r26, 0x3d	; 61
    55be:	be b7       	in	r27, 0x3e	; 62
    55c0:	12 96       	adiw	r26, 0x02	; 2
    55c2:	bc 92       	st	X, r11
    55c4:	ae 92       	st	-X, r10
    55c6:	11 97       	sbiw	r26, 0x01	; 1
    55c8:	d7 01       	movw	r26, r14
    55ca:	8d 91       	ld	r24, X+
    55cc:	7d 01       	movw	r14, r26
    55ce:	82 83       	std	Z+2, r24	; 0x02
    55d0:	13 82       	std	Z+3, r1	; 0x03
    55d2:	0e 94 77 13 	call	0x26ee	; 0x26ee <lprintf>
    55d6:	0f 90       	pop	r0
    55d8:	0f 90       	pop	r0
    55da:	0f 90       	pop	r0
    55dc:	0f 90       	pop	r0
		 checksum = checksum ^ lineBuff[j];
	}

	lprintf_P(PSTR("CS: %x TCS: %x\n"), checksum, tSum);

	for(uint8_t j = 0; j < i; j++)
    55de:	e0 16       	cp	r14, r16
    55e0:	f1 06       	cpc	r15, r17
    55e2:	39 f7       	brne	.-50     	; 0x55b2 <debugPrintRawStrings+0x2b4>
	{
		lprintf("%c", lineBuff[j]);
	}
	if(tSum == checksum)
    55e4:	89 81       	ldd	r24, Y+1	; 0x01
    55e6:	8c 15       	cp	r24, r12
    55e8:	59 f4       	brne	.+22     	; 0x5600 <debugPrintRawStrings+0x302>
	{
		lprintf_P(PSTR("Checksum Valid\n"));
    55ea:	00 d0       	rcall	.+0      	; 0x55ec <debugPrintRawStrings+0x2ee>
    55ec:	80 e1       	ldi	r24, 0x10	; 16
    55ee:	98 e0       	ldi	r25, 0x08	; 8
    55f0:	ed b7       	in	r30, 0x3d	; 61
    55f2:	fe b7       	in	r31, 0x3e	; 62
    55f4:	92 83       	std	Z+2, r25	; 0x02
    55f6:	81 83       	std	Z+1, r24	; 0x01
    55f8:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
    55fc:	0f 90       	pop	r0
    55fe:	0f 90       	pop	r0
	}

	memset(lineBuff, 0x00, 100);
    5600:	84 e6       	ldi	r24, 0x64	; 100
    5602:	e4 e3       	ldi	r30, 0x34	; 52
    5604:	f3 e0       	ldi	r31, 0x03	; 3
    5606:	df 01       	movw	r26, r30
    5608:	1d 92       	st	X+, r1
    560a:	8a 95       	dec	r24
    560c:	e9 f7       	brne	.-6      	; 0x5608 <debugPrintRawStrings+0x30a>
    560e:	1e c0       	rjmp	.+60     	; 0x564c <debugPrintRawStrings+0x34e>
	{
		i=0;
		//i < 99 to leave room for the null terminator
		while(((tempChar = (char)uart_getchar()) != '\n') && i < 99)
		{
			lineBuff[i] = tempChar;
    5610:	ef 2d       	mov	r30, r15
    5612:	f0 e0       	ldi	r31, 0x00	; 0
    5614:	ec 5c       	subi	r30, 0xCC	; 204
    5616:	fc 4f       	sbci	r31, 0xFC	; 252
    5618:	80 83       	st	Z, r24
			i++;
    561a:	f3 94       	inc	r15
	memset(lineBuff, 0x00, 100);
	do
	{
		i=0;
		//i < 99 to leave room for the null terminator
		while(((tempChar = (char)uart_getchar()) != '\n') && i < 99)
    561c:	0e 94 c2 13 	call	0x2784	; 0x2784 <uart_getchar>
    5620:	8a 30       	cpi	r24, 0x0A	; 10
    5622:	19 f0       	breq	.+6      	; 0x562a <debugPrintRawStrings+0x32c>
    5624:	b2 e6       	ldi	r27, 0x62	; 98
    5626:	bf 15       	cp	r27, r15
    5628:	98 f7       	brcc	.-26     	; 0x5610 <debugPrintRawStrings+0x312>
		{
			lineBuff[i] = tempChar;
			i++;
		}
		lineBuff[i] = '\0';
    562a:	cf 2c       	mov	r12, r15
    562c:	dd 24       	eor	r13, r13
    562e:	86 01       	movw	r16, r12
    5630:	0c 5c       	subi	r16, 0xCC	; 204
    5632:	1c 4f       	sbci	r17, 0xFC	; 252
    5634:	f8 01       	movw	r30, r16
    5636:	10 82       	st	Z, r1
	} while((strncmp("$GPGGA", lineBuff, 6) != 0));
    5638:	81 e7       	ldi	r24, 0x71	; 113
    563a:	92 e0       	ldi	r25, 0x02	; 2
    563c:	64 e3       	ldi	r22, 0x34	; 52
    563e:	73 e0       	ldi	r23, 0x03	; 3
    5640:	46 e0       	ldi	r20, 0x06	; 6
    5642:	50 e0       	ldi	r21, 0x00	; 0
    5644:	0e 94 2f 3b 	call	0x765e	; 0x765e <strncmp>
    5648:	00 97       	sbiw	r24, 0x00	; 0
    564a:	11 f0       	breq	.+4      	; 0x5650 <debugPrintRawStrings+0x352>
    564c:	ff 24       	eor	r15, r15
    564e:	e6 cf       	rjmp	.-52     	; 0x561c <debugPrintRawStrings+0x31e>
	// End GPGGA Acquisition Section

	checksum = 0;
	targetChecksum[0] = lineBuff[i-3];
    5650:	f8 01       	movw	r30, r16
    5652:	33 97       	sbiw	r30, 0x03	; 3
    5654:	80 81       	ld	r24, Z
    5656:	8a 83       	std	Y+2, r24	; 0x02
	targetChecksum[1] = lineBuff[i-2];
    5658:	f8 01       	movw	r30, r16
    565a:	32 97       	sbiw	r30, 0x02	; 2
    565c:	80 81       	ld	r24, Z
    565e:	8b 83       	std	Y+3, r24	; 0x03
	targetChecksum[2] = '\0';
    5660:	1c 82       	std	Y+4, r1	; 0x04
	sscanf(targetChecksum, "%x", &tSum);
    5662:	00 d0       	rcall	.+0      	; 0x5664 <debugPrintRawStrings+0x366>
    5664:	00 d0       	rcall	.+0      	; 0x5666 <debugPrintRawStrings+0x368>
    5666:	00 d0       	rcall	.+0      	; 0x5668 <debugPrintRawStrings+0x36a>
    5668:	ed b7       	in	r30, 0x3d	; 61
    566a:	fe b7       	in	r31, 0x3e	; 62
    566c:	31 96       	adiw	r30, 0x01	; 1
    566e:	ce 01       	movw	r24, r28
    5670:	02 96       	adiw	r24, 0x02	; 2
    5672:	ad b7       	in	r26, 0x3d	; 61
    5674:	be b7       	in	r27, 0x3e	; 62
    5676:	12 96       	adiw	r26, 0x02	; 2
    5678:	9c 93       	st	X, r25
    567a:	8e 93       	st	-X, r24
    567c:	11 97       	sbiw	r26, 0x01	; 1
    567e:	84 e6       	ldi	r24, 0x64	; 100
    5680:	92 e0       	ldi	r25, 0x02	; 2
    5682:	93 83       	std	Z+3, r25	; 0x03
    5684:	82 83       	std	Z+2, r24	; 0x02
    5686:	ce 01       	movw	r24, r28
    5688:	01 96       	adiw	r24, 0x01	; 1
    568a:	95 83       	std	Z+5, r25	; 0x05
    568c:	84 83       	std	Z+4, r24	; 0x04
    568e:	0e 94 3e 3c 	call	0x787c	; 0x787c <sscanf>
    5692:	ee 24       	eor	r14, r14
    5694:	91 e0       	ldi	r25, 0x01	; 1
    5696:	ed b7       	in	r30, 0x3d	; 61
    5698:	fe b7       	in	r31, 0x3e	; 62
    569a:	36 96       	adiw	r30, 0x06	; 6
    569c:	0f b6       	in	r0, 0x3f	; 63
    569e:	f8 94       	cli
    56a0:	fe bf       	out	0x3e, r31	; 62
    56a2:	0f be       	out	0x3f, r0	; 63
    56a4:	ed bf       	out	0x3d, r30	; 61
	for(uint8_t j = 1; j < i-4; j++)
    56a6:	96 01       	movw	r18, r12
    56a8:	24 50       	subi	r18, 0x04	; 4
    56aa:	30 40       	sbci	r19, 0x00	; 0
    56ac:	05 c0       	rjmp	.+10     	; 0x56b8 <debugPrintRawStrings+0x3ba>
	{
		 checksum = checksum ^ lineBuff[j];
    56ae:	ec 5c       	subi	r30, 0xCC	; 204
    56b0:	fc 4f       	sbci	r31, 0xFC	; 252
    56b2:	80 81       	ld	r24, Z
    56b4:	e8 26       	eor	r14, r24
	checksum = 0;
	targetChecksum[0] = lineBuff[i-3];
	targetChecksum[1] = lineBuff[i-2];
	targetChecksum[2] = '\0';
	sscanf(targetChecksum, "%x", &tSum);
	for(uint8_t j = 1; j < i-4; j++)
    56b6:	9f 5f       	subi	r25, 0xFF	; 255
    56b8:	e9 2f       	mov	r30, r25
    56ba:	f0 e0       	ldi	r31, 0x00	; 0
    56bc:	e2 17       	cp	r30, r18
    56be:	f3 07       	cpc	r31, r19
    56c0:	b4 f3       	brlt	.-20     	; 0x56ae <debugPrintRawStrings+0x3b0>
	{
		 checksum = checksum ^ lineBuff[j];
	}

	lprintf_P(PSTR("CS: %x TCS: %x\n"), checksum, tSum);
    56c2:	00 d0       	rcall	.+0      	; 0x56c4 <debugPrintRawStrings+0x3c6>
    56c4:	00 d0       	rcall	.+0      	; 0x56c6 <debugPrintRawStrings+0x3c8>
    56c6:	00 d0       	rcall	.+0      	; 0x56c8 <debugPrintRawStrings+0x3ca>
    56c8:	ed b7       	in	r30, 0x3d	; 61
    56ca:	fe b7       	in	r31, 0x3e	; 62
    56cc:	31 96       	adiw	r30, 0x01	; 1
    56ce:	80 e0       	ldi	r24, 0x00	; 0
    56d0:	98 e0       	ldi	r25, 0x08	; 8
    56d2:	ad b7       	in	r26, 0x3d	; 61
    56d4:	be b7       	in	r27, 0x3e	; 62
    56d6:	12 96       	adiw	r26, 0x02	; 2
    56d8:	9c 93       	st	X, r25
    56da:	8e 93       	st	-X, r24
    56dc:	11 97       	sbiw	r26, 0x01	; 1
    56de:	e2 82       	std	Z+2, r14	; 0x02
    56e0:	13 82       	std	Z+3, r1	; 0x03
    56e2:	89 81       	ldd	r24, Y+1	; 0x01
    56e4:	84 83       	std	Z+4, r24	; 0x04
    56e6:	15 82       	std	Z+5, r1	; 0x05
    56e8:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
    56ec:	ed b7       	in	r30, 0x3d	; 61
    56ee:	fe b7       	in	r31, 0x3e	; 62
    56f0:	36 96       	adiw	r30, 0x06	; 6
    56f2:	0f b6       	in	r0, 0x3f	; 63
    56f4:	f8 94       	cli
    56f6:	fe bf       	out	0x3e, r31	; 62
    56f8:	0f be       	out	0x3f, r0	; 63
    56fa:	ed bf       	out	0x3d, r30	; 61

	for(uint8_t j = 0; j < i; j++)
    56fc:	0f 2d       	mov	r16, r15
    56fe:	10 e0       	ldi	r17, 0x00	; 0
    5700:	0c 5c       	subi	r16, 0xCC	; 204
    5702:	1c 4f       	sbci	r17, 0xFC	; 252
	{
		lprintf("%c", lineBuff[j]);
    5704:	87 e6       	ldi	r24, 0x67	; 103
    5706:	c8 2e       	mov	r12, r24
    5708:	82 e0       	ldi	r24, 0x02	; 2
    570a:	d8 2e       	mov	r13, r24
    570c:	16 c0       	rjmp	.+44     	; 0x573a <debugPrintRawStrings+0x43c>
    570e:	00 d0       	rcall	.+0      	; 0x5710 <debugPrintRawStrings+0x412>
    5710:	00 d0       	rcall	.+0      	; 0x5712 <debugPrintRawStrings+0x414>
    5712:	ed b7       	in	r30, 0x3d	; 61
    5714:	fe b7       	in	r31, 0x3e	; 62
    5716:	31 96       	adiw	r30, 0x01	; 1
    5718:	ad b7       	in	r26, 0x3d	; 61
    571a:	be b7       	in	r27, 0x3e	; 62
    571c:	12 96       	adiw	r26, 0x02	; 2
    571e:	dc 92       	st	X, r13
    5720:	ce 92       	st	-X, r12
    5722:	11 97       	sbiw	r26, 0x01	; 1
    5724:	d4 01       	movw	r26, r8
    5726:	8d 91       	ld	r24, X+
    5728:	4d 01       	movw	r8, r26
    572a:	82 83       	std	Z+2, r24	; 0x02
    572c:	13 82       	std	Z+3, r1	; 0x03
    572e:	0e 94 77 13 	call	0x26ee	; 0x26ee <lprintf>
    5732:	0f 90       	pop	r0
    5734:	0f 90       	pop	r0
    5736:	0f 90       	pop	r0
    5738:	0f 90       	pop	r0
		 checksum = checksum ^ lineBuff[j];
	}

	lprintf_P(PSTR("CS: %x TCS: %x\n"), checksum, tSum);

	for(uint8_t j = 0; j < i; j++)
    573a:	80 16       	cp	r8, r16
    573c:	91 06       	cpc	r9, r17
    573e:	39 f7       	brne	.-50     	; 0x570e <debugPrintRawStrings+0x410>
	{
		lprintf("%c", lineBuff[j]);
	}
	if(tSum == checksum)
    5740:	89 81       	ldd	r24, Y+1	; 0x01
    5742:	8e 15       	cp	r24, r14
    5744:	59 f4       	brne	.+22     	; 0x575c <debugPrintRawStrings+0x45e>
	{
		lprintf_P(PSTR("Checksum Valid\n"));
    5746:	00 d0       	rcall	.+0      	; 0x5748 <debugPrintRawStrings+0x44a>
    5748:	80 ef       	ldi	r24, 0xF0	; 240
    574a:	97 e0       	ldi	r25, 0x07	; 7
    574c:	ed b7       	in	r30, 0x3d	; 61
    574e:	fe b7       	in	r31, 0x3e	; 62
    5750:	92 83       	std	Z+2, r25	; 0x02
    5752:	81 83       	std	Z+1, r24	; 0x01
    5754:	0e 94 c2 12 	call	0x2584	; 0x2584 <lprintf_P>
    5758:	0f 90       	pop	r0
    575a:	0f 90       	pop	r0
	}

}
    575c:	0f 90       	pop	r0
    575e:	0f 90       	pop	r0
    5760:	0f 90       	pop	r0
    5762:	0f 90       	pop	r0
    5764:	cf 91       	pop	r28
    5766:	df 91       	pop	r29
    5768:	1f 91       	pop	r17
    576a:	0f 91       	pop	r16
    576c:	ff 90       	pop	r15
    576e:	ef 90       	pop	r14
    5770:	df 90       	pop	r13
    5772:	cf 90       	pop	r12
    5774:	bf 90       	pop	r11
    5776:	af 90       	pop	r10
    5778:	9f 90       	pop	r9
    577a:	8f 90       	pop	r8
    577c:	08 95       	ret

0000577e <getGPS>:
//$GPRMC,040302.663,A,3939.7,N,10506.6,W,0.27,358.86,200804,,*1A
//^Sentence             ^Lat(HHMM.M)      ^Speed (Knots)
//         ^HHMMSS.XXX          ^Lon(HHHMM.M)   ^Bearing
//                  ^GPS Fix (A=active, V=invalid)     ^UTC Date
void getGPS(struct gpsData *outputData)
{
    577e:	2f 92       	push	r2
    5780:	3f 92       	push	r3
    5782:	4f 92       	push	r4
    5784:	5f 92       	push	r5
    5786:	6f 92       	push	r6
    5788:	7f 92       	push	r7
    578a:	8f 92       	push	r8
    578c:	9f 92       	push	r9
    578e:	af 92       	push	r10
    5790:	bf 92       	push	r11
    5792:	cf 92       	push	r12
    5794:	df 92       	push	r13
    5796:	ef 92       	push	r14
    5798:	ff 92       	push	r15
    579a:	0f 93       	push	r16
    579c:	1f 93       	push	r17
    579e:	df 93       	push	r29
    57a0:	cf 93       	push	r28
    57a2:	cd b7       	in	r28, 0x3d	; 61
    57a4:	de b7       	in	r29, 0x3e	; 62
    57a6:	6f 97       	sbiw	r28, 0x1f	; 31
    57a8:	0f b6       	in	r0, 0x3f	; 63
    57aa:	f8 94       	cli
    57ac:	de bf       	out	0x3e, r29	; 62
    57ae:	0f be       	out	0x3f, r0	; 63
    57b0:	cd bf       	out	0x3d, r28	; 61
    57b2:	1c 01       	movw	r2, r24
	char tempChar;
	uint8_t i;
	uint8_t errorTracker;

	//Needed so the first comparison works out correctly
	memset(lineBuff, 0x00, 100);
    57b4:	84 e6       	ldi	r24, 0x64	; 100
    57b6:	e8 e9       	ldi	r30, 0x98	; 152
    57b8:	f3 e0       	ldi	r31, 0x03	; 3
    57ba:	df 01       	movw	r26, r30
    57bc:	1d 92       	st	X+, r1
    57be:	8a 95       	dec	r24
    57c0:	e9 f7       	brne	.-6      	; 0x57bc <getGPS+0x3e>
    57c2:	aa 24       	eor	r10, r10
			lineBuff[i] = tempChar;
			i++;
		}
		if(tempChar==0xff)
		{
		    lprintf("ERR!\n");
    57c4:	78 e7       	ldi	r23, 0x78	; 120
    57c6:	c7 2e       	mov	r12, r23
    57c8:	72 e0       	ldi	r23, 0x02	; 2
    57ca:	d7 2e       	mov	r13, r23
	char tempChar;
	uint8_t i;
	uint8_t errorTracker;

	//Needed so the first comparison works out correctly
	memset(lineBuff, 0x00, 100);
    57cc:	68 e9       	ldi	r22, 0x98	; 152
    57ce:	e6 2e       	mov	r14, r22
    57d0:	63 e0       	ldi	r22, 0x03	; 3
    57d2:	f6 2e       	mov	r15, r22
    57d4:	10 e0       	ldi	r17, 0x00	; 0
    57d6:	04 c0       	rjmp	.+8      	; 0x57e0 <getGPS+0x62>
	{
		i=0;
		//i < 99 to leave room for the null terminator
		while(((tempChar = (char)uart_getchar()) != '\n') && (i < 99) && tempChar!= 0xff)
		{
			lineBuff[i] = tempChar;
    57d8:	f7 01       	movw	r30, r14
    57da:	81 93       	st	Z+, r24
    57dc:	7f 01       	movw	r14, r30
			i++;
    57de:	1f 5f       	subi	r17, 0xFF	; 255
	//something is wrong.
	do
	{
		i=0;
		//i < 99 to leave room for the null terminator
		while(((tempChar = (char)uart_getchar()) != '\n') && (i < 99) && tempChar!= 0xff)
    57e0:	0e 94 c2 13 	call	0x2784	; 0x2784 <uart_getchar>
    57e4:	8a 30       	cpi	r24, 0x0A	; 10
    57e6:	91 f0       	breq	.+36     	; 0x580c <getGPS+0x8e>
    57e8:	13 36       	cpi	r17, 0x63	; 99
    57ea:	19 f0       	breq	.+6      	; 0x57f2 <getGPS+0x74>
    57ec:	8f 3f       	cpi	r24, 0xFF	; 255
    57ee:	a1 f7       	brne	.-24     	; 0x57d8 <getGPS+0x5a>
    57f0:	02 c0       	rjmp	.+4      	; 0x57f6 <getGPS+0x78>
		{
			lineBuff[i] = tempChar;
			i++;
		}
		if(tempChar==0xff)
    57f2:	8f 3f       	cpi	r24, 0xFF	; 255
    57f4:	59 f4       	brne	.+22     	; 0x580c <getGPS+0x8e>
		{
		    lprintf("ERR!\n");
    57f6:	00 d0       	rcall	.+0      	; 0x57f8 <getGPS+0x7a>
    57f8:	ad b7       	in	r26, 0x3d	; 61
    57fa:	be b7       	in	r27, 0x3e	; 62
    57fc:	12 96       	adiw	r26, 0x02	; 2
    57fe:	dc 92       	st	X, r13
    5800:	ce 92       	st	-X, r12
    5802:	11 97       	sbiw	r26, 0x01	; 1
    5804:	0e 94 77 13 	call	0x26ee	; 0x26ee <lprintf>
    5808:	0f 90       	pop	r0
    580a:	0f 90       	pop	r0
		}
		lineBuff[i] = '\0';
    580c:	e1 2e       	mov	r14, r17
    580e:	ff 24       	eor	r15, r15
    5810:	87 01       	movw	r16, r14
    5812:	08 56       	subi	r16, 0x68	; 104
    5814:	1c 4f       	sbci	r17, 0xFC	; 252
    5816:	f8 01       	movw	r30, r16
    5818:	10 82       	st	Z, r1
		errorTracker++;
    581a:	a3 94       	inc	r10
	} while((strncmp("$GPRMC", lineBuff, 6) != 0) && errorTracker < 100);
    581c:	8d e5       	ldi	r24, 0x5D	; 93
    581e:	92 e0       	ldi	r25, 0x02	; 2
    5820:	68 e9       	ldi	r22, 0x98	; 152
    5822:	73 e0       	ldi	r23, 0x03	; 3
    5824:	46 e0       	ldi	r20, 0x06	; 6
    5826:	50 e0       	ldi	r21, 0x00	; 0
    5828:	0e 94 2f 3b 	call	0x765e	; 0x765e <strncmp>
    582c:	00 97       	sbiw	r24, 0x00	; 0
    582e:	21 f0       	breq	.+8      	; 0x5838 <getGPS+0xba>
    5830:	f4 e6       	ldi	r31, 0x64	; 100
    5832:	af 16       	cp	r10, r31
    5834:	59 f6       	brne	.-106    	; 0x57cc <getGPS+0x4e>
    5836:	03 c0       	rjmp	.+6      	; 0x583e <getGPS+0xc0>

	//lprintf("et: %d\n", errorTracker);

	//If something is wrong, return before we try to parse the data.
	//Set the output status to "Loco".
	if(errorTracker >= 100)
    5838:	43 e6       	ldi	r20, 0x63	; 99
    583a:	4a 15       	cp	r20, r10
    583c:	10 f4       	brcc	.+4      	; 0x5842 <getGPS+0xc4>
	{
		outputData->status  = 3;
    583e:	83 e0       	ldi	r24, 0x03	; 3
    5840:	b6 c2       	rjmp	.+1388   	; 0x5dae <getGPS+0x630>
	}

	char targetChecksum[3];
	uint8_t  tSum;
	uint8_t checksum = 0;
	targetChecksum[0] = lineBuff[i-3];
    5842:	f8 01       	movw	r30, r16
    5844:	33 97       	sbiw	r30, 0x03	; 3
    5846:	80 81       	ld	r24, Z
    5848:	8d 83       	std	Y+5, r24	; 0x05
	targetChecksum[1] = lineBuff[i-2];
    584a:	f8 01       	movw	r30, r16
    584c:	32 97       	sbiw	r30, 0x02	; 2
    584e:	80 81       	ld	r24, Z
    5850:	8e 83       	std	Y+6, r24	; 0x06
	targetChecksum[2] = '\0';
    5852:	1f 82       	std	Y+7, r1	; 0x07
	sscanf(targetChecksum, "%x", &tSum);
    5854:	00 d0       	rcall	.+0      	; 0x5856 <getGPS+0xd8>
    5856:	00 d0       	rcall	.+0      	; 0x5858 <getGPS+0xda>
    5858:	00 d0       	rcall	.+0      	; 0x585a <getGPS+0xdc>
    585a:	ed b7       	in	r30, 0x3d	; 61
    585c:	fe b7       	in	r31, 0x3e	; 62
    585e:	31 96       	adiw	r30, 0x01	; 1
    5860:	ce 01       	movw	r24, r28
    5862:	05 96       	adiw	r24, 0x05	; 5
    5864:	ad b7       	in	r26, 0x3d	; 61
    5866:	be b7       	in	r27, 0x3e	; 62
    5868:	12 96       	adiw	r26, 0x02	; 2
    586a:	9c 93       	st	X, r25
    586c:	8e 93       	st	-X, r24
    586e:	11 97       	sbiw	r26, 0x01	; 1
    5870:	84 e6       	ldi	r24, 0x64	; 100
    5872:	92 e0       	ldi	r25, 0x02	; 2
    5874:	93 83       	std	Z+3, r25	; 0x03
    5876:	82 83       	std	Z+2, r24	; 0x02
    5878:	ce 01       	movw	r24, r28
    587a:	01 96       	adiw	r24, 0x01	; 1
    587c:	95 83       	std	Z+5, r25	; 0x05
    587e:	84 83       	std	Z+4, r24	; 0x04
    5880:	0e 94 3e 3c 	call	0x787c	; 0x787c <sscanf>
    5884:	20 e0       	ldi	r18, 0x00	; 0
    5886:	91 e0       	ldi	r25, 0x01	; 1
    5888:	ed b7       	in	r30, 0x3d	; 61
    588a:	fe b7       	in	r31, 0x3e	; 62
    588c:	36 96       	adiw	r30, 0x06	; 6
    588e:	0f b6       	in	r0, 0x3f	; 63
    5890:	f8 94       	cli
    5892:	fe bf       	out	0x3e, r31	; 62
    5894:	0f be       	out	0x3f, r0	; 63
    5896:	ed bf       	out	0x3d, r30	; 61
	for(uint8_t j = 1; j < i-4; j++)
    5898:	a7 01       	movw	r20, r14
    589a:	44 50       	subi	r20, 0x04	; 4
    589c:	50 40       	sbci	r21, 0x00	; 0
    589e:	05 c0       	rjmp	.+10     	; 0x58aa <getGPS+0x12c>
	{
		 checksum = checksum ^ lineBuff[j];
    58a0:	e8 56       	subi	r30, 0x68	; 104
    58a2:	fc 4f       	sbci	r31, 0xFC	; 252
    58a4:	80 81       	ld	r24, Z
    58a6:	28 27       	eor	r18, r24
	uint8_t checksum = 0;
	targetChecksum[0] = lineBuff[i-3];
	targetChecksum[1] = lineBuff[i-2];
	targetChecksum[2] = '\0';
	sscanf(targetChecksum, "%x", &tSum);
	for(uint8_t j = 1; j < i-4; j++)
    58a8:	9f 5f       	subi	r25, 0xFF	; 255
    58aa:	e9 2f       	mov	r30, r25
    58ac:	f0 e0       	ldi	r31, 0x00	; 0
    58ae:	e4 17       	cp	r30, r20
    58b0:	f5 07       	cpc	r31, r21
    58b2:	b4 f3       	brlt	.-20     	; 0x58a0 <getGPS+0x122>
	{
		 checksum = checksum ^ lineBuff[j];
	}

	if(checksum != tSum)
    58b4:	89 81       	ldd	r24, Y+1	; 0x01
    58b6:	28 17       	cp	r18, r24
    58b8:	09 f0       	breq	.+2      	; 0x58bc <getGPS+0x13e>
    58ba:	78 c2       	rjmp	.+1264   	; 0x5dac <getGPS+0x62e>

	char localStatus;

	int error;

	error = sscanf( lineBuff,
    58bc:	ed b7       	in	r30, 0x3d	; 61
    58be:	fe b7       	in	r31, 0x3e	; 62
    58c0:	74 97       	sbiw	r30, 0x14	; 20
    58c2:	0f b6       	in	r0, 0x3f	; 63
    58c4:	f8 94       	cli
    58c6:	fe bf       	out	0x3e, r31	; 62
    58c8:	0f be       	out	0x3f, r0	; 63
    58ca:	ed bf       	out	0x3d, r30	; 61
    58cc:	31 96       	adiw	r30, 0x01	; 1
    58ce:	88 e9       	ldi	r24, 0x98	; 152
    58d0:	93 e0       	ldi	r25, 0x03	; 3
    58d2:	ad b7       	in	r26, 0x3d	; 61
    58d4:	be b7       	in	r27, 0x3e	; 62
    58d6:	12 96       	adiw	r26, 0x02	; 2
    58d8:	9c 93       	st	X, r25
    58da:	8e 93       	st	-X, r24
    58dc:	11 97       	sbiw	r26, 0x01	; 1
    58de:	8e e7       	ldi	r24, 0x7E	; 126
    58e0:	92 e0       	ldi	r25, 0x02	; 2
    58e2:	93 83       	std	Z+3, r25	; 0x03
    58e4:	82 83       	std	Z+2, r24	; 0x02
    58e6:	ce 01       	movw	r24, r28
    58e8:	40 96       	adiw	r24, 0x10	; 16
    58ea:	95 83       	std	Z+5, r25	; 0x05
    58ec:	84 83       	std	Z+4, r24	; 0x04
    58ee:	ce 01       	movw	r24, r28
    58f0:	04 96       	adiw	r24, 0x04	; 4
    58f2:	97 83       	std	Z+7, r25	; 0x07
    58f4:	86 83       	std	Z+6, r24	; 0x06
    58f6:	08 94       	sec
    58f8:	21 1c       	adc	r2, r1
    58fa:	31 1c       	adc	r3, r1
    58fc:	31 86       	std	Z+9, r3	; 0x09
    58fe:	20 86       	std	Z+8, r2	; 0x08
    5900:	ce 01       	movw	r24, r28
    5902:	02 96       	adiw	r24, 0x02	; 2
    5904:	93 87       	std	Z+11, r25	; 0x0b
    5906:	82 87       	std	Z+10, r24	; 0x0a
    5908:	44 e0       	ldi	r20, 0x04	; 4
    590a:	50 e0       	ldi	r21, 0x00	; 0
    590c:	24 0e       	add	r2, r20
    590e:	35 1e       	adc	r3, r21
    5910:	35 86       	std	Z+13, r3	; 0x0d
    5912:	24 86       	std	Z+12, r2	; 0x0c
    5914:	8b ef       	ldi	r24, 0xFB	; 251
    5916:	9f ef       	ldi	r25, 0xFF	; 255
    5918:	28 0e       	add	r2, r24
    591a:	39 1e       	adc	r3, r25
    591c:	ce 01       	movw	r24, r28
    591e:	03 96       	adiw	r24, 0x03	; 3
    5920:	97 87       	std	Z+15, r25	; 0x0f
    5922:	86 87       	std	Z+14, r24	; 0x0e
    5924:	ce 01       	movw	r24, r28
    5926:	08 96       	adiw	r24, 0x08	; 8
    5928:	91 8b       	std	Z+17, r25	; 0x11
    592a:	80 8b       	std	Z+16, r24	; 0x10
    592c:	ce 01       	movw	r24, r28
    592e:	0c 96       	adiw	r24, 0x0c	; 12
    5930:	93 8b       	std	Z+19, r25	; 0x13
    5932:	82 8b       	std	Z+18, r24	; 0x12
    5934:	0e 94 3e 3c 	call	0x787c	; 0x787c <sscanf>
			"$GPRMC,%f,%c,%f,%c,%f,%c,%f,%f",
			&time, &tempStatus, &outputData->latitude, &latdir,
			&outputData->longitude, &londir, &speed, &bearing);


	outputData->hours = (uint8_t)(time/10000);
    5938:	e8 88       	ldd	r14, Y+16	; 0x10
    593a:	f9 88       	ldd	r15, Y+17	; 0x11
    593c:	0a 89       	ldd	r16, Y+18	; 0x12
    593e:	1b 89       	ldd	r17, Y+19	; 0x13
    5940:	c8 01       	movw	r24, r16
    5942:	b7 01       	movw	r22, r14
    5944:	20 e0       	ldi	r18, 0x00	; 0
    5946:	30 e4       	ldi	r19, 0x40	; 64
    5948:	4c e1       	ldi	r20, 0x1C	; 28
    594a:	56 e4       	ldi	r21, 0x46	; 70
    594c:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__divsf3>
    5950:	0e 94 25 38 	call	0x704a	; 0x704a <__fixunssfsi>
    5954:	d1 01       	movw	r26, r2
    5956:	50 96       	adiw	r26, 0x10	; 16
    5958:	6c 93       	st	X, r22
	outputData->minutes = (uint8_t)(time - (outputData->hours)*10000)/100;
    595a:	70 e0       	ldi	r23, 0x00	; 0
    595c:	20 e1       	ldi	r18, 0x10	; 16
    595e:	37 e2       	ldi	r19, 0x27	; 39
    5960:	fb 01       	movw	r30, r22
    5962:	e2 9f       	mul	r30, r18
    5964:	b0 01       	movw	r22, r0
    5966:	e3 9f       	mul	r30, r19
    5968:	70 0d       	add	r23, r0
    596a:	f2 9f       	mul	r31, r18
    596c:	70 0d       	add	r23, r0
    596e:	11 24       	eor	r1, r1
    5970:	88 27       	eor	r24, r24
    5972:	77 fd       	sbrc	r23, 7
    5974:	80 95       	com	r24
    5976:	98 2f       	mov	r25, r24
    5978:	0e 94 53 38 	call	0x70a6	; 0x70a6 <__floatsisf>
    597c:	9b 01       	movw	r18, r22
    597e:	ac 01       	movw	r20, r24
    5980:	c8 01       	movw	r24, r16
    5982:	b7 01       	movw	r22, r14
    5984:	0e 94 4f 37 	call	0x6e9e	; 0x6e9e <__subsf3>
    5988:	7b 01       	movw	r14, r22
    598a:	8c 01       	movw	r16, r24
    598c:	0e 94 25 38 	call	0x704a	; 0x704a <__fixunssfsi>
    5990:	dc 01       	movw	r26, r24
    5992:	cb 01       	movw	r24, r22
    5994:	64 e6       	ldi	r22, 0x64	; 100
    5996:	0e 94 85 39 	call	0x730a	; 0x730a <__udivmodqi4>
    599a:	d1 01       	movw	r26, r2
    599c:	51 96       	adiw	r26, 0x11	; 17
    599e:	8c 93       	st	X, r24
    59a0:	51 97       	sbiw	r26, 0x11	; 17
	outputData->seconds = (uint8_t)(time - (outputData->hours)*10000 - (outputData->seconds)*100);
    59a2:	52 96       	adiw	r26, 0x12	; 18
    59a4:	6c 91       	ld	r22, X
    59a6:	24 e6       	ldi	r18, 0x64	; 100
    59a8:	62 9f       	mul	r22, r18
    59aa:	b0 01       	movw	r22, r0
    59ac:	11 24       	eor	r1, r1
    59ae:	88 27       	eor	r24, r24
    59b0:	77 fd       	sbrc	r23, 7
    59b2:	80 95       	com	r24
    59b4:	98 2f       	mov	r25, r24
    59b6:	0e 94 53 38 	call	0x70a6	; 0x70a6 <__floatsisf>
    59ba:	9b 01       	movw	r18, r22
    59bc:	ac 01       	movw	r20, r24
    59be:	c8 01       	movw	r24, r16
    59c0:	b7 01       	movw	r22, r14
    59c2:	0e 94 4f 37 	call	0x6e9e	; 0x6e9e <__subsf3>
    59c6:	0e 94 25 38 	call	0x704a	; 0x704a <__fixunssfsi>
    59ca:	f1 01       	movw	r30, r2
    59cc:	62 8b       	std	Z+18, r22	; 0x12

	if(latdir == 'S')
    59ce:	4d b7       	in	r20, 0x3d	; 61
    59d0:	5e b7       	in	r21, 0x3e	; 62
    59d2:	4c 5e       	subi	r20, 0xEC	; 236
    59d4:	5f 4f       	sbci	r21, 0xFF	; 255
    59d6:	0f b6       	in	r0, 0x3f	; 63
    59d8:	f8 94       	cli
    59da:	5e bf       	out	0x3e, r21	; 62
    59dc:	0f be       	out	0x3f, r0	; 63
    59de:	4d bf       	out	0x3d, r20	; 61
    59e0:	8a 81       	ldd	r24, Y+2	; 0x02
    59e2:	83 35       	cpi	r24, 0x53	; 83
    59e4:	89 f4       	brne	.+34     	; 0x5a08 <getGPS+0x28a>
				outputData->latitude = 0-(outputData->latitude);
    59e6:	60 e0       	ldi	r22, 0x00	; 0
    59e8:	70 e0       	ldi	r23, 0x00	; 0
    59ea:	80 e0       	ldi	r24, 0x00	; 0
    59ec:	90 e0       	ldi	r25, 0x00	; 0
    59ee:	21 81       	ldd	r18, Z+1	; 0x01
    59f0:	32 81       	ldd	r19, Z+2	; 0x02
    59f2:	43 81       	ldd	r20, Z+3	; 0x03
    59f4:	54 81       	ldd	r21, Z+4	; 0x04
    59f6:	0e 94 4f 37 	call	0x6e9e	; 0x6e9e <__subsf3>
    59fa:	d1 01       	movw	r26, r2
    59fc:	11 96       	adiw	r26, 0x01	; 1
    59fe:	6d 93       	st	X+, r22
    5a00:	7d 93       	st	X+, r23
    5a02:	8d 93       	st	X+, r24
    5a04:	9c 93       	st	X, r25
    5a06:	14 97       	sbiw	r26, 0x04	; 4
	if(londir == 'W')
    5a08:	8b 81       	ldd	r24, Y+3	; 0x03
    5a0a:	87 35       	cpi	r24, 0x57	; 87
    5a0c:	91 f4       	brne	.+36     	; 0x5a32 <getGPS+0x2b4>
				outputData->longitude = 0-(outputData->longitude);
    5a0e:	60 e0       	ldi	r22, 0x00	; 0
    5a10:	70 e0       	ldi	r23, 0x00	; 0
    5a12:	80 e0       	ldi	r24, 0x00	; 0
    5a14:	90 e0       	ldi	r25, 0x00	; 0
    5a16:	f1 01       	movw	r30, r2
    5a18:	25 81       	ldd	r18, Z+5	; 0x05
    5a1a:	36 81       	ldd	r19, Z+6	; 0x06
    5a1c:	47 81       	ldd	r20, Z+7	; 0x07
    5a1e:	50 85       	ldd	r21, Z+8	; 0x08
    5a20:	0e 94 4f 37 	call	0x6e9e	; 0x6e9e <__subsf3>
    5a24:	d1 01       	movw	r26, r2
    5a26:	15 96       	adiw	r26, 0x05	; 5
    5a28:	6d 93       	st	X+, r22
    5a2a:	7d 93       	st	X+, r23
    5a2c:	8d 93       	st	X+, r24
    5a2e:	9c 93       	st	X, r25
    5a30:	18 97       	sbiw	r26, 0x08	; 8

	latDegrees = (int)(outputData->latitude/100);
    5a32:	f1 01       	movw	r30, r2
    5a34:	a1 80       	ldd	r10, Z+1	; 0x01
    5a36:	b2 80       	ldd	r11, Z+2	; 0x02
    5a38:	c3 80       	ldd	r12, Z+3	; 0x03
    5a3a:	d4 80       	ldd	r13, Z+4	; 0x04
    5a3c:	c6 01       	movw	r24, r12
    5a3e:	b5 01       	movw	r22, r10
    5a40:	20 e0       	ldi	r18, 0x00	; 0
    5a42:	30 e0       	ldi	r19, 0x00	; 0
    5a44:	48 ec       	ldi	r20, 0xC8	; 200
    5a46:	52 e4       	ldi	r21, 0x42	; 66
    5a48:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__divsf3>
    5a4c:	0e 94 20 38 	call	0x7040	; 0x7040 <__fixsfsi>
    5a50:	7b 01       	movw	r14, r22
    5a52:	8c 01       	movw	r16, r24
	latMinutes = (float)(outputData->latitude - latDegrees*100);
	outputData->latitude = latDegrees + (latMinutes/60); //Conversion into decimal degrees
    5a54:	b7 01       	movw	r22, r14
    5a56:	88 27       	eor	r24, r24
    5a58:	77 fd       	sbrc	r23, 7
    5a5a:	80 95       	com	r24
    5a5c:	98 2f       	mov	r25, r24
    5a5e:	0e 94 53 38 	call	0x70a6	; 0x70a6 <__floatsisf>
    5a62:	3b 01       	movw	r6, r22
    5a64:	4c 01       	movw	r8, r24
    5a66:	54 e6       	ldi	r21, 0x64	; 100
    5a68:	45 2e       	mov	r4, r21
    5a6a:	51 2c       	mov	r5, r1
    5a6c:	e4 9c       	mul	r14, r4
    5a6e:	b0 01       	movw	r22, r0
    5a70:	e5 9c       	mul	r14, r5
    5a72:	70 0d       	add	r23, r0
    5a74:	f4 9c       	mul	r15, r4
    5a76:	70 0d       	add	r23, r0
    5a78:	11 24       	eor	r1, r1
    5a7a:	88 27       	eor	r24, r24
    5a7c:	77 fd       	sbrc	r23, 7
    5a7e:	80 95       	com	r24
    5a80:	98 2f       	mov	r25, r24
    5a82:	0e 94 53 38 	call	0x70a6	; 0x70a6 <__floatsisf>
    5a86:	9b 01       	movw	r18, r22
    5a88:	ac 01       	movw	r20, r24
    5a8a:	c6 01       	movw	r24, r12
    5a8c:	b5 01       	movw	r22, r10
    5a8e:	0e 94 4f 37 	call	0x6e9e	; 0x6e9e <__subsf3>
    5a92:	20 e0       	ldi	r18, 0x00	; 0
    5a94:	30 e0       	ldi	r19, 0x00	; 0
    5a96:	40 e7       	ldi	r20, 0x70	; 112
    5a98:	52 e4       	ldi	r21, 0x42	; 66
    5a9a:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__divsf3>
    5a9e:	9b 01       	movw	r18, r22
    5aa0:	ac 01       	movw	r20, r24
    5aa2:	c4 01       	movw	r24, r8
    5aa4:	b3 01       	movw	r22, r6
    5aa6:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <__addsf3>
    5aaa:	d1 01       	movw	r26, r2
    5aac:	11 96       	adiw	r26, 0x01	; 1
    5aae:	6d 93       	st	X+, r22
    5ab0:	7d 93       	st	X+, r23
    5ab2:	8d 93       	st	X+, r24
    5ab4:	9c 93       	st	X, r25
    5ab6:	14 97       	sbiw	r26, 0x04	; 4

	lonDegrees = (int)(outputData->longitude/100);
    5ab8:	15 96       	adiw	r26, 0x05	; 5
    5aba:	ad 90       	ld	r10, X+
    5abc:	bd 90       	ld	r11, X+
    5abe:	cd 90       	ld	r12, X+
    5ac0:	dc 90       	ld	r13, X
    5ac2:	18 97       	sbiw	r26, 0x08	; 8
    5ac4:	c6 01       	movw	r24, r12
    5ac6:	b5 01       	movw	r22, r10
    5ac8:	20 e0       	ldi	r18, 0x00	; 0
    5aca:	30 e0       	ldi	r19, 0x00	; 0
    5acc:	48 ec       	ldi	r20, 0xC8	; 200
    5ace:	52 e4       	ldi	r21, 0x42	; 66
    5ad0:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__divsf3>
    5ad4:	0e 94 20 38 	call	0x7040	; 0x7040 <__fixsfsi>
    5ad8:	7b 01       	movw	r14, r22
    5ada:	8c 01       	movw	r16, r24
	lonMinutes = (float)(outputData->longitude - lonDegrees*100);
	outputData->longitude = lonDegrees + (lonMinutes/60); //Conversion into decimal degrees
    5adc:	b7 01       	movw	r22, r14
    5ade:	88 27       	eor	r24, r24
    5ae0:	77 fd       	sbrc	r23, 7
    5ae2:	80 95       	com	r24
    5ae4:	98 2f       	mov	r25, r24
    5ae6:	0e 94 53 38 	call	0x70a6	; 0x70a6 <__floatsisf>
    5aea:	3b 01       	movw	r6, r22
    5aec:	4c 01       	movw	r8, r24
    5aee:	e4 9c       	mul	r14, r4
    5af0:	b0 01       	movw	r22, r0
    5af2:	e5 9c       	mul	r14, r5
    5af4:	70 0d       	add	r23, r0
    5af6:	f4 9c       	mul	r15, r4
    5af8:	70 0d       	add	r23, r0
    5afa:	11 24       	eor	r1, r1
    5afc:	88 27       	eor	r24, r24
    5afe:	77 fd       	sbrc	r23, 7
    5b00:	80 95       	com	r24
    5b02:	98 2f       	mov	r25, r24
    5b04:	0e 94 53 38 	call	0x70a6	; 0x70a6 <__floatsisf>
    5b08:	9b 01       	movw	r18, r22
    5b0a:	ac 01       	movw	r20, r24
    5b0c:	c6 01       	movw	r24, r12
    5b0e:	b5 01       	movw	r22, r10
    5b10:	0e 94 4f 37 	call	0x6e9e	; 0x6e9e <__subsf3>
    5b14:	20 e0       	ldi	r18, 0x00	; 0
    5b16:	30 e0       	ldi	r19, 0x00	; 0
    5b18:	40 e7       	ldi	r20, 0x70	; 112
    5b1a:	52 e4       	ldi	r21, 0x42	; 66
    5b1c:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <__divsf3>
    5b20:	9b 01       	movw	r18, r22
    5b22:	ac 01       	movw	r20, r24
    5b24:	c4 01       	movw	r24, r8
    5b26:	b3 01       	movw	r22, r6
    5b28:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <__addsf3>
    5b2c:	f1 01       	movw	r30, r2
    5b2e:	65 83       	std	Z+5, r22	; 0x05
    5b30:	76 83       	std	Z+6, r23	; 0x06
    5b32:	87 83       	std	Z+7, r24	; 0x07
    5b34:	90 87       	std	Z+8, r25	; 0x08

	outputData->speed = (uint8_t)speed;
    5b36:	68 85       	ldd	r22, Y+8	; 0x08
    5b38:	79 85       	ldd	r23, Y+9	; 0x09
    5b3a:	8a 85       	ldd	r24, Y+10	; 0x0a
    5b3c:	9b 85       	ldd	r25, Y+11	; 0x0b
    5b3e:	0e 94 25 38 	call	0x704a	; 0x704a <__fixunssfsi>
    5b42:	d1 01       	movw	r26, r2
    5b44:	19 96       	adiw	r26, 0x09	; 9
    5b46:	6c 93       	st	X, r22
	outputData->bearing = (uint16_t)bearing;
    5b48:	6c 85       	ldd	r22, Y+12	; 0x0c
    5b4a:	7d 85       	ldd	r23, Y+13	; 0x0d
    5b4c:	8e 85       	ldd	r24, Y+14	; 0x0e
    5b4e:	9f 85       	ldd	r25, Y+15	; 0x0f
    5b50:	0e 94 25 38 	call	0x704a	; 0x704a <__fixunssfsi>
    5b54:	f1 01       	movw	r30, r2
    5b56:	73 87       	std	Z+11, r23	; 0x0b
    5b58:	62 87       	std	Z+10, r22	; 0x0a


	// Begin GPGSA Acquisition Section

	//Needed so the first comparison works out correctly
	memset(lineBuff, 0x00, 100);
    5b5a:	84 e6       	ldi	r24, 0x64	; 100
    5b5c:	e8 e9       	ldi	r30, 0x98	; 152
    5b5e:	f3 e0       	ldi	r31, 0x03	; 3
    5b60:	df 01       	movw	r26, r30
    5b62:	1d 92       	st	X+, r1
    5b64:	8a 95       	dec	r24
    5b66:	e9 f7       	brne	.-6      	; 0x5b62 <getGPS+0x3e4>
    5b68:	1d c0       	rjmp	.+58     	; 0x5ba4 <getGPS+0x426>
	{
		i=0;
		//i < 99 to leave room for the null terminator
		while(((tempChar = (char)uart_getchar()) != '\n') && i < 99)
		{
			lineBuff[i] = tempChar;
    5b6a:	e1 2f       	mov	r30, r17
    5b6c:	f0 e0       	ldi	r31, 0x00	; 0
    5b6e:	e8 56       	subi	r30, 0x68	; 104
    5b70:	fc 4f       	sbci	r31, 0xFC	; 252
    5b72:	80 83       	st	Z, r24
			i++;
    5b74:	1f 5f       	subi	r17, 0xFF	; 255
	errorTracker = 0;
	do
	{
		i=0;
		//i < 99 to leave room for the null terminator
		while(((tempChar = (char)uart_getchar()) != '\n') && i < 99)
    5b76:	0e 94 c2 13 	call	0x2784	; 0x2784 <uart_getchar>
    5b7a:	8a 30       	cpi	r24, 0x0A	; 10
    5b7c:	11 f0       	breq	.+4      	; 0x5b82 <getGPS+0x404>
    5b7e:	13 36       	cpi	r17, 0x63	; 99
    5b80:	a0 f3       	brcs	.-24     	; 0x5b6a <getGPS+0x3ec>
		{
			lineBuff[i] = tempChar;
			i++;
		}
		lineBuff[i] = '\0';
    5b82:	e1 2e       	mov	r14, r17
    5b84:	ff 24       	eor	r15, r15
    5b86:	87 01       	movw	r16, r14
    5b88:	08 56       	subi	r16, 0x68	; 104
    5b8a:	1c 4f       	sbci	r17, 0xFC	; 252
    5b8c:	f8 01       	movw	r30, r16
    5b8e:	10 82       	st	Z, r1
	} while((strncmp("$GPGSA", lineBuff, 6) != 0) && errorTracker < 100);
    5b90:	8a e6       	ldi	r24, 0x6A	; 106
    5b92:	92 e0       	ldi	r25, 0x02	; 2
    5b94:	68 e9       	ldi	r22, 0x98	; 152
    5b96:	73 e0       	ldi	r23, 0x03	; 3
    5b98:	46 e0       	ldi	r20, 0x06	; 6
    5b9a:	50 e0       	ldi	r21, 0x00	; 0
    5b9c:	0e 94 2f 3b 	call	0x765e	; 0x765e <strncmp>
    5ba0:	00 97       	sbiw	r24, 0x00	; 0
    5ba2:	11 f0       	breq	.+4      	; 0x5ba8 <getGPS+0x42a>
    5ba4:	10 e0       	ldi	r17, 0x00	; 0
    5ba6:	e7 cf       	rjmp	.-50     	; 0x5b76 <getGPS+0x3f8>
		outputData->status  = 3;
		return;
	}

	checksum = 0;
	targetChecksum[0] = lineBuff[i-3];
    5ba8:	f8 01       	movw	r30, r16
    5baa:	33 97       	sbiw	r30, 0x03	; 3
    5bac:	80 81       	ld	r24, Z
    5bae:	8d 83       	std	Y+5, r24	; 0x05
	targetChecksum[1] = lineBuff[i-2];
    5bb0:	f8 01       	movw	r30, r16
    5bb2:	32 97       	sbiw	r30, 0x02	; 2
    5bb4:	80 81       	ld	r24, Z
    5bb6:	8e 83       	std	Y+6, r24	; 0x06
	targetChecksum[2] = '\0';
    5bb8:	1f 82       	std	Y+7, r1	; 0x07
	sscanf(targetChecksum, "%x", &tSum);
    5bba:	00 d0       	rcall	.+0      	; 0x5bbc <getGPS+0x43e>
    5bbc:	00 d0       	rcall	.+0      	; 0x5bbe <getGPS+0x440>
    5bbe:	00 d0       	rcall	.+0      	; 0x5bc0 <getGPS+0x442>
    5bc0:	ed b7       	in	r30, 0x3d	; 61
    5bc2:	fe b7       	in	r31, 0x3e	; 62
    5bc4:	31 96       	adiw	r30, 0x01	; 1
    5bc6:	ce 01       	movw	r24, r28
    5bc8:	05 96       	adiw	r24, 0x05	; 5
    5bca:	ad b7       	in	r26, 0x3d	; 61
    5bcc:	be b7       	in	r27, 0x3e	; 62
    5bce:	12 96       	adiw	r26, 0x02	; 2
    5bd0:	9c 93       	st	X, r25
    5bd2:	8e 93       	st	-X, r24
    5bd4:	11 97       	sbiw	r26, 0x01	; 1
    5bd6:	84 e6       	ldi	r24, 0x64	; 100
    5bd8:	92 e0       	ldi	r25, 0x02	; 2
    5bda:	93 83       	std	Z+3, r25	; 0x03
    5bdc:	82 83       	std	Z+2, r24	; 0x02
    5bde:	ce 01       	movw	r24, r28
    5be0:	01 96       	adiw	r24, 0x01	; 1
    5be2:	95 83       	std	Z+5, r25	; 0x05
    5be4:	84 83       	std	Z+4, r24	; 0x04
    5be6:	0e 94 3e 3c 	call	0x787c	; 0x787c <sscanf>
    5bea:	20 e0       	ldi	r18, 0x00	; 0
    5bec:	91 e0       	ldi	r25, 0x01	; 1
    5bee:	ed b7       	in	r30, 0x3d	; 61
    5bf0:	fe b7       	in	r31, 0x3e	; 62
    5bf2:	36 96       	adiw	r30, 0x06	; 6
    5bf4:	0f b6       	in	r0, 0x3f	; 63
    5bf6:	f8 94       	cli
    5bf8:	fe bf       	out	0x3e, r31	; 62
    5bfa:	0f be       	out	0x3f, r0	; 63
    5bfc:	ed bf       	out	0x3d, r30	; 61
	for(uint8_t j = 1; j < i-4; j++)
    5bfe:	f7 01       	movw	r30, r14
    5c00:	34 97       	sbiw	r30, 0x04	; 4
    5c02:	05 c0       	rjmp	.+10     	; 0x5c0e <getGPS+0x490>
	{
		 checksum = checksum ^ lineBuff[j];
    5c04:	a8 56       	subi	r26, 0x68	; 104
    5c06:	bc 4f       	sbci	r27, 0xFC	; 252
    5c08:	8c 91       	ld	r24, X
    5c0a:	28 27       	eor	r18, r24
	checksum = 0;
	targetChecksum[0] = lineBuff[i-3];
	targetChecksum[1] = lineBuff[i-2];
	targetChecksum[2] = '\0';
	sscanf(targetChecksum, "%x", &tSum);
	for(uint8_t j = 1; j < i-4; j++)
    5c0c:	9f 5f       	subi	r25, 0xFF	; 255
    5c0e:	a9 2f       	mov	r26, r25
    5c10:	b0 e0       	ldi	r27, 0x00	; 0
    5c12:	ae 17       	cp	r26, r30
    5c14:	bf 07       	cpc	r27, r31
    5c16:	b4 f3       	brlt	.-20     	; 0x5c04 <getGPS+0x486>
	{
		 checksum = checksum ^ lineBuff[j];
	}

	if(checksum != tSum)
    5c18:	89 81       	ldd	r24, Y+1	; 0x01
    5c1a:	28 17       	cp	r18, r24
    5c1c:	09 f0       	breq	.+2      	; 0x5c20 <getGPS+0x4a2>
    5c1e:	c6 c0       	rjmp	.+396    	; 0x5dac <getGPS+0x62e>

	float tempVdop, tempHdop;
	// Start GPGSA Parse Section

	char *token, *lastToken, *beforeThat;
	token = strtok(lineBuff, ",");
    5c20:	88 e9       	ldi	r24, 0x98	; 152
    5c22:	93 e0       	ldi	r25, 0x03	; 3
    5c24:	6d e9       	ldi	r22, 0x9D	; 157
    5c26:	72 e0       	ldi	r23, 0x02	; 2
    5c28:	0e 94 2a 3b 	call	0x7654	; 0x7654 <strtok>
    5c2c:	0a c0       	rjmp	.+20     	; 0x5c42 <getGPS+0x4c4>
	while(token != NULL)
	{
		beforeThat = lastToken;
		lastToken = token;
		token = strtok(NULL,",");
    5c2e:	80 e0       	ldi	r24, 0x00	; 0
    5c30:	90 e0       	ldi	r25, 0x00	; 0
    5c32:	6d e9       	ldi	r22, 0x9D	; 157
    5c34:	72 e0       	ldi	r23, 0x02	; 2
    5c36:	0e 94 2a 3b 	call	0x7654	; 0x7654 <strtok>
    5c3a:	4f 2d       	mov	r20, r15
    5c3c:	5e 2d       	mov	r21, r14
    5c3e:	f0 2e       	mov	r15, r16
    5c40:	e1 2e       	mov	r14, r17
    5c42:	8c 01       	movw	r16, r24
	float tempVdop, tempHdop;
	// Start GPGSA Parse Section

	char *token, *lastToken, *beforeThat;
	token = strtok(lineBuff, ",");
	while(token != NULL)
    5c44:	00 97       	sbiw	r24, 0x00	; 0
    5c46:	99 f7       	brne	.-26     	; 0x5c2e <getGPS+0x4b0>
	{
		beforeThat = lastToken;
		lastToken = token;
		token = strtok(NULL,",");
	}
	sscanf(beforeThat, "%f", &tempHdop);
    5c48:	00 d0       	rcall	.+0      	; 0x5c4a <getGPS+0x4cc>
    5c4a:	00 d0       	rcall	.+0      	; 0x5c4c <getGPS+0x4ce>
    5c4c:	00 d0       	rcall	.+0      	; 0x5c4e <getGPS+0x4d0>
    5c4e:	ed b7       	in	r30, 0x3d	; 61
    5c50:	fe b7       	in	r31, 0x3e	; 62
    5c52:	31 96       	adiw	r30, 0x01	; 1
    5c54:	ad b7       	in	r26, 0x3d	; 61
    5c56:	be b7       	in	r27, 0x3e	; 62
    5c58:	11 96       	adiw	r26, 0x01	; 1
    5c5a:	4c 93       	st	X, r20
    5c5c:	51 83       	std	Z+1, r21	; 0x01
    5c5e:	8f e9       	ldi	r24, 0x9F	; 159
    5c60:	92 e0       	ldi	r25, 0x02	; 2
    5c62:	93 83       	std	Z+3, r25	; 0x03
    5c64:	82 83       	std	Z+2, r24	; 0x02
    5c66:	ce 01       	movw	r24, r28
    5c68:	4c 96       	adiw	r24, 0x1c	; 28
    5c6a:	95 83       	std	Z+5, r25	; 0x05
    5c6c:	84 83       	std	Z+4, r24	; 0x04
    5c6e:	0e 94 3e 3c 	call	0x787c	; 0x787c <sscanf>
	sscanf(lastToken, "%f*", &tempVdop);
    5c72:	ed b7       	in	r30, 0x3d	; 61
    5c74:	fe b7       	in	r31, 0x3e	; 62
    5c76:	31 96       	adiw	r30, 0x01	; 1
    5c78:	ad b7       	in	r26, 0x3d	; 61
    5c7a:	be b7       	in	r27, 0x3e	; 62
    5c7c:	11 96       	adiw	r26, 0x01	; 1
    5c7e:	fc 92       	st	X, r15
    5c80:	e1 82       	std	Z+1, r14	; 0x01
    5c82:	82 ea       	ldi	r24, 0xA2	; 162
    5c84:	92 e0       	ldi	r25, 0x02	; 2
    5c86:	93 83       	std	Z+3, r25	; 0x03
    5c88:	82 83       	std	Z+2, r24	; 0x02
    5c8a:	ce 01       	movw	r24, r28
    5c8c:	48 96       	adiw	r24, 0x18	; 24
    5c8e:	95 83       	std	Z+5, r25	; 0x05
    5c90:	84 83       	std	Z+4, r24	; 0x04
    5c92:	0e 94 3e 3c 	call	0x787c	; 0x787c <sscanf>

	outputData->hdop = (uint16_t)(tempHdop*10);
    5c96:	6c 8d       	ldd	r22, Y+28	; 0x1c
    5c98:	7d 8d       	ldd	r23, Y+29	; 0x1d
    5c9a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5c9c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5c9e:	20 e0       	ldi	r18, 0x00	; 0
    5ca0:	30 e0       	ldi	r19, 0x00	; 0
    5ca2:	40 e2       	ldi	r20, 0x20	; 32
    5ca4:	51 e4       	ldi	r21, 0x41	; 65
    5ca6:	0e 94 03 39 	call	0x7206	; 0x7206 <__mulsf3>
    5caa:	0e 94 25 38 	call	0x704a	; 0x704a <__fixunssfsi>
    5cae:	f1 01       	movw	r30, r2
    5cb0:	75 87       	std	Z+13, r23	; 0x0d
    5cb2:	64 87       	std	Z+12, r22	; 0x0c
	outputData->vdop = (uint16_t)(tempVdop*10);
    5cb4:	68 8d       	ldd	r22, Y+24	; 0x18
    5cb6:	79 8d       	ldd	r23, Y+25	; 0x19
    5cb8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5cba:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5cbc:	20 e0       	ldi	r18, 0x00	; 0
    5cbe:	30 e0       	ldi	r19, 0x00	; 0
    5cc0:	40 e2       	ldi	r20, 0x20	; 32
    5cc2:	51 e4       	ldi	r21, 0x41	; 65
    5cc4:	0e 94 03 39 	call	0x7206	; 0x7206 <__mulsf3>
    5cc8:	0e 94 25 38 	call	0x704a	; 0x704a <__fixunssfsi>
    5ccc:	d1 01       	movw	r26, r2
    5cce:	1f 96       	adiw	r26, 0x0f	; 15
    5cd0:	7c 93       	st	X, r23
    5cd2:	6e 93       	st	-X, r22
    5cd4:	1e 97       	sbiw	r26, 0x0e	; 14
	// End GPGSA Parse Section

	// Begin GPGGA Acquisition Section

	//Needed so the first comparison works out correctly
	memset(lineBuff, 0x00, 100);
    5cd6:	84 e6       	ldi	r24, 0x64	; 100
    5cd8:	e8 e9       	ldi	r30, 0x98	; 152
    5cda:	f3 e0       	ldi	r31, 0x03	; 3
    5cdc:	df 01       	movw	r26, r30
    5cde:	1d 92       	st	X+, r1
    5ce0:	8a 95       	dec	r24
    5ce2:	e9 f7       	brne	.-6      	; 0x5cde <getGPS+0x560>
    5ce4:	10 e0       	ldi	r17, 0x00	; 0
    5ce6:	ed b7       	in	r30, 0x3d	; 61
    5ce8:	fe b7       	in	r31, 0x3e	; 62
    5cea:	36 96       	adiw	r30, 0x06	; 6
    5cec:	0f b6       	in	r0, 0x3f	; 63
    5cee:	f8 94       	cli
    5cf0:	fe bf       	out	0x3e, r31	; 62
    5cf2:	0f be       	out	0x3f, r0	; 63
    5cf4:	ed bf       	out	0x3d, r30	; 61
    5cf6:	06 c0       	rjmp	.+12     	; 0x5d04 <getGPS+0x586>
	{
		i=0;
		//i < 99 to leave room for the null terminator
		while(((tempChar = (char)uart_getchar()) != '\n') && i < 99)
		{
			lineBuff[i] = tempChar;
    5cf8:	e1 2f       	mov	r30, r17
    5cfa:	f0 e0       	ldi	r31, 0x00	; 0
    5cfc:	e8 56       	subi	r30, 0x68	; 104
    5cfe:	fc 4f       	sbci	r31, 0xFC	; 252
    5d00:	80 83       	st	Z, r24
			i++;
    5d02:	1f 5f       	subi	r17, 0xFF	; 255
	errorTracker = 0;
	do
	{
		i=0;
		//i < 99 to leave room for the null terminator
		while(((tempChar = (char)uart_getchar()) != '\n') && i < 99)
    5d04:	0e 94 c2 13 	call	0x2784	; 0x2784 <uart_getchar>
    5d08:	8a 30       	cpi	r24, 0x0A	; 10
    5d0a:	11 f0       	breq	.+4      	; 0x5d10 <getGPS+0x592>
    5d0c:	13 36       	cpi	r17, 0x63	; 99
    5d0e:	a0 f3       	brcs	.-24     	; 0x5cf8 <getGPS+0x57a>
		{
			lineBuff[i] = tempChar;
			i++;
		}
		lineBuff[i] = '\0';
    5d10:	e1 2e       	mov	r14, r17
    5d12:	ff 24       	eor	r15, r15
    5d14:	87 01       	movw	r16, r14
    5d16:	08 56       	subi	r16, 0x68	; 104
    5d18:	1c 4f       	sbci	r17, 0xFC	; 252
    5d1a:	d8 01       	movw	r26, r16
    5d1c:	1c 92       	st	X, r1
	} while((strncmp("$GPGGA", lineBuff, 6) != 0) && errorTracker < 100);
    5d1e:	81 e7       	ldi	r24, 0x71	; 113
    5d20:	92 e0       	ldi	r25, 0x02	; 2
    5d22:	68 e9       	ldi	r22, 0x98	; 152
    5d24:	73 e0       	ldi	r23, 0x03	; 3
    5d26:	46 e0       	ldi	r20, 0x06	; 6
    5d28:	50 e0       	ldi	r21, 0x00	; 0
    5d2a:	0e 94 2f 3b 	call	0x765e	; 0x765e <strncmp>
    5d2e:	00 97       	sbiw	r24, 0x00	; 0
    5d30:	11 f0       	breq	.+4      	; 0x5d36 <getGPS+0x5b8>
    5d32:	10 e0       	ldi	r17, 0x00	; 0
    5d34:	e7 cf       	rjmp	.-50     	; 0x5d04 <getGPS+0x586>
		outputData->status  = 3;
		return;
	}

	checksum = 0;
	targetChecksum[0] = lineBuff[i-3];
    5d36:	f8 01       	movw	r30, r16
    5d38:	33 97       	sbiw	r30, 0x03	; 3
    5d3a:	80 81       	ld	r24, Z
    5d3c:	8d 83       	std	Y+5, r24	; 0x05
	targetChecksum[1] = lineBuff[i-2];
    5d3e:	f8 01       	movw	r30, r16
    5d40:	32 97       	sbiw	r30, 0x02	; 2
    5d42:	80 81       	ld	r24, Z
    5d44:	8e 83       	std	Y+6, r24	; 0x06
	targetChecksum[2] = '\0';
    5d46:	1f 82       	std	Y+7, r1	; 0x07
	sscanf(targetChecksum, "%x", &tSum);
    5d48:	00 d0       	rcall	.+0      	; 0x5d4a <getGPS+0x5cc>
    5d4a:	00 d0       	rcall	.+0      	; 0x5d4c <getGPS+0x5ce>
    5d4c:	00 d0       	rcall	.+0      	; 0x5d4e <getGPS+0x5d0>
    5d4e:	ed b7       	in	r30, 0x3d	; 61
    5d50:	fe b7       	in	r31, 0x3e	; 62
    5d52:	31 96       	adiw	r30, 0x01	; 1
    5d54:	ce 01       	movw	r24, r28
    5d56:	05 96       	adiw	r24, 0x05	; 5
    5d58:	ad b7       	in	r26, 0x3d	; 61
    5d5a:	be b7       	in	r27, 0x3e	; 62
    5d5c:	12 96       	adiw	r26, 0x02	; 2
    5d5e:	9c 93       	st	X, r25
    5d60:	8e 93       	st	-X, r24
    5d62:	11 97       	sbiw	r26, 0x01	; 1
    5d64:	84 e6       	ldi	r24, 0x64	; 100
    5d66:	92 e0       	ldi	r25, 0x02	; 2
    5d68:	93 83       	std	Z+3, r25	; 0x03
    5d6a:	82 83       	std	Z+2, r24	; 0x02
    5d6c:	ce 01       	movw	r24, r28
    5d6e:	01 96       	adiw	r24, 0x01	; 1
    5d70:	95 83       	std	Z+5, r25	; 0x05
    5d72:	84 83       	std	Z+4, r24	; 0x04
    5d74:	0e 94 3e 3c 	call	0x787c	; 0x787c <sscanf>
    5d78:	20 e0       	ldi	r18, 0x00	; 0
    5d7a:	91 e0       	ldi	r25, 0x01	; 1
    5d7c:	ed b7       	in	r30, 0x3d	; 61
    5d7e:	fe b7       	in	r31, 0x3e	; 62
    5d80:	36 96       	adiw	r30, 0x06	; 6
    5d82:	0f b6       	in	r0, 0x3f	; 63
    5d84:	f8 94       	cli
    5d86:	fe bf       	out	0x3e, r31	; 62
    5d88:	0f be       	out	0x3f, r0	; 63
    5d8a:	ed bf       	out	0x3d, r30	; 61
	for(uint8_t j = 1; j < i-4; j++)
    5d8c:	f7 01       	movw	r30, r14
    5d8e:	34 97       	sbiw	r30, 0x04	; 4
    5d90:	05 c0       	rjmp	.+10     	; 0x5d9c <getGPS+0x61e>
	{
		 checksum = checksum ^ lineBuff[j];
    5d92:	a8 56       	subi	r26, 0x68	; 104
    5d94:	bc 4f       	sbci	r27, 0xFC	; 252
    5d96:	8c 91       	ld	r24, X
    5d98:	28 27       	eor	r18, r24
	checksum = 0;
	targetChecksum[0] = lineBuff[i-3];
	targetChecksum[1] = lineBuff[i-2];
	targetChecksum[2] = '\0';
	sscanf(targetChecksum, "%x", &tSum);
	for(uint8_t j = 1; j < i-4; j++)
    5d9a:	9f 5f       	subi	r25, 0xFF	; 255
    5d9c:	a9 2f       	mov	r26, r25
    5d9e:	b0 e0       	ldi	r27, 0x00	; 0
    5da0:	ae 17       	cp	r26, r30
    5da2:	bf 07       	cpc	r27, r31
    5da4:	b4 f3       	brlt	.-20     	; 0x5d92 <getGPS+0x614>
	{
		 checksum = checksum ^ lineBuff[j];
	}

	if(checksum != tSum)
    5da6:	89 81       	ldd	r24, Y+1	; 0x01
    5da8:	28 17       	cp	r18, r24
    5daa:	21 f0       	breq	.+8      	; 0x5db4 <getGPS+0x636>
	{
		outputData->status = 2;
    5dac:	82 e0       	ldi	r24, 0x02	; 2
    5dae:	d1 01       	movw	r26, r2
    5db0:	8c 93       	st	X, r24
    5db2:	44 c0       	rjmp	.+136    	; 0x5e3c <getGPS+0x6be>

	// Start GPGGA Parse Section



	sscanf( lineBuff,
    5db4:	ed b7       	in	r30, 0x3d	; 61
    5db6:	fe b7       	in	r31, 0x3e	; 62
    5db8:	38 97       	sbiw	r30, 0x08	; 8
    5dba:	0f b6       	in	r0, 0x3f	; 63
    5dbc:	f8 94       	cli
    5dbe:	fe bf       	out	0x3e, r31	; 62
    5dc0:	0f be       	out	0x3f, r0	; 63
    5dc2:	ed bf       	out	0x3d, r30	; 61
    5dc4:	31 96       	adiw	r30, 0x01	; 1
    5dc6:	88 e9       	ldi	r24, 0x98	; 152
    5dc8:	93 e0       	ldi	r25, 0x03	; 3
    5dca:	ad b7       	in	r26, 0x3d	; 61
    5dcc:	be b7       	in	r27, 0x3e	; 62
    5dce:	12 96       	adiw	r26, 0x02	; 2
    5dd0:	9c 93       	st	X, r25
    5dd2:	8e 93       	st	-X, r24
    5dd4:	11 97       	sbiw	r26, 0x01	; 1
    5dd6:	86 ea       	ldi	r24, 0xA6	; 166
    5dd8:	92 e0       	ldi	r25, 0x02	; 2
    5dda:	93 83       	std	Z+3, r25	; 0x03
    5ddc:	82 83       	std	Z+2, r24	; 0x02
    5dde:	45 e1       	ldi	r20, 0x15	; 21
    5de0:	50 e0       	ldi	r21, 0x00	; 0
    5de2:	24 0e       	add	r2, r20
    5de4:	35 1e       	adc	r3, r21
    5de6:	35 82       	std	Z+5, r3	; 0x05
    5de8:	24 82       	std	Z+4, r2	; 0x04
    5dea:	8b ee       	ldi	r24, 0xEB	; 235
    5dec:	9f ef       	ldi	r25, 0xFF	; 255
    5dee:	28 0e       	add	r2, r24
    5df0:	39 1e       	adc	r3, r25
    5df2:	ce 01       	movw	r24, r28
    5df4:	44 96       	adiw	r24, 0x14	; 20
    5df6:	97 83       	std	Z+7, r25	; 0x07
    5df8:	86 83       	std	Z+6, r24	; 0x06
    5dfa:	0e 94 3e 3c 	call	0x787c	; 0x787c <sscanf>
			"$GPGGA,%*f,%*f,%*c,%*f,%*c,%*d,%d,%*f,%f",
			&outputData->numberOfSats, &altitude );

	outputData->altitude = (uint16_t)altitude;
    5dfe:	6c 89       	ldd	r22, Y+20	; 0x14
    5e00:	7d 89       	ldd	r23, Y+21	; 0x15
    5e02:	8e 89       	ldd	r24, Y+22	; 0x16
    5e04:	9f 89       	ldd	r25, Y+23	; 0x17
    5e06:	0e 94 25 38 	call	0x704a	; 0x704a <__fixunssfsi>
    5e0a:	d1 01       	movw	r26, r2
    5e0c:	54 96       	adiw	r26, 0x14	; 20
    5e0e:	7c 93       	st	X, r23
    5e10:	6e 93       	st	-X, r22
    5e12:	53 97       	sbiw	r26, 0x13	; 19
	// End GPGGA Parse Section

	switch(tempStatus)
    5e14:	ed b7       	in	r30, 0x3d	; 61
    5e16:	fe b7       	in	r31, 0x3e	; 62
    5e18:	38 96       	adiw	r30, 0x08	; 8
    5e1a:	0f b6       	in	r0, 0x3f	; 63
    5e1c:	f8 94       	cli
    5e1e:	fe bf       	out	0x3e, r31	; 62
    5e20:	0f be       	out	0x3f, r0	; 63
    5e22:	ed bf       	out	0x3d, r30	; 61
    5e24:	8c 81       	ldd	r24, Y+4	; 0x04
    5e26:	81 34       	cpi	r24, 0x41	; 65
    5e28:	19 f0       	breq	.+6      	; 0x5e30 <getGPS+0x6b2>
    5e2a:	86 35       	cpi	r24, 0x56	; 86
    5e2c:	39 f4       	brne	.+14     	; 0x5e3c <getGPS+0x6be>
    5e2e:	03 c0       	rjmp	.+6      	; 0x5e36 <getGPS+0x6b8>
	{
		case 'A':
			outputData->status = 0;
    5e30:	d1 01       	movw	r26, r2
    5e32:	1c 92       	st	X, r1
    5e34:	03 c0       	rjmp	.+6      	; 0x5e3c <getGPS+0x6be>
			break;
		case 'V':
			outputData->status = 1;
    5e36:	81 e0       	ldi	r24, 0x01	; 1
    5e38:	f1 01       	movw	r30, r2
    5e3a:	80 83       	st	Z, r24
			break;
	}

}
    5e3c:	6f 96       	adiw	r28, 0x1f	; 31
    5e3e:	0f b6       	in	r0, 0x3f	; 63
    5e40:	f8 94       	cli
    5e42:	de bf       	out	0x3e, r29	; 62
    5e44:	0f be       	out	0x3f, r0	; 63
    5e46:	cd bf       	out	0x3d, r28	; 61
    5e48:	cf 91       	pop	r28
    5e4a:	df 91       	pop	r29
    5e4c:	1f 91       	pop	r17
    5e4e:	0f 91       	pop	r16
    5e50:	ff 90       	pop	r15
    5e52:	ef 90       	pop	r14
    5e54:	df 90       	pop	r13
    5e56:	cf 90       	pop	r12
    5e58:	bf 90       	pop	r11
    5e5a:	af 90       	pop	r10
    5e5c:	9f 90       	pop	r9
    5e5e:	8f 90       	pop	r8
    5e60:	7f 90       	pop	r7
    5e62:	6f 90       	pop	r6
    5e64:	5f 90       	pop	r5
    5e66:	4f 90       	pop	r4
    5e68:	3f 90       	pop	r3
    5e6a:	2f 90       	pop	r2
    5e6c:	08 95       	ret

00005e6e <scheduleQueueGetTop>:
    5e6e:	cf 92       	push	r12
    5e70:	df 92       	push	r13
    5e72:	ef 92       	push	r14
    5e74:	ff 92       	push	r15
    5e76:	0f 93       	push	r16
    5e78:	1f 93       	push	r17
    5e7a:	cf 93       	push	r28
    5e7c:	df 93       	push	r29
    5e7e:	ec 01       	movw	r28, r24
    5e80:	6b 01       	movw	r12, r22
    5e82:	90 91 14 04 	lds	r25, 0x0414
    5e86:	80 91 15 04 	lds	r24, 0x0415
    5e8a:	89 17       	cp	r24, r25
    5e8c:	11 f4       	brne	.+4      	; 0x5e92 <scheduleQueueGetTop+0x24>
    5e8e:	81 e0       	ldi	r24, 0x01	; 1
    5e90:	23 c0       	rjmp	.+70     	; 0x5ed8 <scheduleQueueGetTop+0x6a>
    5e92:	89 2f       	mov	r24, r25
    5e94:	90 e0       	ldi	r25, 0x00	; 0
    5e96:	fc 01       	movw	r30, r24
    5e98:	ee 0f       	add	r30, r30
    5e9a:	ff 1f       	adc	r31, r31
    5e9c:	e4 50       	subi	r30, 0x04	; 4
    5e9e:	fc 4f       	sbci	r31, 0xFC	; 252
    5ea0:	e0 80       	ld	r14, Z
    5ea2:	f1 80       	ldd	r15, Z+1	; 0x01
    5ea4:	fc 01       	movw	r30, r24
    5ea6:	ee 0f       	add	r30, r30
    5ea8:	ff 1f       	adc	r31, r31
    5eaa:	ee 0f       	add	r30, r30
    5eac:	ff 1f       	adc	r31, r31
    5eae:	e5 5a       	subi	r30, 0xA5	; 165
    5eb0:	fb 4f       	sbci	r31, 0xFB	; 251
    5eb2:	00 81       	ld	r16, Z
    5eb4:	11 81       	ldd	r17, Z+1	; 0x01
    5eb6:	22 81       	ldd	r18, Z+2	; 0x02
    5eb8:	33 81       	ldd	r19, Z+3	; 0x03
    5eba:	01 96       	adiw	r24, 0x01	; 1
    5ebc:	6c e0       	ldi	r22, 0x0C	; 12
    5ebe:	70 e0       	ldi	r23, 0x00	; 0
    5ec0:	0e 94 91 39 	call	0x7322	; 0x7322 <__divmodhi4>
    5ec4:	80 93 14 04 	sts	0x0414, r24
    5ec8:	f9 82       	std	Y+1, r15	; 0x01
    5eca:	e8 82       	st	Y, r14
    5ecc:	f6 01       	movw	r30, r12
    5ece:	00 83       	st	Z, r16
    5ed0:	11 83       	std	Z+1, r17	; 0x01
    5ed2:	22 83       	std	Z+2, r18	; 0x02
    5ed4:	33 83       	std	Z+3, r19	; 0x03
    5ed6:	80 e0       	ldi	r24, 0x00	; 0
    5ed8:	df 91       	pop	r29
    5eda:	cf 91       	pop	r28
    5edc:	1f 91       	pop	r17
    5ede:	0f 91       	pop	r16
    5ee0:	ff 90       	pop	r15
    5ee2:	ef 90       	pop	r14
    5ee4:	df 90       	pop	r13
    5ee6:	cf 90       	pop	r12
    5ee8:	08 95       	ret

00005eea <scheduleQueueAdd>:
    5eea:	cf 92       	push	r12
    5eec:	df 92       	push	r13
    5eee:	ef 92       	push	r14
    5ef0:	ff 92       	push	r15
    5ef2:	0f 93       	push	r16
    5ef4:	1f 93       	push	r17
    5ef6:	cf 93       	push	r28
    5ef8:	df 93       	push	r29
    5efa:	6c 01       	movw	r12, r24
    5efc:	7a 01       	movw	r14, r20
    5efe:	8b 01       	movw	r16, r22
    5f00:	80 91 15 04 	lds	r24, 0x0415
    5f04:	c8 2f       	mov	r28, r24
    5f06:	d0 e0       	ldi	r29, 0x00	; 0
    5f08:	ce 01       	movw	r24, r28
    5f0a:	01 96       	adiw	r24, 0x01	; 1
    5f0c:	6c e0       	ldi	r22, 0x0C	; 12
    5f0e:	70 e0       	ldi	r23, 0x00	; 0
    5f10:	0e 94 91 39 	call	0x7322	; 0x7322 <__divmodhi4>
    5f14:	9c 01       	movw	r18, r24
    5f16:	80 91 14 04 	lds	r24, 0x0414
    5f1a:	90 e0       	ldi	r25, 0x00	; 0
    5f1c:	28 17       	cp	r18, r24
    5f1e:	39 07       	cpc	r19, r25
    5f20:	91 f0       	breq	.+36     	; 0x5f46 <scheduleQueueAdd+0x5c>
    5f22:	cc 0f       	add	r28, r28
    5f24:	dd 1f       	adc	r29, r29
    5f26:	fe 01       	movw	r30, r28
    5f28:	e4 50       	subi	r30, 0x04	; 4
    5f2a:	fc 4f       	sbci	r31, 0xFC	; 252
    5f2c:	d1 82       	std	Z+1, r13	; 0x01
    5f2e:	c0 82       	st	Z, r12
    5f30:	cc 0f       	add	r28, r28
    5f32:	dd 1f       	adc	r29, r29
    5f34:	c5 5a       	subi	r28, 0xA5	; 165
    5f36:	db 4f       	sbci	r29, 0xFB	; 251
    5f38:	e8 82       	st	Y, r14
    5f3a:	f9 82       	std	Y+1, r15	; 0x01
    5f3c:	0a 83       	std	Y+2, r16	; 0x02
    5f3e:	1b 83       	std	Y+3, r17	; 0x03
    5f40:	20 93 15 04 	sts	0x0415, r18
    5f44:	0b c0       	rjmp	.+22     	; 0x5f5c <scheduleQueueAdd+0x72>
    5f46:	00 d0       	rcall	.+0      	; 0x5f48 <scheduleQueueAdd+0x5e>
    5f48:	8f ec       	ldi	r24, 0xCF	; 207
    5f4a:	92 e0       	ldi	r25, 0x02	; 2
    5f4c:	ed b7       	in	r30, 0x3d	; 61
    5f4e:	fe b7       	in	r31, 0x3e	; 62
    5f50:	92 83       	std	Z+2, r25	; 0x02
    5f52:	81 83       	std	Z+1, r24	; 0x01
    5f54:	0e 94 77 13 	call	0x26ee	; 0x26ee <lprintf>
    5f58:	0f 90       	pop	r0
    5f5a:	0f 90       	pop	r0
    5f5c:	df 91       	pop	r29
    5f5e:	cf 91       	pop	r28
    5f60:	1f 91       	pop	r17
    5f62:	0f 91       	pop	r16
    5f64:	ff 90       	pop	r15
    5f66:	ef 90       	pop	r14
    5f68:	df 90       	pop	r13
    5f6a:	cf 90       	pop	r12
    5f6c:	08 95       	ret

00005f6e <vfprintf>:
    5f6e:	a1 e1       	ldi	r26, 0x11	; 17
    5f70:	b0 e0       	ldi	r27, 0x00	; 0
    5f72:	ed eb       	ldi	r30, 0xBD	; 189
    5f74:	ff e2       	ldi	r31, 0x2F	; 47
    5f76:	0c 94 e1 39 	jmp	0x73c2	; 0x73c2 <__prologue_saves__>
    5f7a:	3c 01       	movw	r6, r24
    5f7c:	7f 87       	std	Y+15, r23	; 0x0f
    5f7e:	6e 87       	std	Y+14, r22	; 0x0e
    5f80:	6a 01       	movw	r12, r20
    5f82:	fc 01       	movw	r30, r24
    5f84:	17 82       	std	Z+7, r1	; 0x07
    5f86:	16 82       	std	Z+6, r1	; 0x06
    5f88:	83 81       	ldd	r24, Z+3	; 0x03
    5f8a:	81 fd       	sbrc	r24, 1
    5f8c:	03 c0       	rjmp	.+6      	; 0x5f94 <vfprintf+0x26>
    5f8e:	6f ef       	ldi	r22, 0xFF	; 255
    5f90:	7f ef       	ldi	r23, 0xFF	; 255
    5f92:	6f c3       	rjmp	.+1758   	; 0x6672 <vfprintf+0x704>
    5f94:	9e 01       	movw	r18, r28
    5f96:	2f 5f       	subi	r18, 0xFF	; 255
    5f98:	3f 4f       	sbci	r19, 0xFF	; 255
    5f9a:	39 8b       	std	Y+17, r19	; 0x11
    5f9c:	28 8b       	std	Y+16, r18	; 0x10
    5f9e:	f3 01       	movw	r30, r6
    5fa0:	23 81       	ldd	r18, Z+3	; 0x03
    5fa2:	ee 85       	ldd	r30, Y+14	; 0x0e
    5fa4:	ff 85       	ldd	r31, Y+15	; 0x0f
    5fa6:	23 fd       	sbrc	r18, 3
    5fa8:	85 91       	lpm	r24, Z+
    5faa:	23 ff       	sbrs	r18, 3
    5fac:	81 91       	ld	r24, Z+
    5fae:	ff 87       	std	Y+15, r31	; 0x0f
    5fb0:	ee 87       	std	Y+14, r30	; 0x0e
    5fb2:	88 23       	and	r24, r24
    5fb4:	09 f4       	brne	.+2      	; 0x5fb8 <vfprintf+0x4a>
    5fb6:	5a c3       	rjmp	.+1716   	; 0x666c <vfprintf+0x6fe>
    5fb8:	85 32       	cpi	r24, 0x25	; 37
    5fba:	51 f4       	brne	.+20     	; 0x5fd0 <vfprintf+0x62>
    5fbc:	ee 85       	ldd	r30, Y+14	; 0x0e
    5fbe:	ff 85       	ldd	r31, Y+15	; 0x0f
    5fc0:	23 fd       	sbrc	r18, 3
    5fc2:	85 91       	lpm	r24, Z+
    5fc4:	23 ff       	sbrs	r18, 3
    5fc6:	81 91       	ld	r24, Z+
    5fc8:	ff 87       	std	Y+15, r31	; 0x0f
    5fca:	ee 87       	std	Y+14, r30	; 0x0e
    5fcc:	85 32       	cpi	r24, 0x25	; 37
    5fce:	29 f4       	brne	.+10     	; 0x5fda <vfprintf+0x6c>
    5fd0:	90 e0       	ldi	r25, 0x00	; 0
    5fd2:	b3 01       	movw	r22, r6
    5fd4:	0e 94 c5 3b 	call	0x778a	; 0x778a <fputc>
    5fd8:	e2 cf       	rjmp	.-60     	; 0x5f9e <vfprintf+0x30>
    5fda:	98 2f       	mov	r25, r24
    5fdc:	10 e0       	ldi	r17, 0x00	; 0
    5fde:	88 24       	eor	r8, r8
    5fe0:	99 24       	eor	r9, r9
    5fe2:	10 32       	cpi	r17, 0x20	; 32
    5fe4:	b0 f4       	brcc	.+44     	; 0x6012 <vfprintf+0xa4>
    5fe6:	9b 32       	cpi	r25, 0x2B	; 43
    5fe8:	69 f0       	breq	.+26     	; 0x6004 <vfprintf+0x96>
    5fea:	9c 32       	cpi	r25, 0x2C	; 44
    5fec:	28 f4       	brcc	.+10     	; 0x5ff8 <vfprintf+0x8a>
    5fee:	90 32       	cpi	r25, 0x20	; 32
    5ff0:	51 f0       	breq	.+20     	; 0x6006 <vfprintf+0x98>
    5ff2:	93 32       	cpi	r25, 0x23	; 35
    5ff4:	71 f4       	brne	.+28     	; 0x6012 <vfprintf+0xa4>
    5ff6:	0b c0       	rjmp	.+22     	; 0x600e <vfprintf+0xa0>
    5ff8:	9d 32       	cpi	r25, 0x2D	; 45
    5ffa:	39 f0       	breq	.+14     	; 0x600a <vfprintf+0x9c>
    5ffc:	90 33       	cpi	r25, 0x30	; 48
    5ffe:	49 f4       	brne	.+18     	; 0x6012 <vfprintf+0xa4>
    6000:	11 60       	ori	r17, 0x01	; 1
    6002:	28 c0       	rjmp	.+80     	; 0x6054 <vfprintf+0xe6>
    6004:	12 60       	ori	r17, 0x02	; 2
    6006:	14 60       	ori	r17, 0x04	; 4
    6008:	25 c0       	rjmp	.+74     	; 0x6054 <vfprintf+0xe6>
    600a:	18 60       	ori	r17, 0x08	; 8
    600c:	23 c0       	rjmp	.+70     	; 0x6054 <vfprintf+0xe6>
    600e:	10 61       	ori	r17, 0x10	; 16
    6010:	21 c0       	rjmp	.+66     	; 0x6054 <vfprintf+0xe6>
    6012:	17 fd       	sbrc	r17, 7
    6014:	2a c0       	rjmp	.+84     	; 0x606a <vfprintf+0xfc>
    6016:	89 2f       	mov	r24, r25
    6018:	80 53       	subi	r24, 0x30	; 48
    601a:	8a 30       	cpi	r24, 0x0A	; 10
    601c:	78 f4       	brcc	.+30     	; 0x603c <vfprintf+0xce>
    601e:	16 ff       	sbrs	r17, 6
    6020:	06 c0       	rjmp	.+12     	; 0x602e <vfprintf+0xc0>
    6022:	fa e0       	ldi	r31, 0x0A	; 10
    6024:	9f 9e       	mul	r9, r31
    6026:	90 2c       	mov	r9, r0
    6028:	11 24       	eor	r1, r1
    602a:	98 0e       	add	r9, r24
    602c:	13 c0       	rjmp	.+38     	; 0x6054 <vfprintf+0xe6>
    602e:	3a e0       	ldi	r19, 0x0A	; 10
    6030:	83 9e       	mul	r8, r19
    6032:	80 2c       	mov	r8, r0
    6034:	11 24       	eor	r1, r1
    6036:	88 0e       	add	r8, r24
    6038:	10 62       	ori	r17, 0x20	; 32
    603a:	0c c0       	rjmp	.+24     	; 0x6054 <vfprintf+0xe6>
    603c:	9e 32       	cpi	r25, 0x2E	; 46
    603e:	21 f4       	brne	.+8      	; 0x6048 <vfprintf+0xda>
    6040:	16 fd       	sbrc	r17, 6
    6042:	14 c3       	rjmp	.+1576   	; 0x666c <vfprintf+0x6fe>
    6044:	10 64       	ori	r17, 0x40	; 64
    6046:	06 c0       	rjmp	.+12     	; 0x6054 <vfprintf+0xe6>
    6048:	9c 36       	cpi	r25, 0x6C	; 108
    604a:	11 f4       	brne	.+4      	; 0x6050 <vfprintf+0xe2>
    604c:	10 68       	ori	r17, 0x80	; 128
    604e:	02 c0       	rjmp	.+4      	; 0x6054 <vfprintf+0xe6>
    6050:	98 36       	cpi	r25, 0x68	; 104
    6052:	59 f4       	brne	.+22     	; 0x606a <vfprintf+0xfc>
    6054:	ee 85       	ldd	r30, Y+14	; 0x0e
    6056:	ff 85       	ldd	r31, Y+15	; 0x0f
    6058:	23 fd       	sbrc	r18, 3
    605a:	95 91       	lpm	r25, Z+
    605c:	23 ff       	sbrs	r18, 3
    605e:	91 91       	ld	r25, Z+
    6060:	ff 87       	std	Y+15, r31	; 0x0f
    6062:	ee 87       	std	Y+14, r30	; 0x0e
    6064:	99 23       	and	r25, r25
    6066:	09 f0       	breq	.+2      	; 0x606a <vfprintf+0xfc>
    6068:	bc cf       	rjmp	.-136    	; 0x5fe2 <vfprintf+0x74>
    606a:	89 2f       	mov	r24, r25
    606c:	85 54       	subi	r24, 0x45	; 69
    606e:	83 30       	cpi	r24, 0x03	; 3
    6070:	20 f4       	brcc	.+8      	; 0x607a <vfprintf+0x10c>
    6072:	81 2f       	mov	r24, r17
    6074:	80 61       	ori	r24, 0x10	; 16
    6076:	90 5e       	subi	r25, 0xE0	; 224
    6078:	07 c0       	rjmp	.+14     	; 0x6088 <vfprintf+0x11a>
    607a:	89 2f       	mov	r24, r25
    607c:	85 56       	subi	r24, 0x65	; 101
    607e:	83 30       	cpi	r24, 0x03	; 3
    6080:	08 f0       	brcs	.+2      	; 0x6084 <vfprintf+0x116>
    6082:	9f c1       	rjmp	.+830    	; 0x63c2 <vfprintf+0x454>
    6084:	81 2f       	mov	r24, r17
    6086:	8f 7e       	andi	r24, 0xEF	; 239
    6088:	86 fd       	sbrc	r24, 6
    608a:	02 c0       	rjmp	.+4      	; 0x6090 <vfprintf+0x122>
    608c:	76 e0       	ldi	r23, 0x06	; 6
    608e:	97 2e       	mov	r9, r23
    6090:	6f e3       	ldi	r22, 0x3F	; 63
    6092:	f6 2e       	mov	r15, r22
    6094:	f8 22       	and	r15, r24
    6096:	95 36       	cpi	r25, 0x65	; 101
    6098:	19 f4       	brne	.+6      	; 0x60a0 <vfprintf+0x132>
    609a:	f0 e4       	ldi	r31, 0x40	; 64
    609c:	ff 2a       	or	r15, r31
    609e:	07 c0       	rjmp	.+14     	; 0x60ae <vfprintf+0x140>
    60a0:	96 36       	cpi	r25, 0x66	; 102
    60a2:	19 f4       	brne	.+6      	; 0x60aa <vfprintf+0x13c>
    60a4:	20 e8       	ldi	r18, 0x80	; 128
    60a6:	f2 2a       	or	r15, r18
    60a8:	02 c0       	rjmp	.+4      	; 0x60ae <vfprintf+0x140>
    60aa:	91 10       	cpse	r9, r1
    60ac:	9a 94       	dec	r9
    60ae:	f7 fe       	sbrs	r15, 7
    60b0:	0a c0       	rjmp	.+20     	; 0x60c6 <vfprintf+0x158>
    60b2:	3b e3       	ldi	r19, 0x3B	; 59
    60b4:	39 15       	cp	r19, r9
    60b6:	18 f4       	brcc	.+6      	; 0x60be <vfprintf+0x150>
    60b8:	5c e3       	ldi	r21, 0x3C	; 60
    60ba:	b5 2e       	mov	r11, r21
    60bc:	02 c0       	rjmp	.+4      	; 0x60c2 <vfprintf+0x154>
    60be:	b9 2c       	mov	r11, r9
    60c0:	b3 94       	inc	r11
    60c2:	27 e0       	ldi	r18, 0x07	; 7
    60c4:	09 c0       	rjmp	.+18     	; 0x60d8 <vfprintf+0x16a>
    60c6:	47 e0       	ldi	r20, 0x07	; 7
    60c8:	49 15       	cp	r20, r9
    60ca:	20 f4       	brcc	.+8      	; 0x60d4 <vfprintf+0x166>
    60cc:	bb 24       	eor	r11, r11
    60ce:	47 e0       	ldi	r20, 0x07	; 7
    60d0:	94 2e       	mov	r9, r20
    60d2:	f7 cf       	rjmp	.-18     	; 0x60c2 <vfprintf+0x154>
    60d4:	29 2d       	mov	r18, r9
    60d6:	bb 24       	eor	r11, r11
    60d8:	c6 01       	movw	r24, r12
    60da:	04 96       	adiw	r24, 0x04	; 4
    60dc:	9d 87       	std	Y+13, r25	; 0x0d
    60de:	8c 87       	std	Y+12, r24	; 0x0c
    60e0:	f6 01       	movw	r30, r12
    60e2:	60 81       	ld	r22, Z
    60e4:	71 81       	ldd	r23, Z+1	; 0x01
    60e6:	82 81       	ldd	r24, Z+2	; 0x02
    60e8:	93 81       	ldd	r25, Z+3	; 0x03
    60ea:	ae 01       	movw	r20, r28
    60ec:	4f 5f       	subi	r20, 0xFF	; 255
    60ee:	5f 4f       	sbci	r21, 0xFF	; 255
    60f0:	0b 2d       	mov	r16, r11
    60f2:	0e 94 2c 3a 	call	0x7458	; 0x7458 <__ftoa_engine>
    60f6:	6c 01       	movw	r12, r24
    60f8:	09 81       	ldd	r16, Y+1	; 0x01
    60fa:	20 2e       	mov	r2, r16
    60fc:	33 24       	eor	r3, r3
    60fe:	00 ff       	sbrs	r16, 0
    6100:	04 c0       	rjmp	.+8      	; 0x610a <vfprintf+0x19c>
    6102:	03 fd       	sbrc	r16, 3
    6104:	02 c0       	rjmp	.+4      	; 0x610a <vfprintf+0x19c>
    6106:	1d e2       	ldi	r17, 0x2D	; 45
    6108:	09 c0       	rjmp	.+18     	; 0x611c <vfprintf+0x1ae>
    610a:	f1 fe       	sbrs	r15, 1
    610c:	02 c0       	rjmp	.+4      	; 0x6112 <vfprintf+0x1a4>
    610e:	1b e2       	ldi	r17, 0x2B	; 43
    6110:	05 c0       	rjmp	.+10     	; 0x611c <vfprintf+0x1ae>
    6112:	f2 fc       	sbrc	r15, 2
    6114:	02 c0       	rjmp	.+4      	; 0x611a <vfprintf+0x1ac>
    6116:	10 e0       	ldi	r17, 0x00	; 0
    6118:	01 c0       	rjmp	.+2      	; 0x611c <vfprintf+0x1ae>
    611a:	10 e2       	ldi	r17, 0x20	; 32
    611c:	c1 01       	movw	r24, r2
    611e:	8c 70       	andi	r24, 0x0C	; 12
    6120:	90 70       	andi	r25, 0x00	; 0
    6122:	89 2b       	or	r24, r25
    6124:	b9 f1       	breq	.+110    	; 0x6194 <vfprintf+0x226>
    6126:	11 23       	and	r17, r17
    6128:	11 f4       	brne	.+4      	; 0x612e <vfprintf+0x1c0>
    612a:	83 e0       	ldi	r24, 0x03	; 3
    612c:	01 c0       	rjmp	.+2      	; 0x6130 <vfprintf+0x1c2>
    612e:	84 e0       	ldi	r24, 0x04	; 4
    6130:	88 15       	cp	r24, r8
    6132:	10 f0       	brcs	.+4      	; 0x6138 <vfprintf+0x1ca>
    6134:	88 24       	eor	r8, r8
    6136:	0a c0       	rjmp	.+20     	; 0x614c <vfprintf+0x1de>
    6138:	88 1a       	sub	r8, r24
    613a:	f3 fc       	sbrc	r15, 3
    613c:	07 c0       	rjmp	.+14     	; 0x614c <vfprintf+0x1de>
    613e:	80 e2       	ldi	r24, 0x20	; 32
    6140:	90 e0       	ldi	r25, 0x00	; 0
    6142:	b3 01       	movw	r22, r6
    6144:	0e 94 c5 3b 	call	0x778a	; 0x778a <fputc>
    6148:	8a 94       	dec	r8
    614a:	c9 f7       	brne	.-14     	; 0x613e <vfprintf+0x1d0>
    614c:	11 23       	and	r17, r17
    614e:	29 f0       	breq	.+10     	; 0x615a <vfprintf+0x1ec>
    6150:	81 2f       	mov	r24, r17
    6152:	90 e0       	ldi	r25, 0x00	; 0
    6154:	b3 01       	movw	r22, r6
    6156:	0e 94 c5 3b 	call	0x778a	; 0x778a <fputc>
    615a:	23 fe       	sbrs	r2, 3
    615c:	03 c0       	rjmp	.+6      	; 0x6164 <vfprintf+0x1f6>
    615e:	01 e6       	ldi	r16, 0x61	; 97
    6160:	18 e0       	ldi	r17, 0x08	; 8
    6162:	0e c0       	rjmp	.+28     	; 0x6180 <vfprintf+0x212>
    6164:	05 e6       	ldi	r16, 0x65	; 101
    6166:	18 e0       	ldi	r17, 0x08	; 8
    6168:	0b c0       	rjmp	.+22     	; 0x6180 <vfprintf+0x212>
    616a:	e1 14       	cp	r14, r1
    616c:	f1 04       	cpc	r15, r1
    616e:	09 f0       	breq	.+2      	; 0x6172 <vfprintf+0x204>
    6170:	80 52       	subi	r24, 0x20	; 32
    6172:	90 e0       	ldi	r25, 0x00	; 0
    6174:	b3 01       	movw	r22, r6
    6176:	0e 94 c5 3b 	call	0x778a	; 0x778a <fputc>
    617a:	0f 5f       	subi	r16, 0xFF	; 255
    617c:	1f 4f       	sbci	r17, 0xFF	; 255
    617e:	05 c0       	rjmp	.+10     	; 0x618a <vfprintf+0x21c>
    6180:	ef 2c       	mov	r14, r15
    6182:	ff 24       	eor	r15, r15
    6184:	f0 e1       	ldi	r31, 0x10	; 16
    6186:	ef 22       	and	r14, r31
    6188:	ff 24       	eor	r15, r15
    618a:	f8 01       	movw	r30, r16
    618c:	84 91       	lpm	r24, Z+
    618e:	88 23       	and	r24, r24
    6190:	61 f7       	brne	.-40     	; 0x616a <vfprintf+0x1fc>
    6192:	14 c1       	rjmp	.+552    	; 0x63bc <vfprintf+0x44e>
    6194:	f7 fe       	sbrs	r15, 7
    6196:	12 c0       	rjmp	.+36     	; 0x61bc <vfprintf+0x24e>
    6198:	bc 0c       	add	r11, r12
    619a:	24 fe       	sbrs	r2, 4
    619c:	04 c0       	rjmp	.+8      	; 0x61a6 <vfprintf+0x238>
    619e:	8a 81       	ldd	r24, Y+2	; 0x02
    61a0:	81 33       	cpi	r24, 0x31	; 49
    61a2:	09 f4       	brne	.+2      	; 0x61a6 <vfprintf+0x238>
    61a4:	ba 94       	dec	r11
    61a6:	1b 14       	cp	r1, r11
    61a8:	1c f0       	brlt	.+6      	; 0x61b0 <vfprintf+0x242>
    61aa:	bb 24       	eor	r11, r11
    61ac:	b3 94       	inc	r11
    61ae:	2d c0       	rjmp	.+90     	; 0x620a <vfprintf+0x29c>
    61b0:	f8 e0       	ldi	r31, 0x08	; 8
    61b2:	fb 15       	cp	r31, r11
    61b4:	50 f5       	brcc	.+84     	; 0x620a <vfprintf+0x29c>
    61b6:	38 e0       	ldi	r19, 0x08	; 8
    61b8:	b3 2e       	mov	r11, r19
    61ba:	27 c0       	rjmp	.+78     	; 0x620a <vfprintf+0x29c>
    61bc:	f6 fc       	sbrc	r15, 6
    61be:	25 c0       	rjmp	.+74     	; 0x620a <vfprintf+0x29c>
    61c0:	89 2d       	mov	r24, r9
    61c2:	90 e0       	ldi	r25, 0x00	; 0
    61c4:	8c 15       	cp	r24, r12
    61c6:	9d 05       	cpc	r25, r13
    61c8:	4c f0       	brlt	.+18     	; 0x61dc <vfprintf+0x26e>
    61ca:	2c ef       	ldi	r18, 0xFC	; 252
    61cc:	c2 16       	cp	r12, r18
    61ce:	2f ef       	ldi	r18, 0xFF	; 255
    61d0:	d2 06       	cpc	r13, r18
    61d2:	24 f0       	brlt	.+8      	; 0x61dc <vfprintf+0x26e>
    61d4:	30 e8       	ldi	r19, 0x80	; 128
    61d6:	f3 2a       	or	r15, r19
    61d8:	01 c0       	rjmp	.+2      	; 0x61dc <vfprintf+0x26e>
    61da:	9a 94       	dec	r9
    61dc:	99 20       	and	r9, r9
    61de:	49 f0       	breq	.+18     	; 0x61f2 <vfprintf+0x284>
    61e0:	e2 e0       	ldi	r30, 0x02	; 2
    61e2:	f0 e0       	ldi	r31, 0x00	; 0
    61e4:	ec 0f       	add	r30, r28
    61e6:	fd 1f       	adc	r31, r29
    61e8:	e9 0d       	add	r30, r9
    61ea:	f1 1d       	adc	r31, r1
    61ec:	80 81       	ld	r24, Z
    61ee:	80 33       	cpi	r24, 0x30	; 48
    61f0:	a1 f3       	breq	.-24     	; 0x61da <vfprintf+0x26c>
    61f2:	f7 fe       	sbrs	r15, 7
    61f4:	0a c0       	rjmp	.+20     	; 0x620a <vfprintf+0x29c>
    61f6:	b9 2c       	mov	r11, r9
    61f8:	b3 94       	inc	r11
    61fa:	89 2d       	mov	r24, r9
    61fc:	90 e0       	ldi	r25, 0x00	; 0
    61fe:	c8 16       	cp	r12, r24
    6200:	d9 06       	cpc	r13, r25
    6202:	14 f0       	brlt	.+4      	; 0x6208 <vfprintf+0x29a>
    6204:	99 24       	eor	r9, r9
    6206:	01 c0       	rjmp	.+2      	; 0x620a <vfprintf+0x29c>
    6208:	9c 18       	sub	r9, r12
    620a:	f7 fc       	sbrc	r15, 7
    620c:	03 c0       	rjmp	.+6      	; 0x6214 <vfprintf+0x2a6>
    620e:	25 e0       	ldi	r18, 0x05	; 5
    6210:	30 e0       	ldi	r19, 0x00	; 0
    6212:	09 c0       	rjmp	.+18     	; 0x6226 <vfprintf+0x2b8>
    6214:	1c 14       	cp	r1, r12
    6216:	1d 04       	cpc	r1, r13
    6218:	1c f0       	brlt	.+6      	; 0x6220 <vfprintf+0x2b2>
    621a:	21 e0       	ldi	r18, 0x01	; 1
    621c:	30 e0       	ldi	r19, 0x00	; 0
    621e:	03 c0       	rjmp	.+6      	; 0x6226 <vfprintf+0x2b8>
    6220:	96 01       	movw	r18, r12
    6222:	2f 5f       	subi	r18, 0xFF	; 255
    6224:	3f 4f       	sbci	r19, 0xFF	; 255
    6226:	11 23       	and	r17, r17
    6228:	11 f0       	breq	.+4      	; 0x622e <vfprintf+0x2c0>
    622a:	2f 5f       	subi	r18, 0xFF	; 255
    622c:	3f 4f       	sbci	r19, 0xFF	; 255
    622e:	99 20       	and	r9, r9
    6230:	29 f0       	breq	.+10     	; 0x623c <vfprintf+0x2ce>
    6232:	89 2d       	mov	r24, r9
    6234:	90 e0       	ldi	r25, 0x00	; 0
    6236:	01 96       	adiw	r24, 0x01	; 1
    6238:	28 0f       	add	r18, r24
    623a:	39 1f       	adc	r19, r25
    623c:	88 2d       	mov	r24, r8
    623e:	90 e0       	ldi	r25, 0x00	; 0
    6240:	28 17       	cp	r18, r24
    6242:	39 07       	cpc	r19, r25
    6244:	14 f0       	brlt	.+4      	; 0x624a <vfprintf+0x2dc>
    6246:	88 24       	eor	r8, r8
    6248:	01 c0       	rjmp	.+2      	; 0x624c <vfprintf+0x2de>
    624a:	82 1a       	sub	r8, r18
    624c:	4f 2c       	mov	r4, r15
    624e:	55 24       	eor	r5, r5
    6250:	c2 01       	movw	r24, r4
    6252:	89 70       	andi	r24, 0x09	; 9
    6254:	90 70       	andi	r25, 0x00	; 0
    6256:	89 2b       	or	r24, r25
    6258:	39 f0       	breq	.+14     	; 0x6268 <vfprintf+0x2fa>
    625a:	08 c0       	rjmp	.+16     	; 0x626c <vfprintf+0x2fe>
    625c:	80 e2       	ldi	r24, 0x20	; 32
    625e:	90 e0       	ldi	r25, 0x00	; 0
    6260:	b3 01       	movw	r22, r6
    6262:	0e 94 c5 3b 	call	0x778a	; 0x778a <fputc>
    6266:	8a 94       	dec	r8
    6268:	88 20       	and	r8, r8
    626a:	c1 f7       	brne	.-16     	; 0x625c <vfprintf+0x2ee>
    626c:	11 23       	and	r17, r17
    626e:	29 f0       	breq	.+10     	; 0x627a <vfprintf+0x30c>
    6270:	81 2f       	mov	r24, r17
    6272:	90 e0       	ldi	r25, 0x00	; 0
    6274:	b3 01       	movw	r22, r6
    6276:	0e 94 c5 3b 	call	0x778a	; 0x778a <fputc>
    627a:	43 fe       	sbrs	r4, 3
    627c:	07 c0       	rjmp	.+14     	; 0x628c <vfprintf+0x31e>
    627e:	08 c0       	rjmp	.+16     	; 0x6290 <vfprintf+0x322>
    6280:	80 e3       	ldi	r24, 0x30	; 48
    6282:	90 e0       	ldi	r25, 0x00	; 0
    6284:	b3 01       	movw	r22, r6
    6286:	0e 94 c5 3b 	call	0x778a	; 0x778a <fputc>
    628a:	8a 94       	dec	r8
    628c:	88 20       	and	r8, r8
    628e:	c1 f7       	brne	.-16     	; 0x6280 <vfprintf+0x312>
    6290:	f7 fe       	sbrs	r15, 7
    6292:	46 c0       	rjmp	.+140    	; 0x6320 <vfprintf+0x3b2>
    6294:	86 01       	movw	r16, r12
    6296:	d7 fe       	sbrs	r13, 7
    6298:	02 c0       	rjmp	.+4      	; 0x629e <vfprintf+0x330>
    629a:	00 e0       	ldi	r16, 0x00	; 0
    629c:	10 e0       	ldi	r17, 0x00	; 0
    629e:	76 01       	movw	r14, r12
    62a0:	08 94       	sec
    62a2:	e1 1c       	adc	r14, r1
    62a4:	f1 1c       	adc	r15, r1
    62a6:	e0 1a       	sub	r14, r16
    62a8:	f1 0a       	sbc	r15, r17
    62aa:	41 e0       	ldi	r20, 0x01	; 1
    62ac:	50 e0       	ldi	r21, 0x00	; 0
    62ae:	4c 0f       	add	r20, r28
    62b0:	5d 1f       	adc	r21, r29
    62b2:	e4 0e       	add	r14, r20
    62b4:	f5 1e       	adc	r15, r21
    62b6:	26 01       	movw	r4, r12
    62b8:	4b 18       	sub	r4, r11
    62ba:	51 08       	sbc	r5, r1
    62bc:	89 2d       	mov	r24, r9
    62be:	90 e0       	ldi	r25, 0x00	; 0
    62c0:	aa 24       	eor	r10, r10
    62c2:	bb 24       	eor	r11, r11
    62c4:	a8 1a       	sub	r10, r24
    62c6:	b9 0a       	sbc	r11, r25
    62c8:	5f ef       	ldi	r21, 0xFF	; 255
    62ca:	0f 3f       	cpi	r16, 0xFF	; 255
    62cc:	15 07       	cpc	r17, r21
    62ce:	29 f4       	brne	.+10     	; 0x62da <vfprintf+0x36c>
    62d0:	8e e2       	ldi	r24, 0x2E	; 46
    62d2:	90 e0       	ldi	r25, 0x00	; 0
    62d4:	b3 01       	movw	r22, r6
    62d6:	0e 94 c5 3b 	call	0x778a	; 0x778a <fputc>
    62da:	c0 16       	cp	r12, r16
    62dc:	d1 06       	cpc	r13, r17
    62de:	34 f0       	brlt	.+12     	; 0x62ec <vfprintf+0x37e>
    62e0:	40 16       	cp	r4, r16
    62e2:	51 06       	cpc	r5, r17
    62e4:	1c f4       	brge	.+6      	; 0x62ec <vfprintf+0x37e>
    62e6:	f7 01       	movw	r30, r14
    62e8:	80 81       	ld	r24, Z
    62ea:	01 c0       	rjmp	.+2      	; 0x62ee <vfprintf+0x380>
    62ec:	80 e3       	ldi	r24, 0x30	; 48
    62ee:	01 50       	subi	r16, 0x01	; 1
    62f0:	10 40       	sbci	r17, 0x00	; 0
    62f2:	08 94       	sec
    62f4:	e1 1c       	adc	r14, r1
    62f6:	f1 1c       	adc	r15, r1
    62f8:	0a 15       	cp	r16, r10
    62fa:	1b 05       	cpc	r17, r11
    62fc:	2c f0       	brlt	.+10     	; 0x6308 <vfprintf+0x39a>
    62fe:	90 e0       	ldi	r25, 0x00	; 0
    6300:	b3 01       	movw	r22, r6
    6302:	0e 94 c5 3b 	call	0x778a	; 0x778a <fputc>
    6306:	e0 cf       	rjmp	.-64     	; 0x62c8 <vfprintf+0x35a>
    6308:	0c 15       	cp	r16, r12
    630a:	1d 05       	cpc	r17, r13
    630c:	39 f4       	brne	.+14     	; 0x631c <vfprintf+0x3ae>
    630e:	9a 81       	ldd	r25, Y+2	; 0x02
    6310:	96 33       	cpi	r25, 0x36	; 54
    6312:	18 f4       	brcc	.+6      	; 0x631a <vfprintf+0x3ac>
    6314:	95 33       	cpi	r25, 0x35	; 53
    6316:	11 f4       	brne	.+4      	; 0x631c <vfprintf+0x3ae>
    6318:	24 fe       	sbrs	r2, 4
    631a:	81 e3       	ldi	r24, 0x31	; 49
    631c:	90 e0       	ldi	r25, 0x00	; 0
    631e:	4b c0       	rjmp	.+150    	; 0x63b6 <vfprintf+0x448>
    6320:	8a 81       	ldd	r24, Y+2	; 0x02
    6322:	81 33       	cpi	r24, 0x31	; 49
    6324:	09 f0       	breq	.+2      	; 0x6328 <vfprintf+0x3ba>
    6326:	0f 7e       	andi	r16, 0xEF	; 239
    6328:	90 e0       	ldi	r25, 0x00	; 0
    632a:	b3 01       	movw	r22, r6
    632c:	0e 94 c5 3b 	call	0x778a	; 0x778a <fputc>
    6330:	99 20       	and	r9, r9
    6332:	a1 f0       	breq	.+40     	; 0x635c <vfprintf+0x3ee>
    6334:	8e e2       	ldi	r24, 0x2E	; 46
    6336:	90 e0       	ldi	r25, 0x00	; 0
    6338:	b3 01       	movw	r22, r6
    633a:	0e 94 c5 3b 	call	0x778a	; 0x778a <fputc>
    633e:	12 e0       	ldi	r17, 0x02	; 2
    6340:	e1 e0       	ldi	r30, 0x01	; 1
    6342:	f0 e0       	ldi	r31, 0x00	; 0
    6344:	ec 0f       	add	r30, r28
    6346:	fd 1f       	adc	r31, r29
    6348:	e1 0f       	add	r30, r17
    634a:	f1 1d       	adc	r31, r1
    634c:	1f 5f       	subi	r17, 0xFF	; 255
    634e:	80 81       	ld	r24, Z
    6350:	90 e0       	ldi	r25, 0x00	; 0
    6352:	b3 01       	movw	r22, r6
    6354:	0e 94 c5 3b 	call	0x778a	; 0x778a <fputc>
    6358:	9a 94       	dec	r9
    635a:	91 f7       	brne	.-28     	; 0x6340 <vfprintf+0x3d2>
    635c:	44 fc       	sbrc	r4, 4
    635e:	03 c0       	rjmp	.+6      	; 0x6366 <vfprintf+0x3f8>
    6360:	85 e6       	ldi	r24, 0x65	; 101
    6362:	90 e0       	ldi	r25, 0x00	; 0
    6364:	02 c0       	rjmp	.+4      	; 0x636a <vfprintf+0x3fc>
    6366:	85 e4       	ldi	r24, 0x45	; 69
    6368:	90 e0       	ldi	r25, 0x00	; 0
    636a:	b3 01       	movw	r22, r6
    636c:	0e 94 c5 3b 	call	0x778a	; 0x778a <fputc>
    6370:	d7 fc       	sbrc	r13, 7
    6372:	05 c0       	rjmp	.+10     	; 0x637e <vfprintf+0x410>
    6374:	c1 14       	cp	r12, r1
    6376:	d1 04       	cpc	r13, r1
    6378:	41 f4       	brne	.+16     	; 0x638a <vfprintf+0x41c>
    637a:	04 ff       	sbrs	r16, 4
    637c:	06 c0       	rjmp	.+12     	; 0x638a <vfprintf+0x41c>
    637e:	d0 94       	com	r13
    6380:	c1 94       	neg	r12
    6382:	d1 08       	sbc	r13, r1
    6384:	d3 94       	inc	r13
    6386:	8d e2       	ldi	r24, 0x2D	; 45
    6388:	01 c0       	rjmp	.+2      	; 0x638c <vfprintf+0x41e>
    638a:	8b e2       	ldi	r24, 0x2B	; 43
    638c:	90 e0       	ldi	r25, 0x00	; 0
    638e:	b3 01       	movw	r22, r6
    6390:	0e 94 c5 3b 	call	0x778a	; 0x778a <fputc>
    6394:	80 e3       	ldi	r24, 0x30	; 48
    6396:	05 c0       	rjmp	.+10     	; 0x63a2 <vfprintf+0x434>
    6398:	8f 5f       	subi	r24, 0xFF	; 255
    639a:	26 ef       	ldi	r18, 0xF6	; 246
    639c:	3f ef       	ldi	r19, 0xFF	; 255
    639e:	c2 0e       	add	r12, r18
    63a0:	d3 1e       	adc	r13, r19
    63a2:	3a e0       	ldi	r19, 0x0A	; 10
    63a4:	c3 16       	cp	r12, r19
    63a6:	d1 04       	cpc	r13, r1
    63a8:	bc f7       	brge	.-18     	; 0x6398 <vfprintf+0x42a>
    63aa:	90 e0       	ldi	r25, 0x00	; 0
    63ac:	b3 01       	movw	r22, r6
    63ae:	0e 94 c5 3b 	call	0x778a	; 0x778a <fputc>
    63b2:	c6 01       	movw	r24, r12
    63b4:	c0 96       	adiw	r24, 0x30	; 48
    63b6:	b3 01       	movw	r22, r6
    63b8:	0e 94 c5 3b 	call	0x778a	; 0x778a <fputc>
    63bc:	cc 84       	ldd	r12, Y+12	; 0x0c
    63be:	dd 84       	ldd	r13, Y+13	; 0x0d
    63c0:	52 c1       	rjmp	.+676    	; 0x6666 <vfprintf+0x6f8>
    63c2:	93 36       	cpi	r25, 0x63	; 99
    63c4:	31 f0       	breq	.+12     	; 0x63d2 <vfprintf+0x464>
    63c6:	93 37       	cpi	r25, 0x73	; 115
    63c8:	99 f0       	breq	.+38     	; 0x63f0 <vfprintf+0x482>
    63ca:	93 35       	cpi	r25, 0x53	; 83
    63cc:	09 f0       	breq	.+2      	; 0x63d0 <vfprintf+0x462>
    63ce:	59 c0       	rjmp	.+178    	; 0x6482 <vfprintf+0x514>
    63d0:	23 c0       	rjmp	.+70     	; 0x6418 <vfprintf+0x4aa>
    63d2:	f6 01       	movw	r30, r12
    63d4:	80 81       	ld	r24, Z
    63d6:	89 83       	std	Y+1, r24	; 0x01
    63d8:	5e 01       	movw	r10, r28
    63da:	08 94       	sec
    63dc:	a1 1c       	adc	r10, r1
    63de:	b1 1c       	adc	r11, r1
    63e0:	22 e0       	ldi	r18, 0x02	; 2
    63e2:	30 e0       	ldi	r19, 0x00	; 0
    63e4:	c2 0e       	add	r12, r18
    63e6:	d3 1e       	adc	r13, r19
    63e8:	21 e0       	ldi	r18, 0x01	; 1
    63ea:	e2 2e       	mov	r14, r18
    63ec:	f1 2c       	mov	r15, r1
    63ee:	12 c0       	rjmp	.+36     	; 0x6414 <vfprintf+0x4a6>
    63f0:	f6 01       	movw	r30, r12
    63f2:	a0 80       	ld	r10, Z
    63f4:	b1 80       	ldd	r11, Z+1	; 0x01
    63f6:	16 fd       	sbrc	r17, 6
    63f8:	03 c0       	rjmp	.+6      	; 0x6400 <vfprintf+0x492>
    63fa:	6f ef       	ldi	r22, 0xFF	; 255
    63fc:	7f ef       	ldi	r23, 0xFF	; 255
    63fe:	02 c0       	rjmp	.+4      	; 0x6404 <vfprintf+0x496>
    6400:	69 2d       	mov	r22, r9
    6402:	70 e0       	ldi	r23, 0x00	; 0
    6404:	22 e0       	ldi	r18, 0x02	; 2
    6406:	30 e0       	ldi	r19, 0x00	; 0
    6408:	c2 0e       	add	r12, r18
    640a:	d3 1e       	adc	r13, r19
    640c:	c5 01       	movw	r24, r10
    640e:	0e 94 3d 3b 	call	0x767a	; 0x767a <strnlen>
    6412:	7c 01       	movw	r14, r24
    6414:	1f 77       	andi	r17, 0x7F	; 127
    6416:	13 c0       	rjmp	.+38     	; 0x643e <vfprintf+0x4d0>
    6418:	f6 01       	movw	r30, r12
    641a:	a0 80       	ld	r10, Z
    641c:	b1 80       	ldd	r11, Z+1	; 0x01
    641e:	16 fd       	sbrc	r17, 6
    6420:	03 c0       	rjmp	.+6      	; 0x6428 <vfprintf+0x4ba>
    6422:	6f ef       	ldi	r22, 0xFF	; 255
    6424:	7f ef       	ldi	r23, 0xFF	; 255
    6426:	02 c0       	rjmp	.+4      	; 0x642c <vfprintf+0x4be>
    6428:	69 2d       	mov	r22, r9
    642a:	70 e0       	ldi	r23, 0x00	; 0
    642c:	22 e0       	ldi	r18, 0x02	; 2
    642e:	30 e0       	ldi	r19, 0x00	; 0
    6430:	c2 0e       	add	r12, r18
    6432:	d3 1e       	adc	r13, r19
    6434:	c5 01       	movw	r24, r10
    6436:	0e 94 1f 3b 	call	0x763e	; 0x763e <strnlen_P>
    643a:	7c 01       	movw	r14, r24
    643c:	10 68       	ori	r17, 0x80	; 128
    643e:	13 ff       	sbrs	r17, 3
    6440:	07 c0       	rjmp	.+14     	; 0x6450 <vfprintf+0x4e2>
    6442:	1b c0       	rjmp	.+54     	; 0x647a <vfprintf+0x50c>
    6444:	80 e2       	ldi	r24, 0x20	; 32
    6446:	90 e0       	ldi	r25, 0x00	; 0
    6448:	b3 01       	movw	r22, r6
    644a:	0e 94 c5 3b 	call	0x778a	; 0x778a <fputc>
    644e:	8a 94       	dec	r8
    6450:	88 2d       	mov	r24, r8
    6452:	90 e0       	ldi	r25, 0x00	; 0
    6454:	e8 16       	cp	r14, r24
    6456:	f9 06       	cpc	r15, r25
    6458:	a8 f3       	brcs	.-22     	; 0x6444 <vfprintf+0x4d6>
    645a:	0f c0       	rjmp	.+30     	; 0x647a <vfprintf+0x50c>
    645c:	f5 01       	movw	r30, r10
    645e:	17 fd       	sbrc	r17, 7
    6460:	85 91       	lpm	r24, Z+
    6462:	17 ff       	sbrs	r17, 7
    6464:	81 91       	ld	r24, Z+
    6466:	5f 01       	movw	r10, r30
    6468:	90 e0       	ldi	r25, 0x00	; 0
    646a:	b3 01       	movw	r22, r6
    646c:	0e 94 c5 3b 	call	0x778a	; 0x778a <fputc>
    6470:	81 10       	cpse	r8, r1
    6472:	8a 94       	dec	r8
    6474:	08 94       	sec
    6476:	e1 08       	sbc	r14, r1
    6478:	f1 08       	sbc	r15, r1
    647a:	e1 14       	cp	r14, r1
    647c:	f1 04       	cpc	r15, r1
    647e:	71 f7       	brne	.-36     	; 0x645c <vfprintf+0x4ee>
    6480:	f2 c0       	rjmp	.+484    	; 0x6666 <vfprintf+0x6f8>
    6482:	94 36       	cpi	r25, 0x64	; 100
    6484:	11 f0       	breq	.+4      	; 0x648a <vfprintf+0x51c>
    6486:	99 36       	cpi	r25, 0x69	; 105
    6488:	89 f5       	brne	.+98     	; 0x64ec <vfprintf+0x57e>
    648a:	17 ff       	sbrs	r17, 7
    648c:	08 c0       	rjmp	.+16     	; 0x649e <vfprintf+0x530>
    648e:	f6 01       	movw	r30, r12
    6490:	20 81       	ld	r18, Z
    6492:	31 81       	ldd	r19, Z+1	; 0x01
    6494:	42 81       	ldd	r20, Z+2	; 0x02
    6496:	53 81       	ldd	r21, Z+3	; 0x03
    6498:	84 e0       	ldi	r24, 0x04	; 4
    649a:	90 e0       	ldi	r25, 0x00	; 0
    649c:	0a c0       	rjmp	.+20     	; 0x64b2 <vfprintf+0x544>
    649e:	f6 01       	movw	r30, r12
    64a0:	80 81       	ld	r24, Z
    64a2:	91 81       	ldd	r25, Z+1	; 0x01
    64a4:	9c 01       	movw	r18, r24
    64a6:	44 27       	eor	r20, r20
    64a8:	37 fd       	sbrc	r19, 7
    64aa:	40 95       	com	r20
    64ac:	54 2f       	mov	r21, r20
    64ae:	82 e0       	ldi	r24, 0x02	; 2
    64b0:	90 e0       	ldi	r25, 0x00	; 0
    64b2:	c8 0e       	add	r12, r24
    64b4:	d9 1e       	adc	r13, r25
    64b6:	9f e6       	ldi	r25, 0x6F	; 111
    64b8:	f9 2e       	mov	r15, r25
    64ba:	f1 22       	and	r15, r17
    64bc:	57 ff       	sbrs	r21, 7
    64be:	09 c0       	rjmp	.+18     	; 0x64d2 <vfprintf+0x564>
    64c0:	50 95       	com	r21
    64c2:	40 95       	com	r20
    64c4:	30 95       	com	r19
    64c6:	21 95       	neg	r18
    64c8:	3f 4f       	sbci	r19, 0xFF	; 255
    64ca:	4f 4f       	sbci	r20, 0xFF	; 255
    64cc:	5f 4f       	sbci	r21, 0xFF	; 255
    64ce:	90 e8       	ldi	r25, 0x80	; 128
    64d0:	f9 2a       	or	r15, r25
    64d2:	ca 01       	movw	r24, r20
    64d4:	b9 01       	movw	r22, r18
    64d6:	ae 01       	movw	r20, r28
    64d8:	4f 5f       	subi	r20, 0xFF	; 255
    64da:	5f 4f       	sbci	r21, 0xFF	; 255
    64dc:	2a e0       	ldi	r18, 0x0A	; 10
    64de:	30 e0       	ldi	r19, 0x00	; 0
    64e0:	0e 94 c6 3c 	call	0x798c	; 0x798c <__ultoa_invert>
    64e4:	e8 2e       	mov	r14, r24
    64e6:	e8 89       	ldd	r30, Y+16	; 0x10
    64e8:	ee 1a       	sub	r14, r30
    64ea:	41 c0       	rjmp	.+130    	; 0x656e <vfprintf+0x600>
    64ec:	95 37       	cpi	r25, 0x75	; 117
    64ee:	21 f4       	brne	.+8      	; 0x64f8 <vfprintf+0x58a>
    64f0:	1f 7e       	andi	r17, 0xEF	; 239
    64f2:	2a e0       	ldi	r18, 0x0A	; 10
    64f4:	30 e0       	ldi	r19, 0x00	; 0
    64f6:	1c c0       	rjmp	.+56     	; 0x6530 <vfprintf+0x5c2>
    64f8:	19 7f       	andi	r17, 0xF9	; 249
    64fa:	9f 36       	cpi	r25, 0x6F	; 111
    64fc:	61 f0       	breq	.+24     	; 0x6516 <vfprintf+0x5a8>
    64fe:	90 37       	cpi	r25, 0x70	; 112
    6500:	20 f4       	brcc	.+8      	; 0x650a <vfprintf+0x59c>
    6502:	98 35       	cpi	r25, 0x58	; 88
    6504:	09 f0       	breq	.+2      	; 0x6508 <vfprintf+0x59a>
    6506:	b2 c0       	rjmp	.+356    	; 0x666c <vfprintf+0x6fe>
    6508:	0f c0       	rjmp	.+30     	; 0x6528 <vfprintf+0x5ba>
    650a:	90 37       	cpi	r25, 0x70	; 112
    650c:	39 f0       	breq	.+14     	; 0x651c <vfprintf+0x5ae>
    650e:	98 37       	cpi	r25, 0x78	; 120
    6510:	09 f0       	breq	.+2      	; 0x6514 <vfprintf+0x5a6>
    6512:	ac c0       	rjmp	.+344    	; 0x666c <vfprintf+0x6fe>
    6514:	04 c0       	rjmp	.+8      	; 0x651e <vfprintf+0x5b0>
    6516:	28 e0       	ldi	r18, 0x08	; 8
    6518:	30 e0       	ldi	r19, 0x00	; 0
    651a:	0a c0       	rjmp	.+20     	; 0x6530 <vfprintf+0x5c2>
    651c:	10 61       	ori	r17, 0x10	; 16
    651e:	14 fd       	sbrc	r17, 4
    6520:	14 60       	ori	r17, 0x04	; 4
    6522:	20 e1       	ldi	r18, 0x10	; 16
    6524:	30 e0       	ldi	r19, 0x00	; 0
    6526:	04 c0       	rjmp	.+8      	; 0x6530 <vfprintf+0x5c2>
    6528:	14 fd       	sbrc	r17, 4
    652a:	16 60       	ori	r17, 0x06	; 6
    652c:	20 e1       	ldi	r18, 0x10	; 16
    652e:	32 e0       	ldi	r19, 0x02	; 2
    6530:	17 ff       	sbrs	r17, 7
    6532:	08 c0       	rjmp	.+16     	; 0x6544 <vfprintf+0x5d6>
    6534:	f6 01       	movw	r30, r12
    6536:	60 81       	ld	r22, Z
    6538:	71 81       	ldd	r23, Z+1	; 0x01
    653a:	82 81       	ldd	r24, Z+2	; 0x02
    653c:	93 81       	ldd	r25, Z+3	; 0x03
    653e:	44 e0       	ldi	r20, 0x04	; 4
    6540:	50 e0       	ldi	r21, 0x00	; 0
    6542:	08 c0       	rjmp	.+16     	; 0x6554 <vfprintf+0x5e6>
    6544:	f6 01       	movw	r30, r12
    6546:	80 81       	ld	r24, Z
    6548:	91 81       	ldd	r25, Z+1	; 0x01
    654a:	bc 01       	movw	r22, r24
    654c:	80 e0       	ldi	r24, 0x00	; 0
    654e:	90 e0       	ldi	r25, 0x00	; 0
    6550:	42 e0       	ldi	r20, 0x02	; 2
    6552:	50 e0       	ldi	r21, 0x00	; 0
    6554:	c4 0e       	add	r12, r20
    6556:	d5 1e       	adc	r13, r21
    6558:	ae 01       	movw	r20, r28
    655a:	4f 5f       	subi	r20, 0xFF	; 255
    655c:	5f 4f       	sbci	r21, 0xFF	; 255
    655e:	0e 94 c6 3c 	call	0x798c	; 0x798c <__ultoa_invert>
    6562:	e8 2e       	mov	r14, r24
    6564:	58 89       	ldd	r21, Y+16	; 0x10
    6566:	e5 1a       	sub	r14, r21
    6568:	8f e7       	ldi	r24, 0x7F	; 127
    656a:	f8 2e       	mov	r15, r24
    656c:	f1 22       	and	r15, r17
    656e:	f6 fe       	sbrs	r15, 6
    6570:	0b c0       	rjmp	.+22     	; 0x6588 <vfprintf+0x61a>
    6572:	8e ef       	ldi	r24, 0xFE	; 254
    6574:	f8 22       	and	r15, r24
    6576:	e9 14       	cp	r14, r9
    6578:	38 f4       	brcc	.+14     	; 0x6588 <vfprintf+0x61a>
    657a:	f4 fe       	sbrs	r15, 4
    657c:	07 c0       	rjmp	.+14     	; 0x658c <vfprintf+0x61e>
    657e:	f2 fc       	sbrc	r15, 2
    6580:	05 c0       	rjmp	.+10     	; 0x658c <vfprintf+0x61e>
    6582:	9f ee       	ldi	r25, 0xEF	; 239
    6584:	f9 22       	and	r15, r25
    6586:	02 c0       	rjmp	.+4      	; 0x658c <vfprintf+0x61e>
    6588:	1e 2d       	mov	r17, r14
    658a:	01 c0       	rjmp	.+2      	; 0x658e <vfprintf+0x620>
    658c:	19 2d       	mov	r17, r9
    658e:	f4 fe       	sbrs	r15, 4
    6590:	0d c0       	rjmp	.+26     	; 0x65ac <vfprintf+0x63e>
    6592:	fe 01       	movw	r30, r28
    6594:	ee 0d       	add	r30, r14
    6596:	f1 1d       	adc	r31, r1
    6598:	80 81       	ld	r24, Z
    659a:	80 33       	cpi	r24, 0x30	; 48
    659c:	19 f4       	brne	.+6      	; 0x65a4 <vfprintf+0x636>
    659e:	e9 ee       	ldi	r30, 0xE9	; 233
    65a0:	fe 22       	and	r15, r30
    65a2:	08 c0       	rjmp	.+16     	; 0x65b4 <vfprintf+0x646>
    65a4:	1f 5f       	subi	r17, 0xFF	; 255
    65a6:	f2 fe       	sbrs	r15, 2
    65a8:	05 c0       	rjmp	.+10     	; 0x65b4 <vfprintf+0x646>
    65aa:	03 c0       	rjmp	.+6      	; 0x65b2 <vfprintf+0x644>
    65ac:	8f 2d       	mov	r24, r15
    65ae:	86 78       	andi	r24, 0x86	; 134
    65b0:	09 f0       	breq	.+2      	; 0x65b4 <vfprintf+0x646>
    65b2:	1f 5f       	subi	r17, 0xFF	; 255
    65b4:	0f 2d       	mov	r16, r15
    65b6:	f3 fc       	sbrc	r15, 3
    65b8:	14 c0       	rjmp	.+40     	; 0x65e2 <vfprintf+0x674>
    65ba:	f0 fe       	sbrs	r15, 0
    65bc:	0f c0       	rjmp	.+30     	; 0x65dc <vfprintf+0x66e>
    65be:	18 15       	cp	r17, r8
    65c0:	10 f0       	brcs	.+4      	; 0x65c6 <vfprintf+0x658>
    65c2:	9e 2c       	mov	r9, r14
    65c4:	0b c0       	rjmp	.+22     	; 0x65dc <vfprintf+0x66e>
    65c6:	9e 2c       	mov	r9, r14
    65c8:	98 0c       	add	r9, r8
    65ca:	91 1a       	sub	r9, r17
    65cc:	18 2d       	mov	r17, r8
    65ce:	06 c0       	rjmp	.+12     	; 0x65dc <vfprintf+0x66e>
    65d0:	80 e2       	ldi	r24, 0x20	; 32
    65d2:	90 e0       	ldi	r25, 0x00	; 0
    65d4:	b3 01       	movw	r22, r6
    65d6:	0e 94 c5 3b 	call	0x778a	; 0x778a <fputc>
    65da:	1f 5f       	subi	r17, 0xFF	; 255
    65dc:	18 15       	cp	r17, r8
    65de:	c0 f3       	brcs	.-16     	; 0x65d0 <vfprintf+0x662>
    65e0:	04 c0       	rjmp	.+8      	; 0x65ea <vfprintf+0x67c>
    65e2:	18 15       	cp	r17, r8
    65e4:	10 f4       	brcc	.+4      	; 0x65ea <vfprintf+0x67c>
    65e6:	81 1a       	sub	r8, r17
    65e8:	01 c0       	rjmp	.+2      	; 0x65ec <vfprintf+0x67e>
    65ea:	88 24       	eor	r8, r8
    65ec:	04 ff       	sbrs	r16, 4
    65ee:	0f c0       	rjmp	.+30     	; 0x660e <vfprintf+0x6a0>
    65f0:	80 e3       	ldi	r24, 0x30	; 48
    65f2:	90 e0       	ldi	r25, 0x00	; 0
    65f4:	b3 01       	movw	r22, r6
    65f6:	0e 94 c5 3b 	call	0x778a	; 0x778a <fputc>
    65fa:	02 ff       	sbrs	r16, 2
    65fc:	1d c0       	rjmp	.+58     	; 0x6638 <vfprintf+0x6ca>
    65fe:	01 fd       	sbrc	r16, 1
    6600:	03 c0       	rjmp	.+6      	; 0x6608 <vfprintf+0x69a>
    6602:	88 e7       	ldi	r24, 0x78	; 120
    6604:	90 e0       	ldi	r25, 0x00	; 0
    6606:	0e c0       	rjmp	.+28     	; 0x6624 <vfprintf+0x6b6>
    6608:	88 e5       	ldi	r24, 0x58	; 88
    660a:	90 e0       	ldi	r25, 0x00	; 0
    660c:	0b c0       	rjmp	.+22     	; 0x6624 <vfprintf+0x6b6>
    660e:	80 2f       	mov	r24, r16
    6610:	86 78       	andi	r24, 0x86	; 134
    6612:	91 f0       	breq	.+36     	; 0x6638 <vfprintf+0x6ca>
    6614:	01 ff       	sbrs	r16, 1
    6616:	02 c0       	rjmp	.+4      	; 0x661c <vfprintf+0x6ae>
    6618:	8b e2       	ldi	r24, 0x2B	; 43
    661a:	01 c0       	rjmp	.+2      	; 0x661e <vfprintf+0x6b0>
    661c:	80 e2       	ldi	r24, 0x20	; 32
    661e:	f7 fc       	sbrc	r15, 7
    6620:	8d e2       	ldi	r24, 0x2D	; 45
    6622:	90 e0       	ldi	r25, 0x00	; 0
    6624:	b3 01       	movw	r22, r6
    6626:	0e 94 c5 3b 	call	0x778a	; 0x778a <fputc>
    662a:	06 c0       	rjmp	.+12     	; 0x6638 <vfprintf+0x6ca>
    662c:	80 e3       	ldi	r24, 0x30	; 48
    662e:	90 e0       	ldi	r25, 0x00	; 0
    6630:	b3 01       	movw	r22, r6
    6632:	0e 94 c5 3b 	call	0x778a	; 0x778a <fputc>
    6636:	9a 94       	dec	r9
    6638:	e9 14       	cp	r14, r9
    663a:	c0 f3       	brcs	.-16     	; 0x662c <vfprintf+0x6be>
    663c:	ea 94       	dec	r14
    663e:	e1 e0       	ldi	r30, 0x01	; 1
    6640:	f0 e0       	ldi	r31, 0x00	; 0
    6642:	ec 0f       	add	r30, r28
    6644:	fd 1f       	adc	r31, r29
    6646:	ee 0d       	add	r30, r14
    6648:	f1 1d       	adc	r31, r1
    664a:	80 81       	ld	r24, Z
    664c:	90 e0       	ldi	r25, 0x00	; 0
    664e:	b3 01       	movw	r22, r6
    6650:	0e 94 c5 3b 	call	0x778a	; 0x778a <fputc>
    6654:	ee 20       	and	r14, r14
    6656:	91 f7       	brne	.-28     	; 0x663c <vfprintf+0x6ce>
    6658:	06 c0       	rjmp	.+12     	; 0x6666 <vfprintf+0x6f8>
    665a:	80 e2       	ldi	r24, 0x20	; 32
    665c:	90 e0       	ldi	r25, 0x00	; 0
    665e:	b3 01       	movw	r22, r6
    6660:	0e 94 c5 3b 	call	0x778a	; 0x778a <fputc>
    6664:	8a 94       	dec	r8
    6666:	88 20       	and	r8, r8
    6668:	c1 f7       	brne	.-16     	; 0x665a <vfprintf+0x6ec>
    666a:	99 cc       	rjmp	.-1742   	; 0x5f9e <vfprintf+0x30>
    666c:	f3 01       	movw	r30, r6
    666e:	66 81       	ldd	r22, Z+6	; 0x06
    6670:	77 81       	ldd	r23, Z+7	; 0x07
    6672:	cb 01       	movw	r24, r22
    6674:	61 96       	adiw	r28, 0x11	; 17
    6676:	e2 e1       	ldi	r30, 0x12	; 18
    6678:	0c 94 fd 39 	jmp	0x73fa	; 0x73fa <__epilogue_restores__>

0000667c <putval>:
    667c:	fc 01       	movw	r30, r24
    667e:	20 fd       	sbrc	r18, 0
    6680:	08 c0       	rjmp	.+16     	; 0x6692 <putval+0x16>
    6682:	23 fd       	sbrc	r18, 3
    6684:	05 c0       	rjmp	.+10     	; 0x6690 <putval+0x14>
    6686:	22 ff       	sbrs	r18, 2
    6688:	02 c0       	rjmp	.+4      	; 0x668e <putval+0x12>
    668a:	73 83       	std	Z+3, r23	; 0x03
    668c:	62 83       	std	Z+2, r22	; 0x02
    668e:	51 83       	std	Z+1, r21	; 0x01
    6690:	40 83       	st	Z, r20
    6692:	08 95       	ret

00006694 <mulacc>:
    6694:	ef 92       	push	r14
    6696:	ff 92       	push	r15
    6698:	0f 93       	push	r16
    669a:	1f 93       	push	r17
    669c:	44 ff       	sbrs	r20, 4
    669e:	02 c0       	rjmp	.+4      	; 0x66a4 <mulacc+0x10>
    66a0:	33 e0       	ldi	r19, 0x03	; 3
    66a2:	11 c0       	rjmp	.+34     	; 0x66c6 <mulacc+0x32>
    66a4:	46 ff       	sbrs	r20, 6
    66a6:	02 c0       	rjmp	.+4      	; 0x66ac <mulacc+0x18>
    66a8:	34 e0       	ldi	r19, 0x04	; 4
    66aa:	0d c0       	rjmp	.+26     	; 0x66c6 <mulacc+0x32>
    66ac:	db 01       	movw	r26, r22
    66ae:	fc 01       	movw	r30, r24
    66b0:	aa 0f       	add	r26, r26
    66b2:	bb 1f       	adc	r27, r27
    66b4:	ee 1f       	adc	r30, r30
    66b6:	ff 1f       	adc	r31, r31
    66b8:	10 94       	com	r1
    66ba:	d1 f7       	brne	.-12     	; 0x66b0 <mulacc+0x1c>
    66bc:	6a 0f       	add	r22, r26
    66be:	7b 1f       	adc	r23, r27
    66c0:	8e 1f       	adc	r24, r30
    66c2:	9f 1f       	adc	r25, r31
    66c4:	31 e0       	ldi	r19, 0x01	; 1
    66c6:	66 0f       	add	r22, r22
    66c8:	77 1f       	adc	r23, r23
    66ca:	88 1f       	adc	r24, r24
    66cc:	99 1f       	adc	r25, r25
    66ce:	31 50       	subi	r19, 0x01	; 1
    66d0:	d1 f7       	brne	.-12     	; 0x66c6 <mulacc+0x32>
    66d2:	7b 01       	movw	r14, r22
    66d4:	8c 01       	movw	r16, r24
    66d6:	e2 0e       	add	r14, r18
    66d8:	f1 1c       	adc	r15, r1
    66da:	01 1d       	adc	r16, r1
    66dc:	11 1d       	adc	r17, r1
    66de:	a8 01       	movw	r20, r16
    66e0:	97 01       	movw	r18, r14
    66e2:	b7 01       	movw	r22, r14
    66e4:	ca 01       	movw	r24, r20
    66e6:	1f 91       	pop	r17
    66e8:	0f 91       	pop	r16
    66ea:	ff 90       	pop	r15
    66ec:	ef 90       	pop	r14
    66ee:	08 95       	ret

000066f0 <skip_spaces>:
    66f0:	0f 93       	push	r16
    66f2:	1f 93       	push	r17
    66f4:	cf 93       	push	r28
    66f6:	df 93       	push	r29
    66f8:	8c 01       	movw	r16, r24
    66fa:	c8 01       	movw	r24, r16
    66fc:	0e 94 6f 3b 	call	0x76de	; 0x76de <fgetc>
    6700:	ec 01       	movw	r28, r24
    6702:	97 fd       	sbrc	r25, 7
    6704:	08 c0       	rjmp	.+16     	; 0x6716 <skip_spaces+0x26>
    6706:	0e 94 04 3b 	call	0x7608	; 0x7608 <isspace>
    670a:	89 2b       	or	r24, r25
    670c:	b1 f7       	brne	.-20     	; 0x66fa <skip_spaces+0xa>
    670e:	ce 01       	movw	r24, r28
    6710:	b8 01       	movw	r22, r16
    6712:	0e 94 ac 3c 	call	0x7958	; 0x7958 <ungetc>
    6716:	ce 01       	movw	r24, r28
    6718:	df 91       	pop	r29
    671a:	cf 91       	pop	r28
    671c:	1f 91       	pop	r17
    671e:	0f 91       	pop	r16
    6720:	08 95       	ret

00006722 <conv_int>:
    6722:	8f 92       	push	r8
    6724:	9f 92       	push	r9
    6726:	af 92       	push	r10
    6728:	bf 92       	push	r11
    672a:	df 92       	push	r13
    672c:	ef 92       	push	r14
    672e:	ff 92       	push	r15
    6730:	0f 93       	push	r16
    6732:	1f 93       	push	r17
    6734:	cf 93       	push	r28
    6736:	df 93       	push	r29
    6738:	5c 01       	movw	r10, r24
    673a:	eb 01       	movw	r28, r22
    673c:	4a 01       	movw	r8, r20
    673e:	12 2f       	mov	r17, r18
    6740:	0e 94 6f 3b 	call	0x76de	; 0x76de <fgetc>
    6744:	ac 01       	movw	r20, r24
    6746:	8b 32       	cpi	r24, 0x2B	; 43
    6748:	19 f0       	breq	.+6      	; 0x6750 <conv_int+0x2e>
    674a:	8d 32       	cpi	r24, 0x2D	; 45
    674c:	51 f4       	brne	.+20     	; 0x6762 <conv_int+0x40>
    674e:	10 68       	ori	r17, 0x80	; 128
    6750:	21 97       	sbiw	r28, 0x01	; 1
    6752:	09 f4       	brne	.+2      	; 0x6756 <conv_int+0x34>
    6754:	6d c0       	rjmp	.+218    	; 0x6830 <conv_int+0x10e>
    6756:	c5 01       	movw	r24, r10
    6758:	0e 94 6f 3b 	call	0x76de	; 0x76de <fgetc>
    675c:	ac 01       	movw	r20, r24
    675e:	97 fd       	sbrc	r25, 7
    6760:	67 c0       	rjmp	.+206    	; 0x6830 <conv_int+0x10e>
    6762:	6d ef       	ldi	r22, 0xFD	; 253
    6764:	d6 2e       	mov	r13, r22
    6766:	d1 22       	and	r13, r17
    6768:	8d 2d       	mov	r24, r13
    676a:	80 73       	andi	r24, 0x30	; 48
    676c:	01 f5       	brne	.+64     	; 0x67ae <conv_int+0x8c>
    676e:	40 33       	cpi	r20, 0x30	; 48
    6770:	f1 f4       	brne	.+60     	; 0x67ae <conv_int+0x8c>
    6772:	21 97       	sbiw	r28, 0x01	; 1
    6774:	09 f4       	brne	.+2      	; 0x6778 <conv_int+0x56>
    6776:	47 c0       	rjmp	.+142    	; 0x6806 <conv_int+0xe4>
    6778:	c5 01       	movw	r24, r10
    677a:	0e 94 6f 3b 	call	0x76de	; 0x76de <fgetc>
    677e:	ac 01       	movw	r20, r24
    6780:	97 fd       	sbrc	r25, 7
    6782:	41 c0       	rjmp	.+130    	; 0x6806 <conv_int+0xe4>
    6784:	82 e0       	ldi	r24, 0x02	; 2
    6786:	d8 2a       	or	r13, r24
    6788:	48 37       	cpi	r20, 0x78	; 120
    678a:	11 f0       	breq	.+4      	; 0x6790 <conv_int+0x6e>
    678c:	48 35       	cpi	r20, 0x58	; 88
    678e:	59 f4       	brne	.+22     	; 0x67a6 <conv_int+0x84>
    6790:	80 e4       	ldi	r24, 0x40	; 64
    6792:	d8 2a       	or	r13, r24
    6794:	21 97       	sbiw	r28, 0x01	; 1
    6796:	b9 f1       	breq	.+110    	; 0x6806 <conv_int+0xe4>
    6798:	c5 01       	movw	r24, r10
    679a:	0e 94 6f 3b 	call	0x76de	; 0x76de <fgetc>
    679e:	ac 01       	movw	r20, r24
    67a0:	99 23       	and	r25, r25
    67a2:	2c f4       	brge	.+10     	; 0x67ae <conv_int+0x8c>
    67a4:	30 c0       	rjmp	.+96     	; 0x6806 <conv_int+0xe4>
    67a6:	d6 fc       	sbrc	r13, 6
    67a8:	02 c0       	rjmp	.+4      	; 0x67ae <conv_int+0x8c>
    67aa:	80 e1       	ldi	r24, 0x10	; 16
    67ac:	d8 2a       	or	r13, r24
    67ae:	ee 24       	eor	r14, r14
    67b0:	ff 24       	eor	r15, r15
    67b2:	87 01       	movw	r16, r14
    67b4:	24 2f       	mov	r18, r20
    67b6:	20 53       	subi	r18, 0x30	; 48
    67b8:	28 30       	cpi	r18, 0x08	; 8
    67ba:	88 f0       	brcs	.+34     	; 0x67de <conv_int+0xbc>
    67bc:	d4 fc       	sbrc	r13, 4
    67be:	09 c0       	rjmp	.+18     	; 0x67d2 <conv_int+0xb0>
    67c0:	2a 30       	cpi	r18, 0x0A	; 10
    67c2:	68 f0       	brcs	.+26     	; 0x67de <conv_int+0xbc>
    67c4:	d6 fe       	sbrs	r13, 6
    67c6:	05 c0       	rjmp	.+10     	; 0x67d2 <conv_int+0xb0>
    67c8:	2f 7d       	andi	r18, 0xDF	; 223
    67ca:	82 2f       	mov	r24, r18
    67cc:	81 51       	subi	r24, 0x11	; 17
    67ce:	86 30       	cpi	r24, 0x06	; 6
    67d0:	28 f0       	brcs	.+10     	; 0x67dc <conv_int+0xba>
    67d2:	ca 01       	movw	r24, r20
    67d4:	b5 01       	movw	r22, r10
    67d6:	0e 94 ac 3c 	call	0x7958	; 0x7958 <ungetc>
    67da:	12 c0       	rjmp	.+36     	; 0x6800 <conv_int+0xde>
    67dc:	27 50       	subi	r18, 0x07	; 7
    67de:	c8 01       	movw	r24, r16
    67e0:	b7 01       	movw	r22, r14
    67e2:	4d 2d       	mov	r20, r13
    67e4:	0e 94 4a 33 	call	0x6694	; 0x6694 <mulacc>
    67e8:	7b 01       	movw	r14, r22
    67ea:	8c 01       	movw	r16, r24
    67ec:	82 e0       	ldi	r24, 0x02	; 2
    67ee:	d8 2a       	or	r13, r24
    67f0:	21 97       	sbiw	r28, 0x01	; 1
    67f2:	61 f0       	breq	.+24     	; 0x680c <conv_int+0xea>
    67f4:	c5 01       	movw	r24, r10
    67f6:	0e 94 6f 3b 	call	0x76de	; 0x76de <fgetc>
    67fa:	ac 01       	movw	r20, r24
    67fc:	97 ff       	sbrs	r25, 7
    67fe:	da cf       	rjmp	.-76     	; 0x67b4 <conv_int+0x92>
    6800:	d1 fc       	sbrc	r13, 1
    6802:	04 c0       	rjmp	.+8      	; 0x680c <conv_int+0xea>
    6804:	15 c0       	rjmp	.+42     	; 0x6830 <conv_int+0x10e>
    6806:	ee 24       	eor	r14, r14
    6808:	ff 24       	eor	r15, r15
    680a:	87 01       	movw	r16, r14
    680c:	d7 fe       	sbrs	r13, 7
    680e:	08 c0       	rjmp	.+16     	; 0x6820 <conv_int+0xfe>
    6810:	10 95       	com	r17
    6812:	00 95       	com	r16
    6814:	f0 94       	com	r15
    6816:	e0 94       	com	r14
    6818:	e1 1c       	adc	r14, r1
    681a:	f1 1c       	adc	r15, r1
    681c:	01 1d       	adc	r16, r1
    681e:	11 1d       	adc	r17, r1
    6820:	c4 01       	movw	r24, r8
    6822:	b8 01       	movw	r22, r16
    6824:	a7 01       	movw	r20, r14
    6826:	2d 2d       	mov	r18, r13
    6828:	0e 94 3e 33 	call	0x667c	; 0x667c <putval>
    682c:	81 e0       	ldi	r24, 0x01	; 1
    682e:	01 c0       	rjmp	.+2      	; 0x6832 <conv_int+0x110>
    6830:	80 e0       	ldi	r24, 0x00	; 0
    6832:	df 91       	pop	r29
    6834:	cf 91       	pop	r28
    6836:	1f 91       	pop	r17
    6838:	0f 91       	pop	r16
    683a:	ff 90       	pop	r15
    683c:	ef 90       	pop	r14
    683e:	df 90       	pop	r13
    6840:	bf 90       	pop	r11
    6842:	af 90       	pop	r10
    6844:	9f 90       	pop	r9
    6846:	8f 90       	pop	r8
    6848:	08 95       	ret

0000684a <conv_brk>:
    684a:	a0 e2       	ldi	r26, 0x20	; 32
    684c:	b0 e0       	ldi	r27, 0x00	; 0
    684e:	eb e2       	ldi	r30, 0x2B	; 43
    6850:	f4 e3       	ldi	r31, 0x34	; 52
    6852:	0c 94 e5 39 	jmp	0x73ca	; 0x73ca <__prologue_saves__+0x8>
    6856:	5c 01       	movw	r10, r24
    6858:	6b 01       	movw	r12, r22
    685a:	8a 01       	movw	r16, r20
    685c:	79 01       	movw	r14, r18
    685e:	fe 01       	movw	r30, r28
    6860:	31 96       	adiw	r30, 0x01	; 1
    6862:	80 e2       	ldi	r24, 0x20	; 32
    6864:	df 01       	movw	r26, r30
    6866:	1d 92       	st	X+, r1
    6868:	8a 95       	dec	r24
    686a:	e9 f7       	brne	.-6      	; 0x6866 <conv_brk+0x1c>
    686c:	70 e0       	ldi	r23, 0x00	; 0
    686e:	30 e0       	ldi	r19, 0x00	; 0
    6870:	60 e0       	ldi	r22, 0x00	; 0
    6872:	40 e0       	ldi	r20, 0x00	; 0
    6874:	50 e0       	ldi	r21, 0x00	; 0
    6876:	3f 01       	movw	r6, r30
    6878:	a1 e0       	ldi	r26, 0x01	; 1
    687a:	b0 e0       	ldi	r27, 0x00	; 0
    687c:	f5 01       	movw	r30, r10
    687e:	83 81       	ldd	r24, Z+3	; 0x03
    6880:	f7 01       	movw	r30, r14
    6882:	83 fd       	sbrc	r24, 3
    6884:	25 91       	lpm	r18, Z+
    6886:	83 ff       	sbrs	r24, 3
    6888:	21 91       	ld	r18, Z+
    688a:	7f 01       	movw	r14, r30
    688c:	22 23       	and	r18, r18
    688e:	09 f4       	brne	.+2      	; 0x6892 <conv_brk+0x48>
    6890:	81 c0       	rjmp	.+258    	; 0x6994 <conv_brk+0x14a>
    6892:	2e 35       	cpi	r18, 0x5E	; 94
    6894:	19 f4       	brne	.+6      	; 0x689c <conv_brk+0x52>
    6896:	41 15       	cp	r20, r1
    6898:	51 05       	cpc	r21, r1
    689a:	69 f1       	breq	.+90     	; 0x68f6 <conv_brk+0xac>
    689c:	87 2f       	mov	r24, r23
    689e:	90 e0       	ldi	r25, 0x00	; 0
    68a0:	84 17       	cp	r24, r20
    68a2:	95 07       	cpc	r25, r21
    68a4:	44 f4       	brge	.+16     	; 0x68b6 <conv_brk+0x6c>
    68a6:	2d 35       	cpi	r18, 0x5D	; 93
    68a8:	51 f1       	breq	.+84     	; 0x68fe <conv_brk+0xb4>
    68aa:	2d 32       	cpi	r18, 0x2D	; 45
    68ac:	21 f4       	brne	.+8      	; 0x68b6 <conv_brk+0x6c>
    68ae:	33 23       	and	r19, r19
    68b0:	29 f4       	brne	.+10     	; 0x68bc <conv_brk+0x72>
    68b2:	31 e0       	ldi	r19, 0x01	; 1
    68b4:	21 c0       	rjmp	.+66     	; 0x68f8 <conv_brk+0xae>
    68b6:	33 23       	and	r19, r19
    68b8:	09 f4       	brne	.+2      	; 0x68bc <conv_brk+0x72>
    68ba:	62 2f       	mov	r22, r18
    68bc:	32 2f       	mov	r19, r18
    68be:	83 2f       	mov	r24, r19
    68c0:	86 95       	lsr	r24
    68c2:	86 95       	lsr	r24
    68c4:	86 95       	lsr	r24
    68c6:	f3 01       	movw	r30, r6
    68c8:	e8 0f       	add	r30, r24
    68ca:	f1 1d       	adc	r31, r1
    68cc:	83 2f       	mov	r24, r19
    68ce:	87 70       	andi	r24, 0x07	; 7
    68d0:	4d 01       	movw	r8, r26
    68d2:	02 c0       	rjmp	.+4      	; 0x68d8 <conv_brk+0x8e>
    68d4:	88 0c       	add	r8, r8
    68d6:	99 1c       	adc	r9, r9
    68d8:	8a 95       	dec	r24
    68da:	e2 f7       	brpl	.-8      	; 0x68d4 <conv_brk+0x8a>
    68dc:	20 81       	ld	r18, Z
    68de:	28 29       	or	r18, r8
    68e0:	20 83       	st	Z, r18
    68e2:	36 17       	cp	r19, r22
    68e4:	11 f4       	brne	.+4      	; 0x68ea <conv_brk+0xa0>
    68e6:	30 e0       	ldi	r19, 0x00	; 0
    68e8:	07 c0       	rjmp	.+14     	; 0x68f8 <conv_brk+0xae>
    68ea:	36 17       	cp	r19, r22
    68ec:	10 f4       	brcc	.+4      	; 0x68f2 <conv_brk+0xa8>
    68ee:	3f 5f       	subi	r19, 0xFF	; 255
    68f0:	e6 cf       	rjmp	.-52     	; 0x68be <conv_brk+0x74>
    68f2:	31 50       	subi	r19, 0x01	; 1
    68f4:	e4 cf       	rjmp	.-56     	; 0x68be <conv_brk+0x74>
    68f6:	71 e0       	ldi	r23, 0x01	; 1
    68f8:	4f 5f       	subi	r20, 0xFF	; 255
    68fa:	5f 4f       	sbci	r21, 0xFF	; 255
    68fc:	bf cf       	rjmp	.-130    	; 0x687c <conv_brk+0x32>
    68fe:	33 23       	and	r19, r19
    6900:	19 f0       	breq	.+6      	; 0x6908 <conv_brk+0xbe>
    6902:	8e 81       	ldd	r24, Y+6	; 0x06
    6904:	80 62       	ori	r24, 0x20	; 32
    6906:	8e 83       	std	Y+6, r24	; 0x06
    6908:	77 23       	and	r23, r23
    690a:	59 f0       	breq	.+22     	; 0x6922 <conv_brk+0xd8>
    690c:	fe 01       	movw	r30, r28
    690e:	31 96       	adiw	r30, 0x01	; 1
    6910:	9e 01       	movw	r18, r28
    6912:	2f 5d       	subi	r18, 0xDF	; 223
    6914:	3f 4f       	sbci	r19, 0xFF	; 255
    6916:	80 81       	ld	r24, Z
    6918:	80 95       	com	r24
    691a:	81 93       	st	Z+, r24
    691c:	e2 17       	cp	r30, r18
    691e:	f3 07       	cpc	r31, r19
    6920:	d1 f7       	brne	.-12     	; 0x6916 <conv_brk+0xcc>
    6922:	99 24       	eor	r9, r9
    6924:	93 94       	inc	r9
    6926:	3e 01       	movw	r6, r28
    6928:	08 94       	sec
    692a:	61 1c       	adc	r6, r1
    692c:	71 1c       	adc	r7, r1
    692e:	c5 01       	movw	r24, r10
    6930:	0e 94 6f 3b 	call	0x76de	; 0x76de <fgetc>
    6934:	ac 01       	movw	r20, r24
    6936:	97 fd       	sbrc	r25, 7
    6938:	25 c0       	rjmp	.+74     	; 0x6984 <conv_brk+0x13a>
    693a:	86 95       	lsr	r24
    693c:	86 95       	lsr	r24
    693e:	86 95       	lsr	r24
    6940:	f3 01       	movw	r30, r6
    6942:	e8 0f       	add	r30, r24
    6944:	f1 1d       	adc	r31, r1
    6946:	80 81       	ld	r24, Z
    6948:	90 e0       	ldi	r25, 0x00	; 0
    694a:	9a 01       	movw	r18, r20
    694c:	27 70       	andi	r18, 0x07	; 7
    694e:	30 70       	andi	r19, 0x00	; 0
    6950:	02 c0       	rjmp	.+4      	; 0x6956 <conv_brk+0x10c>
    6952:	95 95       	asr	r25
    6954:	87 95       	ror	r24
    6956:	2a 95       	dec	r18
    6958:	e2 f7       	brpl	.-8      	; 0x6952 <conv_brk+0x108>
    695a:	80 fd       	sbrc	r24, 0
    695c:	05 c0       	rjmp	.+10     	; 0x6968 <conv_brk+0x11e>
    695e:	ca 01       	movw	r24, r20
    6960:	b5 01       	movw	r22, r10
    6962:	0e 94 ac 3c 	call	0x7958	; 0x7958 <ungetc>
    6966:	0e c0       	rjmp	.+28     	; 0x6984 <conv_brk+0x13a>
    6968:	01 15       	cp	r16, r1
    696a:	11 05       	cpc	r17, r1
    696c:	19 f0       	breq	.+6      	; 0x6974 <conv_brk+0x12a>
    696e:	d8 01       	movw	r26, r16
    6970:	4d 93       	st	X+, r20
    6972:	8d 01       	movw	r16, r26
    6974:	08 94       	sec
    6976:	c1 08       	sbc	r12, r1
    6978:	d1 08       	sbc	r13, r1
    697a:	99 24       	eor	r9, r9
    697c:	c1 14       	cp	r12, r1
    697e:	d1 04       	cpc	r13, r1
    6980:	b1 f6       	brne	.-84     	; 0x692e <conv_brk+0xe4>
    6982:	02 c0       	rjmp	.+4      	; 0x6988 <conv_brk+0x13e>
    6984:	99 20       	and	r9, r9
    6986:	31 f4       	brne	.+12     	; 0x6994 <conv_brk+0x14a>
    6988:	01 15       	cp	r16, r1
    698a:	11 05       	cpc	r17, r1
    698c:	29 f0       	breq	.+10     	; 0x6998 <conv_brk+0x14e>
    698e:	f8 01       	movw	r30, r16
    6990:	10 82       	st	Z, r1
    6992:	02 c0       	rjmp	.+4      	; 0x6998 <conv_brk+0x14e>
    6994:	ee 24       	eor	r14, r14
    6996:	ff 24       	eor	r15, r15
    6998:	c7 01       	movw	r24, r14
    699a:	a0 96       	adiw	r28, 0x20	; 32
    699c:	ee e0       	ldi	r30, 0x0E	; 14
    699e:	0c 94 01 3a 	jmp	0x7402	; 0x7402 <__epilogue_restores__+0x8>

000069a2 <conv_flt>:
    69a2:	2f 92       	push	r2
    69a4:	3f 92       	push	r3
    69a6:	5f 92       	push	r5
    69a8:	6f 92       	push	r6
    69aa:	7f 92       	push	r7
    69ac:	8f 92       	push	r8
    69ae:	9f 92       	push	r9
    69b0:	af 92       	push	r10
    69b2:	bf 92       	push	r11
    69b4:	cf 92       	push	r12
    69b6:	df 92       	push	r13
    69b8:	ef 92       	push	r14
    69ba:	ff 92       	push	r15
    69bc:	0f 93       	push	r16
    69be:	1f 93       	push	r17
    69c0:	cf 93       	push	r28
    69c2:	df 93       	push	r29
    69c4:	3c 01       	movw	r6, r24
    69c6:	7b 01       	movw	r14, r22
    69c8:	1a 01       	movw	r2, r20
    69ca:	0e 94 6f 3b 	call	0x76de	; 0x76de <fgetc>
    69ce:	ec 01       	movw	r28, r24
    69d0:	8b 32       	cpi	r24, 0x2B	; 43
    69d2:	39 f0       	breq	.+14     	; 0x69e2 <conv_flt+0x40>
    69d4:	8d 32       	cpi	r24, 0x2D	; 45
    69d6:	11 f0       	breq	.+4      	; 0x69dc <conv_flt+0x3a>
    69d8:	55 24       	eor	r5, r5
    69da:	11 c0       	rjmp	.+34     	; 0x69fe <conv_flt+0x5c>
    69dc:	b0 e8       	ldi	r27, 0x80	; 128
    69de:	5b 2e       	mov	r5, r27
    69e0:	01 c0       	rjmp	.+2      	; 0x69e4 <conv_flt+0x42>
    69e2:	55 24       	eor	r5, r5
    69e4:	08 94       	sec
    69e6:	e1 08       	sbc	r14, r1
    69e8:	f1 08       	sbc	r15, r1
    69ea:	e1 14       	cp	r14, r1
    69ec:	f1 04       	cpc	r15, r1
    69ee:	09 f4       	brne	.+2      	; 0x69f2 <conv_flt+0x50>
    69f0:	18 c1       	rjmp	.+560    	; 0x6c22 <conv_flt+0x280>
    69f2:	c3 01       	movw	r24, r6
    69f4:	0e 94 6f 3b 	call	0x76de	; 0x76de <fgetc>
    69f8:	ec 01       	movw	r28, r24
    69fa:	97 fd       	sbrc	r25, 7
    69fc:	12 c1       	rjmp	.+548    	; 0x6c22 <conv_flt+0x280>
    69fe:	ce 01       	movw	r24, r28
    6a00:	0e 94 0c 3b 	call	0x7618	; 0x7618 <tolower>
    6a04:	89 36       	cpi	r24, 0x69	; 105
    6a06:	91 05       	cpc	r25, r1
    6a08:	21 f0       	breq	.+8      	; 0x6a12 <conv_flt+0x70>
    6a0a:	8e 36       	cpi	r24, 0x6E	; 110
    6a0c:	91 05       	cpc	r25, r1
    6a0e:	99 f5       	brne	.+102    	; 0x6a76 <conv_flt+0xd4>
    6a10:	1d c0       	rjmp	.+58     	; 0x6a4c <conv_flt+0xaa>
    6a12:	0e e7       	ldi	r16, 0x7E	; 126
    6a14:	18 e0       	ldi	r17, 0x08	; 8
    6a16:	1c c0       	rjmp	.+56     	; 0x6a50 <conv_flt+0xae>
    6a18:	08 94       	sec
    6a1a:	e1 08       	sbc	r14, r1
    6a1c:	f1 08       	sbc	r15, r1
    6a1e:	e1 14       	cp	r14, r1
    6a20:	f1 04       	cpc	r15, r1
    6a22:	71 f0       	breq	.+28     	; 0x6a40 <conv_flt+0x9e>
    6a24:	c3 01       	movw	r24, r6
    6a26:	0e 94 6f 3b 	call	0x76de	; 0x76de <fgetc>
    6a2a:	ec 01       	movw	r28, r24
    6a2c:	97 fd       	sbrc	r25, 7
    6a2e:	08 c0       	rjmp	.+16     	; 0x6a40 <conv_flt+0x9e>
    6a30:	0e 94 0c 3b 	call	0x7618	; 0x7618 <tolower>
    6a34:	d8 16       	cp	r13, r24
    6a36:	61 f0       	breq	.+24     	; 0x6a50 <conv_flt+0xae>
    6a38:	ce 01       	movw	r24, r28
    6a3a:	b3 01       	movw	r22, r6
    6a3c:	0e 94 ac 3c 	call	0x7958	; 0x7958 <ungetc>
    6a40:	28 e0       	ldi	r18, 0x08	; 8
    6a42:	01 38       	cpi	r16, 0x81	; 129
    6a44:	12 07       	cpc	r17, r18
    6a46:	09 f0       	breq	.+2      	; 0x6a4a <conv_flt+0xa8>
    6a48:	ec c0       	rjmp	.+472    	; 0x6c22 <conv_flt+0x280>
    6a4a:	08 c0       	rjmp	.+16     	; 0x6a5c <conv_flt+0xba>
    6a4c:	0b e7       	ldi	r16, 0x7B	; 123
    6a4e:	18 e0       	ldi	r17, 0x08	; 8
    6a50:	f8 01       	movw	r30, r16
    6a52:	0f 5f       	subi	r16, 0xFF	; 255
    6a54:	1f 4f       	sbci	r17, 0xFF	; 255
    6a56:	d4 90       	lpm	r13, Z+
    6a58:	dd 20       	and	r13, r13
    6a5a:	f1 f6       	brne	.-68     	; 0x6a18 <conv_flt+0x76>
    6a5c:	0e 57       	subi	r16, 0x7E	; 126
    6a5e:	18 40       	sbci	r17, 0x08	; 8
    6a60:	29 f0       	breq	.+10     	; 0x6a6c <conv_flt+0xca>
    6a62:	80 e0       	ldi	r24, 0x00	; 0
    6a64:	90 e0       	ldi	r25, 0x00	; 0
    6a66:	a0 e8       	ldi	r26, 0x80	; 128
    6a68:	bf e7       	ldi	r27, 0x7F	; 127
    6a6a:	cf c0       	rjmp	.+414    	; 0x6c0a <conv_flt+0x268>
    6a6c:	80 e0       	ldi	r24, 0x00	; 0
    6a6e:	90 e0       	ldi	r25, 0x00	; 0
    6a70:	a0 ec       	ldi	r26, 0xC0	; 192
    6a72:	bf e7       	ldi	r27, 0x7F	; 127
    6a74:	ca c0       	rjmp	.+404    	; 0x6c0a <conv_flt+0x268>
    6a76:	cc 24       	eor	r12, r12
    6a78:	dd 24       	eor	r13, r13
    6a7a:	88 24       	eor	r8, r8
    6a7c:	99 24       	eor	r9, r9
    6a7e:	54 01       	movw	r10, r8
    6a80:	ae 01       	movw	r20, r28
    6a82:	40 53       	subi	r20, 0x30	; 48
    6a84:	24 2f       	mov	r18, r20
    6a86:	4a 30       	cpi	r20, 0x0A	; 10
    6a88:	38 f5       	brcc	.+78     	; 0x6ad8 <conv_flt+0x136>
    6a8a:	52 e0       	ldi	r21, 0x02	; 2
    6a8c:	55 2a       	or	r5, r21
    6a8e:	85 2d       	mov	r24, r5
    6a90:	90 e0       	ldi	r25, 0x00	; 0
    6a92:	ac 01       	movw	r20, r24
    6a94:	48 70       	andi	r20, 0x08	; 8
    6a96:	50 70       	andi	r21, 0x00	; 0
    6a98:	52 fe       	sbrs	r5, 2
    6a9a:	06 c0       	rjmp	.+12     	; 0x6aa8 <conv_flt+0x106>
    6a9c:	45 2b       	or	r20, r21
    6a9e:	11 f5       	brne	.+68     	; 0x6ae4 <conv_flt+0x142>
    6aa0:	08 94       	sec
    6aa2:	c1 1c       	adc	r12, r1
    6aa4:	d1 1c       	adc	r13, r1
    6aa6:	1e c0       	rjmp	.+60     	; 0x6ae4 <conv_flt+0x142>
    6aa8:	45 2b       	or	r20, r21
    6aaa:	19 f0       	breq	.+6      	; 0x6ab2 <conv_flt+0x110>
    6aac:	08 94       	sec
    6aae:	c1 08       	sbc	r12, r1
    6ab0:	d1 08       	sbc	r13, r1
    6ab2:	c5 01       	movw	r24, r10
    6ab4:	b4 01       	movw	r22, r8
    6ab6:	40 e2       	ldi	r20, 0x20	; 32
    6ab8:	0e 94 4a 33 	call	0x6694	; 0x6694 <mulacc>
    6abc:	4b 01       	movw	r8, r22
    6abe:	5c 01       	movw	r10, r24
    6ac0:	88 e9       	ldi	r24, 0x98	; 152
    6ac2:	88 16       	cp	r8, r24
    6ac4:	89 e9       	ldi	r24, 0x99	; 153
    6ac6:	98 06       	cpc	r9, r24
    6ac8:	89 e9       	ldi	r24, 0x99	; 153
    6aca:	a8 06       	cpc	r10, r24
    6acc:	89 e1       	ldi	r24, 0x19	; 25
    6ace:	b8 06       	cpc	r11, r24
    6ad0:	48 f0       	brcs	.+18     	; 0x6ae4 <conv_flt+0x142>
    6ad2:	94 e0       	ldi	r25, 0x04	; 4
    6ad4:	59 2a       	or	r5, r25
    6ad6:	06 c0       	rjmp	.+12     	; 0x6ae4 <conv_flt+0x142>
    6ad8:	4e 3f       	cpi	r20, 0xFE	; 254
    6ada:	81 f4       	brne	.+32     	; 0x6afc <conv_flt+0x15a>
    6adc:	53 fc       	sbrc	r5, 3
    6ade:	0e c0       	rjmp	.+28     	; 0x6afc <conv_flt+0x15a>
    6ae0:	e8 e0       	ldi	r30, 0x08	; 8
    6ae2:	5e 2a       	or	r5, r30
    6ae4:	08 94       	sec
    6ae6:	e1 08       	sbc	r14, r1
    6ae8:	f1 08       	sbc	r15, r1
    6aea:	e1 14       	cp	r14, r1
    6aec:	f1 04       	cpc	r15, r1
    6aee:	31 f0       	breq	.+12     	; 0x6afc <conv_flt+0x15a>
    6af0:	c3 01       	movw	r24, r6
    6af2:	0e 94 6f 3b 	call	0x76de	; 0x76de <fgetc>
    6af6:	ec 01       	movw	r28, r24
    6af8:	97 ff       	sbrs	r25, 7
    6afa:	c2 cf       	rjmp	.-124    	; 0x6a80 <conv_flt+0xde>
    6afc:	51 fe       	sbrs	r5, 1
    6afe:	91 c0       	rjmp	.+290    	; 0x6c22 <conv_flt+0x280>
    6b00:	c5 36       	cpi	r28, 0x65	; 101
    6b02:	19 f0       	breq	.+6      	; 0x6b0a <conv_flt+0x168>
    6b04:	c5 34       	cpi	r28, 0x45	; 69
    6b06:	09 f0       	breq	.+2      	; 0x6b0a <conv_flt+0x168>
    6b08:	46 c0       	rjmp	.+140    	; 0x6b96 <conv_flt+0x1f4>
    6b0a:	08 94       	sec
    6b0c:	e1 08       	sbc	r14, r1
    6b0e:	f1 08       	sbc	r15, r1
    6b10:	e1 14       	cp	r14, r1
    6b12:	f1 04       	cpc	r15, r1
    6b14:	09 f4       	brne	.+2      	; 0x6b18 <conv_flt+0x176>
    6b16:	85 c0       	rjmp	.+266    	; 0x6c22 <conv_flt+0x280>
    6b18:	c3 01       	movw	r24, r6
    6b1a:	0e 94 6f 3b 	call	0x76de	; 0x76de <fgetc>
    6b1e:	ec 01       	movw	r28, r24
    6b20:	97 fd       	sbrc	r25, 7
    6b22:	7f c0       	rjmp	.+254    	; 0x6c22 <conv_flt+0x280>
    6b24:	8b 32       	cpi	r24, 0x2B	; 43
    6b26:	21 f0       	breq	.+8      	; 0x6b30 <conv_flt+0x18e>
    6b28:	8d 32       	cpi	r24, 0x2D	; 45
    6b2a:	69 f4       	brne	.+26     	; 0x6b46 <conv_flt+0x1a4>
    6b2c:	f0 e1       	ldi	r31, 0x10	; 16
    6b2e:	5f 2a       	or	r5, r31
    6b30:	08 94       	sec
    6b32:	e1 08       	sbc	r14, r1
    6b34:	f1 08       	sbc	r15, r1
    6b36:	e1 14       	cp	r14, r1
    6b38:	f1 04       	cpc	r15, r1
    6b3a:	09 f4       	brne	.+2      	; 0x6b3e <conv_flt+0x19c>
    6b3c:	72 c0       	rjmp	.+228    	; 0x6c22 <conv_flt+0x280>
    6b3e:	c3 01       	movw	r24, r6
    6b40:	0e 94 6f 3b 	call	0x76de	; 0x76de <fgetc>
    6b44:	ec 01       	movw	r28, r24
    6b46:	ce 01       	movw	r24, r28
    6b48:	c0 97       	sbiw	r24, 0x30	; 48
    6b4a:	0a 97       	sbiw	r24, 0x0a	; 10
    6b4c:	08 f0       	brcs	.+2      	; 0x6b50 <conv_flt+0x1ae>
    6b4e:	69 c0       	rjmp	.+210    	; 0x6c22 <conv_flt+0x280>
    6b50:	00 e0       	ldi	r16, 0x00	; 0
    6b52:	10 e0       	ldi	r17, 0x00	; 0
    6b54:	b8 01       	movw	r22, r16
    6b56:	88 27       	eor	r24, r24
    6b58:	77 fd       	sbrc	r23, 7
    6b5a:	80 95       	com	r24
    6b5c:	98 2f       	mov	r25, r24
    6b5e:	ae 01       	movw	r20, r28
    6b60:	40 53       	subi	r20, 0x30	; 48
    6b62:	24 2f       	mov	r18, r20
    6b64:	40 e2       	ldi	r20, 0x20	; 32
    6b66:	0e 94 4a 33 	call	0x6694	; 0x6694 <mulacc>
    6b6a:	8b 01       	movw	r16, r22
    6b6c:	08 94       	sec
    6b6e:	e1 08       	sbc	r14, r1
    6b70:	f1 08       	sbc	r15, r1
    6b72:	e1 14       	cp	r14, r1
    6b74:	f1 04       	cpc	r15, r1
    6b76:	39 f0       	breq	.+14     	; 0x6b86 <conv_flt+0x1e4>
    6b78:	c3 01       	movw	r24, r6
    6b7a:	0e 94 6f 3b 	call	0x76de	; 0x76de <fgetc>
    6b7e:	ec 01       	movw	r28, r24
    6b80:	c0 97       	sbiw	r24, 0x30	; 48
    6b82:	0a 97       	sbiw	r24, 0x0a	; 10
    6b84:	38 f3       	brcs	.-50     	; 0x6b54 <conv_flt+0x1b2>
    6b86:	b8 01       	movw	r22, r16
    6b88:	54 fe       	sbrs	r5, 4
    6b8a:	03 c0       	rjmp	.+6      	; 0x6b92 <conv_flt+0x1f0>
    6b8c:	70 95       	com	r23
    6b8e:	61 95       	neg	r22
    6b90:	7f 4f       	sbci	r23, 0xFF	; 255
    6b92:	c6 0e       	add	r12, r22
    6b94:	d7 1e       	adc	r13, r23
    6b96:	ef 28       	or	r14, r15
    6b98:	31 f0       	breq	.+12     	; 0x6ba6 <conv_flt+0x204>
    6b9a:	d7 fd       	sbrc	r29, 7
    6b9c:	04 c0       	rjmp	.+8      	; 0x6ba6 <conv_flt+0x204>
    6b9e:	ce 01       	movw	r24, r28
    6ba0:	b3 01       	movw	r22, r6
    6ba2:	0e 94 ac 3c 	call	0x7958	; 0x7958 <ungetc>
    6ba6:	c5 01       	movw	r24, r10
    6ba8:	b4 01       	movw	r22, r8
    6baa:	0e 94 51 38 	call	0x70a2	; 0x70a2 <__floatunsisf>
    6bae:	d7 fe       	sbrs	r13, 7
    6bb0:	0d c0       	rjmp	.+26     	; 0x6bcc <conv_flt+0x22a>
    6bb2:	aa e9       	ldi	r26, 0x9A	; 154
    6bb4:	ea 2e       	mov	r14, r26
    6bb6:	a8 e0       	ldi	r26, 0x08	; 8
    6bb8:	fa 2e       	mov	r15, r26
    6bba:	d0 94       	com	r13
    6bbc:	c1 94       	neg	r12
    6bbe:	d1 08       	sbc	r13, r1
    6bc0:	d3 94       	inc	r13
    6bc2:	c0 e2       	ldi	r28, 0x20	; 32
    6bc4:	d0 e0       	ldi	r29, 0x00	; 0
    6bc6:	00 e0       	ldi	r16, 0x00	; 0
    6bc8:	10 e0       	ldi	r17, 0x00	; 0
    6bca:	0e c0       	rjmp	.+28     	; 0x6be8 <conv_flt+0x246>
    6bcc:	f2 eb       	ldi	r31, 0xB2	; 178
    6bce:	ef 2e       	mov	r14, r31
    6bd0:	f8 e0       	ldi	r31, 0x08	; 8
    6bd2:	ff 2e       	mov	r15, r31
    6bd4:	f6 cf       	rjmp	.-20     	; 0x6bc2 <conv_flt+0x220>
    6bd6:	f7 01       	movw	r30, r14
    6bd8:	25 91       	lpm	r18, Z+
    6bda:	35 91       	lpm	r19, Z+
    6bdc:	45 91       	lpm	r20, Z+
    6bde:	54 91       	lpm	r21, Z+
    6be0:	0e 94 03 39 	call	0x7206	; 0x7206 <__mulsf3>
    6be4:	cc 1a       	sub	r12, r28
    6be6:	dd 0a       	sbc	r13, r29
    6be8:	cc 16       	cp	r12, r28
    6bea:	dd 06       	cpc	r13, r29
    6bec:	a0 f7       	brcc	.-24     	; 0x6bd6 <conv_flt+0x234>
    6bee:	d6 95       	lsr	r29
    6bf0:	c7 95       	ror	r28
    6bf2:	0f 5f       	subi	r16, 0xFF	; 255
    6bf4:	1f 4f       	sbci	r17, 0xFF	; 255
    6bf6:	06 30       	cpi	r16, 0x06	; 6
    6bf8:	11 05       	cpc	r17, r1
    6bfa:	29 f0       	breq	.+10     	; 0x6c06 <conv_flt+0x264>
    6bfc:	ec ef       	ldi	r30, 0xFC	; 252
    6bfe:	ff ef       	ldi	r31, 0xFF	; 255
    6c00:	ee 0e       	add	r14, r30
    6c02:	ff 1e       	adc	r15, r31
    6c04:	f1 cf       	rjmp	.-30     	; 0x6be8 <conv_flt+0x246>
    6c06:	dc 01       	movw	r26, r24
    6c08:	cb 01       	movw	r24, r22
    6c0a:	57 fc       	sbrc	r5, 7
    6c0c:	b0 58       	subi	r27, 0x80	; 128
    6c0e:	21 14       	cp	r2, r1
    6c10:	31 04       	cpc	r3, r1
    6c12:	29 f0       	breq	.+10     	; 0x6c1e <conv_flt+0x27c>
    6c14:	f1 01       	movw	r30, r2
    6c16:	80 83       	st	Z, r24
    6c18:	91 83       	std	Z+1, r25	; 0x01
    6c1a:	a2 83       	std	Z+2, r26	; 0x02
    6c1c:	b3 83       	std	Z+3, r27	; 0x03
    6c1e:	81 e0       	ldi	r24, 0x01	; 1
    6c20:	01 c0       	rjmp	.+2      	; 0x6c24 <conv_flt+0x282>
    6c22:	80 e0       	ldi	r24, 0x00	; 0
    6c24:	df 91       	pop	r29
    6c26:	cf 91       	pop	r28
    6c28:	1f 91       	pop	r17
    6c2a:	0f 91       	pop	r16
    6c2c:	ff 90       	pop	r15
    6c2e:	ef 90       	pop	r14
    6c30:	df 90       	pop	r13
    6c32:	cf 90       	pop	r12
    6c34:	bf 90       	pop	r11
    6c36:	af 90       	pop	r10
    6c38:	9f 90       	pop	r9
    6c3a:	8f 90       	pop	r8
    6c3c:	7f 90       	pop	r7
    6c3e:	6f 90       	pop	r6
    6c40:	5f 90       	pop	r5
    6c42:	3f 90       	pop	r3
    6c44:	2f 90       	pop	r2
    6c46:	08 95       	ret

00006c48 <vfscanf>:
    6c48:	a0 e0       	ldi	r26, 0x00	; 0
    6c4a:	b0 e0       	ldi	r27, 0x00	; 0
    6c4c:	ea e2       	ldi	r30, 0x2A	; 42
    6c4e:	f6 e3       	ldi	r31, 0x36	; 54
    6c50:	0c 94 e4 39 	jmp	0x73c8	; 0x73c8 <__prologue_saves__+0x6>
    6c54:	4c 01       	movw	r8, r24
    6c56:	5b 01       	movw	r10, r22
    6c58:	3a 01       	movw	r6, r20
    6c5a:	fc 01       	movw	r30, r24
    6c5c:	17 82       	std	Z+7, r1	; 0x07
    6c5e:	16 82       	std	Z+6, r1	; 0x06
    6c60:	55 24       	eor	r5, r5
    6c62:	04 c1       	rjmp	.+520    	; 0x6e6c <vfscanf+0x224>
    6c64:	81 2f       	mov	r24, r17
    6c66:	90 e0       	ldi	r25, 0x00	; 0
    6c68:	0e 94 04 3b 	call	0x7608	; 0x7608 <isspace>
    6c6c:	89 2b       	or	r24, r25
    6c6e:	21 f0       	breq	.+8      	; 0x6c78 <vfscanf+0x30>
    6c70:	c4 01       	movw	r24, r8
    6c72:	0e 94 78 33 	call	0x66f0	; 0x66f0 <skip_spaces>
    6c76:	fa c0       	rjmp	.+500    	; 0x6e6c <vfscanf+0x224>
    6c78:	15 32       	cpi	r17, 0x25	; 37
    6c7a:	49 f4       	brne	.+18     	; 0x6c8e <vfscanf+0x46>
    6c7c:	f5 01       	movw	r30, r10
    6c7e:	f3 fc       	sbrc	r15, 3
    6c80:	65 91       	lpm	r22, Z+
    6c82:	f3 fe       	sbrs	r15, 3
    6c84:	61 91       	ld	r22, Z+
    6c86:	5f 01       	movw	r10, r30
    6c88:	65 32       	cpi	r22, 0x25	; 37
    6c8a:	69 f4       	brne	.+26     	; 0x6ca6 <vfscanf+0x5e>
    6c8c:	15 e2       	ldi	r17, 0x25	; 37
    6c8e:	c4 01       	movw	r24, r8
    6c90:	0e 94 6f 3b 	call	0x76de	; 0x76de <fgetc>
    6c94:	97 fd       	sbrc	r25, 7
    6c96:	f6 c0       	rjmp	.+492    	; 0x6e84 <vfscanf+0x23c>
    6c98:	18 17       	cp	r17, r24
    6c9a:	09 f4       	brne	.+2      	; 0x6c9e <vfscanf+0x56>
    6c9c:	e7 c0       	rjmp	.+462    	; 0x6e6c <vfscanf+0x224>
    6c9e:	b4 01       	movw	r22, r8
    6ca0:	0e 94 ac 3c 	call	0x7958	; 0x7958 <ungetc>
    6ca4:	f4 c0       	rjmp	.+488    	; 0x6e8e <vfscanf+0x246>
    6ca6:	6a 32       	cpi	r22, 0x2A	; 42
    6ca8:	19 f0       	breq	.+6      	; 0x6cb0 <vfscanf+0x68>
    6caa:	16 2f       	mov	r17, r22
    6cac:	00 e0       	ldi	r16, 0x00	; 0
    6cae:	06 c0       	rjmp	.+12     	; 0x6cbc <vfscanf+0x74>
    6cb0:	f3 fc       	sbrc	r15, 3
    6cb2:	15 91       	lpm	r17, Z+
    6cb4:	f3 fe       	sbrs	r15, 3
    6cb6:	11 91       	ld	r17, Z+
    6cb8:	5f 01       	movw	r10, r30
    6cba:	01 e0       	ldi	r16, 0x01	; 1
    6cbc:	cc 24       	eor	r12, r12
    6cbe:	dd 24       	eor	r13, r13
    6cc0:	0e c0       	rjmp	.+28     	; 0x6cde <vfscanf+0x96>
    6cc2:	02 60       	ori	r16, 0x02	; 2
    6cc4:	b6 01       	movw	r22, r12
    6cc6:	80 e0       	ldi	r24, 0x00	; 0
    6cc8:	90 e0       	ldi	r25, 0x00	; 0
    6cca:	40 e2       	ldi	r20, 0x20	; 32
    6ccc:	0e 94 4a 33 	call	0x6694	; 0x6694 <mulacc>
    6cd0:	6b 01       	movw	r12, r22
    6cd2:	f5 01       	movw	r30, r10
    6cd4:	f3 fc       	sbrc	r15, 3
    6cd6:	15 91       	lpm	r17, Z+
    6cd8:	f3 fe       	sbrs	r15, 3
    6cda:	11 91       	ld	r17, Z+
    6cdc:	5f 01       	movw	r10, r30
    6cde:	21 2f       	mov	r18, r17
    6ce0:	20 53       	subi	r18, 0x30	; 48
    6ce2:	2a 30       	cpi	r18, 0x0A	; 10
    6ce4:	70 f3       	brcs	.-36     	; 0x6cc2 <vfscanf+0x7a>
    6ce6:	01 fd       	sbrc	r16, 1
    6ce8:	04 c0       	rjmp	.+8      	; 0x6cf2 <vfscanf+0xaa>
    6cea:	cc 24       	eor	r12, r12
    6cec:	ca 94       	dec	r12
    6cee:	dc 2c       	mov	r13, r12
    6cf0:	04 c0       	rjmp	.+8      	; 0x6cfa <vfscanf+0xb2>
    6cf2:	c1 14       	cp	r12, r1
    6cf4:	d1 04       	cpc	r13, r1
    6cf6:	09 f4       	brne	.+2      	; 0x6cfa <vfscanf+0xb2>
    6cf8:	ca c0       	rjmp	.+404    	; 0x6e8e <vfscanf+0x246>
    6cfa:	18 36       	cpi	r17, 0x68	; 104
    6cfc:	21 f0       	breq	.+8      	; 0x6d06 <vfscanf+0xbe>
    6cfe:	1c 36       	cpi	r17, 0x6C	; 108
    6d00:	99 f4       	brne	.+38     	; 0x6d28 <vfscanf+0xe0>
    6d02:	f5 01       	movw	r30, r10
    6d04:	0b c0       	rjmp	.+22     	; 0x6d1c <vfscanf+0xd4>
    6d06:	f5 01       	movw	r30, r10
    6d08:	f3 fc       	sbrc	r15, 3
    6d0a:	65 91       	lpm	r22, Z+
    6d0c:	f3 fe       	sbrs	r15, 3
    6d0e:	61 91       	ld	r22, Z+
    6d10:	68 36       	cpi	r22, 0x68	; 104
    6d12:	19 f0       	breq	.+6      	; 0x6d1a <vfscanf+0xd2>
    6d14:	5f 01       	movw	r10, r30
    6d16:	16 2f       	mov	r17, r22
    6d18:	07 c0       	rjmp	.+14     	; 0x6d28 <vfscanf+0xe0>
    6d1a:	08 60       	ori	r16, 0x08	; 8
    6d1c:	04 60       	ori	r16, 0x04	; 4
    6d1e:	f3 fc       	sbrc	r15, 3
    6d20:	15 91       	lpm	r17, Z+
    6d22:	f3 fe       	sbrs	r15, 3
    6d24:	11 91       	ld	r17, Z+
    6d26:	5f 01       	movw	r10, r30
    6d28:	11 23       	and	r17, r17
    6d2a:	09 f4       	brne	.+2      	; 0x6d2e <vfscanf+0xe6>
    6d2c:	b0 c0       	rjmp	.+352    	; 0x6e8e <vfscanf+0x246>
    6d2e:	89 e6       	ldi	r24, 0x69	; 105
    6d30:	98 e0       	ldi	r25, 0x08	; 8
    6d32:	61 2f       	mov	r22, r17
    6d34:	70 e0       	ldi	r23, 0x00	; 0
    6d36:	0e 94 14 3b 	call	0x7628	; 0x7628 <strchr_P>
    6d3a:	89 2b       	or	r24, r25
    6d3c:	09 f4       	brne	.+2      	; 0x6d40 <vfscanf+0xf8>
    6d3e:	a7 c0       	rjmp	.+334    	; 0x6e8e <vfscanf+0x246>
    6d40:	80 2f       	mov	r24, r16
    6d42:	00 ff       	sbrs	r16, 0
    6d44:	03 c0       	rjmp	.+6      	; 0x6d4c <vfscanf+0x104>
    6d46:	ee 24       	eor	r14, r14
    6d48:	ff 24       	eor	r15, r15
    6d4a:	07 c0       	rjmp	.+14     	; 0x6d5a <vfscanf+0x112>
    6d4c:	f3 01       	movw	r30, r6
    6d4e:	e0 80       	ld	r14, Z
    6d50:	f1 80       	ldd	r15, Z+1	; 0x01
    6d52:	22 e0       	ldi	r18, 0x02	; 2
    6d54:	30 e0       	ldi	r19, 0x00	; 0
    6d56:	62 0e       	add	r6, r18
    6d58:	73 1e       	adc	r7, r19
    6d5a:	1e 36       	cpi	r17, 0x6E	; 110
    6d5c:	51 f4       	brne	.+20     	; 0x6d72 <vfscanf+0x12a>
    6d5e:	f4 01       	movw	r30, r8
    6d60:	46 81       	ldd	r20, Z+6	; 0x06
    6d62:	57 81       	ldd	r21, Z+7	; 0x07
    6d64:	60 e0       	ldi	r22, 0x00	; 0
    6d66:	70 e0       	ldi	r23, 0x00	; 0
    6d68:	c7 01       	movw	r24, r14
    6d6a:	20 2f       	mov	r18, r16
    6d6c:	0e 94 3e 33 	call	0x667c	; 0x667c <putval>
    6d70:	7d c0       	rjmp	.+250    	; 0x6e6c <vfscanf+0x224>
    6d72:	13 36       	cpi	r17, 0x63	; 99
    6d74:	b9 f4       	brne	.+46     	; 0x6da4 <vfscanf+0x15c>
    6d76:	81 fd       	sbrc	r24, 1
    6d78:	03 c0       	rjmp	.+6      	; 0x6d80 <vfscanf+0x138>
    6d7a:	81 e0       	ldi	r24, 0x01	; 1
    6d7c:	c8 2e       	mov	r12, r24
    6d7e:	d1 2c       	mov	r13, r1
    6d80:	c4 01       	movw	r24, r8
    6d82:	0e 94 6f 3b 	call	0x76de	; 0x76de <fgetc>
    6d86:	97 fd       	sbrc	r25, 7
    6d88:	7d c0       	rjmp	.+250    	; 0x6e84 <vfscanf+0x23c>
    6d8a:	e1 14       	cp	r14, r1
    6d8c:	f1 04       	cpc	r15, r1
    6d8e:	19 f0       	breq	.+6      	; 0x6d96 <vfscanf+0x14e>
    6d90:	f7 01       	movw	r30, r14
    6d92:	81 93       	st	Z+, r24
    6d94:	7f 01       	movw	r14, r30
    6d96:	08 94       	sec
    6d98:	c1 08       	sbc	r12, r1
    6d9a:	d1 08       	sbc	r13, r1
    6d9c:	c1 14       	cp	r12, r1
    6d9e:	d1 04       	cpc	r13, r1
    6da0:	79 f7       	brne	.-34     	; 0x6d80 <vfscanf+0x138>
    6da2:	62 c0       	rjmp	.+196    	; 0x6e68 <vfscanf+0x220>
    6da4:	1b 35       	cpi	r17, 0x5B	; 91
    6da6:	59 f4       	brne	.+22     	; 0x6dbe <vfscanf+0x176>
    6da8:	c4 01       	movw	r24, r8
    6daa:	b6 01       	movw	r22, r12
    6dac:	a7 01       	movw	r20, r14
    6dae:	95 01       	movw	r18, r10
    6db0:	0e 94 25 34 	call	0x684a	; 0x684a <conv_brk>
    6db4:	5c 01       	movw	r10, r24
    6db6:	00 97       	sbiw	r24, 0x00	; 0
    6db8:	09 f0       	breq	.+2      	; 0x6dbc <vfscanf+0x174>
    6dba:	56 c0       	rjmp	.+172    	; 0x6e68 <vfscanf+0x220>
    6dbc:	50 c0       	rjmp	.+160    	; 0x6e5e <vfscanf+0x216>
    6dbe:	c4 01       	movw	r24, r8
    6dc0:	0e 94 78 33 	call	0x66f0	; 0x66f0 <skip_spaces>
    6dc4:	97 fd       	sbrc	r25, 7
    6dc6:	5e c0       	rjmp	.+188    	; 0x6e84 <vfscanf+0x23c>
    6dc8:	1f 36       	cpi	r17, 0x6F	; 111
    6dca:	d1 f1       	breq	.+116    	; 0x6e40 <vfscanf+0x1f8>
    6dcc:	10 37       	cpi	r17, 0x70	; 112
    6dce:	38 f4       	brcc	.+14     	; 0x6dde <vfscanf+0x196>
    6dd0:	14 36       	cpi	r17, 0x64	; 100
    6dd2:	a1 f1       	breq	.+104    	; 0x6e3c <vfscanf+0x1f4>
    6dd4:	19 36       	cpi	r17, 0x69	; 105
    6dd6:	a9 f1       	breq	.+106    	; 0x6e42 <vfscanf+0x1fa>
    6dd8:	18 35       	cpi	r17, 0x58	; 88
    6dda:	d1 f5       	brne	.+116    	; 0x6e50 <vfscanf+0x208>
    6ddc:	2d c0       	rjmp	.+90     	; 0x6e38 <vfscanf+0x1f0>
    6dde:	13 37       	cpi	r17, 0x73	; 115
    6de0:	51 f0       	breq	.+20     	; 0x6df6 <vfscanf+0x1ae>
    6de2:	14 37       	cpi	r17, 0x74	; 116
    6de4:	18 f4       	brcc	.+6      	; 0x6dec <vfscanf+0x1a4>
    6de6:	10 37       	cpi	r17, 0x70	; 112
    6de8:	99 f5       	brne	.+102    	; 0x6e50 <vfscanf+0x208>
    6dea:	26 c0       	rjmp	.+76     	; 0x6e38 <vfscanf+0x1f0>
    6dec:	15 37       	cpi	r17, 0x75	; 117
    6dee:	31 f1       	breq	.+76     	; 0x6e3c <vfscanf+0x1f4>
    6df0:	18 37       	cpi	r17, 0x78	; 120
    6df2:	71 f5       	brne	.+92     	; 0x6e50 <vfscanf+0x208>
    6df4:	21 c0       	rjmp	.+66     	; 0x6e38 <vfscanf+0x1f0>
    6df6:	c4 01       	movw	r24, r8
    6df8:	0e 94 6f 3b 	call	0x76de	; 0x76de <fgetc>
    6dfc:	ec 01       	movw	r28, r24
    6dfe:	97 fd       	sbrc	r25, 7
    6e00:	15 c0       	rjmp	.+42     	; 0x6e2c <vfscanf+0x1e4>
    6e02:	0e 94 04 3b 	call	0x7608	; 0x7608 <isspace>
    6e06:	89 2b       	or	r24, r25
    6e08:	29 f0       	breq	.+10     	; 0x6e14 <vfscanf+0x1cc>
    6e0a:	ce 01       	movw	r24, r28
    6e0c:	b4 01       	movw	r22, r8
    6e0e:	0e 94 ac 3c 	call	0x7958	; 0x7958 <ungetc>
    6e12:	0c c0       	rjmp	.+24     	; 0x6e2c <vfscanf+0x1e4>
    6e14:	e1 14       	cp	r14, r1
    6e16:	f1 04       	cpc	r15, r1
    6e18:	19 f0       	breq	.+6      	; 0x6e20 <vfscanf+0x1d8>
    6e1a:	f7 01       	movw	r30, r14
    6e1c:	c1 93       	st	Z+, r28
    6e1e:	7f 01       	movw	r14, r30
    6e20:	08 94       	sec
    6e22:	c1 08       	sbc	r12, r1
    6e24:	d1 08       	sbc	r13, r1
    6e26:	c1 14       	cp	r12, r1
    6e28:	d1 04       	cpc	r13, r1
    6e2a:	29 f7       	brne	.-54     	; 0x6df6 <vfscanf+0x1ae>
    6e2c:	e1 14       	cp	r14, r1
    6e2e:	f1 04       	cpc	r15, r1
    6e30:	d9 f0       	breq	.+54     	; 0x6e68 <vfscanf+0x220>
    6e32:	f7 01       	movw	r30, r14
    6e34:	10 82       	st	Z, r1
    6e36:	18 c0       	rjmp	.+48     	; 0x6e68 <vfscanf+0x220>
    6e38:	00 64       	ori	r16, 0x40	; 64
    6e3a:	03 c0       	rjmp	.+6      	; 0x6e42 <vfscanf+0x1fa>
    6e3c:	00 62       	ori	r16, 0x20	; 32
    6e3e:	01 c0       	rjmp	.+2      	; 0x6e42 <vfscanf+0x1fa>
    6e40:	00 61       	ori	r16, 0x10	; 16
    6e42:	c4 01       	movw	r24, r8
    6e44:	b6 01       	movw	r22, r12
    6e46:	a7 01       	movw	r20, r14
    6e48:	20 2f       	mov	r18, r16
    6e4a:	0e 94 91 33 	call	0x6722	; 0x6722 <conv_int>
    6e4e:	05 c0       	rjmp	.+10     	; 0x6e5a <vfscanf+0x212>
    6e50:	c4 01       	movw	r24, r8
    6e52:	b6 01       	movw	r22, r12
    6e54:	a7 01       	movw	r20, r14
    6e56:	0e 94 d1 34 	call	0x69a2	; 0x69a2 <conv_flt>
    6e5a:	88 23       	and	r24, r24
    6e5c:	29 f4       	brne	.+10     	; 0x6e68 <vfscanf+0x220>
    6e5e:	f4 01       	movw	r30, r8
    6e60:	83 81       	ldd	r24, Z+3	; 0x03
    6e62:	80 73       	andi	r24, 0x30	; 48
    6e64:	79 f4       	brne	.+30     	; 0x6e84 <vfscanf+0x23c>
    6e66:	13 c0       	rjmp	.+38     	; 0x6e8e <vfscanf+0x246>
    6e68:	00 ff       	sbrs	r16, 0
    6e6a:	53 94       	inc	r5
    6e6c:	f4 01       	movw	r30, r8
    6e6e:	f3 80       	ldd	r15, Z+3	; 0x03
    6e70:	f5 01       	movw	r30, r10
    6e72:	f3 fc       	sbrc	r15, 3
    6e74:	15 91       	lpm	r17, Z+
    6e76:	f3 fe       	sbrs	r15, 3
    6e78:	11 91       	ld	r17, Z+
    6e7a:	5f 01       	movw	r10, r30
    6e7c:	11 23       	and	r17, r17
    6e7e:	09 f0       	breq	.+2      	; 0x6e82 <vfscanf+0x23a>
    6e80:	f1 ce       	rjmp	.-542    	; 0x6c64 <vfscanf+0x1c>
    6e82:	05 c0       	rjmp	.+10     	; 0x6e8e <vfscanf+0x246>
    6e84:	55 20       	and	r5, r5
    6e86:	19 f4       	brne	.+6      	; 0x6e8e <vfscanf+0x246>
    6e88:	2f ef       	ldi	r18, 0xFF	; 255
    6e8a:	3f ef       	ldi	r19, 0xFF	; 255
    6e8c:	02 c0       	rjmp	.+4      	; 0x6e92 <vfscanf+0x24a>
    6e8e:	25 2d       	mov	r18, r5
    6e90:	30 e0       	ldi	r19, 0x00	; 0
    6e92:	c9 01       	movw	r24, r18
    6e94:	cd b7       	in	r28, 0x3d	; 61
    6e96:	de b7       	in	r29, 0x3e	; 62
    6e98:	ef e0       	ldi	r30, 0x0F	; 15
    6e9a:	0c 94 00 3a 	jmp	0x7400	; 0x7400 <__epilogue_restores__+0x6>

00006e9e <__subsf3>:
    6e9e:	50 58       	subi	r21, 0x80	; 128

00006ea0 <__addsf3>:
    6ea0:	bb 27       	eor	r27, r27
    6ea2:	aa 27       	eor	r26, r26
    6ea4:	0e d0       	rcall	.+28     	; 0x6ec2 <__addsf3x>
    6ea6:	75 c1       	rjmp	.+746    	; 0x7192 <__fp_round>
    6ea8:	66 d1       	rcall	.+716    	; 0x7176 <__fp_pscA>
    6eaa:	30 f0       	brcs	.+12     	; 0x6eb8 <__addsf3+0x18>
    6eac:	6b d1       	rcall	.+726    	; 0x7184 <__fp_pscB>
    6eae:	20 f0       	brcs	.+8      	; 0x6eb8 <__addsf3+0x18>
    6eb0:	31 f4       	brne	.+12     	; 0x6ebe <__addsf3+0x1e>
    6eb2:	9f 3f       	cpi	r25, 0xFF	; 255
    6eb4:	11 f4       	brne	.+4      	; 0x6eba <__addsf3+0x1a>
    6eb6:	1e f4       	brtc	.+6      	; 0x6ebe <__addsf3+0x1e>
    6eb8:	5b c1       	rjmp	.+694    	; 0x7170 <__fp_nan>
    6eba:	0e f4       	brtc	.+2      	; 0x6ebe <__addsf3+0x1e>
    6ebc:	e0 95       	com	r30
    6ebe:	e7 fb       	bst	r30, 7
    6ec0:	51 c1       	rjmp	.+674    	; 0x7164 <__fp_inf>

00006ec2 <__addsf3x>:
    6ec2:	e9 2f       	mov	r30, r25
    6ec4:	77 d1       	rcall	.+750    	; 0x71b4 <__fp_split3>
    6ec6:	80 f3       	brcs	.-32     	; 0x6ea8 <__addsf3+0x8>
    6ec8:	ba 17       	cp	r27, r26
    6eca:	62 07       	cpc	r22, r18
    6ecc:	73 07       	cpc	r23, r19
    6ece:	84 07       	cpc	r24, r20
    6ed0:	95 07       	cpc	r25, r21
    6ed2:	18 f0       	brcs	.+6      	; 0x6eda <__addsf3x+0x18>
    6ed4:	71 f4       	brne	.+28     	; 0x6ef2 <__addsf3x+0x30>
    6ed6:	9e f5       	brtc	.+102    	; 0x6f3e <__addsf3x+0x7c>
    6ed8:	8f c1       	rjmp	.+798    	; 0x71f8 <__fp_zero>
    6eda:	0e f4       	brtc	.+2      	; 0x6ede <__addsf3x+0x1c>
    6edc:	e0 95       	com	r30
    6ede:	0b 2e       	mov	r0, r27
    6ee0:	ba 2f       	mov	r27, r26
    6ee2:	a0 2d       	mov	r26, r0
    6ee4:	0b 01       	movw	r0, r22
    6ee6:	b9 01       	movw	r22, r18
    6ee8:	90 01       	movw	r18, r0
    6eea:	0c 01       	movw	r0, r24
    6eec:	ca 01       	movw	r24, r20
    6eee:	a0 01       	movw	r20, r0
    6ef0:	11 24       	eor	r1, r1
    6ef2:	ff 27       	eor	r31, r31
    6ef4:	59 1b       	sub	r21, r25
    6ef6:	99 f0       	breq	.+38     	; 0x6f1e <__addsf3x+0x5c>
    6ef8:	59 3f       	cpi	r21, 0xF9	; 249
    6efa:	50 f4       	brcc	.+20     	; 0x6f10 <__addsf3x+0x4e>
    6efc:	50 3e       	cpi	r21, 0xE0	; 224
    6efe:	68 f1       	brcs	.+90     	; 0x6f5a <__addsf3x+0x98>
    6f00:	1a 16       	cp	r1, r26
    6f02:	f0 40       	sbci	r31, 0x00	; 0
    6f04:	a2 2f       	mov	r26, r18
    6f06:	23 2f       	mov	r18, r19
    6f08:	34 2f       	mov	r19, r20
    6f0a:	44 27       	eor	r20, r20
    6f0c:	58 5f       	subi	r21, 0xF8	; 248
    6f0e:	f3 cf       	rjmp	.-26     	; 0x6ef6 <__addsf3x+0x34>
    6f10:	46 95       	lsr	r20
    6f12:	37 95       	ror	r19
    6f14:	27 95       	ror	r18
    6f16:	a7 95       	ror	r26
    6f18:	f0 40       	sbci	r31, 0x00	; 0
    6f1a:	53 95       	inc	r21
    6f1c:	c9 f7       	brne	.-14     	; 0x6f10 <__addsf3x+0x4e>
    6f1e:	7e f4       	brtc	.+30     	; 0x6f3e <__addsf3x+0x7c>
    6f20:	1f 16       	cp	r1, r31
    6f22:	ba 0b       	sbc	r27, r26
    6f24:	62 0b       	sbc	r22, r18
    6f26:	73 0b       	sbc	r23, r19
    6f28:	84 0b       	sbc	r24, r20
    6f2a:	ba f0       	brmi	.+46     	; 0x6f5a <__addsf3x+0x98>
    6f2c:	91 50       	subi	r25, 0x01	; 1
    6f2e:	a1 f0       	breq	.+40     	; 0x6f58 <__addsf3x+0x96>
    6f30:	ff 0f       	add	r31, r31
    6f32:	bb 1f       	adc	r27, r27
    6f34:	66 1f       	adc	r22, r22
    6f36:	77 1f       	adc	r23, r23
    6f38:	88 1f       	adc	r24, r24
    6f3a:	c2 f7       	brpl	.-16     	; 0x6f2c <__addsf3x+0x6a>
    6f3c:	0e c0       	rjmp	.+28     	; 0x6f5a <__addsf3x+0x98>
    6f3e:	ba 0f       	add	r27, r26
    6f40:	62 1f       	adc	r22, r18
    6f42:	73 1f       	adc	r23, r19
    6f44:	84 1f       	adc	r24, r20
    6f46:	48 f4       	brcc	.+18     	; 0x6f5a <__addsf3x+0x98>
    6f48:	87 95       	ror	r24
    6f4a:	77 95       	ror	r23
    6f4c:	67 95       	ror	r22
    6f4e:	b7 95       	ror	r27
    6f50:	f7 95       	ror	r31
    6f52:	9e 3f       	cpi	r25, 0xFE	; 254
    6f54:	08 f0       	brcs	.+2      	; 0x6f58 <__addsf3x+0x96>
    6f56:	b3 cf       	rjmp	.-154    	; 0x6ebe <__addsf3+0x1e>
    6f58:	93 95       	inc	r25
    6f5a:	88 0f       	add	r24, r24
    6f5c:	08 f0       	brcs	.+2      	; 0x6f60 <__addsf3x+0x9e>
    6f5e:	99 27       	eor	r25, r25
    6f60:	ee 0f       	add	r30, r30
    6f62:	97 95       	ror	r25
    6f64:	87 95       	ror	r24
    6f66:	08 95       	ret

00006f68 <__cmpsf2>:
    6f68:	d9 d0       	rcall	.+434    	; 0x711c <__fp_cmp>
    6f6a:	08 f4       	brcc	.+2      	; 0x6f6e <__cmpsf2+0x6>
    6f6c:	81 e0       	ldi	r24, 0x01	; 1
    6f6e:	08 95       	ret

00006f70 <__divsf3>:
    6f70:	0c d0       	rcall	.+24     	; 0x6f8a <__divsf3x>
    6f72:	0f c1       	rjmp	.+542    	; 0x7192 <__fp_round>
    6f74:	07 d1       	rcall	.+526    	; 0x7184 <__fp_pscB>
    6f76:	40 f0       	brcs	.+16     	; 0x6f88 <__divsf3+0x18>
    6f78:	fe d0       	rcall	.+508    	; 0x7176 <__fp_pscA>
    6f7a:	30 f0       	brcs	.+12     	; 0x6f88 <__divsf3+0x18>
    6f7c:	21 f4       	brne	.+8      	; 0x6f86 <__divsf3+0x16>
    6f7e:	5f 3f       	cpi	r21, 0xFF	; 255
    6f80:	19 f0       	breq	.+6      	; 0x6f88 <__divsf3+0x18>
    6f82:	f0 c0       	rjmp	.+480    	; 0x7164 <__fp_inf>
    6f84:	51 11       	cpse	r21, r1
    6f86:	39 c1       	rjmp	.+626    	; 0x71fa <__fp_szero>
    6f88:	f3 c0       	rjmp	.+486    	; 0x7170 <__fp_nan>

00006f8a <__divsf3x>:
    6f8a:	14 d1       	rcall	.+552    	; 0x71b4 <__fp_split3>
    6f8c:	98 f3       	brcs	.-26     	; 0x6f74 <__divsf3+0x4>

00006f8e <__divsf3_pse>:
    6f8e:	99 23       	and	r25, r25
    6f90:	c9 f3       	breq	.-14     	; 0x6f84 <__divsf3+0x14>
    6f92:	55 23       	and	r21, r21
    6f94:	b1 f3       	breq	.-20     	; 0x6f82 <__divsf3+0x12>
    6f96:	95 1b       	sub	r25, r21
    6f98:	55 0b       	sbc	r21, r21
    6f9a:	bb 27       	eor	r27, r27
    6f9c:	aa 27       	eor	r26, r26
    6f9e:	62 17       	cp	r22, r18
    6fa0:	73 07       	cpc	r23, r19
    6fa2:	84 07       	cpc	r24, r20
    6fa4:	38 f0       	brcs	.+14     	; 0x6fb4 <__divsf3_pse+0x26>
    6fa6:	9f 5f       	subi	r25, 0xFF	; 255
    6fa8:	5f 4f       	sbci	r21, 0xFF	; 255
    6faa:	22 0f       	add	r18, r18
    6fac:	33 1f       	adc	r19, r19
    6fae:	44 1f       	adc	r20, r20
    6fb0:	aa 1f       	adc	r26, r26
    6fb2:	a9 f3       	breq	.-22     	; 0x6f9e <__divsf3_pse+0x10>
    6fb4:	33 d0       	rcall	.+102    	; 0x701c <__divsf3_pse+0x8e>
    6fb6:	0e 2e       	mov	r0, r30
    6fb8:	3a f0       	brmi	.+14     	; 0x6fc8 <__divsf3_pse+0x3a>
    6fba:	e0 e8       	ldi	r30, 0x80	; 128
    6fbc:	30 d0       	rcall	.+96     	; 0x701e <__divsf3_pse+0x90>
    6fbe:	91 50       	subi	r25, 0x01	; 1
    6fc0:	50 40       	sbci	r21, 0x00	; 0
    6fc2:	e6 95       	lsr	r30
    6fc4:	00 1c       	adc	r0, r0
    6fc6:	ca f7       	brpl	.-14     	; 0x6fba <__divsf3_pse+0x2c>
    6fc8:	29 d0       	rcall	.+82     	; 0x701c <__divsf3_pse+0x8e>
    6fca:	fe 2f       	mov	r31, r30
    6fcc:	27 d0       	rcall	.+78     	; 0x701c <__divsf3_pse+0x8e>
    6fce:	66 0f       	add	r22, r22
    6fd0:	77 1f       	adc	r23, r23
    6fd2:	88 1f       	adc	r24, r24
    6fd4:	bb 1f       	adc	r27, r27
    6fd6:	26 17       	cp	r18, r22
    6fd8:	37 07       	cpc	r19, r23
    6fda:	48 07       	cpc	r20, r24
    6fdc:	ab 07       	cpc	r26, r27
    6fde:	b0 e8       	ldi	r27, 0x80	; 128
    6fe0:	09 f0       	breq	.+2      	; 0x6fe4 <__divsf3_pse+0x56>
    6fe2:	bb 0b       	sbc	r27, r27
    6fe4:	80 2d       	mov	r24, r0
    6fe6:	bf 01       	movw	r22, r30
    6fe8:	ff 27       	eor	r31, r31
    6fea:	93 58       	subi	r25, 0x83	; 131
    6fec:	5f 4f       	sbci	r21, 0xFF	; 255
    6fee:	2a f0       	brmi	.+10     	; 0x6ffa <__divsf3_pse+0x6c>
    6ff0:	9e 3f       	cpi	r25, 0xFE	; 254
    6ff2:	51 05       	cpc	r21, r1
    6ff4:	68 f0       	brcs	.+26     	; 0x7010 <__divsf3_pse+0x82>
    6ff6:	b6 c0       	rjmp	.+364    	; 0x7164 <__fp_inf>
    6ff8:	00 c1       	rjmp	.+512    	; 0x71fa <__fp_szero>
    6ffa:	5f 3f       	cpi	r21, 0xFF	; 255
    6ffc:	ec f3       	brlt	.-6      	; 0x6ff8 <__divsf3_pse+0x6a>
    6ffe:	98 3e       	cpi	r25, 0xE8	; 232
    7000:	dc f3       	brlt	.-10     	; 0x6ff8 <__divsf3_pse+0x6a>
    7002:	86 95       	lsr	r24
    7004:	77 95       	ror	r23
    7006:	67 95       	ror	r22
    7008:	b7 95       	ror	r27
    700a:	f7 95       	ror	r31
    700c:	9f 5f       	subi	r25, 0xFF	; 255
    700e:	c9 f7       	brne	.-14     	; 0x7002 <__divsf3_pse+0x74>
    7010:	88 0f       	add	r24, r24
    7012:	91 1d       	adc	r25, r1
    7014:	96 95       	lsr	r25
    7016:	87 95       	ror	r24
    7018:	97 f9       	bld	r25, 7
    701a:	08 95       	ret
    701c:	e1 e0       	ldi	r30, 0x01	; 1
    701e:	66 0f       	add	r22, r22
    7020:	77 1f       	adc	r23, r23
    7022:	88 1f       	adc	r24, r24
    7024:	bb 1f       	adc	r27, r27
    7026:	62 17       	cp	r22, r18
    7028:	73 07       	cpc	r23, r19
    702a:	84 07       	cpc	r24, r20
    702c:	ba 07       	cpc	r27, r26
    702e:	20 f0       	brcs	.+8      	; 0x7038 <__divsf3_pse+0xaa>
    7030:	62 1b       	sub	r22, r18
    7032:	73 0b       	sbc	r23, r19
    7034:	84 0b       	sbc	r24, r20
    7036:	ba 0b       	sbc	r27, r26
    7038:	ee 1f       	adc	r30, r30
    703a:	88 f7       	brcc	.-30     	; 0x701e <__divsf3_pse+0x90>
    703c:	e0 95       	com	r30
    703e:	08 95       	ret

00007040 <__fixsfsi>:
    7040:	04 d0       	rcall	.+8      	; 0x704a <__fixunssfsi>
    7042:	68 94       	set
    7044:	b1 11       	cpse	r27, r1
    7046:	d9 c0       	rjmp	.+434    	; 0x71fa <__fp_szero>
    7048:	08 95       	ret

0000704a <__fixunssfsi>:
    704a:	bc d0       	rcall	.+376    	; 0x71c4 <__fp_splitA>
    704c:	88 f0       	brcs	.+34     	; 0x7070 <__fixunssfsi+0x26>
    704e:	9f 57       	subi	r25, 0x7F	; 127
    7050:	90 f0       	brcs	.+36     	; 0x7076 <__fixunssfsi+0x2c>
    7052:	b9 2f       	mov	r27, r25
    7054:	99 27       	eor	r25, r25
    7056:	b7 51       	subi	r27, 0x17	; 23
    7058:	a0 f0       	brcs	.+40     	; 0x7082 <__fixunssfsi+0x38>
    705a:	d1 f0       	breq	.+52     	; 0x7090 <__fixunssfsi+0x46>
    705c:	66 0f       	add	r22, r22
    705e:	77 1f       	adc	r23, r23
    7060:	88 1f       	adc	r24, r24
    7062:	99 1f       	adc	r25, r25
    7064:	1a f0       	brmi	.+6      	; 0x706c <__fixunssfsi+0x22>
    7066:	ba 95       	dec	r27
    7068:	c9 f7       	brne	.-14     	; 0x705c <__fixunssfsi+0x12>
    706a:	12 c0       	rjmp	.+36     	; 0x7090 <__fixunssfsi+0x46>
    706c:	b1 30       	cpi	r27, 0x01	; 1
    706e:	81 f0       	breq	.+32     	; 0x7090 <__fixunssfsi+0x46>
    7070:	c3 d0       	rcall	.+390    	; 0x71f8 <__fp_zero>
    7072:	b1 e0       	ldi	r27, 0x01	; 1
    7074:	08 95       	ret
    7076:	c0 c0       	rjmp	.+384    	; 0x71f8 <__fp_zero>
    7078:	67 2f       	mov	r22, r23
    707a:	78 2f       	mov	r23, r24
    707c:	88 27       	eor	r24, r24
    707e:	b8 5f       	subi	r27, 0xF8	; 248
    7080:	39 f0       	breq	.+14     	; 0x7090 <__fixunssfsi+0x46>
    7082:	b9 3f       	cpi	r27, 0xF9	; 249
    7084:	cc f3       	brlt	.-14     	; 0x7078 <__fixunssfsi+0x2e>
    7086:	86 95       	lsr	r24
    7088:	77 95       	ror	r23
    708a:	67 95       	ror	r22
    708c:	b3 95       	inc	r27
    708e:	d9 f7       	brne	.-10     	; 0x7086 <__fixunssfsi+0x3c>
    7090:	3e f4       	brtc	.+14     	; 0x70a0 <__fixunssfsi+0x56>
    7092:	90 95       	com	r25
    7094:	80 95       	com	r24
    7096:	70 95       	com	r23
    7098:	61 95       	neg	r22
    709a:	7f 4f       	sbci	r23, 0xFF	; 255
    709c:	8f 4f       	sbci	r24, 0xFF	; 255
    709e:	9f 4f       	sbci	r25, 0xFF	; 255
    70a0:	08 95       	ret

000070a2 <__floatunsisf>:
    70a2:	e8 94       	clt
    70a4:	09 c0       	rjmp	.+18     	; 0x70b8 <__floatsisf+0x12>

000070a6 <__floatsisf>:
    70a6:	97 fb       	bst	r25, 7
    70a8:	3e f4       	brtc	.+14     	; 0x70b8 <__floatsisf+0x12>
    70aa:	90 95       	com	r25
    70ac:	80 95       	com	r24
    70ae:	70 95       	com	r23
    70b0:	61 95       	neg	r22
    70b2:	7f 4f       	sbci	r23, 0xFF	; 255
    70b4:	8f 4f       	sbci	r24, 0xFF	; 255
    70b6:	9f 4f       	sbci	r25, 0xFF	; 255
    70b8:	99 23       	and	r25, r25
    70ba:	a9 f0       	breq	.+42     	; 0x70e6 <__floatsisf+0x40>
    70bc:	f9 2f       	mov	r31, r25
    70be:	96 e9       	ldi	r25, 0x96	; 150
    70c0:	bb 27       	eor	r27, r27
    70c2:	93 95       	inc	r25
    70c4:	f6 95       	lsr	r31
    70c6:	87 95       	ror	r24
    70c8:	77 95       	ror	r23
    70ca:	67 95       	ror	r22
    70cc:	b7 95       	ror	r27
    70ce:	f1 11       	cpse	r31, r1
    70d0:	f8 cf       	rjmp	.-16     	; 0x70c2 <__floatsisf+0x1c>
    70d2:	fa f4       	brpl	.+62     	; 0x7112 <__floatsisf+0x6c>
    70d4:	bb 0f       	add	r27, r27
    70d6:	11 f4       	brne	.+4      	; 0x70dc <__floatsisf+0x36>
    70d8:	60 ff       	sbrs	r22, 0
    70da:	1b c0       	rjmp	.+54     	; 0x7112 <__floatsisf+0x6c>
    70dc:	6f 5f       	subi	r22, 0xFF	; 255
    70de:	7f 4f       	sbci	r23, 0xFF	; 255
    70e0:	8f 4f       	sbci	r24, 0xFF	; 255
    70e2:	9f 4f       	sbci	r25, 0xFF	; 255
    70e4:	16 c0       	rjmp	.+44     	; 0x7112 <__floatsisf+0x6c>
    70e6:	88 23       	and	r24, r24
    70e8:	11 f0       	breq	.+4      	; 0x70ee <__floatsisf+0x48>
    70ea:	96 e9       	ldi	r25, 0x96	; 150
    70ec:	11 c0       	rjmp	.+34     	; 0x7110 <__floatsisf+0x6a>
    70ee:	77 23       	and	r23, r23
    70f0:	21 f0       	breq	.+8      	; 0x70fa <__floatsisf+0x54>
    70f2:	9e e8       	ldi	r25, 0x8E	; 142
    70f4:	87 2f       	mov	r24, r23
    70f6:	76 2f       	mov	r23, r22
    70f8:	05 c0       	rjmp	.+10     	; 0x7104 <__floatsisf+0x5e>
    70fa:	66 23       	and	r22, r22
    70fc:	71 f0       	breq	.+28     	; 0x711a <__floatsisf+0x74>
    70fe:	96 e8       	ldi	r25, 0x86	; 134
    7100:	86 2f       	mov	r24, r22
    7102:	70 e0       	ldi	r23, 0x00	; 0
    7104:	60 e0       	ldi	r22, 0x00	; 0
    7106:	2a f0       	brmi	.+10     	; 0x7112 <__floatsisf+0x6c>
    7108:	9a 95       	dec	r25
    710a:	66 0f       	add	r22, r22
    710c:	77 1f       	adc	r23, r23
    710e:	88 1f       	adc	r24, r24
    7110:	da f7       	brpl	.-10     	; 0x7108 <__floatsisf+0x62>
    7112:	88 0f       	add	r24, r24
    7114:	96 95       	lsr	r25
    7116:	87 95       	ror	r24
    7118:	97 f9       	bld	r25, 7
    711a:	08 95       	ret

0000711c <__fp_cmp>:
    711c:	99 0f       	add	r25, r25
    711e:	00 08       	sbc	r0, r0
    7120:	55 0f       	add	r21, r21
    7122:	aa 0b       	sbc	r26, r26
    7124:	e0 e8       	ldi	r30, 0x80	; 128
    7126:	fe ef       	ldi	r31, 0xFE	; 254
    7128:	16 16       	cp	r1, r22
    712a:	17 06       	cpc	r1, r23
    712c:	e8 07       	cpc	r30, r24
    712e:	f9 07       	cpc	r31, r25
    7130:	c0 f0       	brcs	.+48     	; 0x7162 <__fp_cmp+0x46>
    7132:	12 16       	cp	r1, r18
    7134:	13 06       	cpc	r1, r19
    7136:	e4 07       	cpc	r30, r20
    7138:	f5 07       	cpc	r31, r21
    713a:	98 f0       	brcs	.+38     	; 0x7162 <__fp_cmp+0x46>
    713c:	62 1b       	sub	r22, r18
    713e:	73 0b       	sbc	r23, r19
    7140:	84 0b       	sbc	r24, r20
    7142:	95 0b       	sbc	r25, r21
    7144:	39 f4       	brne	.+14     	; 0x7154 <__fp_cmp+0x38>
    7146:	0a 26       	eor	r0, r26
    7148:	61 f0       	breq	.+24     	; 0x7162 <__fp_cmp+0x46>
    714a:	23 2b       	or	r18, r19
    714c:	24 2b       	or	r18, r20
    714e:	25 2b       	or	r18, r21
    7150:	21 f4       	brne	.+8      	; 0x715a <__fp_cmp+0x3e>
    7152:	08 95       	ret
    7154:	0a 26       	eor	r0, r26
    7156:	09 f4       	brne	.+2      	; 0x715a <__fp_cmp+0x3e>
    7158:	a1 40       	sbci	r26, 0x01	; 1
    715a:	a6 95       	lsr	r26
    715c:	8f ef       	ldi	r24, 0xFF	; 255
    715e:	81 1d       	adc	r24, r1
    7160:	81 1d       	adc	r24, r1
    7162:	08 95       	ret

00007164 <__fp_inf>:
    7164:	97 f9       	bld	r25, 7
    7166:	9f 67       	ori	r25, 0x7F	; 127
    7168:	80 e8       	ldi	r24, 0x80	; 128
    716a:	70 e0       	ldi	r23, 0x00	; 0
    716c:	60 e0       	ldi	r22, 0x00	; 0
    716e:	08 95       	ret

00007170 <__fp_nan>:
    7170:	9f ef       	ldi	r25, 0xFF	; 255
    7172:	80 ec       	ldi	r24, 0xC0	; 192
    7174:	08 95       	ret

00007176 <__fp_pscA>:
    7176:	00 24       	eor	r0, r0
    7178:	0a 94       	dec	r0
    717a:	16 16       	cp	r1, r22
    717c:	17 06       	cpc	r1, r23
    717e:	18 06       	cpc	r1, r24
    7180:	09 06       	cpc	r0, r25
    7182:	08 95       	ret

00007184 <__fp_pscB>:
    7184:	00 24       	eor	r0, r0
    7186:	0a 94       	dec	r0
    7188:	12 16       	cp	r1, r18
    718a:	13 06       	cpc	r1, r19
    718c:	14 06       	cpc	r1, r20
    718e:	05 06       	cpc	r0, r21
    7190:	08 95       	ret

00007192 <__fp_round>:
    7192:	09 2e       	mov	r0, r25
    7194:	03 94       	inc	r0
    7196:	00 0c       	add	r0, r0
    7198:	11 f4       	brne	.+4      	; 0x719e <__fp_round+0xc>
    719a:	88 23       	and	r24, r24
    719c:	52 f0       	brmi	.+20     	; 0x71b2 <__fp_round+0x20>
    719e:	bb 0f       	add	r27, r27
    71a0:	40 f4       	brcc	.+16     	; 0x71b2 <__fp_round+0x20>
    71a2:	bf 2b       	or	r27, r31
    71a4:	11 f4       	brne	.+4      	; 0x71aa <__fp_round+0x18>
    71a6:	60 ff       	sbrs	r22, 0
    71a8:	04 c0       	rjmp	.+8      	; 0x71b2 <__fp_round+0x20>
    71aa:	6f 5f       	subi	r22, 0xFF	; 255
    71ac:	7f 4f       	sbci	r23, 0xFF	; 255
    71ae:	8f 4f       	sbci	r24, 0xFF	; 255
    71b0:	9f 4f       	sbci	r25, 0xFF	; 255
    71b2:	08 95       	ret

000071b4 <__fp_split3>:
    71b4:	57 fd       	sbrc	r21, 7
    71b6:	90 58       	subi	r25, 0x80	; 128
    71b8:	44 0f       	add	r20, r20
    71ba:	55 1f       	adc	r21, r21
    71bc:	59 f0       	breq	.+22     	; 0x71d4 <__fp_splitA+0x10>
    71be:	5f 3f       	cpi	r21, 0xFF	; 255
    71c0:	71 f0       	breq	.+28     	; 0x71de <__fp_splitA+0x1a>
    71c2:	47 95       	ror	r20

000071c4 <__fp_splitA>:
    71c4:	88 0f       	add	r24, r24
    71c6:	97 fb       	bst	r25, 7
    71c8:	99 1f       	adc	r25, r25
    71ca:	61 f0       	breq	.+24     	; 0x71e4 <__fp_splitA+0x20>
    71cc:	9f 3f       	cpi	r25, 0xFF	; 255
    71ce:	79 f0       	breq	.+30     	; 0x71ee <__fp_splitA+0x2a>
    71d0:	87 95       	ror	r24
    71d2:	08 95       	ret
    71d4:	12 16       	cp	r1, r18
    71d6:	13 06       	cpc	r1, r19
    71d8:	14 06       	cpc	r1, r20
    71da:	55 1f       	adc	r21, r21
    71dc:	f2 cf       	rjmp	.-28     	; 0x71c2 <__fp_split3+0xe>
    71de:	46 95       	lsr	r20
    71e0:	f1 df       	rcall	.-30     	; 0x71c4 <__fp_splitA>
    71e2:	08 c0       	rjmp	.+16     	; 0x71f4 <__fp_splitA+0x30>
    71e4:	16 16       	cp	r1, r22
    71e6:	17 06       	cpc	r1, r23
    71e8:	18 06       	cpc	r1, r24
    71ea:	99 1f       	adc	r25, r25
    71ec:	f1 cf       	rjmp	.-30     	; 0x71d0 <__fp_splitA+0xc>
    71ee:	86 95       	lsr	r24
    71f0:	71 05       	cpc	r23, r1
    71f2:	61 05       	cpc	r22, r1
    71f4:	08 94       	sec
    71f6:	08 95       	ret

000071f8 <__fp_zero>:
    71f8:	e8 94       	clt

000071fa <__fp_szero>:
    71fa:	bb 27       	eor	r27, r27
    71fc:	66 27       	eor	r22, r22
    71fe:	77 27       	eor	r23, r23
    7200:	cb 01       	movw	r24, r22
    7202:	97 f9       	bld	r25, 7
    7204:	08 95       	ret

00007206 <__mulsf3>:
    7206:	0b d0       	rcall	.+22     	; 0x721e <__mulsf3x>
    7208:	c4 cf       	rjmp	.-120    	; 0x7192 <__fp_round>
    720a:	b5 df       	rcall	.-150    	; 0x7176 <__fp_pscA>
    720c:	28 f0       	brcs	.+10     	; 0x7218 <__mulsf3+0x12>
    720e:	ba df       	rcall	.-140    	; 0x7184 <__fp_pscB>
    7210:	18 f0       	brcs	.+6      	; 0x7218 <__mulsf3+0x12>
    7212:	95 23       	and	r25, r21
    7214:	09 f0       	breq	.+2      	; 0x7218 <__mulsf3+0x12>
    7216:	a6 cf       	rjmp	.-180    	; 0x7164 <__fp_inf>
    7218:	ab cf       	rjmp	.-170    	; 0x7170 <__fp_nan>
    721a:	11 24       	eor	r1, r1
    721c:	ee cf       	rjmp	.-36     	; 0x71fa <__fp_szero>

0000721e <__mulsf3x>:
    721e:	ca df       	rcall	.-108    	; 0x71b4 <__fp_split3>
    7220:	a0 f3       	brcs	.-24     	; 0x720a <__mulsf3+0x4>

00007222 <__mulsf3_pse>:
    7222:	95 9f       	mul	r25, r21
    7224:	d1 f3       	breq	.-12     	; 0x721a <__mulsf3+0x14>
    7226:	95 0f       	add	r25, r21
    7228:	50 e0       	ldi	r21, 0x00	; 0
    722a:	55 1f       	adc	r21, r21
    722c:	62 9f       	mul	r22, r18
    722e:	f0 01       	movw	r30, r0
    7230:	72 9f       	mul	r23, r18
    7232:	bb 27       	eor	r27, r27
    7234:	f0 0d       	add	r31, r0
    7236:	b1 1d       	adc	r27, r1
    7238:	63 9f       	mul	r22, r19
    723a:	aa 27       	eor	r26, r26
    723c:	f0 0d       	add	r31, r0
    723e:	b1 1d       	adc	r27, r1
    7240:	aa 1f       	adc	r26, r26
    7242:	64 9f       	mul	r22, r20
    7244:	66 27       	eor	r22, r22
    7246:	b0 0d       	add	r27, r0
    7248:	a1 1d       	adc	r26, r1
    724a:	66 1f       	adc	r22, r22
    724c:	82 9f       	mul	r24, r18
    724e:	22 27       	eor	r18, r18
    7250:	b0 0d       	add	r27, r0
    7252:	a1 1d       	adc	r26, r1
    7254:	62 1f       	adc	r22, r18
    7256:	73 9f       	mul	r23, r19
    7258:	b0 0d       	add	r27, r0
    725a:	a1 1d       	adc	r26, r1
    725c:	62 1f       	adc	r22, r18
    725e:	83 9f       	mul	r24, r19
    7260:	a0 0d       	add	r26, r0
    7262:	61 1d       	adc	r22, r1
    7264:	22 1f       	adc	r18, r18
    7266:	74 9f       	mul	r23, r20
    7268:	33 27       	eor	r19, r19
    726a:	a0 0d       	add	r26, r0
    726c:	61 1d       	adc	r22, r1
    726e:	23 1f       	adc	r18, r19
    7270:	84 9f       	mul	r24, r20
    7272:	60 0d       	add	r22, r0
    7274:	21 1d       	adc	r18, r1
    7276:	82 2f       	mov	r24, r18
    7278:	76 2f       	mov	r23, r22
    727a:	6a 2f       	mov	r22, r26
    727c:	11 24       	eor	r1, r1
    727e:	9f 57       	subi	r25, 0x7F	; 127
    7280:	50 40       	sbci	r21, 0x00	; 0
    7282:	8a f0       	brmi	.+34     	; 0x72a6 <__mulsf3_pse+0x84>
    7284:	e1 f0       	breq	.+56     	; 0x72be <__mulsf3_pse+0x9c>
    7286:	88 23       	and	r24, r24
    7288:	4a f0       	brmi	.+18     	; 0x729c <__mulsf3_pse+0x7a>
    728a:	ee 0f       	add	r30, r30
    728c:	ff 1f       	adc	r31, r31
    728e:	bb 1f       	adc	r27, r27
    7290:	66 1f       	adc	r22, r22
    7292:	77 1f       	adc	r23, r23
    7294:	88 1f       	adc	r24, r24
    7296:	91 50       	subi	r25, 0x01	; 1
    7298:	50 40       	sbci	r21, 0x00	; 0
    729a:	a9 f7       	brne	.-22     	; 0x7286 <__mulsf3_pse+0x64>
    729c:	9e 3f       	cpi	r25, 0xFE	; 254
    729e:	51 05       	cpc	r21, r1
    72a0:	70 f0       	brcs	.+28     	; 0x72be <__mulsf3_pse+0x9c>
    72a2:	60 cf       	rjmp	.-320    	; 0x7164 <__fp_inf>
    72a4:	aa cf       	rjmp	.-172    	; 0x71fa <__fp_szero>
    72a6:	5f 3f       	cpi	r21, 0xFF	; 255
    72a8:	ec f3       	brlt	.-6      	; 0x72a4 <__mulsf3_pse+0x82>
    72aa:	98 3e       	cpi	r25, 0xE8	; 232
    72ac:	dc f3       	brlt	.-10     	; 0x72a4 <__mulsf3_pse+0x82>
    72ae:	86 95       	lsr	r24
    72b0:	77 95       	ror	r23
    72b2:	67 95       	ror	r22
    72b4:	b7 95       	ror	r27
    72b6:	f7 95       	ror	r31
    72b8:	e7 95       	ror	r30
    72ba:	9f 5f       	subi	r25, 0xFF	; 255
    72bc:	c1 f7       	brne	.-16     	; 0x72ae <__mulsf3_pse+0x8c>
    72be:	fe 2b       	or	r31, r30
    72c0:	88 0f       	add	r24, r24
    72c2:	91 1d       	adc	r25, r1
    72c4:	96 95       	lsr	r25
    72c6:	87 95       	ror	r24
    72c8:	97 f9       	bld	r25, 7
    72ca:	08 95       	ret

000072cc <__mulsi3>:
    72cc:	62 9f       	mul	r22, r18
    72ce:	d0 01       	movw	r26, r0
    72d0:	73 9f       	mul	r23, r19
    72d2:	f0 01       	movw	r30, r0
    72d4:	82 9f       	mul	r24, r18
    72d6:	e0 0d       	add	r30, r0
    72d8:	f1 1d       	adc	r31, r1
    72da:	64 9f       	mul	r22, r20
    72dc:	e0 0d       	add	r30, r0
    72de:	f1 1d       	adc	r31, r1
    72e0:	92 9f       	mul	r25, r18
    72e2:	f0 0d       	add	r31, r0
    72e4:	83 9f       	mul	r24, r19
    72e6:	f0 0d       	add	r31, r0
    72e8:	74 9f       	mul	r23, r20
    72ea:	f0 0d       	add	r31, r0
    72ec:	65 9f       	mul	r22, r21
    72ee:	f0 0d       	add	r31, r0
    72f0:	99 27       	eor	r25, r25
    72f2:	72 9f       	mul	r23, r18
    72f4:	b0 0d       	add	r27, r0
    72f6:	e1 1d       	adc	r30, r1
    72f8:	f9 1f       	adc	r31, r25
    72fa:	63 9f       	mul	r22, r19
    72fc:	b0 0d       	add	r27, r0
    72fe:	e1 1d       	adc	r30, r1
    7300:	f9 1f       	adc	r31, r25
    7302:	bd 01       	movw	r22, r26
    7304:	cf 01       	movw	r24, r30
    7306:	11 24       	eor	r1, r1
    7308:	08 95       	ret

0000730a <__udivmodqi4>:
    730a:	99 1b       	sub	r25, r25
    730c:	79 e0       	ldi	r23, 0x09	; 9
    730e:	04 c0       	rjmp	.+8      	; 0x7318 <__udivmodqi4_ep>

00007310 <__udivmodqi4_loop>:
    7310:	99 1f       	adc	r25, r25
    7312:	96 17       	cp	r25, r22
    7314:	08 f0       	brcs	.+2      	; 0x7318 <__udivmodqi4_ep>
    7316:	96 1b       	sub	r25, r22

00007318 <__udivmodqi4_ep>:
    7318:	88 1f       	adc	r24, r24
    731a:	7a 95       	dec	r23
    731c:	c9 f7       	brne	.-14     	; 0x7310 <__udivmodqi4_loop>
    731e:	80 95       	com	r24
    7320:	08 95       	ret

00007322 <__divmodhi4>:
    7322:	97 fb       	bst	r25, 7
    7324:	09 2e       	mov	r0, r25
    7326:	07 26       	eor	r0, r23
    7328:	0a d0       	rcall	.+20     	; 0x733e <__divmodhi4_neg1>
    732a:	77 fd       	sbrc	r23, 7
    732c:	04 d0       	rcall	.+8      	; 0x7336 <__divmodhi4_neg2>
    732e:	80 d0       	rcall	.+256    	; 0x7430 <__udivmodhi4>
    7330:	06 d0       	rcall	.+12     	; 0x733e <__divmodhi4_neg1>
    7332:	00 20       	and	r0, r0
    7334:	1a f4       	brpl	.+6      	; 0x733c <__divmodhi4_exit>

00007336 <__divmodhi4_neg2>:
    7336:	70 95       	com	r23
    7338:	61 95       	neg	r22
    733a:	7f 4f       	sbci	r23, 0xFF	; 255

0000733c <__divmodhi4_exit>:
    733c:	08 95       	ret

0000733e <__divmodhi4_neg1>:
    733e:	f6 f7       	brtc	.-4      	; 0x733c <__divmodhi4_exit>
    7340:	90 95       	com	r25
    7342:	81 95       	neg	r24
    7344:	9f 4f       	sbci	r25, 0xFF	; 255
    7346:	08 95       	ret

00007348 <__udivmodsi4>:
    7348:	a1 e2       	ldi	r26, 0x21	; 33
    734a:	1a 2e       	mov	r1, r26
    734c:	aa 1b       	sub	r26, r26
    734e:	bb 1b       	sub	r27, r27
    7350:	fd 01       	movw	r30, r26
    7352:	0d c0       	rjmp	.+26     	; 0x736e <__udivmodsi4_ep>

00007354 <__udivmodsi4_loop>:
    7354:	aa 1f       	adc	r26, r26
    7356:	bb 1f       	adc	r27, r27
    7358:	ee 1f       	adc	r30, r30
    735a:	ff 1f       	adc	r31, r31
    735c:	a2 17       	cp	r26, r18
    735e:	b3 07       	cpc	r27, r19
    7360:	e4 07       	cpc	r30, r20
    7362:	f5 07       	cpc	r31, r21
    7364:	20 f0       	brcs	.+8      	; 0x736e <__udivmodsi4_ep>
    7366:	a2 1b       	sub	r26, r18
    7368:	b3 0b       	sbc	r27, r19
    736a:	e4 0b       	sbc	r30, r20
    736c:	f5 0b       	sbc	r31, r21

0000736e <__udivmodsi4_ep>:
    736e:	66 1f       	adc	r22, r22
    7370:	77 1f       	adc	r23, r23
    7372:	88 1f       	adc	r24, r24
    7374:	99 1f       	adc	r25, r25
    7376:	1a 94       	dec	r1
    7378:	69 f7       	brne	.-38     	; 0x7354 <__udivmodsi4_loop>
    737a:	60 95       	com	r22
    737c:	70 95       	com	r23
    737e:	80 95       	com	r24
    7380:	90 95       	com	r25
    7382:	9b 01       	movw	r18, r22
    7384:	ac 01       	movw	r20, r24
    7386:	bd 01       	movw	r22, r26
    7388:	cf 01       	movw	r24, r30
    738a:	08 95       	ret

0000738c <__divmodsi4>:
    738c:	97 fb       	bst	r25, 7
    738e:	09 2e       	mov	r0, r25
    7390:	05 26       	eor	r0, r21
    7392:	0e d0       	rcall	.+28     	; 0x73b0 <__divmodsi4_neg1>
    7394:	57 fd       	sbrc	r21, 7
    7396:	04 d0       	rcall	.+8      	; 0x73a0 <__divmodsi4_neg2>
    7398:	d7 df       	rcall	.-82     	; 0x7348 <__udivmodsi4>
    739a:	0a d0       	rcall	.+20     	; 0x73b0 <__divmodsi4_neg1>
    739c:	00 1c       	adc	r0, r0
    739e:	38 f4       	brcc	.+14     	; 0x73ae <__divmodsi4_exit>

000073a0 <__divmodsi4_neg2>:
    73a0:	50 95       	com	r21
    73a2:	40 95       	com	r20
    73a4:	30 95       	com	r19
    73a6:	21 95       	neg	r18
    73a8:	3f 4f       	sbci	r19, 0xFF	; 255
    73aa:	4f 4f       	sbci	r20, 0xFF	; 255
    73ac:	5f 4f       	sbci	r21, 0xFF	; 255

000073ae <__divmodsi4_exit>:
    73ae:	08 95       	ret

000073b0 <__divmodsi4_neg1>:
    73b0:	f6 f7       	brtc	.-4      	; 0x73ae <__divmodsi4_exit>
    73b2:	90 95       	com	r25
    73b4:	80 95       	com	r24
    73b6:	70 95       	com	r23
    73b8:	61 95       	neg	r22
    73ba:	7f 4f       	sbci	r23, 0xFF	; 255
    73bc:	8f 4f       	sbci	r24, 0xFF	; 255
    73be:	9f 4f       	sbci	r25, 0xFF	; 255
    73c0:	08 95       	ret

000073c2 <__prologue_saves__>:
    73c2:	2f 92       	push	r2
    73c4:	3f 92       	push	r3
    73c6:	4f 92       	push	r4
    73c8:	5f 92       	push	r5
    73ca:	6f 92       	push	r6
    73cc:	7f 92       	push	r7
    73ce:	8f 92       	push	r8
    73d0:	9f 92       	push	r9
    73d2:	af 92       	push	r10
    73d4:	bf 92       	push	r11
    73d6:	cf 92       	push	r12
    73d8:	df 92       	push	r13
    73da:	ef 92       	push	r14
    73dc:	ff 92       	push	r15
    73de:	0f 93       	push	r16
    73e0:	1f 93       	push	r17
    73e2:	cf 93       	push	r28
    73e4:	df 93       	push	r29
    73e6:	cd b7       	in	r28, 0x3d	; 61
    73e8:	de b7       	in	r29, 0x3e	; 62
    73ea:	ca 1b       	sub	r28, r26
    73ec:	db 0b       	sbc	r29, r27
    73ee:	0f b6       	in	r0, 0x3f	; 63
    73f0:	f8 94       	cli
    73f2:	de bf       	out	0x3e, r29	; 62
    73f4:	0f be       	out	0x3f, r0	; 63
    73f6:	cd bf       	out	0x3d, r28	; 61
    73f8:	09 94       	ijmp

000073fa <__epilogue_restores__>:
    73fa:	2a 88       	ldd	r2, Y+18	; 0x12
    73fc:	39 88       	ldd	r3, Y+17	; 0x11
    73fe:	48 88       	ldd	r4, Y+16	; 0x10
    7400:	5f 84       	ldd	r5, Y+15	; 0x0f
    7402:	6e 84       	ldd	r6, Y+14	; 0x0e
    7404:	7d 84       	ldd	r7, Y+13	; 0x0d
    7406:	8c 84       	ldd	r8, Y+12	; 0x0c
    7408:	9b 84       	ldd	r9, Y+11	; 0x0b
    740a:	aa 84       	ldd	r10, Y+10	; 0x0a
    740c:	b9 84       	ldd	r11, Y+9	; 0x09
    740e:	c8 84       	ldd	r12, Y+8	; 0x08
    7410:	df 80       	ldd	r13, Y+7	; 0x07
    7412:	ee 80       	ldd	r14, Y+6	; 0x06
    7414:	fd 80       	ldd	r15, Y+5	; 0x05
    7416:	0c 81       	ldd	r16, Y+4	; 0x04
    7418:	1b 81       	ldd	r17, Y+3	; 0x03
    741a:	aa 81       	ldd	r26, Y+2	; 0x02
    741c:	b9 81       	ldd	r27, Y+1	; 0x01
    741e:	ce 0f       	add	r28, r30
    7420:	d1 1d       	adc	r29, r1
    7422:	0f b6       	in	r0, 0x3f	; 63
    7424:	f8 94       	cli
    7426:	de bf       	out	0x3e, r29	; 62
    7428:	0f be       	out	0x3f, r0	; 63
    742a:	cd bf       	out	0x3d, r28	; 61
    742c:	ed 01       	movw	r28, r26
    742e:	08 95       	ret

00007430 <__udivmodhi4>:
    7430:	aa 1b       	sub	r26, r26
    7432:	bb 1b       	sub	r27, r27
    7434:	51 e1       	ldi	r21, 0x11	; 17
    7436:	07 c0       	rjmp	.+14     	; 0x7446 <__udivmodhi4_ep>

00007438 <__udivmodhi4_loop>:
    7438:	aa 1f       	adc	r26, r26
    743a:	bb 1f       	adc	r27, r27
    743c:	a6 17       	cp	r26, r22
    743e:	b7 07       	cpc	r27, r23
    7440:	10 f0       	brcs	.+4      	; 0x7446 <__udivmodhi4_ep>
    7442:	a6 1b       	sub	r26, r22
    7444:	b7 0b       	sbc	r27, r23

00007446 <__udivmodhi4_ep>:
    7446:	88 1f       	adc	r24, r24
    7448:	99 1f       	adc	r25, r25
    744a:	5a 95       	dec	r21
    744c:	a9 f7       	brne	.-22     	; 0x7438 <__udivmodhi4_loop>
    744e:	80 95       	com	r24
    7450:	90 95       	com	r25
    7452:	bc 01       	movw	r22, r24
    7454:	cd 01       	movw	r24, r26
    7456:	08 95       	ret

00007458 <__ftoa_engine>:
    7458:	28 30       	cpi	r18, 0x08	; 8
    745a:	08 f0       	brcs	.+2      	; 0x745e <__ftoa_engine+0x6>
    745c:	27 e0       	ldi	r18, 0x07	; 7
    745e:	33 27       	eor	r19, r19
    7460:	da 01       	movw	r26, r20
    7462:	99 0f       	add	r25, r25
    7464:	31 1d       	adc	r19, r1
    7466:	87 fd       	sbrc	r24, 7
    7468:	91 60       	ori	r25, 0x01	; 1
    746a:	00 96       	adiw	r24, 0x00	; 0
    746c:	61 05       	cpc	r22, r1
    746e:	71 05       	cpc	r23, r1
    7470:	39 f4       	brne	.+14     	; 0x7480 <__ftoa_engine+0x28>
    7472:	32 60       	ori	r19, 0x02	; 2
    7474:	2e 5f       	subi	r18, 0xFE	; 254
    7476:	3d 93       	st	X+, r19
    7478:	30 e3       	ldi	r19, 0x30	; 48
    747a:	2a 95       	dec	r18
    747c:	e1 f7       	brne	.-8      	; 0x7476 <__ftoa_engine+0x1e>
    747e:	08 95       	ret
    7480:	9f 3f       	cpi	r25, 0xFF	; 255
    7482:	30 f0       	brcs	.+12     	; 0x7490 <__ftoa_engine+0x38>
    7484:	80 38       	cpi	r24, 0x80	; 128
    7486:	71 05       	cpc	r23, r1
    7488:	61 05       	cpc	r22, r1
    748a:	09 f0       	breq	.+2      	; 0x748e <__ftoa_engine+0x36>
    748c:	3c 5f       	subi	r19, 0xFC	; 252
    748e:	3c 5f       	subi	r19, 0xFC	; 252
    7490:	3d 93       	st	X+, r19
    7492:	91 30       	cpi	r25, 0x01	; 1
    7494:	08 f0       	brcs	.+2      	; 0x7498 <__ftoa_engine+0x40>
    7496:	80 68       	ori	r24, 0x80	; 128
    7498:	91 1d       	adc	r25, r1
    749a:	df 93       	push	r29
    749c:	cf 93       	push	r28
    749e:	1f 93       	push	r17
    74a0:	0f 93       	push	r16
    74a2:	ff 92       	push	r15
    74a4:	ef 92       	push	r14
    74a6:	19 2f       	mov	r17, r25
    74a8:	98 7f       	andi	r25, 0xF8	; 248
    74aa:	96 95       	lsr	r25
    74ac:	e9 2f       	mov	r30, r25
    74ae:	96 95       	lsr	r25
    74b0:	96 95       	lsr	r25
    74b2:	e9 0f       	add	r30, r25
    74b4:	ff 27       	eor	r31, r31
    74b6:	e0 5f       	subi	r30, 0xF0	; 240
    74b8:	f6 4f       	sbci	r31, 0xF6	; 246
    74ba:	99 27       	eor	r25, r25
    74bc:	33 27       	eor	r19, r19
    74be:	ee 24       	eor	r14, r14
    74c0:	ff 24       	eor	r15, r15
    74c2:	a7 01       	movw	r20, r14
    74c4:	e7 01       	movw	r28, r14
    74c6:	05 90       	lpm	r0, Z+
    74c8:	08 94       	sec
    74ca:	07 94       	ror	r0
    74cc:	28 f4       	brcc	.+10     	; 0x74d8 <__ftoa_engine+0x80>
    74ce:	36 0f       	add	r19, r22
    74d0:	e7 1e       	adc	r14, r23
    74d2:	f8 1e       	adc	r15, r24
    74d4:	49 1f       	adc	r20, r25
    74d6:	51 1d       	adc	r21, r1
    74d8:	66 0f       	add	r22, r22
    74da:	77 1f       	adc	r23, r23
    74dc:	88 1f       	adc	r24, r24
    74de:	99 1f       	adc	r25, r25
    74e0:	06 94       	lsr	r0
    74e2:	a1 f7       	brne	.-24     	; 0x74cc <__ftoa_engine+0x74>
    74e4:	05 90       	lpm	r0, Z+
    74e6:	07 94       	ror	r0
    74e8:	28 f4       	brcc	.+10     	; 0x74f4 <__ftoa_engine+0x9c>
    74ea:	e7 0e       	add	r14, r23
    74ec:	f8 1e       	adc	r15, r24
    74ee:	49 1f       	adc	r20, r25
    74f0:	56 1f       	adc	r21, r22
    74f2:	c1 1d       	adc	r28, r1
    74f4:	77 0f       	add	r23, r23
    74f6:	88 1f       	adc	r24, r24
    74f8:	99 1f       	adc	r25, r25
    74fa:	66 1f       	adc	r22, r22
    74fc:	06 94       	lsr	r0
    74fe:	a1 f7       	brne	.-24     	; 0x74e8 <__ftoa_engine+0x90>
    7500:	05 90       	lpm	r0, Z+
    7502:	07 94       	ror	r0
    7504:	28 f4       	brcc	.+10     	; 0x7510 <__ftoa_engine+0xb8>
    7506:	f8 0e       	add	r15, r24
    7508:	49 1f       	adc	r20, r25
    750a:	56 1f       	adc	r21, r22
    750c:	c7 1f       	adc	r28, r23
    750e:	d1 1d       	adc	r29, r1
    7510:	88 0f       	add	r24, r24
    7512:	99 1f       	adc	r25, r25
    7514:	66 1f       	adc	r22, r22
    7516:	77 1f       	adc	r23, r23
    7518:	06 94       	lsr	r0
    751a:	a1 f7       	brne	.-24     	; 0x7504 <__ftoa_engine+0xac>
    751c:	05 90       	lpm	r0, Z+
    751e:	07 94       	ror	r0
    7520:	20 f4       	brcc	.+8      	; 0x752a <__ftoa_engine+0xd2>
    7522:	49 0f       	add	r20, r25
    7524:	56 1f       	adc	r21, r22
    7526:	c7 1f       	adc	r28, r23
    7528:	d8 1f       	adc	r29, r24
    752a:	99 0f       	add	r25, r25
    752c:	66 1f       	adc	r22, r22
    752e:	77 1f       	adc	r23, r23
    7530:	88 1f       	adc	r24, r24
    7532:	06 94       	lsr	r0
    7534:	a9 f7       	brne	.-22     	; 0x7520 <__ftoa_engine+0xc8>
    7536:	84 91       	lpm	r24, Z+
    7538:	10 95       	com	r17
    753a:	17 70       	andi	r17, 0x07	; 7
    753c:	41 f0       	breq	.+16     	; 0x754e <__ftoa_engine+0xf6>
    753e:	d6 95       	lsr	r29
    7540:	c7 95       	ror	r28
    7542:	57 95       	ror	r21
    7544:	47 95       	ror	r20
    7546:	f7 94       	ror	r15
    7548:	e7 94       	ror	r14
    754a:	1a 95       	dec	r17
    754c:	c1 f7       	brne	.-16     	; 0x753e <__ftoa_engine+0xe6>
    754e:	e6 eb       	ldi	r30, 0xB6	; 182
    7550:	f8 e0       	ldi	r31, 0x08	; 8
    7552:	68 94       	set
    7554:	15 90       	lpm	r1, Z+
    7556:	15 91       	lpm	r17, Z+
    7558:	35 91       	lpm	r19, Z+
    755a:	65 91       	lpm	r22, Z+
    755c:	95 91       	lpm	r25, Z+
    755e:	05 90       	lpm	r0, Z+
    7560:	7f e2       	ldi	r23, 0x2F	; 47
    7562:	73 95       	inc	r23
    7564:	e1 18       	sub	r14, r1
    7566:	f1 0a       	sbc	r15, r17
    7568:	43 0b       	sbc	r20, r19
    756a:	56 0b       	sbc	r21, r22
    756c:	c9 0b       	sbc	r28, r25
    756e:	d0 09       	sbc	r29, r0
    7570:	c0 f7       	brcc	.-16     	; 0x7562 <__ftoa_engine+0x10a>
    7572:	e1 0c       	add	r14, r1
    7574:	f1 1e       	adc	r15, r17
    7576:	43 1f       	adc	r20, r19
    7578:	56 1f       	adc	r21, r22
    757a:	c9 1f       	adc	r28, r25
    757c:	d0 1d       	adc	r29, r0
    757e:	7e f4       	brtc	.+30     	; 0x759e <__ftoa_engine+0x146>
    7580:	70 33       	cpi	r23, 0x30	; 48
    7582:	11 f4       	brne	.+4      	; 0x7588 <__ftoa_engine+0x130>
    7584:	8a 95       	dec	r24
    7586:	e6 cf       	rjmp	.-52     	; 0x7554 <__ftoa_engine+0xfc>
    7588:	e8 94       	clt
    758a:	01 50       	subi	r16, 0x01	; 1
    758c:	30 f0       	brcs	.+12     	; 0x759a <__ftoa_engine+0x142>
    758e:	08 0f       	add	r16, r24
    7590:	0a f4       	brpl	.+2      	; 0x7594 <__ftoa_engine+0x13c>
    7592:	00 27       	eor	r16, r16
    7594:	02 17       	cp	r16, r18
    7596:	08 f4       	brcc	.+2      	; 0x759a <__ftoa_engine+0x142>
    7598:	20 2f       	mov	r18, r16
    759a:	23 95       	inc	r18
    759c:	02 2f       	mov	r16, r18
    759e:	7a 33       	cpi	r23, 0x3A	; 58
    75a0:	28 f0       	brcs	.+10     	; 0x75ac <__ftoa_engine+0x154>
    75a2:	79 e3       	ldi	r23, 0x39	; 57
    75a4:	7d 93       	st	X+, r23
    75a6:	2a 95       	dec	r18
    75a8:	e9 f7       	brne	.-6      	; 0x75a4 <__ftoa_engine+0x14c>
    75aa:	10 c0       	rjmp	.+32     	; 0x75cc <__ftoa_engine+0x174>
    75ac:	7d 93       	st	X+, r23
    75ae:	2a 95       	dec	r18
    75b0:	89 f6       	brne	.-94     	; 0x7554 <__ftoa_engine+0xfc>
    75b2:	06 94       	lsr	r0
    75b4:	97 95       	ror	r25
    75b6:	67 95       	ror	r22
    75b8:	37 95       	ror	r19
    75ba:	17 95       	ror	r17
    75bc:	17 94       	ror	r1
    75be:	e1 18       	sub	r14, r1
    75c0:	f1 0a       	sbc	r15, r17
    75c2:	43 0b       	sbc	r20, r19
    75c4:	56 0b       	sbc	r21, r22
    75c6:	c9 0b       	sbc	r28, r25
    75c8:	d0 09       	sbc	r29, r0
    75ca:	98 f0       	brcs	.+38     	; 0x75f2 <__ftoa_engine+0x19a>
    75cc:	23 95       	inc	r18
    75ce:	7e 91       	ld	r23, -X
    75d0:	73 95       	inc	r23
    75d2:	7a 33       	cpi	r23, 0x3A	; 58
    75d4:	08 f0       	brcs	.+2      	; 0x75d8 <__ftoa_engine+0x180>
    75d6:	70 e3       	ldi	r23, 0x30	; 48
    75d8:	7c 93       	st	X, r23
    75da:	20 13       	cpse	r18, r16
    75dc:	b8 f7       	brcc	.-18     	; 0x75cc <__ftoa_engine+0x174>
    75de:	7e 91       	ld	r23, -X
    75e0:	70 61       	ori	r23, 0x10	; 16
    75e2:	7d 93       	st	X+, r23
    75e4:	30 f0       	brcs	.+12     	; 0x75f2 <__ftoa_engine+0x19a>
    75e6:	83 95       	inc	r24
    75e8:	71 e3       	ldi	r23, 0x31	; 49
    75ea:	7d 93       	st	X+, r23
    75ec:	70 e3       	ldi	r23, 0x30	; 48
    75ee:	2a 95       	dec	r18
    75f0:	e1 f7       	brne	.-8      	; 0x75ea <__ftoa_engine+0x192>
    75f2:	11 24       	eor	r1, r1
    75f4:	ef 90       	pop	r14
    75f6:	ff 90       	pop	r15
    75f8:	0f 91       	pop	r16
    75fa:	1f 91       	pop	r17
    75fc:	cf 91       	pop	r28
    75fe:	df 91       	pop	r29
    7600:	99 27       	eor	r25, r25
    7602:	87 fd       	sbrc	r24, 7
    7604:	90 95       	com	r25
    7606:	08 95       	ret

00007608 <isspace>:
    7608:	91 11       	cpse	r25, r1
    760a:	67 c2       	rjmp	.+1230   	; 0x7ada <__ctype_isfalse>
    760c:	80 32       	cpi	r24, 0x20	; 32
    760e:	19 f0       	breq	.+6      	; 0x7616 <isspace+0xe>
    7610:	89 50       	subi	r24, 0x09	; 9
    7612:	85 50       	subi	r24, 0x05	; 5
    7614:	d0 f7       	brcc	.-12     	; 0x760a <isspace+0x2>
    7616:	08 95       	ret

00007618 <tolower>:
    7618:	91 11       	cpse	r25, r1
    761a:	08 95       	ret
    761c:	81 54       	subi	r24, 0x41	; 65
    761e:	8a 51       	subi	r24, 0x1A	; 26
    7620:	08 f4       	brcc	.+2      	; 0x7624 <tolower+0xc>
    7622:	80 5e       	subi	r24, 0xE0	; 224
    7624:	85 5a       	subi	r24, 0xA5	; 165
    7626:	08 95       	ret

00007628 <strchr_P>:
    7628:	fc 01       	movw	r30, r24
    762a:	05 90       	lpm	r0, Z+
    762c:	06 16       	cp	r0, r22
    762e:	21 f0       	breq	.+8      	; 0x7638 <strchr_P+0x10>
    7630:	00 20       	and	r0, r0
    7632:	d9 f7       	brne	.-10     	; 0x762a <strchr_P+0x2>
    7634:	c0 01       	movw	r24, r0
    7636:	08 95       	ret
    7638:	31 97       	sbiw	r30, 0x01	; 1
    763a:	cf 01       	movw	r24, r30
    763c:	08 95       	ret

0000763e <strnlen_P>:
    763e:	fc 01       	movw	r30, r24
    7640:	05 90       	lpm	r0, Z+
    7642:	61 50       	subi	r22, 0x01	; 1
    7644:	70 40       	sbci	r23, 0x00	; 0
    7646:	01 10       	cpse	r0, r1
    7648:	d8 f7       	brcc	.-10     	; 0x7640 <strnlen_P+0x2>
    764a:	80 95       	com	r24
    764c:	90 95       	com	r25
    764e:	8e 0f       	add	r24, r30
    7650:	9f 1f       	adc	r25, r31
    7652:	08 95       	ret

00007654 <strtok>:
    7654:	46 e1       	ldi	r20, 0x16	; 22
    7656:	54 e0       	ldi	r21, 0x04	; 4
    7658:	0e 94 48 3b 	call	0x7690	; 0x7690 <strtok_r>
    765c:	08 95       	ret

0000765e <strncmp>:
    765e:	fb 01       	movw	r30, r22
    7660:	dc 01       	movw	r26, r24
    7662:	41 50       	subi	r20, 0x01	; 1
    7664:	50 40       	sbci	r21, 0x00	; 0
    7666:	30 f0       	brcs	.+12     	; 0x7674 <strncmp+0x16>
    7668:	8d 91       	ld	r24, X+
    766a:	01 90       	ld	r0, Z+
    766c:	80 19       	sub	r24, r0
    766e:	19 f4       	brne	.+6      	; 0x7676 <strncmp+0x18>
    7670:	00 20       	and	r0, r0
    7672:	b9 f7       	brne	.-18     	; 0x7662 <strncmp+0x4>
    7674:	88 1b       	sub	r24, r24
    7676:	99 0b       	sbc	r25, r25
    7678:	08 95       	ret

0000767a <strnlen>:
    767a:	fc 01       	movw	r30, r24
    767c:	61 50       	subi	r22, 0x01	; 1
    767e:	70 40       	sbci	r23, 0x00	; 0
    7680:	01 90       	ld	r0, Z+
    7682:	01 10       	cpse	r0, r1
    7684:	d8 f7       	brcc	.-10     	; 0x767c <strnlen+0x2>
    7686:	80 95       	com	r24
    7688:	90 95       	com	r25
    768a:	8e 0f       	add	r24, r30
    768c:	9f 1f       	adc	r25, r31
    768e:	08 95       	ret

00007690 <strtok_r>:
    7690:	fa 01       	movw	r30, r20
    7692:	a1 91       	ld	r26, Z+
    7694:	b0 81       	ld	r27, Z
    7696:	00 97       	sbiw	r24, 0x00	; 0
    7698:	19 f4       	brne	.+6      	; 0x76a0 <strtok_r+0x10>
    769a:	10 97       	sbiw	r26, 0x00	; 0
    769c:	e1 f0       	breq	.+56     	; 0x76d6 <strtok_r+0x46>
    769e:	cd 01       	movw	r24, r26
    76a0:	dc 01       	movw	r26, r24
    76a2:	cd 01       	movw	r24, r26
    76a4:	0d 90       	ld	r0, X+
    76a6:	00 20       	and	r0, r0
    76a8:	11 f4       	brne	.+4      	; 0x76ae <strtok_r+0x1e>
    76aa:	c0 01       	movw	r24, r0
    76ac:	13 c0       	rjmp	.+38     	; 0x76d4 <strtok_r+0x44>
    76ae:	fb 01       	movw	r30, r22
    76b0:	21 91       	ld	r18, Z+
    76b2:	22 23       	and	r18, r18
    76b4:	19 f0       	breq	.+6      	; 0x76bc <strtok_r+0x2c>
    76b6:	20 15       	cp	r18, r0
    76b8:	d9 f7       	brne	.-10     	; 0x76b0 <strtok_r+0x20>
    76ba:	f3 cf       	rjmp	.-26     	; 0x76a2 <strtok_r+0x12>
    76bc:	fb 01       	movw	r30, r22
    76be:	21 91       	ld	r18, Z+
    76c0:	20 15       	cp	r18, r0
    76c2:	19 f4       	brne	.+6      	; 0x76ca <strtok_r+0x3a>
    76c4:	1e 92       	st	-X, r1
    76c6:	11 96       	adiw	r26, 0x01	; 1
    76c8:	06 c0       	rjmp	.+12     	; 0x76d6 <strtok_r+0x46>
    76ca:	22 23       	and	r18, r18
    76cc:	c1 f7       	brne	.-16     	; 0x76be <strtok_r+0x2e>
    76ce:	0d 90       	ld	r0, X+
    76d0:	00 20       	and	r0, r0
    76d2:	a1 f7       	brne	.-24     	; 0x76bc <strtok_r+0x2c>
    76d4:	d0 01       	movw	r26, r0
    76d6:	fa 01       	movw	r30, r20
    76d8:	a1 93       	st	Z+, r26
    76da:	b0 83       	st	Z, r27
    76dc:	08 95       	ret

000076de <fgetc>:
    76de:	cf 93       	push	r28
    76e0:	df 93       	push	r29
    76e2:	ec 01       	movw	r28, r24
    76e4:	4b 81       	ldd	r20, Y+3	; 0x03
    76e6:	40 ff       	sbrs	r20, 0
    76e8:	1a c0       	rjmp	.+52     	; 0x771e <fgetc+0x40>
    76ea:	46 ff       	sbrs	r20, 6
    76ec:	0a c0       	rjmp	.+20     	; 0x7702 <fgetc+0x24>
    76ee:	4f 7b       	andi	r20, 0xBF	; 191
    76f0:	4b 83       	std	Y+3, r20	; 0x03
    76f2:	8e 81       	ldd	r24, Y+6	; 0x06
    76f4:	9f 81       	ldd	r25, Y+7	; 0x07
    76f6:	01 96       	adiw	r24, 0x01	; 1
    76f8:	9f 83       	std	Y+7, r25	; 0x07
    76fa:	8e 83       	std	Y+6, r24	; 0x06
    76fc:	8a 81       	ldd	r24, Y+2	; 0x02
    76fe:	28 2f       	mov	r18, r24
    7700:	2b c0       	rjmp	.+86     	; 0x7758 <fgetc+0x7a>
    7702:	42 ff       	sbrs	r20, 2
    7704:	13 c0       	rjmp	.+38     	; 0x772c <fgetc+0x4e>
    7706:	e8 81       	ld	r30, Y
    7708:	f9 81       	ldd	r31, Y+1	; 0x01
    770a:	80 81       	ld	r24, Z
    770c:	28 2f       	mov	r18, r24
    770e:	33 27       	eor	r19, r19
    7710:	27 fd       	sbrc	r18, 7
    7712:	30 95       	com	r19
    7714:	21 15       	cp	r18, r1
    7716:	31 05       	cpc	r19, r1
    7718:	29 f4       	brne	.+10     	; 0x7724 <fgetc+0x46>
    771a:	40 62       	ori	r20, 0x20	; 32
    771c:	4b 83       	std	Y+3, r20	; 0x03
    771e:	2f ef       	ldi	r18, 0xFF	; 255
    7720:	3f ef       	ldi	r19, 0xFF	; 255
    7722:	1b c0       	rjmp	.+54     	; 0x775a <fgetc+0x7c>
    7724:	31 96       	adiw	r30, 0x01	; 1
    7726:	f9 83       	std	Y+1, r31	; 0x01
    7728:	e8 83       	st	Y, r30
    772a:	11 c0       	rjmp	.+34     	; 0x774e <fgetc+0x70>
    772c:	ea 85       	ldd	r30, Y+10	; 0x0a
    772e:	fb 85       	ldd	r31, Y+11	; 0x0b
    7730:	ce 01       	movw	r24, r28
    7732:	09 95       	icall
    7734:	9c 01       	movw	r18, r24
    7736:	97 ff       	sbrs	r25, 7
    7738:	0a c0       	rjmp	.+20     	; 0x774e <fgetc+0x70>
    773a:	9b 81       	ldd	r25, Y+3	; 0x03
    773c:	2f 5f       	subi	r18, 0xFF	; 255
    773e:	3f 4f       	sbci	r19, 0xFF	; 255
    7740:	11 f0       	breq	.+4      	; 0x7746 <fgetc+0x68>
    7742:	80 e2       	ldi	r24, 0x20	; 32
    7744:	01 c0       	rjmp	.+2      	; 0x7748 <fgetc+0x6a>
    7746:	80 e1       	ldi	r24, 0x10	; 16
    7748:	89 2b       	or	r24, r25
    774a:	8b 83       	std	Y+3, r24	; 0x03
    774c:	e8 cf       	rjmp	.-48     	; 0x771e <fgetc+0x40>
    774e:	8e 81       	ldd	r24, Y+6	; 0x06
    7750:	9f 81       	ldd	r25, Y+7	; 0x07
    7752:	01 96       	adiw	r24, 0x01	; 1
    7754:	9f 83       	std	Y+7, r25	; 0x07
    7756:	8e 83       	std	Y+6, r24	; 0x06
    7758:	30 e0       	ldi	r19, 0x00	; 0
    775a:	c9 01       	movw	r24, r18
    775c:	df 91       	pop	r29
    775e:	cf 91       	pop	r28
    7760:	08 95       	ret

00007762 <fprintf>:
    7762:	a0 e0       	ldi	r26, 0x00	; 0
    7764:	b0 e0       	ldi	r27, 0x00	; 0
    7766:	e7 eb       	ldi	r30, 0xB7	; 183
    7768:	fb e3       	ldi	r31, 0x3B	; 59
    776a:	0c 94 f1 39 	jmp	0x73e2	; 0x73e2 <__prologue_saves__+0x20>
    776e:	9e 01       	movw	r18, r28
    7770:	27 5f       	subi	r18, 0xF7	; 247
    7772:	3f 4f       	sbci	r19, 0xFF	; 255
    7774:	8d 81       	ldd	r24, Y+5	; 0x05
    7776:	9e 81       	ldd	r25, Y+6	; 0x06
    7778:	6f 81       	ldd	r22, Y+7	; 0x07
    777a:	78 85       	ldd	r23, Y+8	; 0x08
    777c:	a9 01       	movw	r20, r18
    777e:	0e 94 b7 2f 	call	0x5f6e	; 0x5f6e <vfprintf>
    7782:	20 96       	adiw	r28, 0x00	; 0
    7784:	e2 e0       	ldi	r30, 0x02	; 2
    7786:	0c 94 0d 3a 	jmp	0x741a	; 0x741a <__epilogue_restores__+0x20>

0000778a <fputc>:
    778a:	0f 93       	push	r16
    778c:	1f 93       	push	r17
    778e:	cf 93       	push	r28
    7790:	df 93       	push	r29
    7792:	8c 01       	movw	r16, r24
    7794:	eb 01       	movw	r28, r22
    7796:	8b 81       	ldd	r24, Y+3	; 0x03
    7798:	81 ff       	sbrs	r24, 1
    779a:	1b c0       	rjmp	.+54     	; 0x77d2 <fputc+0x48>
    779c:	82 ff       	sbrs	r24, 2
    779e:	0d c0       	rjmp	.+26     	; 0x77ba <fputc+0x30>
    77a0:	2e 81       	ldd	r18, Y+6	; 0x06
    77a2:	3f 81       	ldd	r19, Y+7	; 0x07
    77a4:	8c 81       	ldd	r24, Y+4	; 0x04
    77a6:	9d 81       	ldd	r25, Y+5	; 0x05
    77a8:	28 17       	cp	r18, r24
    77aa:	39 07       	cpc	r19, r25
    77ac:	64 f4       	brge	.+24     	; 0x77c6 <fputc+0x3c>
    77ae:	e8 81       	ld	r30, Y
    77b0:	f9 81       	ldd	r31, Y+1	; 0x01
    77b2:	01 93       	st	Z+, r16
    77b4:	f9 83       	std	Y+1, r31	; 0x01
    77b6:	e8 83       	st	Y, r30
    77b8:	06 c0       	rjmp	.+12     	; 0x77c6 <fputc+0x3c>
    77ba:	e8 85       	ldd	r30, Y+8	; 0x08
    77bc:	f9 85       	ldd	r31, Y+9	; 0x09
    77be:	80 2f       	mov	r24, r16
    77c0:	09 95       	icall
    77c2:	89 2b       	or	r24, r25
    77c4:	31 f4       	brne	.+12     	; 0x77d2 <fputc+0x48>
    77c6:	8e 81       	ldd	r24, Y+6	; 0x06
    77c8:	9f 81       	ldd	r25, Y+7	; 0x07
    77ca:	01 96       	adiw	r24, 0x01	; 1
    77cc:	9f 83       	std	Y+7, r25	; 0x07
    77ce:	8e 83       	std	Y+6, r24	; 0x06
    77d0:	02 c0       	rjmp	.+4      	; 0x77d6 <fputc+0x4c>
    77d2:	0f ef       	ldi	r16, 0xFF	; 255
    77d4:	1f ef       	ldi	r17, 0xFF	; 255
    77d6:	c8 01       	movw	r24, r16
    77d8:	df 91       	pop	r29
    77da:	cf 91       	pop	r28
    77dc:	1f 91       	pop	r17
    77de:	0f 91       	pop	r16
    77e0:	08 95       	ret

000077e2 <fputs>:
    77e2:	ef 92       	push	r14
    77e4:	ff 92       	push	r15
    77e6:	0f 93       	push	r16
    77e8:	1f 93       	push	r17
    77ea:	cf 93       	push	r28
    77ec:	df 93       	push	r29
    77ee:	7c 01       	movw	r14, r24
    77f0:	8b 01       	movw	r16, r22
    77f2:	db 01       	movw	r26, r22
    77f4:	13 96       	adiw	r26, 0x03	; 3
    77f6:	8c 91       	ld	r24, X
    77f8:	81 fd       	sbrc	r24, 1
    77fa:	03 c0       	rjmp	.+6      	; 0x7802 <fputs+0x20>
    77fc:	cf ef       	ldi	r28, 0xFF	; 255
    77fe:	df ef       	ldi	r29, 0xFF	; 255
    7800:	13 c0       	rjmp	.+38     	; 0x7828 <fputs+0x46>
    7802:	c0 e0       	ldi	r28, 0x00	; 0
    7804:	d0 e0       	ldi	r29, 0x00	; 0
    7806:	0b c0       	rjmp	.+22     	; 0x781e <fputs+0x3c>
    7808:	d8 01       	movw	r26, r16
    780a:	18 96       	adiw	r26, 0x08	; 8
    780c:	ed 91       	ld	r30, X+
    780e:	fc 91       	ld	r31, X
    7810:	19 97       	sbiw	r26, 0x09	; 9
    7812:	b8 01       	movw	r22, r16
    7814:	09 95       	icall
    7816:	89 2b       	or	r24, r25
    7818:	11 f0       	breq	.+4      	; 0x781e <fputs+0x3c>
    781a:	cf ef       	ldi	r28, 0xFF	; 255
    781c:	df ef       	ldi	r29, 0xFF	; 255
    781e:	f7 01       	movw	r30, r14
    7820:	81 91       	ld	r24, Z+
    7822:	7f 01       	movw	r14, r30
    7824:	88 23       	and	r24, r24
    7826:	81 f7       	brne	.-32     	; 0x7808 <fputs+0x26>
    7828:	ce 01       	movw	r24, r28
    782a:	cd b7       	in	r28, 0x3d	; 61
    782c:	de b7       	in	r29, 0x3e	; 62
    782e:	e6 e0       	ldi	r30, 0x06	; 6
    7830:	0c 94 09 3a 	jmp	0x7412	; 0x7412 <__epilogue_restores__+0x18>

00007834 <sprintf_P>:
    7834:	ae e0       	ldi	r26, 0x0E	; 14
    7836:	b0 e0       	ldi	r27, 0x00	; 0
    7838:	e0 e2       	ldi	r30, 0x20	; 32
    783a:	fc e3       	ldi	r31, 0x3C	; 60
    783c:	0c 94 ef 39 	jmp	0x73de	; 0x73de <__prologue_saves__+0x1c>
    7840:	0d 89       	ldd	r16, Y+21	; 0x15
    7842:	1e 89       	ldd	r17, Y+22	; 0x16
    7844:	8e e0       	ldi	r24, 0x0E	; 14
    7846:	8c 83       	std	Y+4, r24	; 0x04
    7848:	1a 83       	std	Y+2, r17	; 0x02
    784a:	09 83       	std	Y+1, r16	; 0x01
    784c:	8f ef       	ldi	r24, 0xFF	; 255
    784e:	9f e7       	ldi	r25, 0x7F	; 127
    7850:	9e 83       	std	Y+6, r25	; 0x06
    7852:	8d 83       	std	Y+5, r24	; 0x05
    7854:	9e 01       	movw	r18, r28
    7856:	27 5e       	subi	r18, 0xE7	; 231
    7858:	3f 4f       	sbci	r19, 0xFF	; 255
    785a:	ce 01       	movw	r24, r28
    785c:	01 96       	adiw	r24, 0x01	; 1
    785e:	6f 89       	ldd	r22, Y+23	; 0x17
    7860:	78 8d       	ldd	r23, Y+24	; 0x18
    7862:	a9 01       	movw	r20, r18
    7864:	0e 94 b7 2f 	call	0x5f6e	; 0x5f6e <vfprintf>
    7868:	2f 81       	ldd	r18, Y+7	; 0x07
    786a:	38 85       	ldd	r19, Y+8	; 0x08
    786c:	02 0f       	add	r16, r18
    786e:	13 1f       	adc	r17, r19
    7870:	f8 01       	movw	r30, r16
    7872:	10 82       	st	Z, r1
    7874:	2e 96       	adiw	r28, 0x0e	; 14
    7876:	e4 e0       	ldi	r30, 0x04	; 4
    7878:	0c 94 0b 3a 	jmp	0x7416	; 0x7416 <__epilogue_restores__+0x1c>

0000787c <sscanf>:
    787c:	ae e0       	ldi	r26, 0x0E	; 14
    787e:	b0 e0       	ldi	r27, 0x00	; 0
    7880:	e4 e4       	ldi	r30, 0x44	; 68
    7882:	fc e3       	ldi	r31, 0x3C	; 60
    7884:	0c 94 f1 39 	jmp	0x73e2	; 0x73e2 <__prologue_saves__+0x20>
    7888:	85 e0       	ldi	r24, 0x05	; 5
    788a:	8c 83       	std	Y+4, r24	; 0x04
    788c:	8b 89       	ldd	r24, Y+19	; 0x13
    788e:	9c 89       	ldd	r25, Y+20	; 0x14
    7890:	9a 83       	std	Y+2, r25	; 0x02
    7892:	89 83       	std	Y+1, r24	; 0x01
    7894:	9e 01       	movw	r18, r28
    7896:	29 5e       	subi	r18, 0xE9	; 233
    7898:	3f 4f       	sbci	r19, 0xFF	; 255
    789a:	ce 01       	movw	r24, r28
    789c:	01 96       	adiw	r24, 0x01	; 1
    789e:	6d 89       	ldd	r22, Y+21	; 0x15
    78a0:	7e 89       	ldd	r23, Y+22	; 0x16
    78a2:	a9 01       	movw	r20, r18
    78a4:	0e 94 24 36 	call	0x6c48	; 0x6c48 <vfscanf>
    78a8:	2e 96       	adiw	r28, 0x0e	; 14
    78aa:	e2 e0       	ldi	r30, 0x02	; 2
    78ac:	0c 94 0d 3a 	jmp	0x741a	; 0x741a <__epilogue_restores__+0x20>

000078b0 <vsnprintf>:
    78b0:	ae e0       	ldi	r26, 0x0E	; 14
    78b2:	b0 e0       	ldi	r27, 0x00	; 0
    78b4:	ee e5       	ldi	r30, 0x5E	; 94
    78b6:	fc e3       	ldi	r31, 0x3C	; 60
    78b8:	0c 94 ef 39 	jmp	0x73de	; 0x73de <__prologue_saves__+0x1c>
    78bc:	8c 01       	movw	r16, r24
    78be:	77 ff       	sbrs	r23, 7
    78c0:	02 c0       	rjmp	.+4      	; 0x78c6 <vsnprintf+0x16>
    78c2:	60 e0       	ldi	r22, 0x00	; 0
    78c4:	70 e8       	ldi	r23, 0x80	; 128
    78c6:	61 50       	subi	r22, 0x01	; 1
    78c8:	70 40       	sbci	r23, 0x00	; 0
    78ca:	7e 83       	std	Y+6, r23	; 0x06
    78cc:	6d 83       	std	Y+5, r22	; 0x05
    78ce:	1a 83       	std	Y+2, r17	; 0x02
    78d0:	09 83       	std	Y+1, r16	; 0x01
    78d2:	86 e0       	ldi	r24, 0x06	; 6
    78d4:	8c 83       	std	Y+4, r24	; 0x04
    78d6:	ce 01       	movw	r24, r28
    78d8:	01 96       	adiw	r24, 0x01	; 1
    78da:	ba 01       	movw	r22, r20
    78dc:	a9 01       	movw	r20, r18
    78de:	0e 94 b7 2f 	call	0x5f6e	; 0x5f6e <vfprintf>
    78e2:	2d 81       	ldd	r18, Y+5	; 0x05
    78e4:	3e 81       	ldd	r19, Y+6	; 0x06
    78e6:	37 fd       	sbrc	r19, 7
    78e8:	09 c0       	rjmp	.+18     	; 0x78fc <vsnprintf+0x4c>
    78ea:	ef 81       	ldd	r30, Y+7	; 0x07
    78ec:	f8 85       	ldd	r31, Y+8	; 0x08
    78ee:	2e 17       	cp	r18, r30
    78f0:	3f 07       	cpc	r19, r31
    78f2:	0c f4       	brge	.+2      	; 0x78f6 <vsnprintf+0x46>
    78f4:	f9 01       	movw	r30, r18
    78f6:	e0 0f       	add	r30, r16
    78f8:	f1 1f       	adc	r31, r17
    78fa:	10 82       	st	Z, r1
    78fc:	2e 96       	adiw	r28, 0x0e	; 14
    78fe:	e4 e0       	ldi	r30, 0x04	; 4
    7900:	0c 94 0b 3a 	jmp	0x7416	; 0x7416 <__epilogue_restores__+0x1c>

00007904 <vsnprintf_P>:
    7904:	ae e0       	ldi	r26, 0x0E	; 14
    7906:	b0 e0       	ldi	r27, 0x00	; 0
    7908:	e8 e8       	ldi	r30, 0x88	; 136
    790a:	fc e3       	ldi	r31, 0x3C	; 60
    790c:	0c 94 ef 39 	jmp	0x73de	; 0x73de <__prologue_saves__+0x1c>
    7910:	8c 01       	movw	r16, r24
    7912:	77 ff       	sbrs	r23, 7
    7914:	02 c0       	rjmp	.+4      	; 0x791a <vsnprintf_P+0x16>
    7916:	60 e0       	ldi	r22, 0x00	; 0
    7918:	70 e8       	ldi	r23, 0x80	; 128
    791a:	61 50       	subi	r22, 0x01	; 1
    791c:	70 40       	sbci	r23, 0x00	; 0
    791e:	7e 83       	std	Y+6, r23	; 0x06
    7920:	6d 83       	std	Y+5, r22	; 0x05
    7922:	1a 83       	std	Y+2, r17	; 0x02
    7924:	09 83       	std	Y+1, r16	; 0x01
    7926:	8e e0       	ldi	r24, 0x0E	; 14
    7928:	8c 83       	std	Y+4, r24	; 0x04
    792a:	ce 01       	movw	r24, r28
    792c:	01 96       	adiw	r24, 0x01	; 1
    792e:	ba 01       	movw	r22, r20
    7930:	a9 01       	movw	r20, r18
    7932:	0e 94 b7 2f 	call	0x5f6e	; 0x5f6e <vfprintf>
    7936:	2d 81       	ldd	r18, Y+5	; 0x05
    7938:	3e 81       	ldd	r19, Y+6	; 0x06
    793a:	37 fd       	sbrc	r19, 7
    793c:	09 c0       	rjmp	.+18     	; 0x7950 <vsnprintf_P+0x4c>
    793e:	ef 81       	ldd	r30, Y+7	; 0x07
    7940:	f8 85       	ldd	r31, Y+8	; 0x08
    7942:	2e 17       	cp	r18, r30
    7944:	3f 07       	cpc	r19, r31
    7946:	0c f4       	brge	.+2      	; 0x794a <vsnprintf_P+0x46>
    7948:	f9 01       	movw	r30, r18
    794a:	e0 0f       	add	r30, r16
    794c:	f1 1f       	adc	r31, r17
    794e:	10 82       	st	Z, r1
    7950:	2e 96       	adiw	r28, 0x0e	; 14
    7952:	e4 e0       	ldi	r30, 0x04	; 4
    7954:	0c 94 0b 3a 	jmp	0x7416	; 0x7416 <__epilogue_restores__+0x1c>

00007958 <ungetc>:
    7958:	9c 01       	movw	r18, r24
    795a:	fb 01       	movw	r30, r22
    795c:	83 81       	ldd	r24, Z+3	; 0x03
    795e:	80 ff       	sbrs	r24, 0
    7960:	11 c0       	rjmp	.+34     	; 0x7984 <ungetc+0x2c>
    7962:	86 fd       	sbrc	r24, 6
    7964:	0f c0       	rjmp	.+30     	; 0x7984 <ungetc+0x2c>
    7966:	9f ef       	ldi	r25, 0xFF	; 255
    7968:	2f 3f       	cpi	r18, 0xFF	; 255
    796a:	39 07       	cpc	r19, r25
    796c:	59 f0       	breq	.+22     	; 0x7984 <ungetc+0x2c>
    796e:	22 83       	std	Z+2, r18	; 0x02
    7970:	80 64       	ori	r24, 0x40	; 64
    7972:	8f 7d       	andi	r24, 0xDF	; 223
    7974:	83 83       	std	Z+3, r24	; 0x03
    7976:	86 81       	ldd	r24, Z+6	; 0x06
    7978:	97 81       	ldd	r25, Z+7	; 0x07
    797a:	01 97       	sbiw	r24, 0x01	; 1
    797c:	97 83       	std	Z+7, r25	; 0x07
    797e:	86 83       	std	Z+6, r24	; 0x06
    7980:	30 e0       	ldi	r19, 0x00	; 0
    7982:	02 c0       	rjmp	.+4      	; 0x7988 <ungetc+0x30>
    7984:	2f ef       	ldi	r18, 0xFF	; 255
    7986:	3f ef       	ldi	r19, 0xFF	; 255
    7988:	c9 01       	movw	r24, r18
    798a:	08 95       	ret

0000798c <__ultoa_invert>:
    798c:	fa 01       	movw	r30, r20
    798e:	aa 27       	eor	r26, r26
    7990:	28 30       	cpi	r18, 0x08	; 8
    7992:	51 f1       	breq	.+84     	; 0x79e8 <__ultoa_invert+0x5c>
    7994:	20 31       	cpi	r18, 0x10	; 16
    7996:	81 f1       	breq	.+96     	; 0x79f8 <__ultoa_invert+0x6c>
    7998:	e8 94       	clt
    799a:	6f 93       	push	r22
    799c:	6e 7f       	andi	r22, 0xFE	; 254
    799e:	6e 5f       	subi	r22, 0xFE	; 254
    79a0:	7f 4f       	sbci	r23, 0xFF	; 255
    79a2:	8f 4f       	sbci	r24, 0xFF	; 255
    79a4:	9f 4f       	sbci	r25, 0xFF	; 255
    79a6:	af 4f       	sbci	r26, 0xFF	; 255
    79a8:	b1 e0       	ldi	r27, 0x01	; 1
    79aa:	3e d0       	rcall	.+124    	; 0x7a28 <__ultoa_invert+0x9c>
    79ac:	b4 e0       	ldi	r27, 0x04	; 4
    79ae:	3c d0       	rcall	.+120    	; 0x7a28 <__ultoa_invert+0x9c>
    79b0:	67 0f       	add	r22, r23
    79b2:	78 1f       	adc	r23, r24
    79b4:	89 1f       	adc	r24, r25
    79b6:	9a 1f       	adc	r25, r26
    79b8:	a1 1d       	adc	r26, r1
    79ba:	68 0f       	add	r22, r24
    79bc:	79 1f       	adc	r23, r25
    79be:	8a 1f       	adc	r24, r26
    79c0:	91 1d       	adc	r25, r1
    79c2:	a1 1d       	adc	r26, r1
    79c4:	6a 0f       	add	r22, r26
    79c6:	71 1d       	adc	r23, r1
    79c8:	81 1d       	adc	r24, r1
    79ca:	91 1d       	adc	r25, r1
    79cc:	a1 1d       	adc	r26, r1
    79ce:	20 d0       	rcall	.+64     	; 0x7a10 <__ultoa_invert+0x84>
    79d0:	09 f4       	brne	.+2      	; 0x79d4 <__ultoa_invert+0x48>
    79d2:	68 94       	set
    79d4:	3f 91       	pop	r19
    79d6:	2a e0       	ldi	r18, 0x0A	; 10
    79d8:	26 9f       	mul	r18, r22
    79da:	11 24       	eor	r1, r1
    79dc:	30 19       	sub	r19, r0
    79de:	30 5d       	subi	r19, 0xD0	; 208
    79e0:	31 93       	st	Z+, r19
    79e2:	de f6       	brtc	.-74     	; 0x799a <__ultoa_invert+0xe>
    79e4:	cf 01       	movw	r24, r30
    79e6:	08 95       	ret
    79e8:	46 2f       	mov	r20, r22
    79ea:	47 70       	andi	r20, 0x07	; 7
    79ec:	40 5d       	subi	r20, 0xD0	; 208
    79ee:	41 93       	st	Z+, r20
    79f0:	b3 e0       	ldi	r27, 0x03	; 3
    79f2:	0f d0       	rcall	.+30     	; 0x7a12 <__ultoa_invert+0x86>
    79f4:	c9 f7       	brne	.-14     	; 0x79e8 <__ultoa_invert+0x5c>
    79f6:	f6 cf       	rjmp	.-20     	; 0x79e4 <__ultoa_invert+0x58>
    79f8:	46 2f       	mov	r20, r22
    79fa:	4f 70       	andi	r20, 0x0F	; 15
    79fc:	40 5d       	subi	r20, 0xD0	; 208
    79fe:	4a 33       	cpi	r20, 0x3A	; 58
    7a00:	18 f0       	brcs	.+6      	; 0x7a08 <__ultoa_invert+0x7c>
    7a02:	49 5d       	subi	r20, 0xD9	; 217
    7a04:	31 fd       	sbrc	r19, 1
    7a06:	40 52       	subi	r20, 0x20	; 32
    7a08:	41 93       	st	Z+, r20
    7a0a:	02 d0       	rcall	.+4      	; 0x7a10 <__ultoa_invert+0x84>
    7a0c:	a9 f7       	brne	.-22     	; 0x79f8 <__ultoa_invert+0x6c>
    7a0e:	ea cf       	rjmp	.-44     	; 0x79e4 <__ultoa_invert+0x58>
    7a10:	b4 e0       	ldi	r27, 0x04	; 4
    7a12:	a6 95       	lsr	r26
    7a14:	97 95       	ror	r25
    7a16:	87 95       	ror	r24
    7a18:	77 95       	ror	r23
    7a1a:	67 95       	ror	r22
    7a1c:	ba 95       	dec	r27
    7a1e:	c9 f7       	brne	.-14     	; 0x7a12 <__ultoa_invert+0x86>
    7a20:	00 97       	sbiw	r24, 0x00	; 0
    7a22:	61 05       	cpc	r22, r1
    7a24:	71 05       	cpc	r23, r1
    7a26:	08 95       	ret
    7a28:	9b 01       	movw	r18, r22
    7a2a:	ac 01       	movw	r20, r24
    7a2c:	0a 2e       	mov	r0, r26
    7a2e:	06 94       	lsr	r0
    7a30:	57 95       	ror	r21
    7a32:	47 95       	ror	r20
    7a34:	37 95       	ror	r19
    7a36:	27 95       	ror	r18
    7a38:	ba 95       	dec	r27
    7a3a:	c9 f7       	brne	.-14     	; 0x7a2e <__ultoa_invert+0xa2>
    7a3c:	62 0f       	add	r22, r18
    7a3e:	73 1f       	adc	r23, r19
    7a40:	84 1f       	adc	r24, r20
    7a42:	95 1f       	adc	r25, r21
    7a44:	a0 1d       	adc	r26, r0
    7a46:	08 95       	ret

00007a48 <__eerd_block_m324p>:
    7a48:	dc 01       	movw	r26, r24
    7a4a:	cb 01       	movw	r24, r22

00007a4c <__eerd_blraw_m324p>:
    7a4c:	fc 01       	movw	r30, r24
    7a4e:	f9 99       	sbic	0x1f, 1	; 31
    7a50:	fe cf       	rjmp	.-4      	; 0x7a4e <__eerd_blraw_m324p+0x2>
    7a52:	06 c0       	rjmp	.+12     	; 0x7a60 <__eerd_blraw_m324p+0x14>
    7a54:	f2 bd       	out	0x22, r31	; 34
    7a56:	e1 bd       	out	0x21, r30	; 33
    7a58:	f8 9a       	sbi	0x1f, 0	; 31
    7a5a:	31 96       	adiw	r30, 0x01	; 1
    7a5c:	00 b4       	in	r0, 0x20	; 32
    7a5e:	0d 92       	st	X+, r0
    7a60:	41 50       	subi	r20, 0x01	; 1
    7a62:	50 40       	sbci	r21, 0x00	; 0
    7a64:	b8 f7       	brcc	.-18     	; 0x7a54 <__eerd_blraw_m324p+0x8>
    7a66:	08 95       	ret

00007a68 <__eerd_byte_m324p>:
    7a68:	f9 99       	sbic	0x1f, 1	; 31
    7a6a:	fe cf       	rjmp	.-4      	; 0x7a68 <__eerd_byte_m324p>
    7a6c:	92 bd       	out	0x22, r25	; 34
    7a6e:	81 bd       	out	0x21, r24	; 33
    7a70:	f8 9a       	sbi	0x1f, 0	; 31
    7a72:	99 27       	eor	r25, r25
    7a74:	80 b5       	in	r24, 0x20	; 32
    7a76:	08 95       	ret

00007a78 <__eerd_dword_m324p>:
    7a78:	a6 e1       	ldi	r26, 0x16	; 22
    7a7a:	b0 e0       	ldi	r27, 0x00	; 0
    7a7c:	44 e0       	ldi	r20, 0x04	; 4
    7a7e:	50 e0       	ldi	r21, 0x00	; 0
    7a80:	0c 94 26 3d 	jmp	0x7a4c	; 0x7a4c <__eerd_blraw_m324p>

00007a84 <__eerd_word_m324p>:
    7a84:	a8 e1       	ldi	r26, 0x18	; 24
    7a86:	b0 e0       	ldi	r27, 0x00	; 0
    7a88:	42 e0       	ldi	r20, 0x02	; 2
    7a8a:	50 e0       	ldi	r21, 0x00	; 0
    7a8c:	0c 94 26 3d 	jmp	0x7a4c	; 0x7a4c <__eerd_blraw_m324p>

00007a90 <__eewr_block_m324p>:
    7a90:	dc 01       	movw	r26, r24
    7a92:	cb 01       	movw	r24, r22
    7a94:	03 c0       	rjmp	.+6      	; 0x7a9c <__eewr_block_m324p+0xc>
    7a96:	2d 91       	ld	r18, X+
    7a98:	0e 94 53 3d 	call	0x7aa6	; 0x7aa6 <__eewr_r18_m324p>
    7a9c:	41 50       	subi	r20, 0x01	; 1
    7a9e:	50 40       	sbci	r21, 0x00	; 0
    7aa0:	d0 f7       	brcc	.-12     	; 0x7a96 <__eewr_block_m324p+0x6>
    7aa2:	08 95       	ret

00007aa4 <__eewr_byte_m324p>:
    7aa4:	26 2f       	mov	r18, r22

00007aa6 <__eewr_r18_m324p>:
    7aa6:	f9 99       	sbic	0x1f, 1	; 31
    7aa8:	fe cf       	rjmp	.-4      	; 0x7aa6 <__eewr_r18_m324p>
    7aaa:	1f ba       	out	0x1f, r1	; 31
    7aac:	92 bd       	out	0x22, r25	; 34
    7aae:	81 bd       	out	0x21, r24	; 33
    7ab0:	20 bd       	out	0x20, r18	; 32
    7ab2:	0f b6       	in	r0, 0x3f	; 63
    7ab4:	f8 94       	cli
    7ab6:	fa 9a       	sbi	0x1f, 2	; 31
    7ab8:	f9 9a       	sbi	0x1f, 1	; 31
    7aba:	0f be       	out	0x3f, r0	; 63
    7abc:	01 96       	adiw	r24, 0x01	; 1
    7abe:	08 95       	ret

00007ac0 <__eewr_dword_m324p>:
    7ac0:	24 2f       	mov	r18, r20
    7ac2:	0e 94 53 3d 	call	0x7aa6	; 0x7aa6 <__eewr_r18_m324p>
    7ac6:	25 2f       	mov	r18, r21
    7ac8:	0e 94 53 3d 	call	0x7aa6	; 0x7aa6 <__eewr_r18_m324p>
    7acc:	0c 94 68 3d 	jmp	0x7ad0	; 0x7ad0 <__eewr_word_m324p>

00007ad0 <__eewr_word_m324p>:
    7ad0:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <__eewr_byte_m324p>
    7ad4:	27 2f       	mov	r18, r23
    7ad6:	0c 94 53 3d 	jmp	0x7aa6	; 0x7aa6 <__eewr_r18_m324p>

00007ada <__ctype_isfalse>:
    7ada:	99 27       	eor	r25, r25
    7adc:	88 27       	eor	r24, r24

00007ade <__ctype_istrue>:
    7ade:	08 95       	ret

00007ae0 <_exit>:
    7ae0:	f8 94       	cli

00007ae2 <__stop_program>:
    7ae2:	ff cf       	rjmp	.-2      	; 0x7ae2 <__stop_program>
