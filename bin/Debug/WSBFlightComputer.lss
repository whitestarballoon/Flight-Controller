
bin/Debug/WSBFlightComputer:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d8  00800100  00007488  0000753c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007488  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b4  008002d8  008002d8  00007714  2**0
                  ALLOC
  3 .eeprom       00000081  00810000  00810000  00007714  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00007188  00000000  00000000  00007798  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      0000193a  00000000  00000000  0000e920  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000140  00000000  00000000  0001025a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000c4b  00000000  00000000  0001039a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00004611  00000000  00000000  00010fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000f64  00000000  00000000  000155f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000390b  00000000  00000000  0001655a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000005a0  00000000  00000000  00019e68  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001244  00000000  00000000  0001a408  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002294  00000000  00000000  0001b64c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000330  00000000  00000000  0001d8e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__ctors_end>
       4:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
       8:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
       c:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      10:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      14:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      18:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      1c:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      20:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      24:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      28:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      2c:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      30:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      34:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      38:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      3c:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      40:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      44:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      48:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      4c:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      50:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      54:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      58:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      5c:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      60:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      64:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      68:	0c 94 6a 0d 	jmp	0x1ad4	; 0x1ad4 <__vector_26>
      6c:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      70:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      74:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>
      78:	0c 94 fe 02 	jmp	0x5fc	; 0x5fc <__bad_interrupt>

0000007c <bitmaskTypeOrder>:
      7c:	20 10 10 08 21 21 10 08 21 21 08 60 21 60 21 40      ...!!..!!.`!`!@
      8c:	10 30 10 30 08 22 22 08 30 21 30 21 21 10 08 10     .0.0."".0!0!!...
      9c:	10 10 10                                            ...

0000009f <__c.1879>:
      9f:	4c 42 20 53 3a 20 25 64 20 45 3a 20 25 64 0a 00     LB S: %d E: %d..

000000af <__c.1872>:
      af:	4c 42 0a 00                                         LB..

000000b3 <__c.2419>:
      b3:	25 6c 64 2c 25 6c 64 2c 25 6c 64 2c 25 64 2c 25     %ld,%ld,%ld,%d,%
      c3:	64 2c 25 64 2c 25 64 2c 25 64 2c 25 64 2c 25 64     d,%d,%d,%d,%d,%d
      d3:	2c 25 64 2c 25 64 2c 25 73 2c 25 66 2c 25 73 2c     ,%d,%d,%s,%f,%s,
      e3:	25 66 2c 25 73 2c 25 64 2c 25 73 2c 25 64 2c 25     %f,%s,%d,%s,%d,%
      f3:	73 2c 25 64 2c 25 64 2c 25 64 2c 25 64 2c 25 73     s,%d,%d,%d,%d,%s
     103:	2c 25 64 2c 25 73 2c 25 64 2c 25 64 2c 25 64 2c     ,%d,%s,%d,%d,%d,
     113:	25 64 2c 25 64 2c 25 64 2c 25 64 2c 25 64 2c 00     %d,%d,%d,%d,%d,.

00000123 <__c.2279>:
     123:	43 42 4d 31 0a 00                                   CBM1..

00000129 <__c.2273>:
     129:	43 42 4d 31 0a 00                                   CBM1..

0000012f <__c.2232>:
     12f:	65 70 4c 6f 63 3a 20 25 64 0a 00                    epLoc: %d..

0000013a <__c.2230>:
     13a:	74 65 6c 65 6d 65 74 72 79 53 70 65 65 64 44 69     telemetrySpeedDi
     14a:	61 6c 3a 20 25 64 0a 00                             al: %d..

00000152 <__c.2228>:
     152:	25 6c 78 0a 00                                      %lx..

00000157 <__c.2226>:
     157:	25 6c 78 20 00                                      %lx .

0000015c <__c.2224>:
     15c:	54 65 6c 65 6d 42 69 74 6d 61 70 3a 20 25 6c 78     TelemBitmap: %lx
     16c:	20 00                                                .

0000016e <__c.2222>:
     16e:	50 68 61 73 65 3a 20 25 64 0a 00                    Phase: %d..

00000179 <__c.2220>:
     179:	63 6f 6d 6d 4d 6f 64 75 6c 65 52 65 73 65 74 43     commModuleResetC
     189:	6f 75 6e 74 3a 20 25 64 0a 00                       ount: %d..

00000193 <__c.2218>:
     193:	66 6c 69 67 68 74 43 6f 6d 70 75 74 65 72 52 65     flightComputerRe
     1a3:	73 65 74 43 6f 75 6e 74 3a 20 25 64 0a 00           setCount: %d..

000001b1 <__c.2216>:
     1b1:	63 6f 6d 6d 45 45 50 52 4f 4d 45 6e 64 3a 20 25     commEEPROMEnd: %
     1c1:	64 0a 00                                            d..

000001c4 <__c.2214>:
     1c4:	63 6f 6d 6d 45 45 50 52 4f 4d 53 74 61 72 74 3a     commEEPROMStart:
     1d4:	20 25 64 0a 00                                       %d..

000001d9 <__c.2212>:
     1d9:	62 61 74 63 68 53 61 6d 70 6c 65 45 6e 64 3a 20     batchSampleEnd: 
     1e9:	25 64 0a 00                                         %d..

000001ed <__c.2210>:
     1ed:	62 61 74 63 68 53 61 6d 70 6c 65 53 74 61 72 74     batchSampleStart
     1fd:	3a 20 25 64 0a 00                                   : %d..

00000203 <__c.2208>:
     203:	63 75 72 42 61 74 63 68 4e 75 6d 62 65 72 3a 20     curBatchNumber: 
     213:	25 64 0a 00                                         %d..

00000217 <__c.2206>:
     217:	65 70 6f 63 68 4f 66 4c 61 73 74 42 61 74 63 68     epochOfLastBatch
     227:	54 58 3a 20 25 6c 64 0a 00                          TX: %ld..

00000230 <__c.2204>:
     230:	48 46 72 61 70 69 64 58 6d 69 74 49 6e 74 65 72     HFrapidXmitInter
     240:	76 61 6c 3a 20 25 64 0a 00                          val: %d..

00000249 <__c.2202>:
     249:	48 46 64 61 74 61 58 6d 69 74 49 6e 74 65 72 76     HFdataXmitInterv
     259:	61 6c 3a 20 25 64 0a 00                             al: %d..

00000261 <__c.2200>:
     261:	73 68 6f 72 74 54 58 49 6e 74 65 72 76 61 6c 3a     shortTXInterval:
     271:	20 25 64 0a 00                                       %d..

00000276 <__c.2198>:
     276:	62 61 74 63 68 54 58 49 6e 74 65 72 76 61 6c 3a     batchTXInterval:
     286:	20 25 64 0a 00                                       %d..

0000028b <__c.2196>:
     28b:	64 61 74 61 53 61 6d 70 6c 65 49 6e 74 65 72 76     dataSampleInterv
     29b:	61 6c 3a 20 25 64 0a 00                             al: %d..

000002a3 <__c.2194>:
     2a3:	62 61 74 74 65 72 79 48 65 61 74 65 72 53 65 74     batteryHeaterSet
     2b3:	3a 20 25 64 0a 00                                   : %d..

000002b9 <__c.2192>:
     2b9:	6d 61 78 41 6c 6c 6f 77 65 64 54 58 49 6e 74 65     maxAllowedTXInte
     2c9:	72 76 61 6c 3a 20 25 64 0a 00                       rval: %d..

000002d3 <__c.2190>:
     2d3:	61 75 74 6f 42 61 6c 6c 61 73 74 20 64 73 62 6c     autoBallast dsbl
     2e3:	65 64 3f 3a 20 25 64 0a 00                          ed?: %d..

000002ec <__c.2187>:
     2ec:	62 61 6c 6c 61 73 74 53 66 74 79 41 6c 74 3a 20     ballastSftyAlt: 
     2fc:	25 64 0a 00                                         %d..

00000300 <__c.2172>:
     300:	45 72 72 6f 72 20 52 65 61 64 69 6e 67 20 42 61     Error Reading Ba
     310:	74 74 65 72 79 20 54 65 6d 70 0a 00                 ttery Temp..

0000031c <__c.2170>:
     31c:	42 61 74 74 3a 20 52 61 77 3a 20 25 78 20 43 61     Batt: Raw: %x Ca
     32c:	6c 63 3a 20 25 64 0a 00                             lc: %d..

00000334 <__c.2168>:
     334:	45 72 72 6f 72 20 52 65 61 64 69 6e 67 20 45 78     Error Reading Ex
     344:	74 65 72 6e 61 6c 20 54 65 6d 70 0a 00              ternal Temp..

00000351 <__c.2166>:
     351:	45 78 74 3a 20 52 61 77 3a 20 25 78 20 43 61 6c     Ext: Raw: %x Cal
     361:	63 3a 20 25 64 0a 00                                c: %d..

00000368 <__c.2164>:
     368:	45 72 72 6f 72 20 52 65 61 64 69 6e 67 20 46 43     Error Reading FC
     378:	20 54 65 6d 70 0a 00                                 Temp..

0000037f <__c.2162>:
     37f:	46 43 3a 20 52 61 77 3a 20 25 78 20 43 61 6c 63     FC: Raw: %x Calc
     38f:	3a 20 25 64 0a 00                                   : %d..

00000395 <__c.2147>:
     395:	42 4d 50 20 50 3a 20 25 6c 64 0a 00                 BMP P: %ld..

000003a1 <__c.2145>:
     3a1:	42 4d 50 20 54 3a 20 25 6c 64 0a 00                 BMP T: %ld..

000003ad <__c.2133>:
     3ad:	74 75 72 6e 65 64 20 62 61 6c 6c 61 73 74 20 6f     turned ballast o
     3bd:	6e 2e 0a 00                                         n...

000003c1 <__c.2126>:
     3c1:	74 65 73 74 69 6e 67 20 62 61 6c 6c 61 73 74 0a     testing ballast.
	...

000003d2 <__c.2051>:
     3d2:	62 70 74 72 20 25 70 0a 00                          bptr %p..

000003db <__c.2049>:
     3db:	62 64 69 73 0a 00                                   bdis..

000003e1 <__c.2037>:
     3e1:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 74 68     Error Setting th
     3f1:	65 72 6d 6f 6d 65 74 65 72 0a 00                    ermometer..

000003fc <__c.1834>:
     3fc:	43 68 65 63 6b 73 75 6d 20 56 61 6c 69 64 0a 00     Checksum Valid..

0000040c <__c.1828>:
     40c:	43 53 3a 20 25 78 20 54 43 53 3a 20 25 78 0a 00     CS: %x TCS: %x..

0000041c <__c.1817>:
     41c:	43 68 65 63 6b 73 75 6d 20 56 61 6c 69 64 0a 00     Checksum Valid..

0000042c <__c.1811>:
     42c:	43 53 3a 20 25 78 20 54 43 53 3a 20 25 78 0a 00     CS: %x TCS: %x..

0000043c <__c.1800>:
     43c:	43 68 65 63 6b 73 75 6d 20 56 61 6c 69 64 0a 00     Checksum Valid..

0000044c <__c.1794>:
     44c:	43 53 3a 20 25 78 20 54 43 53 3a 20 25 78 0a 00     CS: %x TCS: %x..

0000045c <__c.1780>:
     45c:	49 6e 20 55 72 20 47 50 53 20 44 65 62 75 67 0a     In Ur GPS Debug.
	...

0000046d <__c.1648>:
     46d:	45 52 52 0a 00                                      ERR..

00000472 <__c.1790>:
     472:	6e 61 6e 00                                         nan.

00000476 <__c.1788>:
     476:	69 6e 66 00                                         inf.

0000047a <__c.2085>:
     47a:	63 64 69 6e 6f 70 73 75 78 58 5b 65 66 67 45 46     cdinopsuxX[efgEF
     48a:	47 00                                               G.

0000048c <pstr_an>:
     48c:	61 6e 00                                            an.

0000048f <pstr_nfinity>:
     48f:	6e 66 69 6e 69 74 79 00                             nfinity.

00000497 <pwr_m10>:
     497:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     4a7:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000004af <pwr_p10>:
     4af:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     4bf:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     4cf:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     4df:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     4ef:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     4ff:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     50f:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     51f:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     52f:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     53f:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     54f:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     55f:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     56f:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     57f:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     58f:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     59f:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     5af:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     5bf:	3d 27 00                                            ='.

000005c2 <__ctors_end>:
     5c2:	11 24       	eor	r1, r1
     5c4:	1f be       	out	0x3f, r1	; 63
     5c6:	cf ef       	ldi	r28, 0xFF	; 255
     5c8:	d8 e0       	ldi	r29, 0x08	; 8
     5ca:	de bf       	out	0x3e, r29	; 62
     5cc:	cd bf       	out	0x3d, r28	; 61

000005ce <__do_copy_data>:
     5ce:	12 e0       	ldi	r17, 0x02	; 2
     5d0:	a0 e0       	ldi	r26, 0x00	; 0
     5d2:	b1 e0       	ldi	r27, 0x01	; 1
     5d4:	e8 e8       	ldi	r30, 0x88	; 136
     5d6:	f4 e7       	ldi	r31, 0x74	; 116
     5d8:	02 c0       	rjmp	.+4      	; 0x5de <.do_copy_data_start>

000005da <.do_copy_data_loop>:
     5da:	05 90       	lpm	r0, Z+
     5dc:	0d 92       	st	X+, r0

000005de <.do_copy_data_start>:
     5de:	a8 3d       	cpi	r26, 0xD8	; 216
     5e0:	b1 07       	cpc	r27, r17
     5e2:	d9 f7       	brne	.-10     	; 0x5da <.do_copy_data_loop>

000005e4 <__do_clear_bss>:
     5e4:	14 e0       	ldi	r17, 0x04	; 4
     5e6:	a8 ed       	ldi	r26, 0xD8	; 216
     5e8:	b2 e0       	ldi	r27, 0x02	; 2
     5ea:	01 c0       	rjmp	.+2      	; 0x5ee <.do_clear_bss_start>

000005ec <.do_clear_bss_loop>:
     5ec:	1d 92       	st	X+, r1

000005ee <.do_clear_bss_start>:
     5ee:	ac 38       	cpi	r26, 0x8C	; 140
     5f0:	b1 07       	cpc	r27, r17
     5f2:	e1 f7       	brne	.-8      	; 0x5ec <.do_clear_bss_loop>
     5f4:	0e 94 a9 23 	call	0x4752	; 0x4752 <main>
     5f8:	0c 94 42 3a 	jmp	0x7484	; 0x7484 <_exit>

000005fc <__bad_interrupt>:
     5fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000600 <memrcpy>:
	eeprom_write_word(&EEcommPromEnd, commPromEnd);
	eeprom_write_word(&EEcommPromStart, commPromStart);
}

void memrcpy(void *dst, const void *src, size_t len)
{
     600:	dc 01       	movw	r26, r24
     602:	a4 0f       	add	r26, r20
     604:	b5 1f       	adc	r27, r21
     606:	20 e0       	ldi	r18, 0x00	; 0
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	07 c0       	rjmp	.+14     	; 0x61a <memrcpy+0x1a>
    char* d = (char*)dst;
    const char* s = (const char*)src;

    for(i=0; i<len; ++i)
    {
        d[len-1-i] = s[i];
     60c:	fb 01       	movw	r30, r22
     60e:	e2 0f       	add	r30, r18
     610:	f3 1f       	adc	r31, r19
     612:	80 81       	ld	r24, Z
     614:	8c 93       	st	X, r24
{
    size_t i;
    char* d = (char*)dst;
    const char* s = (const char*)src;

    for(i=0; i<len; ++i)
     616:	2f 5f       	subi	r18, 0xFF	; 255
     618:	3f 4f       	sbci	r19, 0xFF	; 255
     61a:	11 97       	sbiw	r26, 0x01	; 1
     61c:	24 17       	cp	r18, r20
     61e:	35 07       	cpc	r19, r21
     620:	a8 f3       	brcs	.-22     	; 0x60c <memrcpy+0xc>
    {
        d[len-1-i] = s[i];
    }
}
     622:	08 95       	ret

00000624 <flushSatQueue>:
	eeprom_write_word(&EEcommPromEnd, commPromEnd);

}

void flushSatQueue(void)
{
     624:	cf 93       	push	r28
     626:	df 93       	push	r29

	uint16_t commPromEnd = eeprom_read_word(&EEcommPromEnd);
     628:	80 e3       	ldi	r24, 0x30	; 48
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>
     630:	bc 01       	movw	r22, r24
	uint16_t commPromStart = eeprom_read_word(&EEcommPromStart);
	//Send A message to comm module(CommEEPROMstart, CommEEPROMEnd)
	if(COMMPROMSIZE - commPromEnd < 1024)
     632:	9c 01       	movw	r18, r24
     634:	40 e0       	ldi	r20, 0x00	; 0
     636:	50 e0       	ldi	r21, 0x00	; 0
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	90 e8       	ldi	r25, 0x80	; 128
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	82 1b       	sub	r24, r18
     642:	93 0b       	sbc	r25, r19
     644:	a4 0b       	sbc	r26, r20
     646:	b5 0b       	sbc	r27, r21
     648:	80 50       	subi	r24, 0x00	; 0
     64a:	94 40       	sbci	r25, 0x04	; 4
     64c:	a0 40       	sbci	r26, 0x00	; 0
     64e:	b0 40       	sbci	r27, 0x00	; 0
     650:	14 f0       	brlt	.+4      	; 0x656 <flushSatQueue+0x32>
     652:	eb 01       	movw	r28, r22
     654:	04 c0       	rjmp	.+8      	; 0x65e <flushSatQueue+0x3a>
     656:	60 e0       	ldi	r22, 0x00	; 0
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	c0 e0       	ldi	r28, 0x00	; 0
     65c:	d0 e0       	ldi	r29, 0x00	; 0
		commPromStart = commPromEnd = 0;
	else
		commPromStart = commPromEnd;

	eeprom_write_word(&EEcommPromEnd, commPromEnd);
     65e:	80 e3       	ldi	r24, 0x30	; 48
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__eewr_word_m324p>
	eeprom_write_word(&EEcommPromStart, commPromStart);
     666:	8e e2       	ldi	r24, 0x2E	; 46
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	be 01       	movw	r22, r28
     66c:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__eewr_word_m324p>
}
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
     674:	08 95       	ret

00000676 <getTxSample>:
extern int lprintf(char *, ...);
extern int lprintf_P(const char *str, ...);
extern uint16_t EEMEM EEcurrentTelemetryVersion;

uint16_t getTxSample(uint8_t *output, uint32_t *bitmask, uint16_t sampleNumber, uint16_t batch)
{
     676:	2f 92       	push	r2
     678:	3f 92       	push	r3
     67a:	4f 92       	push	r4
     67c:	5f 92       	push	r5
     67e:	6f 92       	push	r6
     680:	7f 92       	push	r7
     682:	8f 92       	push	r8
     684:	9f 92       	push	r9
     686:	af 92       	push	r10
     688:	bf 92       	push	r11
     68a:	cf 92       	push	r12
     68c:	df 92       	push	r13
     68e:	ef 92       	push	r14
     690:	ff 92       	push	r15
     692:	0f 93       	push	r16
     694:	1f 93       	push	r17
     696:	df 93       	push	r29
     698:	cf 93       	push	r28
     69a:	cd b7       	in	r28, 0x3d	; 61
     69c:	de b7       	in	r29, 0x3e	; 62
     69e:	c6 50       	subi	r28, 0x06	; 6
     6a0:	d1 40       	sbci	r29, 0x01	; 1
     6a2:	0f b6       	in	r0, 0x3f	; 63
     6a4:	f8 94       	cli
     6a6:	de bf       	out	0x3e, r29	; 62
     6a8:	0f be       	out	0x3f, r0	; 63
     6aa:	cd bf       	out	0x3d, r28	; 61
     6ac:	5c 01       	movw	r10, r24
     6ae:	4b 01       	movw	r8, r22
     6b0:	3a 01       	movw	r6, r20
     6b2:	19 01       	movw	r2, r18
     6b4:	cc 24       	eor	r12, r12
     6b6:	dd 24       	eor	r13, r13
		  r <<= 1;
		  r |= v & 1;
		  s--;
		}
		r <<= s; // shift when v's highest bits are zero
		reversedBitmask[i] = r;
     6b8:	4f e0       	ldi	r20, 0x0F	; 15
     6ba:	44 2e       	mov	r4, r20
     6bc:	51 2c       	mov	r5, r1
     6be:	4c 0e       	add	r4, r28
     6c0:	5d 1e       	adc	r5, r29
	//uint32_t v;     // input bits to be reversed
	//uint32_t r = v; // r will be reversed bits of v; first get LSB of v

	for(int i=0; i < 3; i++)
	{
		uint32_t v = bitmask[i];
     6c2:	f4 01       	movw	r30, r8
     6c4:	ec 0d       	add	r30, r12
     6c6:	fd 1d       	adc	r31, r13
     6c8:	80 81       	ld	r24, Z
     6ca:	91 81       	ldd	r25, Z+1	; 0x01
     6cc:	a2 81       	ldd	r26, Z+2	; 0x02
     6ce:	b3 81       	ldd	r27, Z+3	; 0x03
		uint32_t r = v;
		int s = sizeof(v) * 8 - 1; // extra shift needed at end
		for (v >>= 1; v; v >>= 1)
     6d0:	7c 01       	movw	r14, r24
     6d2:	8d 01       	movw	r16, r26
     6d4:	16 95       	lsr	r17
     6d6:	07 95       	ror	r16
     6d8:	f7 94       	ror	r15
     6da:	e7 94       	ror	r14
     6dc:	9c 01       	movw	r18, r24
     6de:	ad 01       	movw	r20, r26
     6e0:	6f e1       	ldi	r22, 0x1F	; 31
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	16 c0       	rjmp	.+44     	; 0x712 <getTxSample+0x9c>
		{
		  r <<= 1;
     6e6:	da 01       	movw	r26, r20
     6e8:	c9 01       	movw	r24, r18
     6ea:	88 0f       	add	r24, r24
     6ec:	99 1f       	adc	r25, r25
     6ee:	aa 1f       	adc	r26, r26
     6f0:	bb 1f       	adc	r27, r27
		  r |= v & 1;
     6f2:	a8 01       	movw	r20, r16
     6f4:	97 01       	movw	r18, r14
     6f6:	21 70       	andi	r18, 0x01	; 1
     6f8:	30 70       	andi	r19, 0x00	; 0
     6fa:	40 70       	andi	r20, 0x00	; 0
     6fc:	50 70       	andi	r21, 0x00	; 0
     6fe:	28 2b       	or	r18, r24
     700:	39 2b       	or	r19, r25
     702:	4a 2b       	or	r20, r26
     704:	5b 2b       	or	r21, r27
		  s--;
     706:	61 50       	subi	r22, 0x01	; 1
     708:	70 40       	sbci	r23, 0x00	; 0
	for(int i=0; i < 3; i++)
	{
		uint32_t v = bitmask[i];
		uint32_t r = v;
		int s = sizeof(v) * 8 - 1; // extra shift needed at end
		for (v >>= 1; v; v >>= 1)
     70a:	16 95       	lsr	r17
     70c:	07 95       	ror	r16
     70e:	f7 94       	ror	r15
     710:	e7 94       	ror	r14
     712:	e1 14       	cp	r14, r1
     714:	f1 04       	cpc	r15, r1
     716:	01 05       	cpc	r16, r1
     718:	11 05       	cpc	r17, r1
     71a:	29 f7       	brne	.-54     	; 0x6e6 <getTxSample+0x70>
		  r <<= 1;
		  r |= v & 1;
		  s--;
		}
		r <<= s; // shift when v's highest bits are zero
		reversedBitmask[i] = r;
     71c:	f2 01       	movw	r30, r4
     71e:	ec 0d       	add	r30, r12
     720:	fd 1d       	adc	r31, r13
     722:	04 c0       	rjmp	.+8      	; 0x72c <getTxSample+0xb6>
     724:	22 0f       	add	r18, r18
     726:	33 1f       	adc	r19, r19
     728:	44 1f       	adc	r20, r20
     72a:	55 1f       	adc	r21, r21
     72c:	6a 95       	dec	r22
     72e:	d2 f7       	brpl	.-12     	; 0x724 <getTxSample+0xae>
     730:	20 83       	st	Z, r18
     732:	31 83       	std	Z+1, r19	; 0x01
     734:	42 83       	std	Z+2, r20	; 0x02
     736:	53 83       	std	Z+3, r21	; 0x03
     738:	84 e0       	ldi	r24, 0x04	; 4
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	c8 0e       	add	r12, r24
     73e:	d9 1e       	adc	r13, r25
	uint32_t reversedBitmask[3];

	//uint32_t v;     // input bits to be reversed
	//uint32_t r = v; // r will be reversed bits of v; first get LSB of v

	for(int i=0; i < 3; i++)
     740:	9c e0       	ldi	r25, 0x0C	; 12
     742:	c9 16       	cp	r12, r25
     744:	d1 04       	cpc	r13, r1
     746:	09 f0       	breq	.+2      	; 0x74a <getTxSample+0xd4>
     748:	bc cf       	rjmp	.-136    	; 0x6c2 <getTxSample+0x4c>
	lprintf("%lx ", reversedBitmask[1]);
	lprintf("%lx\n", reversedBitmask[2]);*/

	char sampleHolder[SAMPLESTRINGSIZEINCHARS+5];

    memset(sampleHolder, 0, SAMPLESTRINGSIZEINCHARS+5);
     74a:	8e 01       	movw	r16, r28
     74c:	05 5e       	subi	r16, 0xE5	; 229
     74e:	1f 4f       	sbci	r17, 0xFF	; 255
     750:	86 ee       	ldi	r24, 0xE6	; 230
     752:	d8 01       	movw	r26, r16
     754:	1d 92       	st	X+, r1
     756:	8a 95       	dec	r24
     758:	e9 f7       	brne	.-6      	; 0x754 <getTxSample+0xde>
	getDataSample(sampleNumber, sampleHolder);
     75a:	c3 01       	movw	r24, r6
     75c:	b8 01       	movw	r22, r16
     75e:	0e 94 06 10 	call	0x200c	; 0x200c <getDataSample>
	//Sample Retrieval words
	#ifdef opdebug
		lprintf("ISAMP: %d\n", sampleNumber);
     762:	00 d0       	rcall	.+0      	; 0x764 <getTxSample+0xee>
     764:	00 d0       	rcall	.+0      	; 0x766 <getTxSample+0xf0>
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	91 e0       	ldi	r25, 0x01	; 1
     76a:	ed b7       	in	r30, 0x3d	; 61
     76c:	fe b7       	in	r31, 0x3e	; 62
     76e:	92 83       	std	Z+2, r25	; 0x02
     770:	81 83       	std	Z+1, r24	; 0x01
     772:	74 82       	std	Z+4, r7	; 0x04
     774:	63 82       	std	Z+3, r6	; 0x03
     776:	0e 94 30 12 	call	0x2460	; 0x2460 <lprintf>
     77a:	0f 90       	pop	r0
     77c:	0f 90       	pop	r0
     77e:	0f 90       	pop	r0
     780:	0f 90       	pop	r0
        for(int i = 0; i < SAMPLESTRINGSIZEINCHARS; i++)
        {
            lprintf("%c", sampleHolder[i]);
     782:	8b e0       	ldi	r24, 0x0B	; 11
     784:	c8 2e       	mov	r12, r24
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	d8 2e       	mov	r13, r24
    memset(sampleHolder, 0, SAMPLESTRINGSIZEINCHARS+5);
	getDataSample(sampleNumber, sampleHolder);
	//Sample Retrieval words
	#ifdef opdebug
		lprintf("ISAMP: %d\n", sampleNumber);
        for(int i = 0; i < SAMPLESTRINGSIZEINCHARS; i++)
     78a:	c8 01       	movw	r24, r16
     78c:	70 2e       	mov	r7, r16
     78e:	69 2e       	mov	r6, r25
     790:	bc ef       	ldi	r27, 0xFC	; 252
     792:	eb 2e       	mov	r14, r27
     794:	f1 2c       	mov	r15, r1
     796:	ec 0e       	add	r14, r28
     798:	fd 1e       	adc	r15, r29
        {
            lprintf("%c", sampleHolder[i]);
     79a:	00 d0       	rcall	.+0      	; 0x79c <getTxSample+0x126>
     79c:	00 d0       	rcall	.+0      	; 0x79e <getTxSample+0x128>
     79e:	ed b7       	in	r30, 0x3d	; 61
     7a0:	fe b7       	in	r31, 0x3e	; 62
     7a2:	31 96       	adiw	r30, 0x01	; 1
     7a4:	ad b7       	in	r26, 0x3d	; 61
     7a6:	be b7       	in	r27, 0x3e	; 62
     7a8:	12 96       	adiw	r26, 0x02	; 2
     7aa:	dc 92       	st	X, r13
     7ac:	ce 92       	st	-X, r12
     7ae:	11 97       	sbiw	r26, 0x01	; 1
     7b0:	d8 01       	movw	r26, r16
     7b2:	8d 91       	ld	r24, X+
     7b4:	8d 01       	movw	r16, r26
     7b6:	82 83       	std	Z+2, r24	; 0x02
     7b8:	13 82       	std	Z+3, r1	; 0x03
     7ba:	0e 94 30 12 	call	0x2460	; 0x2460 <lprintf>
    memset(sampleHolder, 0, SAMPLESTRINGSIZEINCHARS+5);
	getDataSample(sampleNumber, sampleHolder);
	//Sample Retrieval words
	#ifdef opdebug
		lprintf("ISAMP: %d\n", sampleNumber);
        for(int i = 0; i < SAMPLESTRINGSIZEINCHARS; i++)
     7be:	0f 90       	pop	r0
     7c0:	0f 90       	pop	r0
     7c2:	0f 90       	pop	r0
     7c4:	0f 90       	pop	r0
     7c6:	0e 15       	cp	r16, r14
     7c8:	1f 05       	cpc	r17, r15
     7ca:	39 f7       	brne	.-50     	; 0x79a <getTxSample+0x124>
        {
            lprintf("%c", sampleHolder[i]);
        }
		lprintf("\n");
     7cc:	00 d0       	rcall	.+0      	; 0x7ce <getTxSample+0x158>
     7ce:	8e e0       	ldi	r24, 0x0E	; 14
     7d0:	91 e0       	ldi	r25, 0x01	; 1
     7d2:	ed b7       	in	r30, 0x3d	; 61
     7d4:	fe b7       	in	r31, 0x3e	; 62
     7d6:	92 83       	std	Z+2, r25	; 0x02
     7d8:	81 83       	std	Z+1, r24	; 0x01
     7da:	0e 94 30 12 	call	0x2460	; 0x2460 <lprintf>
	#endif

	lprintf("done\n");
     7de:	80 e1       	ldi	r24, 0x10	; 16
     7e0:	91 e0       	ldi	r25, 0x01	; 1
     7e2:	ad b7       	in	r26, 0x3d	; 61
     7e4:	be b7       	in	r27, 0x3e	; 62
     7e6:	12 96       	adiw	r26, 0x02	; 2
     7e8:	9c 93       	st	X, r25
     7ea:	8e 93       	st	-X, r24
     7ec:	11 97       	sbiw	r26, 0x01	; 1
     7ee:	0e 94 30 12 	call	0x2460	; 0x2460 <lprintf>
	char *token;


	//BEGIN SAMPLE PREAMBLE
	//First token is epoch time:
	token = strtok(sampleHolder, ",");
     7f2:	0f 90       	pop	r0
     7f4:	0f 90       	pop	r0
     7f6:	87 2d       	mov	r24, r7
     7f8:	96 2d       	mov	r25, r6
     7fa:	66 e1       	ldi	r22, 0x16	; 22
     7fc:	71 e0       	ldi	r23, 0x01	; 1
     7fe:	0e 94 fc 37 	call	0x6ff8	; 0x6ff8 <strtok>
     802:	8c 01       	movw	r16, r24
	uint32_t epochSample;
	sscanf(token, "%ld", &epochSample);
     804:	00 d0       	rcall	.+0      	; 0x806 <getTxSample+0x190>
     806:	00 d0       	rcall	.+0      	; 0x808 <getTxSample+0x192>
     808:	00 d0       	rcall	.+0      	; 0x80a <getTxSample+0x194>
     80a:	ed b7       	in	r30, 0x3d	; 61
     80c:	fe b7       	in	r31, 0x3e	; 62
     80e:	31 96       	adiw	r30, 0x01	; 1
     810:	ad b7       	in	r26, 0x3d	; 61
     812:	be b7       	in	r27, 0x3e	; 62
     814:	12 96       	adiw	r26, 0x02	; 2
     816:	9c 93       	st	X, r25
     818:	8e 93       	st	-X, r24
     81a:	11 97       	sbiw	r26, 0x01	; 1
     81c:	a8 e1       	ldi	r26, 0x18	; 24
     81e:	ea 2e       	mov	r14, r26
     820:	a1 e0       	ldi	r26, 0x01	; 1
     822:	fa 2e       	mov	r15, r26
     824:	f3 82       	std	Z+3, r15	; 0x03
     826:	e2 82       	std	Z+2, r14	; 0x02
     828:	ce 01       	movw	r24, r28
     82a:	03 96       	adiw	r24, 0x03	; 3
     82c:	95 83       	std	Z+5, r25	; 0x05
     82e:	84 83       	std	Z+4, r24	; 0x04
     830:	0e 94 10 39 	call	0x7220	; 0x7220 <sscanf>

	lprintf("\nep: %s\n", token);
     834:	0f 90       	pop	r0
     836:	0f 90       	pop	r0
     838:	8c e1       	ldi	r24, 0x1C	; 28
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	ed b7       	in	r30, 0x3d	; 61
     83e:	fe b7       	in	r31, 0x3e	; 62
     840:	92 83       	std	Z+2, r25	; 0x02
     842:	81 83       	std	Z+1, r24	; 0x01
     844:	14 83       	std	Z+4, r17	; 0x04
     846:	03 83       	std	Z+3, r16	; 0x03
     848:	0e 94 30 12 	call	0x2460	; 0x2460 <lprintf>

	output[0] = eeprom_read_word(&EEcurrentTelemetryVersion) >> 8;
     84c:	0f 90       	pop	r0
     84e:	0f 90       	pop	r0
     850:	0f 90       	pop	r0
     852:	0f 90       	pop	r0
     854:	81 e4       	ldi	r24, 0x41	; 65
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>
     85c:	d5 01       	movw	r26, r10
     85e:	9c 93       	st	X, r25
	output[1] = eeprom_read_word(&EEcurrentTelemetryVersion);
     860:	81 e4       	ldi	r24, 0x41	; 65
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>
     868:	f5 01       	movw	r30, r10
     86a:	81 83       	std	Z+1, r24	; 0x01

	bytesWritten +=2;

    output[2] = bitmask[0] >> 24;
     86c:	f4 01       	movw	r30, r8
     86e:	80 81       	ld	r24, Z
     870:	91 81       	ldd	r25, Z+1	; 0x01
     872:	a2 81       	ldd	r26, Z+2	; 0x02
     874:	b3 81       	ldd	r27, Z+3	; 0x03
     876:	8b 2f       	mov	r24, r27
     878:	99 27       	eor	r25, r25
     87a:	aa 27       	eor	r26, r26
     87c:	bb 27       	eor	r27, r27
     87e:	f5 01       	movw	r30, r10
     880:	82 83       	std	Z+2, r24	; 0x02
    output[3] = bitmask[0] >> 16;
     882:	f4 01       	movw	r30, r8
     884:	80 81       	ld	r24, Z
     886:	91 81       	ldd	r25, Z+1	; 0x01
     888:	a2 81       	ldd	r26, Z+2	; 0x02
     88a:	b3 81       	ldd	r27, Z+3	; 0x03
     88c:	cd 01       	movw	r24, r26
     88e:	aa 27       	eor	r26, r26
     890:	bb 27       	eor	r27, r27
     892:	f5 01       	movw	r30, r10
     894:	83 83       	std	Z+3, r24	; 0x03
    output[4] = bitmask[0] >> 8;
     896:	f4 01       	movw	r30, r8
     898:	80 81       	ld	r24, Z
     89a:	91 81       	ldd	r25, Z+1	; 0x01
     89c:	a2 81       	ldd	r26, Z+2	; 0x02
     89e:	b3 81       	ldd	r27, Z+3	; 0x03
     8a0:	89 2f       	mov	r24, r25
     8a2:	9a 2f       	mov	r25, r26
     8a4:	ab 2f       	mov	r26, r27
     8a6:	bb 27       	eor	r27, r27
     8a8:	f5 01       	movw	r30, r10
     8aa:	84 83       	std	Z+4, r24	; 0x04
    output[5] = bitmask[0];
     8ac:	d4 01       	movw	r26, r8
     8ae:	8c 91       	ld	r24, X
     8b0:	85 83       	std	Z+5, r24	; 0x05
    output[6] = bitmask[1] >> 24;
     8b2:	14 96       	adiw	r26, 0x04	; 4
     8b4:	8d 91       	ld	r24, X+
     8b6:	9d 91       	ld	r25, X+
     8b8:	0d 90       	ld	r0, X+
     8ba:	bc 91       	ld	r27, X
     8bc:	a0 2d       	mov	r26, r0
     8be:	8b 2f       	mov	r24, r27
     8c0:	99 27       	eor	r25, r25
     8c2:	aa 27       	eor	r26, r26
     8c4:	bb 27       	eor	r27, r27
     8c6:	86 83       	std	Z+6, r24	; 0x06
    output[7] = bitmask[1] >> 16;
     8c8:	f4 01       	movw	r30, r8
     8ca:	84 81       	ldd	r24, Z+4	; 0x04
     8cc:	95 81       	ldd	r25, Z+5	; 0x05
     8ce:	a6 81       	ldd	r26, Z+6	; 0x06
     8d0:	b7 81       	ldd	r27, Z+7	; 0x07
     8d2:	cd 01       	movw	r24, r26
     8d4:	aa 27       	eor	r26, r26
     8d6:	bb 27       	eor	r27, r27
     8d8:	f5 01       	movw	r30, r10
     8da:	87 83       	std	Z+7, r24	; 0x07
    output[8] = bitmask[1] >> 8;
     8dc:	f4 01       	movw	r30, r8
     8de:	84 81       	ldd	r24, Z+4	; 0x04
     8e0:	95 81       	ldd	r25, Z+5	; 0x05
     8e2:	a6 81       	ldd	r26, Z+6	; 0x06
     8e4:	b7 81       	ldd	r27, Z+7	; 0x07
     8e6:	89 2f       	mov	r24, r25
     8e8:	9a 2f       	mov	r25, r26
     8ea:	ab 2f       	mov	r26, r27
     8ec:	bb 27       	eor	r27, r27
     8ee:	f5 01       	movw	r30, r10
     8f0:	80 87       	std	Z+8, r24	; 0x08
    output[9] = bitmask[1];
     8f2:	d4 01       	movw	r26, r8
     8f4:	14 96       	adiw	r26, 0x04	; 4
     8f6:	8c 91       	ld	r24, X
     8f8:	14 97       	sbiw	r26, 0x04	; 4
     8fa:	81 87       	std	Z+9, r24	; 0x09
    output[10] = bitmask[2] >> 24;
     8fc:	18 96       	adiw	r26, 0x08	; 8
     8fe:	8d 91       	ld	r24, X+
     900:	9d 91       	ld	r25, X+
     902:	0d 90       	ld	r0, X+
     904:	bc 91       	ld	r27, X
     906:	a0 2d       	mov	r26, r0
     908:	8b 2f       	mov	r24, r27
     90a:	99 27       	eor	r25, r25
     90c:	aa 27       	eor	r26, r26
     90e:	bb 27       	eor	r27, r27
     910:	82 87       	std	Z+10, r24	; 0x0a
    output[11] = bitmask[2] >> 16;
     912:	f4 01       	movw	r30, r8
     914:	80 85       	ldd	r24, Z+8	; 0x08
     916:	91 85       	ldd	r25, Z+9	; 0x09
     918:	a2 85       	ldd	r26, Z+10	; 0x0a
     91a:	b3 85       	ldd	r27, Z+11	; 0x0b
     91c:	cd 01       	movw	r24, r26
     91e:	aa 27       	eor	r26, r26
     920:	bb 27       	eor	r27, r27
     922:	f5 01       	movw	r30, r10
     924:	83 87       	std	Z+11, r24	; 0x0b
    output[12] = bitmask[2] >> 8;
     926:	f4 01       	movw	r30, r8
     928:	80 85       	ldd	r24, Z+8	; 0x08
     92a:	91 85       	ldd	r25, Z+9	; 0x09
     92c:	a2 85       	ldd	r26, Z+10	; 0x0a
     92e:	b3 85       	ldd	r27, Z+11	; 0x0b
     930:	89 2f       	mov	r24, r25
     932:	9a 2f       	mov	r25, r26
     934:	ab 2f       	mov	r26, r27
     936:	bb 27       	eor	r27, r27
     938:	f5 01       	movw	r30, r10
     93a:	84 87       	std	Z+12, r24	; 0x0c
    output[13] = bitmask[2];
     93c:	d4 01       	movw	r26, r8
     93e:	18 96       	adiw	r26, 0x08	; 8
     940:	8c 91       	ld	r24, X
     942:	85 87       	std	Z+13, r24	; 0x0d

	bytesWritten +=sizeof(uint32_t)*3;



	output[bytesWritten] = epochSample >> 24;
     944:	8b 81       	ldd	r24, Y+3	; 0x03
     946:	9c 81       	ldd	r25, Y+4	; 0x04
     948:	ad 81       	ldd	r26, Y+5	; 0x05
     94a:	be 81       	ldd	r27, Y+6	; 0x06
     94c:	8b 2f       	mov	r24, r27
     94e:	99 27       	eor	r25, r25
     950:	aa 27       	eor	r26, r26
     952:	bb 27       	eor	r27, r27
     954:	86 87       	std	Z+14, r24	; 0x0e
	lprintf("%x ", output[bytesWritten]);
     956:	00 d0       	rcall	.+0      	; 0x958 <__stack+0x59>
     958:	00 d0       	rcall	.+0      	; 0x95a <__stack+0x5b>
     95a:	ad b7       	in	r26, 0x3d	; 61
     95c:	be b7       	in	r27, 0x3e	; 62
     95e:	11 96       	adiw	r26, 0x01	; 1
     960:	05 e2       	ldi	r16, 0x25	; 37
     962:	11 e0       	ldi	r17, 0x01	; 1
     964:	ed b7       	in	r30, 0x3d	; 61
     966:	fe b7       	in	r31, 0x3e	; 62
     968:	12 83       	std	Z+2, r17	; 0x02
     96a:	01 83       	std	Z+1, r16	; 0x01
     96c:	12 96       	adiw	r26, 0x02	; 2
     96e:	8c 93       	st	X, r24
     970:	12 97       	sbiw	r26, 0x02	; 2
     972:	13 96       	adiw	r26, 0x03	; 3
     974:	1c 92       	st	X, r1
     976:	0e 94 30 12 	call	0x2460	; 0x2460 <lprintf>
	bytesWritten++;
	output[bytesWritten] = epochSample >> 16;
     97a:	8b 81       	ldd	r24, Y+3	; 0x03
     97c:	9c 81       	ldd	r25, Y+4	; 0x04
     97e:	ad 81       	ldd	r26, Y+5	; 0x05
     980:	be 81       	ldd	r27, Y+6	; 0x06
     982:	cd 01       	movw	r24, r26
     984:	aa 27       	eor	r26, r26
     986:	bb 27       	eor	r27, r27
     988:	f5 01       	movw	r30, r10
     98a:	87 87       	std	Z+15, r24	; 0x0f
	lprintf("%x ", output[bytesWritten]);
     98c:	ad b7       	in	r26, 0x3d	; 61
     98e:	be b7       	in	r27, 0x3e	; 62
     990:	11 96       	adiw	r26, 0x01	; 1
     992:	ed b7       	in	r30, 0x3d	; 61
     994:	fe b7       	in	r31, 0x3e	; 62
     996:	12 83       	std	Z+2, r17	; 0x02
     998:	01 83       	std	Z+1, r16	; 0x01
     99a:	12 96       	adiw	r26, 0x02	; 2
     99c:	8c 93       	st	X, r24
     99e:	12 97       	sbiw	r26, 0x02	; 2
     9a0:	13 96       	adiw	r26, 0x03	; 3
     9a2:	1c 92       	st	X, r1
     9a4:	0e 94 30 12 	call	0x2460	; 0x2460 <lprintf>
	bytesWritten++;
	output[bytesWritten] = epochSample >> 8;
     9a8:	8b 81       	ldd	r24, Y+3	; 0x03
     9aa:	9c 81       	ldd	r25, Y+4	; 0x04
     9ac:	ad 81       	ldd	r26, Y+5	; 0x05
     9ae:	be 81       	ldd	r27, Y+6	; 0x06
     9b0:	89 2f       	mov	r24, r25
     9b2:	9a 2f       	mov	r25, r26
     9b4:	ab 2f       	mov	r26, r27
     9b6:	bb 27       	eor	r27, r27
     9b8:	f5 01       	movw	r30, r10
     9ba:	80 8b       	std	Z+16, r24	; 0x10
	lprintf("%x ", output[bytesWritten]);
     9bc:	ad b7       	in	r26, 0x3d	; 61
     9be:	be b7       	in	r27, 0x3e	; 62
     9c0:	11 96       	adiw	r26, 0x01	; 1
     9c2:	ed b7       	in	r30, 0x3d	; 61
     9c4:	fe b7       	in	r31, 0x3e	; 62
     9c6:	12 83       	std	Z+2, r17	; 0x02
     9c8:	01 83       	std	Z+1, r16	; 0x01
     9ca:	12 96       	adiw	r26, 0x02	; 2
     9cc:	8c 93       	st	X, r24
     9ce:	12 97       	sbiw	r26, 0x02	; 2
     9d0:	13 96       	adiw	r26, 0x03	; 3
     9d2:	1c 92       	st	X, r1
     9d4:	0e 94 30 12 	call	0x2460	; 0x2460 <lprintf>
	bytesWritten++;
	output[bytesWritten] = epochSample;
     9d8:	2b 81       	ldd	r18, Y+3	; 0x03
     9da:	d5 01       	movw	r26, r10
     9dc:	51 96       	adiw	r26, 0x11	; 17
     9de:	2c 93       	st	X, r18
	lprintf("%x\n", output[bytesWritten]);
     9e0:	ed b7       	in	r30, 0x3d	; 61
     9e2:	fe b7       	in	r31, 0x3e	; 62
     9e4:	31 96       	adiw	r30, 0x01	; 1
     9e6:	89 e2       	ldi	r24, 0x29	; 41
     9e8:	91 e0       	ldi	r25, 0x01	; 1
     9ea:	ad b7       	in	r26, 0x3d	; 61
     9ec:	be b7       	in	r27, 0x3e	; 62
     9ee:	12 96       	adiw	r26, 0x02	; 2
     9f0:	9c 93       	st	X, r25
     9f2:	8e 93       	st	-X, r24
     9f4:	11 97       	sbiw	r26, 0x01	; 1
     9f6:	22 83       	std	Z+2, r18	; 0x02
     9f8:	13 82       	std	Z+3, r1	; 0x03
     9fa:	0e 94 30 12 	call	0x2460	; 0x2460 <lprintf>
	bytesWritten++;
	output[bytesWritten] = batch >> 8;
     9fe:	f5 01       	movw	r30, r10
     a00:	32 8a       	std	Z+18, r3	; 0x12
	bytesWritten++;
	output[bytesWritten] = batch;
     a02:	23 8a       	std	Z+19, r2	; 0x13
     a04:	00 e0       	ldi	r16, 0x00	; 0
     a06:	14 e1       	ldi	r17, 0x14	; 20
     a08:	0f 90       	pop	r0
     a0a:	0f 90       	pop	r0
     a0c:	0f 90       	pop	r0
     a0e:	0f 90       	pop	r0

		//lprintf("L: %d V: %lx\n", currentTelemetryChannel/32, reversedBitmask[currentTelemetryChannel/32] );
        //lprintf("P: %lx\n", reversedBitmask[0]);
        //lprintf("P: %lx\n", reversedBitmask[1]);
        //lprintf("P: %lx\n", reversedBitmask[2]);
		if(reversedBitmask[currentTelemetryChannel/32] & 1 == 1)
     a10:	3e 01       	movw	r6, r28
     a12:	08 94       	sec
     a14:	61 1c       	adc	r6, r1
     a16:	71 1c       	adc	r7, r1
					sscanf(token, "%d", &holder16);
					memrcpy(&output[bytesWritten], &holder16, sizeof(uint8_t)*2);
					bytesWritten+=2;
					break;
				case 24:
					sscanf(token, "%ld", &holder32);
     a18:	cf 5f       	subi	r28, 0xFF	; 255
     a1a:	de 4f       	sbci	r29, 0xFE	; 254
     a1c:	e8 82       	st	Y, r14
     a1e:	c1 50       	subi	r28, 0x01	; 1
     a20:	d1 40       	sbci	r29, 0x01	; 1
     a22:	ce 5f       	subi	r28, 0xFE	; 254
     a24:	de 4f       	sbci	r29, 0xFE	; 254
     a26:	f8 82       	st	Y, r15
     a28:	c2 50       	subi	r28, 0x02	; 2
     a2a:	d1 40       	sbci	r29, 0x01	; 1
     a2c:	67 e0       	ldi	r22, 0x07	; 7
     a2e:	46 2e       	mov	r4, r22
     a30:	51 2c       	mov	r5, r1
     a32:	4c 0e       	add	r4, r28
     a34:	5d 1e       	adc	r5, r29
{
    size_t i;
    char* d = (char*)dst;
    const char* s = (const char*)src;

    for(i=0; i<len; ++i)
     a36:	ce 01       	movw	r24, r28
     a38:	0a 96       	adiw	r24, 0x0a	; 10
     a3a:	cd 5f       	subi	r28, 0xFD	; 253
     a3c:	de 4f       	sbci	r29, 0xFE	; 254
     a3e:	99 83       	std	Y+1, r25	; 0x01
     a40:	88 83       	st	Y, r24
     a42:	c3 50       	subi	r28, 0x03	; 3
     a44:	d1 40       	sbci	r29, 0x01	; 1
     a46:	de 01       	movw	r26, r28
     a48:	1f 96       	adiw	r26, 0x0f	; 15
     a4a:	cb 5f       	subi	r28, 0xFB	; 251
     a4c:	de 4f       	sbci	r29, 0xFE	; 254
     a4e:	b9 83       	std	Y+1, r27	; 0x01
     a50:	a8 83       	st	Y, r26
     a52:	c5 50       	subi	r28, 0x05	; 5
     a54:	d1 40       	sbci	r29, 0x01	; 1
			{
				uint16_t holder16;
				uint32_t holder32;
				float holderf;
				case 8:
					sscanf(token, "%d", &output[bytesWritten]);
     a56:	5d e2       	ldi	r21, 0x2D	; 45
     a58:	25 2e       	mov	r2, r21
     a5a:	51 e0       	ldi	r21, 0x01	; 1
     a5c:	35 2e       	mov	r3, r21

	//END SAMPLE PREAMBLE

	do
	{
		token = strtok(NULL,",");
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	66 e1       	ldi	r22, 0x16	; 22
     a64:	71 e0       	ldi	r23, 0x01	; 1
     a66:	0e 94 fc 37 	call	0x6ff8	; 0x6ff8 <strtok>
     a6a:	9c 01       	movw	r18, r24

		//lprintf("L: %d V: %lx\n", currentTelemetryChannel/32, reversedBitmask[currentTelemetryChannel/32] );
        //lprintf("P: %lx\n", reversedBitmask[0]);
        //lprintf("P: %lx\n", reversedBitmask[1]);
        //lprintf("P: %lx\n", reversedBitmask[2]);
		if(reversedBitmask[currentTelemetryChannel/32] & 1 == 1)
     a6c:	80 2f       	mov	r24, r16
     a6e:	82 95       	swap	r24
     a70:	86 95       	lsr	r24
     a72:	87 70       	andi	r24, 0x07	; 7
     a74:	88 2e       	mov	r8, r24
     a76:	99 24       	eor	r9, r9
     a78:	f4 01       	movw	r30, r8
     a7a:	ee 0f       	add	r30, r30
     a7c:	ff 1f       	adc	r31, r31
     a7e:	ee 0f       	add	r30, r30
     a80:	ff 1f       	adc	r31, r31
     a82:	e6 0d       	add	r30, r6
     a84:	f7 1d       	adc	r31, r7
     a86:	c6 84       	ldd	r12, Z+14	; 0x0e
     a88:	d7 84       	ldd	r13, Z+15	; 0x0f
     a8a:	e0 88       	ldd	r14, Z+16	; 0x10
     a8c:	f1 88       	ldd	r15, Z+17	; 0x11
     a8e:	c6 01       	movw	r24, r12
     a90:	81 70       	andi	r24, 0x01	; 1
     a92:	90 70       	andi	r25, 0x00	; 0
     a94:	89 2b       	or	r24, r25
     a96:	09 f4       	brne	.+2      	; 0xa9a <__stack+0x19b>
     a98:	f0 c0       	rjmp	.+480    	; 0xc7a <__stack+0x37b>
		{
			//lprintf("Tof: %d\n", pgm_read_byte(&bitmaskTypeOrder[currentTelemetryChannel]));
			//lprintf("Tok: %s\n", token);
			switch(pgm_read_byte(&bitmaskTypeOrder[currentTelemetryChannel]))
     a9a:	e0 2f       	mov	r30, r16
     a9c:	f0 e0       	ldi	r31, 0x00	; 0
     a9e:	e4 58       	subi	r30, 0x84	; 132
     aa0:	ff 4f       	sbci	r31, 0xFF	; 255
     aa2:	84 91       	lpm	r24, Z+
     aa4:	88 31       	cpi	r24, 0x18	; 24
     aa6:	09 f4       	brne	.+2      	; 0xaaa <__stack+0x1ab>
     aa8:	4b c0       	rjmp	.+150    	; 0xb40 <__stack+0x241>
     aaa:	89 31       	cpi	r24, 0x19	; 25
     aac:	30 f4       	brcc	.+12     	; 0xaba <__stack+0x1bb>
     aae:	88 30       	cpi	r24, 0x08	; 8
     ab0:	59 f0       	breq	.+22     	; 0xac8 <__stack+0x1c9>
     ab2:	80 31       	cpi	r24, 0x10	; 16
     ab4:	09 f0       	breq	.+2      	; 0xab8 <__stack+0x1b9>
     ab6:	e1 c0       	rjmp	.+450    	; 0xc7a <__stack+0x37b>
     ab8:	1e c0       	rjmp	.+60     	; 0xaf6 <__stack+0x1f7>
     aba:	80 32       	cpi	r24, 0x20	; 32
     abc:	09 f4       	brne	.+2      	; 0xac0 <__stack+0x1c1>
     abe:	76 c0       	rjmp	.+236    	; 0xbac <__stack+0x2ad>
     ac0:	81 32       	cpi	r24, 0x21	; 33
     ac2:	09 f0       	breq	.+2      	; 0xac6 <__stack+0x1c7>
     ac4:	da c0       	rjmp	.+436    	; 0xc7a <__stack+0x37b>
     ac6:	a7 c0       	rjmp	.+334    	; 0xc16 <__stack+0x317>
			{
				uint16_t holder16;
				uint32_t holder32;
				float holderf;
				case 8:
					sscanf(token, "%d", &output[bytesWritten]);
     ac8:	00 d0       	rcall	.+0      	; 0xaca <__stack+0x1cb>
     aca:	00 d0       	rcall	.+0      	; 0xacc <__stack+0x1cd>
     acc:	00 d0       	rcall	.+0      	; 0xace <__stack+0x1cf>
     ace:	ed b7       	in	r30, 0x3d	; 61
     ad0:	fe b7       	in	r31, 0x3e	; 62
     ad2:	31 96       	adiw	r30, 0x01	; 1
     ad4:	ad b7       	in	r26, 0x3d	; 61
     ad6:	be b7       	in	r27, 0x3e	; 62
     ad8:	12 96       	adiw	r26, 0x02	; 2
     ada:	3c 93       	st	X, r19
     adc:	2e 93       	st	-X, r18
     ade:	11 97       	sbiw	r26, 0x01	; 1
     ae0:	33 82       	std	Z+3, r3	; 0x03
     ae2:	22 82       	std	Z+2, r2	; 0x02
     ae4:	c5 01       	movw	r24, r10
     ae6:	81 0f       	add	r24, r17
     ae8:	91 1d       	adc	r25, r1
     aea:	95 83       	std	Z+5, r25	; 0x05
     aec:	84 83       	std	Z+4, r24	; 0x04
     aee:	0e 94 10 39 	call	0x7220	; 0x7220 <sscanf>
					bytesWritten+=1;
     af2:	1f 5f       	subi	r17, 0xFF	; 255
     af4:	1c c0       	rjmp	.+56     	; 0xb2e <__stack+0x22f>
					break;
				case 16:
					sscanf(token, "%d", &holder16);
     af6:	00 d0       	rcall	.+0      	; 0xaf8 <__stack+0x1f9>
     af8:	00 d0       	rcall	.+0      	; 0xafa <__stack+0x1fb>
     afa:	00 d0       	rcall	.+0      	; 0xafc <__stack+0x1fd>
     afc:	ed b7       	in	r30, 0x3d	; 61
     afe:	fe b7       	in	r31, 0x3e	; 62
     b00:	31 96       	adiw	r30, 0x01	; 1
     b02:	ad b7       	in	r26, 0x3d	; 61
     b04:	be b7       	in	r27, 0x3e	; 62
     b06:	12 96       	adiw	r26, 0x02	; 2
     b08:	3c 93       	st	X, r19
     b0a:	2e 93       	st	-X, r18
     b0c:	11 97       	sbiw	r26, 0x01	; 1
     b0e:	33 82       	std	Z+3, r3	; 0x03
     b10:	22 82       	std	Z+2, r2	; 0x02
     b12:	75 82       	std	Z+5, r7	; 0x05
     b14:	64 82       	std	Z+4, r6	; 0x04
     b16:	0e 94 10 39 	call	0x7220	; 0x7220 <sscanf>
}

void memrcpy(void *dst, const void *src, size_t len)
{
    size_t i;
    char* d = (char*)dst;
     b1a:	f5 01       	movw	r30, r10
     b1c:	e1 0f       	add	r30, r17
     b1e:	f1 1d       	adc	r31, r1
    const char* s = (const char*)src;

    for(i=0; i<len; ++i)
    {
        d[len-1-i] = s[i];
     b20:	d3 01       	movw	r26, r6
     b22:	8c 91       	ld	r24, X
     b24:	81 83       	std	Z+1, r24	; 0x01
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	8c 91       	ld	r24, X
     b2a:	80 83       	st	Z, r24
					bytesWritten+=1;
					break;
				case 16:
					sscanf(token, "%d", &holder16);
					memrcpy(&output[bytesWritten], &holder16, sizeof(uint8_t)*2);
					bytesWritten+=2;
     b2c:	1e 5f       	subi	r17, 0xFE	; 254
     b2e:	ed b7       	in	r30, 0x3d	; 61
     b30:	fe b7       	in	r31, 0x3e	; 62
     b32:	36 96       	adiw	r30, 0x06	; 6
     b34:	0f b6       	in	r0, 0x3f	; 63
     b36:	f8 94       	cli
     b38:	fe bf       	out	0x3e, r31	; 62
     b3a:	0f be       	out	0x3f, r0	; 63
     b3c:	ed bf       	out	0x3d, r30	; 61
     b3e:	9d c0       	rjmp	.+314    	; 0xc7a <__stack+0x37b>
					break;
				case 24:
					sscanf(token, "%ld", &holder32);
     b40:	00 d0       	rcall	.+0      	; 0xb42 <__stack+0x243>
     b42:	00 d0       	rcall	.+0      	; 0xb44 <__stack+0x245>
     b44:	00 d0       	rcall	.+0      	; 0xb46 <__stack+0x247>
     b46:	ed b7       	in	r30, 0x3d	; 61
     b48:	fe b7       	in	r31, 0x3e	; 62
     b4a:	31 96       	adiw	r30, 0x01	; 1
     b4c:	ad b7       	in	r26, 0x3d	; 61
     b4e:	be b7       	in	r27, 0x3e	; 62
     b50:	12 96       	adiw	r26, 0x02	; 2
     b52:	3c 93       	st	X, r19
     b54:	2e 93       	st	-X, r18
     b56:	11 97       	sbiw	r26, 0x01	; 1
     b58:	cf 5f       	subi	r28, 0xFF	; 255
     b5a:	de 4f       	sbci	r29, 0xFE	; 254
     b5c:	b8 81       	ld	r27, Y
     b5e:	c1 50       	subi	r28, 0x01	; 1
     b60:	d1 40       	sbci	r29, 0x01	; 1
     b62:	b2 83       	std	Z+2, r27	; 0x02
     b64:	ce 5f       	subi	r28, 0xFE	; 254
     b66:	de 4f       	sbci	r29, 0xFE	; 254
     b68:	88 81       	ld	r24, Y
     b6a:	c2 50       	subi	r28, 0x02	; 2
     b6c:	d1 40       	sbci	r29, 0x01	; 1
     b6e:	83 83       	std	Z+3, r24	; 0x03
     b70:	55 82       	std	Z+5, r5	; 0x05
     b72:	44 82       	std	Z+4, r4	; 0x04
     b74:	0e 94 10 39 	call	0x7220	; 0x7220 <sscanf>
     b78:	d2 01       	movw	r26, r4
     b7a:	f5 01       	movw	r30, r10
     b7c:	e1 0f       	add	r30, r17
     b7e:	f1 1d       	adc	r31, r1
     b80:	8d b7       	in	r24, 0x3d	; 61
     b82:	9e b7       	in	r25, 0x3e	; 62
     b84:	06 96       	adiw	r24, 0x06	; 6
     b86:	0f b6       	in	r0, 0x3f	; 63
     b88:	f8 94       	cli
     b8a:	9e bf       	out	0x3e, r25	; 62
     b8c:	0f be       	out	0x3f, r0	; 63
     b8e:	8d bf       	out	0x3d, r24	; 61
    char* d = (char*)dst;
    const char* s = (const char*)src;

    for(i=0; i<len; ++i)
    {
        d[len-1-i] = s[i];
     b90:	8d 91       	ld	r24, X+
     b92:	82 83       	std	Z+2, r24	; 0x02
     b94:	31 97       	sbiw	r30, 0x01	; 1
{
    size_t i;
    char* d = (char*)dst;
    const char* s = (const char*)src;

    for(i=0; i<len; ++i)
     b96:	cd 5f       	subi	r28, 0xFD	; 253
     b98:	de 4f       	sbci	r29, 0xFE	; 254
     b9a:	88 81       	ld	r24, Y
     b9c:	99 81       	ldd	r25, Y+1	; 0x01
     b9e:	c3 50       	subi	r28, 0x03	; 3
     ba0:	d1 40       	sbci	r29, 0x01	; 1
     ba2:	a8 17       	cp	r26, r24
     ba4:	b9 07       	cpc	r27, r25
     ba6:	a1 f7       	brne	.-24     	; 0xb90 <__stack+0x291>
					bytesWritten+=2;
					break;
				case 24:
					sscanf(token, "%ld", &holder32);
					memrcpy(&output[bytesWritten], &holder32, sizeof(uint8_t)*3);
					bytesWritten+=3;
     ba8:	1d 5f       	subi	r17, 0xFD	; 253
     baa:	67 c0       	rjmp	.+206    	; 0xc7a <__stack+0x37b>
					break;
				case 32:
					sscanf(token, "%ld", &holder32);
     bac:	00 d0       	rcall	.+0      	; 0xbae <__stack+0x2af>
     bae:	00 d0       	rcall	.+0      	; 0xbb0 <__stack+0x2b1>
     bb0:	00 d0       	rcall	.+0      	; 0xbb2 <__stack+0x2b3>
     bb2:	ed b7       	in	r30, 0x3d	; 61
     bb4:	fe b7       	in	r31, 0x3e	; 62
     bb6:	31 96       	adiw	r30, 0x01	; 1
     bb8:	ad b7       	in	r26, 0x3d	; 61
     bba:	be b7       	in	r27, 0x3e	; 62
     bbc:	12 96       	adiw	r26, 0x02	; 2
     bbe:	3c 93       	st	X, r19
     bc0:	2e 93       	st	-X, r18
     bc2:	11 97       	sbiw	r26, 0x01	; 1
     bc4:	cf 5f       	subi	r28, 0xFF	; 255
     bc6:	de 4f       	sbci	r29, 0xFE	; 254
     bc8:	b8 81       	ld	r27, Y
     bca:	c1 50       	subi	r28, 0x01	; 1
     bcc:	d1 40       	sbci	r29, 0x01	; 1
     bce:	b2 83       	std	Z+2, r27	; 0x02
     bd0:	ce 5f       	subi	r28, 0xFE	; 254
     bd2:	de 4f       	sbci	r29, 0xFE	; 254
     bd4:	88 81       	ld	r24, Y
     bd6:	c2 50       	subi	r28, 0x02	; 2
     bd8:	d1 40       	sbci	r29, 0x01	; 1
     bda:	83 83       	std	Z+3, r24	; 0x03
     bdc:	55 82       	std	Z+5, r5	; 0x05
     bde:	44 82       	std	Z+4, r4	; 0x04
     be0:	0e 94 10 39 	call	0x7220	; 0x7220 <sscanf>
     be4:	d2 01       	movw	r26, r4
     be6:	f5 01       	movw	r30, r10
     be8:	e1 0f       	add	r30, r17
     bea:	f1 1d       	adc	r31, r1
     bec:	8d b7       	in	r24, 0x3d	; 61
     bee:	9e b7       	in	r25, 0x3e	; 62
     bf0:	06 96       	adiw	r24, 0x06	; 6
     bf2:	0f b6       	in	r0, 0x3f	; 63
     bf4:	f8 94       	cli
     bf6:	9e bf       	out	0x3e, r25	; 62
     bf8:	0f be       	out	0x3f, r0	; 63
     bfa:	8d bf       	out	0x3d, r24	; 61
    char* d = (char*)dst;
    const char* s = (const char*)src;

    for(i=0; i<len; ++i)
    {
        d[len-1-i] = s[i];
     bfc:	8d 91       	ld	r24, X+
     bfe:	82 83       	std	Z+2, r24	; 0x02
     c00:	31 97       	sbiw	r30, 0x01	; 1
{
    size_t i;
    char* d = (char*)dst;
    const char* s = (const char*)src;

    for(i=0; i<len; ++i)
     c02:	cd 5f       	subi	r28, 0xFD	; 253
     c04:	de 4f       	sbci	r29, 0xFE	; 254
     c06:	88 81       	ld	r24, Y
     c08:	99 81       	ldd	r25, Y+1	; 0x01
     c0a:	c3 50       	subi	r28, 0x03	; 3
     c0c:	d1 40       	sbci	r29, 0x01	; 1
     c0e:	a8 17       	cp	r26, r24
     c10:	b9 07       	cpc	r27, r25
     c12:	a1 f7       	brne	.-24     	; 0xbfc <__stack+0x2fd>
     c14:	31 c0       	rjmp	.+98     	; 0xc78 <__stack+0x379>
					sscanf(token, "%ld", &holder32);
					memrcpy(&output[bytesWritten], &holder32, sizeof(uint8_t)*3);
					bytesWritten+=4;
					break;
				case 33: //Float
					sscanf(token, "%f", &holderf);
     c16:	00 d0       	rcall	.+0      	; 0xc18 <__stack+0x319>
     c18:	00 d0       	rcall	.+0      	; 0xc1a <__stack+0x31b>
     c1a:	00 d0       	rcall	.+0      	; 0xc1c <__stack+0x31d>
     c1c:	ed b7       	in	r30, 0x3d	; 61
     c1e:	fe b7       	in	r31, 0x3e	; 62
     c20:	31 96       	adiw	r30, 0x01	; 1
     c22:	ad b7       	in	r26, 0x3d	; 61
     c24:	be b7       	in	r27, 0x3e	; 62
     c26:	12 96       	adiw	r26, 0x02	; 2
     c28:	3c 93       	st	X, r19
     c2a:	2e 93       	st	-X, r18
     c2c:	11 97       	sbiw	r26, 0x01	; 1
     c2e:	80 e3       	ldi	r24, 0x30	; 48
     c30:	91 e0       	ldi	r25, 0x01	; 1
     c32:	93 83       	std	Z+3, r25	; 0x03
     c34:	82 83       	std	Z+2, r24	; 0x02
     c36:	ab e0       	ldi	r26, 0x0B	; 11
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	ac 0f       	add	r26, r28
     c3c:	bd 1f       	adc	r27, r29
     c3e:	b5 83       	std	Z+5, r27	; 0x05
     c40:	a4 83       	std	Z+4, r26	; 0x04
     c42:	0e 94 10 39 	call	0x7220	; 0x7220 <sscanf>
     c46:	de 01       	movw	r26, r28
     c48:	1b 96       	adiw	r26, 0x0b	; 11
     c4a:	f5 01       	movw	r30, r10
     c4c:	e1 0f       	add	r30, r17
     c4e:	f1 1d       	adc	r31, r1
     c50:	8d b7       	in	r24, 0x3d	; 61
     c52:	9e b7       	in	r25, 0x3e	; 62
     c54:	06 96       	adiw	r24, 0x06	; 6
     c56:	0f b6       	in	r0, 0x3f	; 63
     c58:	f8 94       	cli
     c5a:	9e bf       	out	0x3e, r25	; 62
     c5c:	0f be       	out	0x3f, r0	; 63
     c5e:	8d bf       	out	0x3d, r24	; 61
    char* d = (char*)dst;
    const char* s = (const char*)src;

    for(i=0; i<len; ++i)
    {
        d[len-1-i] = s[i];
     c60:	8d 91       	ld	r24, X+
     c62:	83 83       	std	Z+3, r24	; 0x03
     c64:	31 97       	sbiw	r30, 0x01	; 1
{
    size_t i;
    char* d = (char*)dst;
    const char* s = (const char*)src;

    for(i=0; i<len; ++i)
     c66:	cb 5f       	subi	r28, 0xFB	; 251
     c68:	de 4f       	sbci	r29, 0xFE	; 254
     c6a:	88 81       	ld	r24, Y
     c6c:	99 81       	ldd	r25, Y+1	; 0x01
     c6e:	c5 50       	subi	r28, 0x05	; 5
     c70:	d1 40       	sbci	r29, 0x01	; 1
     c72:	a8 17       	cp	r26, r24
     c74:	b9 07       	cpc	r27, r25
     c76:	a1 f7       	brne	.-24     	; 0xc60 <__stack+0x361>
					bytesWritten+=4;
					break;
				case 33: //Float
					sscanf(token, "%f", &holderf);
					memrcpy(&output[bytesWritten], &holderf, sizeof(float));
					bytesWritten+=sizeof(float);
     c78:	1c 5f       	subi	r17, 0xFC	; 252
				default:
					break;
			}
		}

        reversedBitmask[currentTelemetryChannel/32] >>= 1;
     c7a:	88 0c       	add	r8, r8
     c7c:	99 1c       	adc	r9, r9
     c7e:	88 0c       	add	r8, r8
     c80:	99 1c       	adc	r9, r9
     c82:	86 0c       	add	r8, r6
     c84:	97 1c       	adc	r9, r7
     c86:	f6 94       	lsr	r15
     c88:	e7 94       	ror	r14
     c8a:	d7 94       	ror	r13
     c8c:	c7 94       	ror	r12
     c8e:	d4 01       	movw	r26, r8
     c90:	1e 96       	adiw	r26, 0x0e	; 14
     c92:	cd 92       	st	X+, r12
     c94:	dd 92       	st	X+, r13
     c96:	ed 92       	st	X+, r14
     c98:	fc 92       	st	X, r15
     c9a:	51 97       	sbiw	r26, 0x11	; 17
		currentTelemetryChannel++;
     c9c:	0f 5f       	subi	r16, 0xFF	; 255

	} while(reversedBitmask[0] != 0 || reversedBitmask[1] != 0 || reversedBitmask[2] != 0);
     c9e:	8f 85       	ldd	r24, Y+15	; 0x0f
     ca0:	98 89       	ldd	r25, Y+16	; 0x10
     ca2:	a9 89       	ldd	r26, Y+17	; 0x11
     ca4:	ba 89       	ldd	r27, Y+18	; 0x12
     ca6:	00 97       	sbiw	r24, 0x00	; 0
     ca8:	a1 05       	cpc	r26, r1
     caa:	b1 05       	cpc	r27, r1
     cac:	09 f0       	breq	.+2      	; 0xcb0 <__stack+0x3b1>
     cae:	d7 ce       	rjmp	.-594    	; 0xa5e <__stack+0x15f>
     cb0:	8b 89       	ldd	r24, Y+19	; 0x13
     cb2:	9c 89       	ldd	r25, Y+20	; 0x14
     cb4:	ad 89       	ldd	r26, Y+21	; 0x15
     cb6:	be 89       	ldd	r27, Y+22	; 0x16
     cb8:	00 97       	sbiw	r24, 0x00	; 0
     cba:	a1 05       	cpc	r26, r1
     cbc:	b1 05       	cpc	r27, r1
     cbe:	09 f0       	breq	.+2      	; 0xcc2 <__stack+0x3c3>
     cc0:	ce ce       	rjmp	.-612    	; 0xa5e <__stack+0x15f>
     cc2:	8f 89       	ldd	r24, Y+23	; 0x17
     cc4:	98 8d       	ldd	r25, Y+24	; 0x18
     cc6:	a9 8d       	ldd	r26, Y+25	; 0x19
     cc8:	ba 8d       	ldd	r27, Y+26	; 0x1a
     cca:	00 97       	sbiw	r24, 0x00	; 0
     ccc:	a1 05       	cpc	r26, r1
     cce:	b1 05       	cpc	r27, r1
     cd0:	09 f0       	breq	.+2      	; 0xcd4 <__stack+0x3d5>
     cd2:	c5 ce       	rjmp	.-630    	; 0xa5e <__stack+0x15f>

	return bytesWritten;

}
     cd4:	81 2f       	mov	r24, r17
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	ca 5f       	subi	r28, 0xFA	; 250
     cda:	de 4f       	sbci	r29, 0xFE	; 254
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	f8 94       	cli
     ce0:	de bf       	out	0x3e, r29	; 62
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	cd bf       	out	0x3d, r28	; 61
     ce6:	cf 91       	pop	r28
     ce8:	df 91       	pop	r29
     cea:	1f 91       	pop	r17
     cec:	0f 91       	pop	r16
     cee:	ff 90       	pop	r15
     cf0:	ef 90       	pop	r14
     cf2:	df 90       	pop	r13
     cf4:	cf 90       	pop	r12
     cf6:	bf 90       	pop	r11
     cf8:	af 90       	pop	r10
     cfa:	9f 90       	pop	r9
     cfc:	8f 90       	pop	r8
     cfe:	7f 90       	pop	r7
     d00:	6f 90       	pop	r6
     d02:	5f 90       	pop	r5
     d04:	4f 90       	pop	r4
     d06:	3f 90       	pop	r3
     d08:	2f 90       	pop	r2
     d0a:	08 95       	ret

00000d0c <loadBatch>:

//Before this function is called, CommPromEnd must be set to CommPromStart, or weird things could hapen.
void loadBatch(void)
{
     d0c:	2f 92       	push	r2
     d0e:	3f 92       	push	r3
     d10:	4f 92       	push	r4
     d12:	5f 92       	push	r5
     d14:	6f 92       	push	r6
     d16:	7f 92       	push	r7
     d18:	8f 92       	push	r8
     d1a:	9f 92       	push	r9
     d1c:	af 92       	push	r10
     d1e:	bf 92       	push	r11
     d20:	cf 92       	push	r12
     d22:	df 92       	push	r13
     d24:	ef 92       	push	r14
     d26:	ff 92       	push	r15
     d28:	0f 93       	push	r16
     d2a:	1f 93       	push	r17
     d2c:	df 93       	push	r29
     d2e:	cf 93       	push	r28
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62
     d34:	c2 5a       	subi	r28, 0xA2	; 162
     d36:	d0 40       	sbci	r29, 0x00	; 0
     d38:	0f b6       	in	r0, 0x3f	; 63
     d3a:	f8 94       	cli
     d3c:	de bf       	out	0x3e, r29	; 62
     d3e:	0f be       	out	0x3f, r0	; 63
     d40:	cd bf       	out	0x3d, r28	; 61

    lprintf_P(PSTR("LB\n"));
     d42:	00 d0       	rcall	.+0      	; 0xd44 <loadBatch+0x38>
     d44:	8f ea       	ldi	r24, 0xAF	; 175
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	ad b7       	in	r26, 0x3d	; 61
     d4a:	be b7       	in	r27, 0x3e	; 62
     d4c:	12 96       	adiw	r26, 0x02	; 2
     d4e:	9c 93       	st	X, r25
     d50:	8e 93       	st	-X, r24
     d52:	11 97       	sbiw	r26, 0x01	; 1
     d54:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>
	uint16_t batchSampleStart = eeprom_read_word(&EEbatchSampleStart);
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	8a e2       	ldi	r24, 0x2A	; 42
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>
     d64:	18 2f       	mov	r17, r24
     d66:	09 2f       	mov	r16, r25
	uint16_t batchSampleEnd = eeprom_read_word(&EEbatchSampleEnd);
     d68:	8c e2       	ldi	r24, 0x2C	; 44
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>
     d70:	4c 01       	movw	r8, r24
	uint16_t batchNumber = eeprom_read_word(&EEcurrentBatchNumber);
     d72:	88 e2       	ldi	r24, 0x28	; 40
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>
     d7a:	3c 01       	movw	r6, r24

	uint32_t currentBitmask[3];
	currentBitmask[0] = eeprom_read_dword(&EEcurrentTelemetryBitmap[0]);
     d7c:	85 e3       	ldi	r24, 0x35	; 53
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	0e 94 0e 3a 	call	0x741c	; 0x741c <__eerd_dword_m324p>
     d84:	69 83       	std	Y+1, r22	; 0x01
     d86:	7a 83       	std	Y+2, r23	; 0x02
     d88:	8b 83       	std	Y+3, r24	; 0x03
     d8a:	9c 83       	std	Y+4, r25	; 0x04
	currentBitmask[1] = eeprom_read_dword(&EEcurrentTelemetryBitmap[1]);
     d8c:	89 e3       	ldi	r24, 0x39	; 57
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	0e 94 0e 3a 	call	0x741c	; 0x741c <__eerd_dword_m324p>
     d94:	6d 83       	std	Y+5, r22	; 0x05
     d96:	7e 83       	std	Y+6, r23	; 0x06
     d98:	8f 83       	std	Y+7, r24	; 0x07
     d9a:	98 87       	std	Y+8, r25	; 0x08
	currentBitmask[2] = eeprom_read_dword(&EEcurrentTelemetryBitmap[2]);
     d9c:	8d e3       	ldi	r24, 0x3D	; 61
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	0e 94 0e 3a 	call	0x741c	; 0x741c <__eerd_dword_m324p>
     da4:	69 87       	std	Y+9, r22	; 0x09
     da6:	7a 87       	std	Y+10, r23	; 0x0a
     da8:	8b 87       	std	Y+11, r24	; 0x0b
     daa:	9c 87       	std	Y+12, r25	; 0x0c

	uint16_t commPromEnd = eeprom_read_word(&EEcommPromEnd);
     dac:	80 e3       	ldi	r24, 0x30	; 48
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>
     db4:	2c 01       	movw	r4, r24

    #ifdef opdebug
        lprintf_P(PSTR("LB S: %d E: %d\n"), batchSampleStart,batchSampleEnd );
     db6:	00 d0       	rcall	.+0      	; 0xdb8 <loadBatch+0xac>
     db8:	00 d0       	rcall	.+0      	; 0xdba <loadBatch+0xae>
     dba:	00 d0       	rcall	.+0      	; 0xdbc <loadBatch+0xb0>
     dbc:	ed b7       	in	r30, 0x3d	; 61
     dbe:	fe b7       	in	r31, 0x3e	; 62
     dc0:	31 96       	adiw	r30, 0x01	; 1
     dc2:	8f e9       	ldi	r24, 0x9F	; 159
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	ad b7       	in	r26, 0x3d	; 61
     dc8:	be b7       	in	r27, 0x3e	; 62
     dca:	12 96       	adiw	r26, 0x02	; 2
     dcc:	9c 93       	st	X, r25
     dce:	8e 93       	st	-X, r24
     dd0:	11 97       	sbiw	r26, 0x01	; 1
     dd2:	12 83       	std	Z+2, r17	; 0x02
     dd4:	03 83       	std	Z+3, r16	; 0x03
     dd6:	95 82       	std	Z+5, r9	; 0x05
     dd8:	84 82       	std	Z+4, r8	; 0x04
     dda:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>
     dde:	21 2f       	mov	r18, r17
     de0:	30 2f       	mov	r19, r16
     de2:	c9 01       	movw	r24, r18
     de4:	6c 01       	movw	r12, r24
     de6:	ed b7       	in	r30, 0x3d	; 61
     de8:	fe b7       	in	r31, 0x3e	; 62
     dea:	36 96       	adiw	r30, 0x06	; 6
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	f8 94       	cli
     df0:	fe bf       	out	0x3e, r31	; 62
     df2:	0f be       	out	0x3f, r0	; 63
     df4:	ed bf       	out	0x3d, r30	; 61
	for(uint16_t i=batchSampleStart; i < batchSampleEnd; i++)
	{
		uint8_t thisSample[MAXTXSAMPLESIZE];
		uint8_t sizeOfSample;
		lprintf("i: %d\n", i);
		sizeOfSample = getTxSample(thisSample, currentBitmask, i, batchNumber);
     df6:	5d e0       	ldi	r21, 0x0D	; 13
     df8:	25 2e       	mov	r2, r21
     dfa:	31 2c       	mov	r3, r1
     dfc:	2c 0e       	add	r2, r28
     dfe:	3d 1e       	adc	r3, r29
     e00:	5c c0       	rjmp	.+184    	; 0xeba <loadBatch+0x1ae>

	for(uint16_t i=batchSampleStart; i < batchSampleEnd; i++)
	{
		uint8_t thisSample[MAXTXSAMPLESIZE];
		uint8_t sizeOfSample;
		lprintf("i: %d\n", i);
     e02:	00 d0       	rcall	.+0      	; 0xe04 <loadBatch+0xf8>
     e04:	00 d0       	rcall	.+0      	; 0xe06 <loadBatch+0xfa>
     e06:	e3 e3       	ldi	r30, 0x33	; 51
     e08:	f1 e0       	ldi	r31, 0x01	; 1
     e0a:	ad b7       	in	r26, 0x3d	; 61
     e0c:	be b7       	in	r27, 0x3e	; 62
     e0e:	12 96       	adiw	r26, 0x02	; 2
     e10:	fc 93       	st	X, r31
     e12:	ee 93       	st	-X, r30
     e14:	11 97       	sbiw	r26, 0x01	; 1
     e16:	14 96       	adiw	r26, 0x04	; 4
     e18:	dc 92       	st	X, r13
     e1a:	ce 92       	st	-X, r12
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	0e 94 30 12 	call	0x2460	; 0x2460 <lprintf>
		sizeOfSample = getTxSample(thisSample, currentBitmask, i, batchNumber);
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	c1 01       	movw	r24, r2
     e2c:	be 01       	movw	r22, r28
     e2e:	6f 5f       	subi	r22, 0xFF	; 255
     e30:	7f 4f       	sbci	r23, 0xFF	; 255
     e32:	a6 01       	movw	r20, r12
     e34:	93 01       	movw	r18, r6
     e36:	0e 94 3b 03 	call	0x676	; 0x676 <getTxSample>
     e3a:	18 2f       	mov	r17, r24
		#ifdef opdebug
			lprintf("A Sample: ");
     e3c:	00 d0       	rcall	.+0      	; 0xe3e <loadBatch+0x132>
     e3e:	ea e3       	ldi	r30, 0x3A	; 58
     e40:	f1 e0       	ldi	r31, 0x01	; 1
     e42:	ad b7       	in	r26, 0x3d	; 61
     e44:	be b7       	in	r27, 0x3e	; 62
     e46:	12 96       	adiw	r26, 0x02	; 2
     e48:	fc 93       	st	X, r31
     e4a:	ee 93       	st	-X, r30
     e4c:	11 97       	sbiw	r26, 0x01	; 1
     e4e:	0e 94 30 12 	call	0x2460	; 0x2460 <lprintf>
     e52:	71 01       	movw	r14, r2
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0

}

//Before this function is called, CommPromEnd must be set to CommPromStart, or weird things could hapen.
void loadBatch(void)
{
     e58:	01 2f       	mov	r16, r17
     e5a:	10 e0       	ldi	r17, 0x00	; 0
		lprintf("i: %d\n", i);
		sizeOfSample = getTxSample(thisSample, currentBitmask, i, batchNumber);
		#ifdef opdebug
			lprintf("A Sample: ");
		#endif
		for(int j=0; j < sizeOfSample; j++)
     e5c:	51 01       	movw	r10, r2
     e5e:	a0 0e       	add	r10, r16
     e60:	b1 1e       	adc	r11, r17
     e62:	18 c0       	rjmp	.+48     	; 0xe94 <loadBatch+0x188>
		{
			#ifdef opdebug
				lprintf("%x ", thisSample[j]);
     e64:	00 d0       	rcall	.+0      	; 0xe66 <loadBatch+0x15a>
     e66:	00 d0       	rcall	.+0      	; 0xe68 <loadBatch+0x15c>
     e68:	ed b7       	in	r30, 0x3d	; 61
     e6a:	fe b7       	in	r31, 0x3e	; 62
     e6c:	31 96       	adiw	r30, 0x01	; 1
     e6e:	85 e2       	ldi	r24, 0x25	; 37
     e70:	91 e0       	ldi	r25, 0x01	; 1
     e72:	ad b7       	in	r26, 0x3d	; 61
     e74:	be b7       	in	r27, 0x3e	; 62
     e76:	12 96       	adiw	r26, 0x02	; 2
     e78:	9c 93       	st	X, r25
     e7a:	8e 93       	st	-X, r24
     e7c:	11 97       	sbiw	r26, 0x01	; 1
     e7e:	d7 01       	movw	r26, r14
     e80:	8d 91       	ld	r24, X+
     e82:	7d 01       	movw	r14, r26
     e84:	82 83       	std	Z+2, r24	; 0x02
     e86:	13 82       	std	Z+3, r1	; 0x03
     e88:	0e 94 30 12 	call	0x2460	; 0x2460 <lprintf>
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
		lprintf("i: %d\n", i);
		sizeOfSample = getTxSample(thisSample, currentBitmask, i, batchNumber);
		#ifdef opdebug
			lprintf("A Sample: ");
		#endif
		for(int j=0; j < sizeOfSample; j++)
     e94:	ea 14       	cp	r14, r10
     e96:	fb 04       	cpc	r15, r11
     e98:	29 f7       	brne	.-54     	; 0xe64 <loadBatch+0x158>
     e9a:	40 0e       	add	r4, r16
     e9c:	51 1e       	adc	r5, r17
			i2cMasterSendNI(COMPROM, 3, &data);
			#endif
			commPromEnd++;
		}
		#ifdef opdebug
			lprintf("\n");
     e9e:	00 d0       	rcall	.+0      	; 0xea0 <loadBatch+0x194>
     ea0:	8e e0       	ldi	r24, 0x0E	; 14
     ea2:	91 e0       	ldi	r25, 0x01	; 1
     ea4:	ed b7       	in	r30, 0x3d	; 61
     ea6:	fe b7       	in	r31, 0x3e	; 62
     ea8:	92 83       	std	Z+2, r25	; 0x02
     eaa:	81 83       	std	Z+1, r24	; 0x01
     eac:	0e 94 30 12 	call	0x2460	; 0x2460 <lprintf>

    #ifdef opdebug
        lprintf_P(PSTR("LB S: %d E: %d\n"), batchSampleStart,batchSampleEnd );
    #endif

	for(uint16_t i=batchSampleStart; i < batchSampleEnd; i++)
     eb0:	08 94       	sec
     eb2:	c1 1c       	adc	r12, r1
     eb4:	d1 1c       	adc	r13, r1
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	c8 14       	cp	r12, r8
     ebc:	d9 04       	cpc	r13, r9
     ebe:	08 f4       	brcc	.+2      	; 0xec2 <loadBatch+0x1b6>
     ec0:	a0 cf       	rjmp	.-192    	; 0xe02 <loadBatch+0xf6>
	}

	batchNumber++;
	batchSampleStart = batchSampleEnd;

	eeprom_write_word(&EEbatchSampleStart, batchSampleStart);
     ec2:	8a e2       	ldi	r24, 0x2A	; 42
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	b4 01       	movw	r22, r8
     ec8:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__eewr_word_m324p>
	eeprom_write_word(&EEbatchSampleEnd, batchSampleEnd);
     ecc:	8c e2       	ldi	r24, 0x2C	; 44
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	b4 01       	movw	r22, r8
     ed2:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__eewr_word_m324p>
	eeprom_write_word(&EEcurrentBatchNumber, batchNumber);
     ed6:	08 94       	sec
     ed8:	61 1c       	adc	r6, r1
     eda:	71 1c       	adc	r7, r1
     edc:	88 e2       	ldi	r24, 0x28	; 40
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	b3 01       	movw	r22, r6
     ee2:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__eewr_word_m324p>
	eeprom_write_word(&EEcommPromEnd, commPromEnd);
     ee6:	80 e3       	ldi	r24, 0x30	; 48
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	b2 01       	movw	r22, r4
     eec:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__eewr_word_m324p>

}
     ef0:	ce 55       	subi	r28, 0x5E	; 94
     ef2:	df 4f       	sbci	r29, 0xFF	; 255
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	1f 91       	pop	r17
     f04:	0f 91       	pop	r16
     f06:	ff 90       	pop	r15
     f08:	ef 90       	pop	r14
     f0a:	df 90       	pop	r13
     f0c:	cf 90       	pop	r12
     f0e:	bf 90       	pop	r11
     f10:	af 90       	pop	r10
     f12:	9f 90       	pop	r9
     f14:	8f 90       	pop	r8
     f16:	7f 90       	pop	r7
     f18:	6f 90       	pop	r6
     f1a:	5f 90       	pop	r5
     f1c:	4f 90       	pop	r4
     f1e:	3f 90       	pop	r3
     f20:	2f 90       	pop	r2
     f22:	08 95       	ret

00000f24 <bmp085ReadShort>:
	eeprom_write_word(&EEBMPmd, bmp085ReadShort(0xBE));

}

short bmp085ReadShort(unsigned char address)
{
     f24:	df 92       	push	r13
     f26:	ef 92       	push	r14
     f28:	ff 92       	push	r15
     f2a:	0f 93       	push	r16
     f2c:	1f 93       	push	r17
     f2e:	18 2f       	mov	r17, r24
	char msb, lsb;
	short data;

	i2cDisableInt();
     f30:	0e 94 5f 0c 	call	0x18be	; 0x18be <i2cDisableInt>

	i2cSendStart();
     f34:	0e 94 56 0c 	call	0x18ac	; 0x18ac <i2cSendStart>
	i2cWaitForComplete();
     f38:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>

	i2cSendByte(BMP085FC);	// write 0xEE
     f3c:	8e ee       	ldi	r24, 0xEE	; 238
     f3e:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	i2cWaitForComplete();
     f42:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>

	i2cSendByte(address);	// write register address
     f46:	81 2f       	mov	r24, r17
     f48:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	i2cWaitForComplete();
     f4c:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>

	i2cSendStart();
     f50:	0e 94 56 0c 	call	0x18ac	; 0x18ac <i2cSendStart>
	i2cWaitForComplete();
     f54:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>

	i2cSendByte(BMP085FC+1);	// write 0xEF
     f58:	8f ee       	ldi	r24, 0xEF	; 239
     f5a:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	i2cWaitForComplete();
     f5e:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>

	i2cReceiveByte(1);
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	0e 94 92 0c 	call	0x1924	; 0x1924 <i2cReceiveByte>
	i2cWaitForComplete();
     f68:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	msb = i2cGetReceivedByte();	// Get MSB result
     f6c:	0e 94 a0 0c 	call	0x1940	; 0x1940 <i2cGetReceivedByte>
     f70:	d8 2e       	mov	r13, r24
	i2cWaitForComplete();
     f72:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>

	i2cReceiveByte(0);
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	0e 94 92 0c 	call	0x1924	; 0x1924 <i2cReceiveByte>
	i2cWaitForComplete();
     f7c:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	lsb = i2cGetReceivedByte();	// Get LSB result
     f80:	0e 94 a0 0c 	call	0x1940	; 0x1940 <i2cGetReceivedByte>
     f84:	e8 2e       	mov	r14, r24
	i2cWaitForComplete();
     f86:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>

	i2cSendStop();
     f8a:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <i2cSendStop>

	data = msb << 8;
     f8e:	1d 2d       	mov	r17, r13
     f90:	00 e0       	ldi	r16, 0x00	; 0
	data |= lsb;

	i2cEnableInt();
     f92:	0e 94 65 0c 	call	0x18ca	; 0x18ca <i2cEnableInt>
     f96:	ff 24       	eor	r15, r15
     f98:	e0 2a       	or	r14, r16
     f9a:	f1 2a       	or	r15, r17

	return data;
}
     f9c:	c7 01       	movw	r24, r14
     f9e:	1f 91       	pop	r17
     fa0:	0f 91       	pop	r16
     fa2:	ff 90       	pop	r15
     fa4:	ef 90       	pop	r14
     fa6:	df 90       	pop	r13
     fa8:	08 95       	ret

00000faa <bmp085ReadPressure>:

	return (unsigned long) bmp085ReadShort(0xF6);
}

long bmp085ReadPressure(void)
{
     faa:	ef 92       	push	r14
     fac:	ff 92       	push	r15
     fae:	0f 93       	push	r16
     fb0:	1f 93       	push	r17
	long pressure = 0;

	i2cDisableInt();
     fb2:	0e 94 5f 0c 	call	0x18be	; 0x18be <i2cDisableInt>

	i2cSendStart();
     fb6:	0e 94 56 0c 	call	0x18ac	; 0x18ac <i2cSendStart>
	i2cWaitForComplete();
     fba:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>

	i2cSendByte(BMP085FC);	// write 0xEE
     fbe:	8e ee       	ldi	r24, 0xEE	; 238
     fc0:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	i2cWaitForComplete();
     fc4:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>

	i2cSendByte(0xF4);	// write register address
     fc8:	84 ef       	ldi	r24, 0xF4	; 244
     fca:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	i2cWaitForComplete();
     fce:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>

	i2cSendByte(0x34);	// write register data for pressure
     fd2:	84 e3       	ldi	r24, 0x34	; 52
     fd4:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	i2cWaitForComplete();
     fd8:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>

	i2cSendStop();
     fdc:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <i2cSendStop>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fe0:	80 e3       	ldi	r24, 0x30	; 48
     fe2:	95 e7       	ldi	r25, 0x75	; 117
     fe4:	01 97       	sbiw	r24, 0x01	; 1
     fe6:	f1 f7       	brne	.-4      	; 0xfe4 <bmp085ReadPressure+0x3a>

	_delay_ms(10);	// max time is 4.5ms

	pressure = bmp085ReadShort(0xF6);
     fe8:	86 ef       	ldi	r24, 0xF6	; 246
     fea:	0e 94 92 07 	call	0xf24	; 0xf24 <bmp085ReadShort>
     fee:	7c 01       	movw	r14, r24
     ff0:	00 27       	eor	r16, r16
     ff2:	f7 fc       	sbrc	r15, 7
     ff4:	00 95       	com	r16
     ff6:	10 2f       	mov	r17, r16
	pressure &= 0x0000FFFF;

	i2cEnableInt();
     ff8:	0e 94 65 0c 	call	0x18ca	; 0x18ca <i2cEnableInt>
     ffc:	8f ef       	ldi	r24, 0xFF	; 255
     ffe:	9f ef       	ldi	r25, 0xFF	; 255
    1000:	a0 e0       	ldi	r26, 0x00	; 0
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e8 22       	and	r14, r24
    1006:	f9 22       	and	r15, r25
    1008:	0a 23       	and	r16, r26
    100a:	1b 23       	and	r17, r27

	return pressure;

	//return (long) bmp085ReadShort(0xF6);
}
    100c:	b7 01       	movw	r22, r14
    100e:	c8 01       	movw	r24, r16
    1010:	1f 91       	pop	r17
    1012:	0f 91       	pop	r16
    1014:	ff 90       	pop	r15
    1016:	ef 90       	pop	r14
    1018:	08 95       	ret

0000101a <bmp085ReadTemp>:
	return data;
}

unsigned long bmp085ReadTemp(void)
{
	i2cDisableInt();
    101a:	0e 94 5f 0c 	call	0x18be	; 0x18be <i2cDisableInt>

	i2cSendStart();
    101e:	0e 94 56 0c 	call	0x18ac	; 0x18ac <i2cSendStart>
	i2cWaitForComplete();
    1022:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>

	i2cSendByte(BMP085FC);	// write 0xEE
    1026:	8e ee       	ldi	r24, 0xEE	; 238
    1028:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	i2cWaitForComplete();
    102c:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>

	i2cSendByte(0xF4);	// write register address
    1030:	84 ef       	ldi	r24, 0xF4	; 244
    1032:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	i2cWaitForComplete();
    1036:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>

	i2cSendByte(0x2E);	// write register data for temp
    103a:	8e e2       	ldi	r24, 0x2E	; 46
    103c:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	i2cWaitForComplete();
    1040:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>

	i2cSendStop();
    1044:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <i2cSendStop>
    1048:	80 e3       	ldi	r24, 0x30	; 48
    104a:	95 e7       	ldi	r25, 0x75	; 117
    104c:	01 97       	sbiw	r24, 0x01	; 1
    104e:	f1 f7       	brne	.-4      	; 0x104c <bmp085ReadTemp+0x32>

	_delay_ms(10);	// max time is 4.5ms

	i2cEnableInt();
    1050:	0e 94 65 0c 	call	0x18ca	; 0x18ca <i2cEnableInt>

	return (unsigned long) bmp085ReadShort(0xF6);
    1054:	86 ef       	ldi	r24, 0xF6	; 246
    1056:	0e 94 92 07 	call	0xf24	; 0xf24 <bmp085ReadShort>
    105a:	9c 01       	movw	r18, r24
    105c:	44 27       	eor	r20, r20
    105e:	37 fd       	sbrc	r19, 7
    1060:	40 95       	com	r20
    1062:	54 2f       	mov	r21, r20
}
    1064:	b9 01       	movw	r22, r18
    1066:	ca 01       	movw	r24, r20
    1068:	08 95       	ret

0000106a <bmp085Convert>:

	//return (long) bmp085ReadShort(0xF6);
}

void bmp085Convert(long* temperature, long* pressure)
{
    106a:	2f 92       	push	r2
    106c:	3f 92       	push	r3
    106e:	4f 92       	push	r4
    1070:	5f 92       	push	r5
    1072:	6f 92       	push	r6
    1074:	7f 92       	push	r7
    1076:	8f 92       	push	r8
    1078:	9f 92       	push	r9
    107a:	af 92       	push	r10
    107c:	bf 92       	push	r11
    107e:	cf 92       	push	r12
    1080:	df 92       	push	r13
    1082:	ef 92       	push	r14
    1084:	ff 92       	push	r15
    1086:	0f 93       	push	r16
    1088:	1f 93       	push	r17
    108a:	df 93       	push	r29
    108c:	cf 93       	push	r28
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    1092:	64 97       	sbiw	r28, 0x14	; 20
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	de bf       	out	0x3e, r29	; 62
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	cd bf       	out	0x3d, r28	; 61
    109e:	98 8b       	std	Y+16, r25	; 0x10
    10a0:	8f 87       	std	Y+15, r24	; 0x0f
    10a2:	7a 8b       	std	Y+18, r23	; 0x12
    10a4:	69 8b       	std	Y+17, r22	; 0x11
	short mb;
	short mc;
	short md;
	//End Globals

	ac1 = eeprom_read_word(&EEBMPac1);
    10a6:	8b e6       	ldi	r24, 0x6B	; 107
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>
    10ae:	9e 87       	std	Y+14, r25	; 0x0e
    10b0:	8d 87       	std	Y+13, r24	; 0x0d
	ac2 = eeprom_read_word(&EEBMPac2);
    10b2:	8d e6       	ldi	r24, 0x6D	; 109
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>
    10ba:	9c 87       	std	Y+12, r25	; 0x0c
    10bc:	8b 87       	std	Y+11, r24	; 0x0b
	ac3 = eeprom_read_word(&EEBMPac3);
    10be:	8f e6       	ldi	r24, 0x6F	; 111
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>
    10c6:	9a 87       	std	Y+10, r25	; 0x0a
    10c8:	89 87       	std	Y+9, r24	; 0x09
	ac4 = eeprom_read_word(&EEBMPac4);
    10ca:	81 e7       	ldi	r24, 0x71	; 113
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>
    10d2:	9e 83       	std	Y+6, r25	; 0x06
    10d4:	8d 83       	std	Y+5, r24	; 0x05
	ac5 = eeprom_read_word(&EEBMPac5);
    10d6:	83 e7       	ldi	r24, 0x73	; 115
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>
    10de:	6c 01       	movw	r12, r24
	ac6 = eeprom_read_word(&EEBMPac6);
    10e0:	85 e7       	ldi	r24, 0x75	; 117
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>
    10e8:	1c 01       	movw	r2, r24
	b1 = eeprom_read_word(&EEBMPb1);
    10ea:	87 e7       	ldi	r24, 0x77	; 119
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>
    10f2:	9c 8b       	std	Y+20, r25	; 0x14
    10f4:	8b 8b       	std	Y+19, r24	; 0x13
	b2 = eeprom_read_word(&EEBMPb2);
    10f6:	89 e7       	ldi	r24, 0x79	; 121
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>
    10fe:	98 87       	std	Y+8, r25	; 0x08
    1100:	8f 83       	std	Y+7, r24	; 0x07
	mb = eeprom_read_word(&EEBMPmb);
	mc = eeprom_read_word(&EEBMPmc);
    1102:	8d e7       	ldi	r24, 0x7D	; 125
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>
    110a:	3c 01       	movw	r6, r24
	md = eeprom_read_word(&EEBMPmd);
    110c:	8f e7       	ldi	r24, 0x7F	; 127
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>
    1114:	5c 01       	movw	r10, r24
	unsigned long ut;
	long up;
	long x1, x2, b5, b6, x3, b3, p;
	unsigned long b4, b7;

	ut = bmp085ReadTemp();
    1116:	0e 94 0d 08 	call	0x101a	; 0x101a <bmp085ReadTemp>
	ut = bmp085ReadTemp();	// some bug here, have to read twice to get good data
    111a:	0e 94 0d 08 	call	0x101a	; 0x101a <bmp085ReadTemp>
    111e:	7b 01       	movw	r14, r22
    1120:	8c 01       	movw	r16, r24
	up = bmp085ReadPressure();
    1122:	0e 94 d5 07 	call	0xfaa	; 0xfaa <bmp085ReadPressure>
	up = bmp085ReadPressure();
    1126:	0e 94 d5 07 	call	0xfaa	; 0xfaa <bmp085ReadPressure>
    112a:	69 83       	std	Y+1, r22	; 0x01
    112c:	7a 83       	std	Y+2, r23	; 0x02
    112e:	8b 83       	std	Y+3, r24	; 0x03
    1130:	9c 83       	std	Y+4, r25	; 0x04

	x1 = (ut - (long)ac6) * (long)ac5 >> 15;
    1132:	44 24       	eor	r4, r4
    1134:	55 24       	eor	r5, r5
    1136:	e2 18       	sub	r14, r2
    1138:	f3 08       	sbc	r15, r3
    113a:	04 09       	sbc	r16, r4
    113c:	15 09       	sbc	r17, r5
    113e:	96 01       	movw	r18, r12
    1140:	40 e0       	ldi	r20, 0x00	; 0
    1142:	50 e0       	ldi	r21, 0x00	; 0
    1144:	c8 01       	movw	r24, r16
    1146:	b7 01       	movw	r22, r14
    1148:	0e 94 38 36 	call	0x6c70	; 0x6c70 <__mulsi3>
    114c:	7b 01       	movw	r14, r22
    114e:	8c 01       	movw	r16, r24
    1150:	7f e0       	ldi	r23, 0x0F	; 15
    1152:	16 95       	lsr	r17
    1154:	07 95       	ror	r16
    1156:	f7 94       	ror	r15
    1158:	e7 94       	ror	r14
    115a:	7a 95       	dec	r23
    115c:	d1 f7       	brne	.-12     	; 0x1152 <bmp085Convert+0xe8>
	x2 = ((long) mc << 11) / (x1 + (long)md);
	b5 = x1 + x2;
    115e:	88 24       	eor	r8, r8
    1160:	77 fc       	sbrc	r7, 7
    1162:	80 94       	com	r8
    1164:	98 2c       	mov	r9, r8
    1166:	6b e0       	ldi	r22, 0x0B	; 11
    1168:	66 0c       	add	r6, r6
    116a:	77 1c       	adc	r7, r7
    116c:	88 1c       	adc	r8, r8
    116e:	99 1c       	adc	r9, r9
    1170:	6a 95       	dec	r22
    1172:	d1 f7       	brne	.-12     	; 0x1168 <bmp085Convert+0xfe>
    1174:	cc 24       	eor	r12, r12
    1176:	b7 fc       	sbrc	r11, 7
    1178:	c0 94       	com	r12
    117a:	dc 2c       	mov	r13, r12
    117c:	ae 0c       	add	r10, r14
    117e:	bf 1c       	adc	r11, r15
    1180:	c0 1e       	adc	r12, r16
    1182:	d1 1e       	adc	r13, r17
    1184:	c4 01       	movw	r24, r8
    1186:	b3 01       	movw	r22, r6
    1188:	a6 01       	movw	r20, r12
    118a:	95 01       	movw	r18, r10
    118c:	0e 94 98 36 	call	0x6d30	; 0x6d30 <__divmodsi4>
    1190:	59 01       	movw	r10, r18
    1192:	6a 01       	movw	r12, r20
    1194:	ae 0c       	add	r10, r14
    1196:	bf 1c       	adc	r11, r15
    1198:	c0 1e       	adc	r12, r16
    119a:	d1 1e       	adc	r13, r17
	*temperature = (b5 + 8) >> 4;
    119c:	88 e0       	ldi	r24, 0x08	; 8
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	a0 e0       	ldi	r26, 0x00	; 0
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	a8 0e       	add	r10, r24
    11a6:	b9 1e       	adc	r11, r25
    11a8:	ca 1e       	adc	r12, r26
    11aa:	db 1e       	adc	r13, r27
    11ac:	d6 01       	movw	r26, r12
    11ae:	c5 01       	movw	r24, r10
    11b0:	54 e0       	ldi	r21, 0x04	; 4
    11b2:	b5 95       	asr	r27
    11b4:	a7 95       	ror	r26
    11b6:	97 95       	ror	r25
    11b8:	87 95       	ror	r24
    11ba:	5a 95       	dec	r21
    11bc:	d1 f7       	brne	.-12     	; 0x11b2 <bmp085Convert+0x148>
    11be:	ef 85       	ldd	r30, Y+15	; 0x0f
    11c0:	f8 89       	ldd	r31, Y+16	; 0x10
    11c2:	80 83       	st	Z, r24
    11c4:	91 83       	std	Z+1, r25	; 0x01
    11c6:	a2 83       	std	Z+2, r26	; 0x02
    11c8:	b3 83       	std	Z+3, r27	; 0x03

	b6 = b5 - 4000;
    11ca:	88 e5       	ldi	r24, 0x58	; 88
    11cc:	90 ef       	ldi	r25, 0xF0	; 240
    11ce:	af ef       	ldi	r26, 0xFF	; 255
    11d0:	bf ef       	ldi	r27, 0xFF	; 255
    11d2:	a8 0e       	add	r10, r24
    11d4:	b9 1e       	adc	r11, r25
    11d6:	ca 1e       	adc	r12, r26
    11d8:	db 1e       	adc	r13, r27
	x1 = (b2 * (b6 * b6 >> 12)) >> 11;
    11da:	c6 01       	movw	r24, r12
    11dc:	b5 01       	movw	r22, r10
    11de:	a6 01       	movw	r20, r12
    11e0:	95 01       	movw	r18, r10
    11e2:	0e 94 38 36 	call	0x6c70	; 0x6c70 <__mulsi3>
    11e6:	3b 01       	movw	r6, r22
    11e8:	4c 01       	movw	r8, r24
    11ea:	4c e0       	ldi	r20, 0x0C	; 12
    11ec:	95 94       	asr	r9
    11ee:	87 94       	ror	r8
    11f0:	77 94       	ror	r7
    11f2:	67 94       	ror	r6
    11f4:	4a 95       	dec	r20
    11f6:	d1 f7       	brne	.-12     	; 0x11ec <bmp085Convert+0x182>
	x3 = x1 + x2;
	b3 = (((int32_t) ac1 * 4 + x3) + 2)/4;
	x1 = ac3 * b6 >> 13;
	x2 = (b1 * (b6 * b6 >> 12)) >> 16;
	x3 = ((x1 + x2) + 2) >> 2;
	b4 = (ac4 * (unsigned long) (x3 + 32768)) >> 15;
    11f8:	a9 85       	ldd	r26, Y+9	; 0x09
    11fa:	ba 85       	ldd	r27, Y+10	; 0x0a
    11fc:	9d 01       	movw	r18, r26
    11fe:	44 27       	eor	r20, r20
    1200:	37 fd       	sbrc	r19, 7
    1202:	40 95       	com	r20
    1204:	54 2f       	mov	r21, r20
    1206:	c6 01       	movw	r24, r12
    1208:	b5 01       	movw	r22, r10
    120a:	0e 94 38 36 	call	0x6c70	; 0x6c70 <__mulsi3>
    120e:	7b 01       	movw	r14, r22
    1210:	8c 01       	movw	r16, r24
    1212:	3d e0       	ldi	r19, 0x0D	; 13
    1214:	15 95       	asr	r17
    1216:	07 95       	ror	r16
    1218:	f7 94       	ror	r15
    121a:	e7 94       	ror	r14
    121c:	3a 95       	dec	r19
    121e:	d1 f7       	brne	.-12     	; 0x1214 <bmp085Convert+0x1aa>
    1220:	82 e0       	ldi	r24, 0x02	; 2
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	a0 e0       	ldi	r26, 0x00	; 0
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e8 0e       	add	r14, r24
    122a:	f9 1e       	adc	r15, r25
    122c:	0a 1f       	adc	r16, r26
    122e:	1b 1f       	adc	r17, r27
    1230:	ab 89       	ldd	r26, Y+19	; 0x13
    1232:	bc 89       	ldd	r27, Y+20	; 0x14
    1234:	9d 01       	movw	r18, r26
    1236:	44 27       	eor	r20, r20
    1238:	37 fd       	sbrc	r19, 7
    123a:	40 95       	com	r20
    123c:	54 2f       	mov	r21, r20
    123e:	c4 01       	movw	r24, r8
    1240:	b3 01       	movw	r22, r6
    1242:	0e 94 38 36 	call	0x6c70	; 0x6c70 <__mulsi3>
    1246:	bc 01       	movw	r22, r24
    1248:	99 27       	eor	r25, r25
    124a:	77 fd       	sbrc	r23, 7
    124c:	90 95       	com	r25
    124e:	89 2f       	mov	r24, r25
    1250:	e6 0e       	add	r14, r22
    1252:	f7 1e       	adc	r15, r23
    1254:	08 1f       	adc	r16, r24
    1256:	19 1f       	adc	r17, r25
    1258:	82 e0       	ldi	r24, 0x02	; 2
    125a:	15 95       	asr	r17
    125c:	07 95       	ror	r16
    125e:	f7 94       	ror	r15
    1260:	e7 94       	ror	r14
    1262:	8a 95       	dec	r24
    1264:	d1 f7       	brne	.-12     	; 0x125a <bmp085Convert+0x1f0>
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	90 e8       	ldi	r25, 0x80	; 128
    126a:	a0 e0       	ldi	r26, 0x00	; 0
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e8 0e       	add	r14, r24
    1270:	f9 1e       	adc	r15, r25
    1272:	0a 1f       	adc	r16, r26
    1274:	1b 1f       	adc	r17, r27
    1276:	ad 81       	ldd	r26, Y+5	; 0x05
    1278:	be 81       	ldd	r27, Y+6	; 0x06
    127a:	9d 01       	movw	r18, r26
    127c:	40 e0       	ldi	r20, 0x00	; 0
    127e:	50 e0       	ldi	r21, 0x00	; 0
    1280:	c8 01       	movw	r24, r16
    1282:	b7 01       	movw	r22, r14
    1284:	0e 94 38 36 	call	0x6c70	; 0x6c70 <__mulsi3>
    1288:	1b 01       	movw	r2, r22
    128a:	2c 01       	movw	r4, r24
    128c:	1f e0       	ldi	r17, 0x0F	; 15
    128e:	56 94       	lsr	r5
    1290:	47 94       	ror	r4
    1292:	37 94       	ror	r3
    1294:	27 94       	ror	r2
    1296:	1a 95       	dec	r17
    1298:	d1 f7       	brne	.-12     	; 0x128e <bmp085Convert+0x224>
	b7 = ((unsigned long) up - b3) * (50000 >> OSS);
    129a:	ed 85       	ldd	r30, Y+13	; 0x0d
    129c:	fe 85       	ldd	r31, Y+14	; 0x0e
    129e:	7f 01       	movw	r14, r30
    12a0:	00 27       	eor	r16, r16
    12a2:	f7 fc       	sbrc	r15, 7
    12a4:	00 95       	com	r16
    12a6:	10 2f       	mov	r17, r16
    12a8:	b2 e0       	ldi	r27, 0x02	; 2
    12aa:	ee 0c       	add	r14, r14
    12ac:	ff 1c       	adc	r15, r15
    12ae:	00 1f       	adc	r16, r16
    12b0:	11 1f       	adc	r17, r17
    12b2:	ba 95       	dec	r27
    12b4:	d1 f7       	brne	.-12     	; 0x12aa <bmp085Convert+0x240>
    12b6:	82 e0       	ldi	r24, 0x02	; 2
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	a0 e0       	ldi	r26, 0x00	; 0
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e8 0e       	add	r14, r24
    12c0:	f9 1e       	adc	r15, r25
    12c2:	0a 1f       	adc	r16, r26
    12c4:	1b 1f       	adc	r17, r27
    12c6:	ab 85       	ldd	r26, Y+11	; 0x0b
    12c8:	bc 85       	ldd	r27, Y+12	; 0x0c
    12ca:	9d 01       	movw	r18, r26
    12cc:	44 27       	eor	r20, r20
    12ce:	37 fd       	sbrc	r19, 7
    12d0:	40 95       	com	r20
    12d2:	54 2f       	mov	r21, r20
    12d4:	c6 01       	movw	r24, r12
    12d6:	b5 01       	movw	r22, r10
    12d8:	0e 94 38 36 	call	0x6c70	; 0x6c70 <__mulsi3>
    12dc:	ab e0       	ldi	r26, 0x0B	; 11
    12de:	95 95       	asr	r25
    12e0:	87 95       	ror	r24
    12e2:	77 95       	ror	r23
    12e4:	67 95       	ror	r22
    12e6:	aa 95       	dec	r26
    12e8:	d1 f7       	brne	.-12     	; 0x12de <bmp085Convert+0x274>
    12ea:	e6 0e       	add	r14, r22
    12ec:	f7 1e       	adc	r15, r23
    12ee:	08 1f       	adc	r16, r24
    12f0:	19 1f       	adc	r17, r25
    12f2:	ef 81       	ldd	r30, Y+7	; 0x07
    12f4:	f8 85       	ldd	r31, Y+8	; 0x08
    12f6:	9f 01       	movw	r18, r30
    12f8:	44 27       	eor	r20, r20
    12fa:	37 fd       	sbrc	r19, 7
    12fc:	40 95       	com	r20
    12fe:	54 2f       	mov	r21, r20
    1300:	c4 01       	movw	r24, r8
    1302:	b3 01       	movw	r22, r6
    1304:	0e 94 38 36 	call	0x6c70	; 0x6c70 <__mulsi3>
    1308:	fb e0       	ldi	r31, 0x0B	; 11
    130a:	95 95       	asr	r25
    130c:	87 95       	ror	r24
    130e:	77 95       	ror	r23
    1310:	67 95       	ror	r22
    1312:	fa 95       	dec	r31
    1314:	d1 f7       	brne	.-12     	; 0x130a <bmp085Convert+0x2a0>
    1316:	e6 0e       	add	r14, r22
    1318:	f7 1e       	adc	r15, r23
    131a:	08 1f       	adc	r16, r24
    131c:	19 1f       	adc	r17, r25
    131e:	c8 01       	movw	r24, r16
    1320:	b7 01       	movw	r22, r14
    1322:	24 e0       	ldi	r18, 0x04	; 4
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	40 e0       	ldi	r20, 0x00	; 0
    1328:	50 e0       	ldi	r21, 0x00	; 0
    132a:	0e 94 98 36 	call	0x6d30	; 0x6d30 <__divmodsi4>
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	9a 81       	ldd	r25, Y+2	; 0x02
    1332:	ab 81       	ldd	r26, Y+3	; 0x03
    1334:	bc 81       	ldd	r27, Y+4	; 0x04
    1336:	82 1b       	sub	r24, r18
    1338:	93 0b       	sbc	r25, r19
    133a:	a4 0b       	sbc	r26, r20
    133c:	b5 0b       	sbc	r27, r21
    133e:	89 83       	std	Y+1, r24	; 0x01
    1340:	9a 83       	std	Y+2, r25	; 0x02
    1342:	ab 83       	std	Y+3, r26	; 0x03
    1344:	bc 83       	std	Y+4, r27	; 0x04
    1346:	bc 01       	movw	r22, r24
    1348:	cd 01       	movw	r24, r26
    134a:	20 e5       	ldi	r18, 0x50	; 80
    134c:	33 ec       	ldi	r19, 0xC3	; 195
    134e:	40 e0       	ldi	r20, 0x00	; 0
    1350:	50 e0       	ldi	r21, 0x00	; 0
    1352:	0e 94 38 36 	call	0x6c70	; 0x6c70 <__mulsi3>
	p = b7 < 0x80000000 ? (b7 * 2) / b4 : (b7 / b4) * 2;
    1356:	97 fd       	sbrc	r25, 7
    1358:	0d c0       	rjmp	.+26     	; 0x1374 <bmp085Convert+0x30a>
    135a:	66 0f       	add	r22, r22
    135c:	77 1f       	adc	r23, r23
    135e:	88 1f       	adc	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	a2 01       	movw	r20, r4
    1364:	91 01       	movw	r18, r2
    1366:	0e 94 76 36 	call	0x6cec	; 0x6cec <__udivmodsi4>
    136a:	c9 01       	movw	r24, r18
    136c:	da 01       	movw	r26, r20
    136e:	5c 01       	movw	r10, r24
    1370:	6d 01       	movw	r12, r26
    1372:	0a c0       	rjmp	.+20     	; 0x1388 <bmp085Convert+0x31e>
    1374:	a2 01       	movw	r20, r4
    1376:	91 01       	movw	r18, r2
    1378:	0e 94 76 36 	call	0x6cec	; 0x6cec <__udivmodsi4>
    137c:	59 01       	movw	r10, r18
    137e:	6a 01       	movw	r12, r20
    1380:	aa 0c       	add	r10, r10
    1382:	bb 1c       	adc	r11, r11
    1384:	cc 1c       	adc	r12, r12
    1386:	dd 1c       	adc	r13, r13
	x1 = (p >> 8) * (p >> 8);
    1388:	55 27       	eor	r21, r21
    138a:	d7 fc       	sbrc	r13, 7
    138c:	5a 95       	dec	r21
    138e:	4d 2d       	mov	r20, r13
    1390:	3c 2d       	mov	r19, r12
    1392:	2b 2d       	mov	r18, r11
	x1 = (x1 * 3038) >> 16;
    1394:	ca 01       	movw	r24, r20
    1396:	b9 01       	movw	r22, r18
    1398:	0e 94 38 36 	call	0x6c70	; 0x6c70 <__mulsi3>
    139c:	2e ed       	ldi	r18, 0xDE	; 222
    139e:	3b e0       	ldi	r19, 0x0B	; 11
    13a0:	40 e0       	ldi	r20, 0x00	; 0
    13a2:	50 e0       	ldi	r21, 0x00	; 0
    13a4:	0e 94 38 36 	call	0x6c70	; 0x6c70 <__mulsi3>
    13a8:	7b 01       	movw	r14, r22
    13aa:	8c 01       	movw	r16, r24
	x2 = (-7357 * p) >> 16;
	*pressure = p + ((x1 + x2 + 3791) >> 4);
    13ac:	c6 01       	movw	r24, r12
    13ae:	b5 01       	movw	r22, r10
    13b0:	23 e4       	ldi	r18, 0x43	; 67
    13b2:	33 ee       	ldi	r19, 0xE3	; 227
    13b4:	4f ef       	ldi	r20, 0xFF	; 255
    13b6:	5f ef       	ldi	r21, 0xFF	; 255
    13b8:	0e 94 38 36 	call	0x6c70	; 0x6c70 <__mulsi3>
    13bc:	bc 01       	movw	r22, r24
    13be:	99 27       	eor	r25, r25
    13c0:	77 fd       	sbrc	r23, 7
    13c2:	90 95       	com	r25
    13c4:	89 2f       	mov	r24, r25
    13c6:	61 53       	subi	r22, 0x31	; 49
    13c8:	71 4f       	sbci	r23, 0xF1	; 241
    13ca:	8f 4f       	sbci	r24, 0xFF	; 255
    13cc:	9f 4f       	sbci	r25, 0xFF	; 255
    13ce:	78 01       	movw	r14, r16
    13d0:	11 27       	eor	r17, r17
    13d2:	f7 fc       	sbrc	r15, 7
    13d4:	10 95       	com	r17
    13d6:	01 2f       	mov	r16, r17
    13d8:	6e 0d       	add	r22, r14
    13da:	7f 1d       	adc	r23, r15
    13dc:	80 1f       	adc	r24, r16
    13de:	91 1f       	adc	r25, r17
    13e0:	24 e0       	ldi	r18, 0x04	; 4
    13e2:	95 95       	asr	r25
    13e4:	87 95       	ror	r24
    13e6:	77 95       	ror	r23
    13e8:	67 95       	ror	r22
    13ea:	2a 95       	dec	r18
    13ec:	d1 f7       	brne	.-12     	; 0x13e2 <bmp085Convert+0x378>
    13ee:	6a 0d       	add	r22, r10
    13f0:	7b 1d       	adc	r23, r11
    13f2:	8c 1d       	adc	r24, r12
    13f4:	9d 1d       	adc	r25, r13
    13f6:	a9 89       	ldd	r26, Y+17	; 0x11
    13f8:	ba 89       	ldd	r27, Y+18	; 0x12
    13fa:	6d 93       	st	X+, r22
    13fc:	7d 93       	st	X+, r23
    13fe:	8d 93       	st	X+, r24
    1400:	9c 93       	st	X, r25
    1402:	13 97       	sbiw	r26, 0x03	; 3
}
    1404:	64 96       	adiw	r28, 0x14	; 20
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	de bf       	out	0x3e, r29	; 62
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	cd bf       	out	0x3d, r28	; 61
    1410:	cf 91       	pop	r28
    1412:	df 91       	pop	r29
    1414:	1f 91       	pop	r17
    1416:	0f 91       	pop	r16
    1418:	ff 90       	pop	r15
    141a:	ef 90       	pop	r14
    141c:	df 90       	pop	r13
    141e:	cf 90       	pop	r12
    1420:	bf 90       	pop	r11
    1422:	af 90       	pop	r10
    1424:	9f 90       	pop	r9
    1426:	8f 90       	pop	r8
    1428:	7f 90       	pop	r7
    142a:	6f 90       	pop	r6
    142c:	5f 90       	pop	r5
    142e:	4f 90       	pop	r4
    1430:	3f 90       	pop	r3
    1432:	2f 90       	pop	r2
    1434:	08 95       	ret

00001436 <BMP085_Calibration>:
extern short EEMEM EEBMPmd;

void BMP085_Calibration(void)
{

	eeprom_write_word(&EEBMPac1, bmp085ReadShort(0xAA));
    1436:	8a ea       	ldi	r24, 0xAA	; 170
    1438:	0e 94 92 07 	call	0xf24	; 0xf24 <bmp085ReadShort>
    143c:	bc 01       	movw	r22, r24
    143e:	8b e6       	ldi	r24, 0x6B	; 107
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__eewr_word_m324p>
	eeprom_write_word(&EEBMPac2, bmp085ReadShort(0xAC));
    1446:	8c ea       	ldi	r24, 0xAC	; 172
    1448:	0e 94 92 07 	call	0xf24	; 0xf24 <bmp085ReadShort>
    144c:	bc 01       	movw	r22, r24
    144e:	8d e6       	ldi	r24, 0x6D	; 109
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__eewr_word_m324p>
	eeprom_write_word(&EEBMPac3, bmp085ReadShort(0xAE));
    1456:	8e ea       	ldi	r24, 0xAE	; 174
    1458:	0e 94 92 07 	call	0xf24	; 0xf24 <bmp085ReadShort>
    145c:	bc 01       	movw	r22, r24
    145e:	8f e6       	ldi	r24, 0x6F	; 111
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__eewr_word_m324p>
	eeprom_write_word(&EEBMPac4, bmp085ReadShort(0xB0));
    1466:	80 eb       	ldi	r24, 0xB0	; 176
    1468:	0e 94 92 07 	call	0xf24	; 0xf24 <bmp085ReadShort>
    146c:	bc 01       	movw	r22, r24
    146e:	81 e7       	ldi	r24, 0x71	; 113
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__eewr_word_m324p>
	eeprom_write_word(&EEBMPac5, bmp085ReadShort(0xB2));
    1476:	82 eb       	ldi	r24, 0xB2	; 178
    1478:	0e 94 92 07 	call	0xf24	; 0xf24 <bmp085ReadShort>
    147c:	bc 01       	movw	r22, r24
    147e:	83 e7       	ldi	r24, 0x73	; 115
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__eewr_word_m324p>
	eeprom_write_word(&EEBMPac6, bmp085ReadShort(0xB4));
    1486:	84 eb       	ldi	r24, 0xB4	; 180
    1488:	0e 94 92 07 	call	0xf24	; 0xf24 <bmp085ReadShort>
    148c:	bc 01       	movw	r22, r24
    148e:	85 e7       	ldi	r24, 0x75	; 117
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__eewr_word_m324p>
	eeprom_write_word(&EEBMPb1, bmp085ReadShort(0xB6));
    1496:	86 eb       	ldi	r24, 0xB6	; 182
    1498:	0e 94 92 07 	call	0xf24	; 0xf24 <bmp085ReadShort>
    149c:	bc 01       	movw	r22, r24
    149e:	87 e7       	ldi	r24, 0x77	; 119
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__eewr_word_m324p>
	eeprom_write_word(&EEBMPb2, bmp085ReadShort(0xB8));
    14a6:	88 eb       	ldi	r24, 0xB8	; 184
    14a8:	0e 94 92 07 	call	0xf24	; 0xf24 <bmp085ReadShort>
    14ac:	bc 01       	movw	r22, r24
    14ae:	89 e7       	ldi	r24, 0x79	; 121
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__eewr_word_m324p>
	eeprom_write_word(&EEBMPmb, bmp085ReadShort(0xBA));
    14b6:	8a eb       	ldi	r24, 0xBA	; 186
    14b8:	0e 94 92 07 	call	0xf24	; 0xf24 <bmp085ReadShort>
    14bc:	bc 01       	movw	r22, r24
    14be:	8b e7       	ldi	r24, 0x7B	; 123
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__eewr_word_m324p>
	eeprom_write_word(&EEBMPmc, bmp085ReadShort(0xBC));
    14c6:	8c eb       	ldi	r24, 0xBC	; 188
    14c8:	0e 94 92 07 	call	0xf24	; 0xf24 <bmp085ReadShort>
    14cc:	bc 01       	movw	r22, r24
    14ce:	8d e7       	ldi	r24, 0x7D	; 125
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__eewr_word_m324p>
	eeprom_write_word(&EEBMPmd, bmp085ReadShort(0xBE));
    14d6:	8e eb       	ldi	r24, 0xBE	; 190
    14d8:	0e 94 92 07 	call	0xf24	; 0xf24 <bmp085ReadShort>
    14dc:	bc 01       	movw	r22, r24
    14de:	8f e7       	ldi	r24, 0x7F	; 127
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__eewr_word_m324p>

}
    14e6:	08 95       	ret

000014e8 <ds3231read>:
	i2cEnableInt();

}

uint8_t ds3231read(uint8_t address)
{
    14e8:	1f 93       	push	r17
    14ea:	18 2f       	mov	r17, r24
	uint8_t data;

	i2cDisableInt();
    14ec:	0e 94 5f 0c 	call	0x18be	; 0x18be <i2cDisableInt>

	i2cSendStart();
    14f0:	0e 94 56 0c 	call	0x18ac	; 0x18ac <i2cSendStart>
	i2cWaitForComplete();
    14f4:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>

	i2cSendByte(DS3231FC);	// write 0xEE
    14f8:	80 ed       	ldi	r24, 0xD0	; 208
    14fa:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	i2cWaitForComplete();
    14fe:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>

	i2cSendByte(address);	// write register address
    1502:	81 2f       	mov	r24, r17
    1504:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	i2cWaitForComplete();
    1508:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>

	i2cSendStart();
    150c:	0e 94 56 0c 	call	0x18ac	; 0x18ac <i2cSendStart>
	i2cWaitForComplete();
    1510:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>

	i2cSendByte(DS3231FC+1);	// rep start
    1514:	81 ed       	ldi	r24, 0xD1	; 209
    1516:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	i2cWaitForComplete();
    151a:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>

	i2cReceiveByte(0);
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	0e 94 92 0c 	call	0x1924	; 0x1924 <i2cReceiveByte>
	i2cWaitForComplete();
    1524:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	data = i2cGetReceivedByte();	// Get result
    1528:	0e 94 a0 0c 	call	0x1940	; 0x1940 <i2cGetReceivedByte>
    152c:	18 2f       	mov	r17, r24
	i2cWaitForComplete();
    152e:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>

	i2cSendStop();
    1532:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <i2cSendStop>

	i2cEnableInt();
    1536:	0e 94 65 0c 	call	0x18ca	; 0x18ca <i2cEnableInt>

	return data;

}
    153a:	81 2f       	mov	r24, r17
    153c:	1f 91       	pop	r17
    153e:	08 95       	ret

00001540 <getDays>:

}

inline uint8_t getDays(void)
{
	uint8_t temp = ds3231read(0x03);
    1540:	83 e0       	ldi	r24, 0x03	; 3
    1542:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <ds3231read>
    1546:	28 2f       	mov	r18, r24
    1548:	22 95       	swap	r18
    154a:	2f 70       	andi	r18, 0x0F	; 15
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	a9 01       	movw	r20, r18
    1550:	63 e0       	ldi	r22, 0x03	; 3
    1552:	44 0f       	add	r20, r20
    1554:	55 1f       	adc	r21, r21
    1556:	6a 95       	dec	r22
    1558:	e1 f7       	brne	.-8      	; 0x1552 <getDays+0x12>
    155a:	22 0f       	add	r18, r18
    155c:	33 1f       	adc	r19, r19
    155e:	42 0f       	add	r20, r18
    1560:	53 1f       	adc	r21, r19
    1562:	8f 70       	andi	r24, 0x0F	; 15
	return (temp & 0x0F) + ((temp & 0xF0) >> 4)*10;

}
    1564:	84 0f       	add	r24, r20
    1566:	08 95       	ret

00001568 <getHours>:
}

inline uint8_t getHours(void)
{

	uint8_t temp = ds3231read(0x02);
    1568:	82 e0       	ldi	r24, 0x02	; 2
    156a:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <ds3231read>
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	20 73       	andi	r18, 0x30	; 48
    1574:	30 70       	andi	r19, 0x00	; 0
    1576:	f4 e0       	ldi	r31, 0x04	; 4
    1578:	35 95       	asr	r19
    157a:	27 95       	ror	r18
    157c:	fa 95       	dec	r31
    157e:	e1 f7       	brne	.-8      	; 0x1578 <getHours+0x10>
    1580:	a9 01       	movw	r20, r18
    1582:	e3 e0       	ldi	r30, 0x03	; 3
    1584:	44 0f       	add	r20, r20
    1586:	55 1f       	adc	r21, r21
    1588:	ea 95       	dec	r30
    158a:	e1 f7       	brne	.-8      	; 0x1584 <getHours+0x1c>
    158c:	22 0f       	add	r18, r18
    158e:	33 1f       	adc	r19, r19
    1590:	42 0f       	add	r20, r18
    1592:	53 1f       	adc	r21, r19
    1594:	8f 70       	andi	r24, 0x0F	; 15
	return (temp & 0x0F) + ((temp & 0b00110000) >> 4)*10;

}
    1596:	84 0f       	add	r24, r20
    1598:	08 95       	ret

0000159a <getMinutes>:

}

inline uint8_t getMinutes(void)
{
	uint8_t temp = ds3231read(0x01);
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <ds3231read>
    15a0:	28 2f       	mov	r18, r24
    15a2:	22 95       	swap	r18
    15a4:	2f 70       	andi	r18, 0x0F	; 15
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	a9 01       	movw	r20, r18
    15aa:	b3 e0       	ldi	r27, 0x03	; 3
    15ac:	44 0f       	add	r20, r20
    15ae:	55 1f       	adc	r21, r21
    15b0:	ba 95       	dec	r27
    15b2:	e1 f7       	brne	.-8      	; 0x15ac <getMinutes+0x12>
    15b4:	22 0f       	add	r18, r18
    15b6:	33 1f       	adc	r19, r19
    15b8:	42 0f       	add	r20, r18
    15ba:	53 1f       	adc	r21, r19
    15bc:	8f 70       	andi	r24, 0x0F	; 15
	return (temp & 0x0F) + ((temp & 0xF0) >> 4)*10;
}
    15be:	84 0f       	add	r24, r20
    15c0:	08 95       	ret

000015c2 <getSeconds>:
}

inline uint8_t getSeconds(void)
{

	uint8_t temp = ds3231read(0x00);
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <ds3231read>
    15c8:	28 2f       	mov	r18, r24
    15ca:	22 95       	swap	r18
    15cc:	2f 70       	andi	r18, 0x0F	; 15
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	a9 01       	movw	r20, r18
    15d2:	63 e0       	ldi	r22, 0x03	; 3
    15d4:	44 0f       	add	r20, r20
    15d6:	55 1f       	adc	r21, r21
    15d8:	6a 95       	dec	r22
    15da:	e1 f7       	brne	.-8      	; 0x15d4 <getSeconds+0x12>
    15dc:	22 0f       	add	r18, r18
    15de:	33 1f       	adc	r19, r19
    15e0:	42 0f       	add	r20, r18
    15e2:	53 1f       	adc	r21, r19
    15e4:	8f 70       	andi	r24, 0x0F	; 15
	return (temp & 0x0F) + ((temp & 0xF0) >> 4)*10;

}
    15e6:	84 0f       	add	r24, r20
    15e8:	08 95       	ret

000015ea <ds3231write>:

}


void ds3231write(uint8_t address, uint8_t data)
{
    15ea:	0f 93       	push	r16
    15ec:	1f 93       	push	r17
    15ee:	18 2f       	mov	r17, r24
    15f0:	06 2f       	mov	r16, r22

	i2cDisableInt();
    15f2:	0e 94 5f 0c 	call	0x18be	; 0x18be <i2cDisableInt>

	i2cSendStart();
    15f6:	0e 94 56 0c 	call	0x18ac	; 0x18ac <i2cSendStart>
	i2cWaitForComplete();
    15fa:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>

	i2cSendByte(DS3231FC);	// write 0xEE
    15fe:	80 ed       	ldi	r24, 0xD0	; 208
    1600:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	i2cWaitForComplete();
    1604:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>

	i2cSendByte(address);	// write register address
    1608:	81 2f       	mov	r24, r17
    160a:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	i2cWaitForComplete();
    160e:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>

	i2cSendByte(data);	// write data address
    1612:	80 2f       	mov	r24, r16
    1614:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	i2cWaitForComplete();
    1618:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>

	i2cSendStop();
    161c:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <i2cSendStop>

	i2cEnableInt();
    1620:	0e 94 65 0c 	call	0x18ca	; 0x18ca <i2cEnableInt>

}
    1624:	1f 91       	pop	r17
    1626:	0f 91       	pop	r16
    1628:	08 95       	ret

0000162a <getTime>:
#define STATUS_LED1 3
#define STATUS_LED2 4
#define red_on()     ( PORTB |= (1 << STATUS_LED2)  )

uint8_t getTime(uint8_t *seconds, uint8_t *minutes, uint8_t *hours, uint8_t *days)
{
    162a:	2f 92       	push	r2
    162c:	3f 92       	push	r3
    162e:	4f 92       	push	r4
    1630:	5f 92       	push	r5
    1632:	6f 92       	push	r6
    1634:	7f 92       	push	r7
    1636:	8f 92       	push	r8
    1638:	9f 92       	push	r9
    163a:	af 92       	push	r10
    163c:	bf 92       	push	r11
    163e:	cf 92       	push	r12
    1640:	df 92       	push	r13
    1642:	ef 92       	push	r14
    1644:	ff 92       	push	r15
    1646:	0f 93       	push	r16
    1648:	1f 93       	push	r17
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	00 d0       	rcall	.+0      	; 0x1650 <getTime+0x26>
    1650:	00 d0       	rcall	.+0      	; 0x1652 <getTime+0x28>
    1652:	0f 92       	push	r0
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62
    1658:	7c 01       	movw	r14, r24
    165a:	6b 01       	movw	r12, r22
    165c:	5a 01       	movw	r10, r20
    165e:	49 01       	movw	r8, r18

	uint8_t error;

	i2cDisableInt();
    1660:	0e 94 5f 0c 	call	0x18be	; 0x18be <i2cDisableInt>

	i2cSendStart();
    1664:	0e 94 56 0c 	call	0x18ac	; 0x18ac <i2cSendStart>
	error |= i2cWaitForComplete();
    1668:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    166c:	18 2f       	mov	r17, r24

	i2cSendByte(DS3231FC);	// write 0xEE
    166e:	80 ed       	ldi	r24, 0xD0	; 208
    1670:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	error |= i2cWaitForComplete();
    1674:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    1678:	8d 83       	std	Y+5, r24	; 0x05

	i2cSendByte(0x00);	// write register address
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	error |= i2cWaitForComplete();
    1680:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    1684:	8c 83       	std	Y+4, r24	; 0x04

	i2cSendStart();
    1686:	0e 94 56 0c 	call	0x18ac	; 0x18ac <i2cSendStart>
	error |= i2cWaitForComplete();
    168a:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    168e:	8b 83       	std	Y+3, r24	; 0x03

	i2cSendByte(DS3231FC+1);	// rep start
    1690:	81 ed       	ldi	r24, 0xD1	; 209
    1692:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	error |= i2cWaitForComplete();
    1696:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    169a:	8a 83       	std	Y+2, r24	; 0x02

	i2cReceiveByte(1);
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	0e 94 92 0c 	call	0x1924	; 0x1924 <i2cReceiveByte>
	error |= i2cWaitForComplete();
    16a2:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    16a6:	28 2e       	mov	r2, r24
	*seconds = i2cGetReceivedByte();	// Get seconds
    16a8:	0e 94 a0 0c 	call	0x1940	; 0x1940 <i2cGetReceivedByte>
    16ac:	f7 01       	movw	r30, r14
    16ae:	80 83       	st	Z, r24
	error |= i2cWaitForComplete();
    16b0:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    16b4:	38 2e       	mov	r3, r24

	i2cReceiveByte(1);
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	0e 94 92 0c 	call	0x1924	; 0x1924 <i2cReceiveByte>
	error |= i2cWaitForComplete();
    16bc:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    16c0:	48 2e       	mov	r4, r24
	*minutes = i2cGetReceivedByte();	// Get minutes
    16c2:	0e 94 a0 0c 	call	0x1940	; 0x1940 <i2cGetReceivedByte>
    16c6:	f6 01       	movw	r30, r12
    16c8:	80 83       	st	Z, r24
	error |= i2cWaitForComplete();
    16ca:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    16ce:	58 2e       	mov	r5, r24

	i2cReceiveByte(1);
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	0e 94 92 0c 	call	0x1924	; 0x1924 <i2cReceiveByte>
	error |= i2cWaitForComplete();
    16d6:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    16da:	68 2e       	mov	r6, r24
	*hours = i2cGetReceivedByte();	// Get hours
    16dc:	0e 94 a0 0c 	call	0x1940	; 0x1940 <i2cGetReceivedByte>
    16e0:	f5 01       	movw	r30, r10
    16e2:	80 83       	st	Z, r24
	error |= i2cWaitForComplete();
    16e4:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    16e8:	78 2e       	mov	r7, r24

	i2cReceiveByte(0);
    16ea:	80 e0       	ldi	r24, 0x00	; 0
    16ec:	0e 94 92 0c 	call	0x1924	; 0x1924 <i2cReceiveByte>
	error |= i2cWaitForComplete();
    16f0:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    16f4:	08 2f       	mov	r16, r24
	*days = i2cGetReceivedByte();	// Get days
    16f6:	0e 94 a0 0c 	call	0x1940	; 0x1940 <i2cGetReceivedByte>
    16fa:	f4 01       	movw	r30, r8
    16fc:	80 83       	st	Z, r24
	error |= i2cWaitForComplete();
    16fe:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    1702:	89 83       	std	Y+1, r24	; 0x01

	i2cSendStart();
	error |= i2cWaitForComplete();

	i2cSendByte(DS3231FC);	// write 0xEE
	error |= i2cWaitForComplete();
    1704:	fd 81       	ldd	r31, Y+5	; 0x05
    1706:	1f 2b       	or	r17, r31

	i2cSendByte(0x00);	// write register address
	error |= i2cWaitForComplete();
    1708:	8c 81       	ldd	r24, Y+4	; 0x04
    170a:	18 2b       	or	r17, r24

	i2cSendStart();
	error |= i2cWaitForComplete();
    170c:	eb 81       	ldd	r30, Y+3	; 0x03
    170e:	1e 2b       	or	r17, r30

	i2cSendByte(DS3231FC+1);	// rep start
	error |= i2cWaitForComplete();
    1710:	fa 81       	ldd	r31, Y+2	; 0x02
    1712:	1f 2b       	or	r17, r31

	i2cReceiveByte(1);
	error |= i2cWaitForComplete();
    1714:	12 29       	or	r17, r2
	*seconds = i2cGetReceivedByte();	// Get seconds
	error |= i2cWaitForComplete();
    1716:	13 29       	or	r17, r3

	i2cReceiveByte(1);
	error |= i2cWaitForComplete();
    1718:	14 29       	or	r17, r4
	*minutes = i2cGetReceivedByte();	// Get minutes
	error |= i2cWaitForComplete();
    171a:	15 29       	or	r17, r5

	i2cReceiveByte(1);
	error |= i2cWaitForComplete();
    171c:	16 29       	or	r17, r6
	*hours = i2cGetReceivedByte();	// Get hours
	error |= i2cWaitForComplete();
    171e:	17 29       	or	r17, r7

	i2cReceiveByte(0);
	error |= i2cWaitForComplete();
    1720:	10 2b       	or	r17, r16
	*days = i2cGetReceivedByte();	// Get days
	error |= i2cWaitForComplete();

	i2cSendStop();
    1722:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <i2cSendStop>

	i2cEnableInt();
    1726:	0e 94 65 0c 	call	0x18ca	; 0x18ca <i2cEnableInt>

	*seconds = (*seconds & 0x0F) + ((*seconds & 0xF0) >> 4)*10;
    172a:	f7 01       	movw	r30, r14
    172c:	40 81       	ld	r20, Z
    172e:	84 2f       	mov	r24, r20
    1730:	82 95       	swap	r24
    1732:	8f 70       	andi	r24, 0x0F	; 15
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	9c 01       	movw	r18, r24
    1738:	a3 e0       	ldi	r26, 0x03	; 3
    173a:	22 0f       	add	r18, r18
    173c:	33 1f       	adc	r19, r19
    173e:	aa 95       	dec	r26
    1740:	e1 f7       	brne	.-8      	; 0x173a <getTime+0x110>
    1742:	88 0f       	add	r24, r24
    1744:	99 1f       	adc	r25, r25
    1746:	28 0f       	add	r18, r24
    1748:	39 1f       	adc	r19, r25
    174a:	4f 70       	andi	r20, 0x0F	; 15
    174c:	42 0f       	add	r20, r18
    174e:	40 83       	st	Z, r20
	*minutes = (*minutes & 0x0F) + ((*minutes & 0xF0) >> 4)*10;
    1750:	f6 01       	movw	r30, r12
    1752:	40 81       	ld	r20, Z
    1754:	84 2f       	mov	r24, r20
    1756:	82 95       	swap	r24
    1758:	8f 70       	andi	r24, 0x0F	; 15
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	9c 01       	movw	r18, r24
    175e:	63 e0       	ldi	r22, 0x03	; 3
    1760:	22 0f       	add	r18, r18
    1762:	33 1f       	adc	r19, r19
    1764:	6a 95       	dec	r22
    1766:	e1 f7       	brne	.-8      	; 0x1760 <getTime+0x136>
    1768:	88 0f       	add	r24, r24
    176a:	99 1f       	adc	r25, r25
    176c:	28 0f       	add	r18, r24
    176e:	39 1f       	adc	r19, r25
    1770:	4f 70       	andi	r20, 0x0F	; 15
    1772:	42 0f       	add	r20, r18
    1774:	40 83       	st	Z, r20
	*hours = (*hours & 0x0F) + ((*hours & 0b00110000) >> 4)*10;
    1776:	f5 01       	movw	r30, r10
    1778:	40 81       	ld	r20, Z
    177a:	84 2f       	mov	r24, r20
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	80 73       	andi	r24, 0x30	; 48
    1780:	90 70       	andi	r25, 0x00	; 0
    1782:	24 e0       	ldi	r18, 0x04	; 4
    1784:	95 95       	asr	r25
    1786:	87 95       	ror	r24
    1788:	2a 95       	dec	r18
    178a:	e1 f7       	brne	.-8      	; 0x1784 <getTime+0x15a>
    178c:	9c 01       	movw	r18, r24
    178e:	03 e0       	ldi	r16, 0x03	; 3
    1790:	22 0f       	add	r18, r18
    1792:	33 1f       	adc	r19, r19
    1794:	0a 95       	dec	r16
    1796:	e1 f7       	brne	.-8      	; 0x1790 <getTime+0x166>
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	28 0f       	add	r18, r24
    179e:	39 1f       	adc	r19, r25
    17a0:	4f 70       	andi	r20, 0x0F	; 15
    17a2:	42 0f       	add	r20, r18
    17a4:	40 83       	st	Z, r20
	*days = (*days & 0x0F) + ((*days & 0xF0) >> 4)*10;
    17a6:	f4 01       	movw	r30, r8
    17a8:	40 81       	ld	r20, Z
    17aa:	84 2f       	mov	r24, r20
    17ac:	82 95       	swap	r24
    17ae:	8f 70       	andi	r24, 0x0F	; 15
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	9c 01       	movw	r18, r24
    17b4:	a3 e0       	ldi	r26, 0x03	; 3
    17b6:	22 0f       	add	r18, r18
    17b8:	33 1f       	adc	r19, r19
    17ba:	aa 95       	dec	r26
    17bc:	e1 f7       	brne	.-8      	; 0x17b6 <getTime+0x18c>
    17be:	88 0f       	add	r24, r24
    17c0:	99 1f       	adc	r25, r25
    17c2:	28 0f       	add	r18, r24
    17c4:	39 1f       	adc	r19, r25
    17c6:	4f 70       	andi	r20, 0x0F	; 15
    17c8:	42 0f       	add	r20, r18
    17ca:	40 83       	st	Z, r20

	return error;

}
    17cc:	89 81       	ldd	r24, Y+1	; 0x01
    17ce:	81 2b       	or	r24, r17
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	cf 91       	pop	r28
    17dc:	df 91       	pop	r29
    17de:	1f 91       	pop	r17
    17e0:	0f 91       	pop	r16
    17e2:	ff 90       	pop	r15
    17e4:	ef 90       	pop	r14
    17e6:	df 90       	pop	r13
    17e8:	cf 90       	pop	r12
    17ea:	bf 90       	pop	r11
    17ec:	af 90       	pop	r10
    17ee:	9f 90       	pop	r9
    17f0:	8f 90       	pop	r8
    17f2:	7f 90       	pop	r7
    17f4:	6f 90       	pop	r6
    17f6:	5f 90       	pop	r5
    17f8:	4f 90       	pop	r4
    17fa:	3f 90       	pop	r3
    17fc:	2f 90       	pop	r2
    17fe:	08 95       	ret

00001800 <i2cSetTheDamnTWBRMyself>:
//For some reason, the TWBR calculation doesn't work out properly, so we're
//going to set it ourself, damnit
void i2cSetTheDamnTWBRMyself(uint8_t myOwnTWBR)
{
	
	TWBR = myOwnTWBR;
    1800:	80 93 b8 00 	sts	0x00B8, r24
	
}
    1804:	08 95       	ret

00001806 <i2cSetBitrate>:
	// SCL freq = F_CPU/(16+2*TWBR))
	#ifdef TWPS0
		// for processors with additional bitrate division (mega12)
		// SCL freq = F_CPU/(16+2*TWBR*4^TWPS)
		// set TWPS to zero
		TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    1806:	20 91 b9 00 	lds	r18, 0x00B9
    180a:	2c 7f       	andi	r18, 0xFC	; 252
    180c:	20 93 b9 00 	sts	0x00B9, r18
	#endif
	// calculate bitrate division	
	//printf("1: %d\n", (uint16_t)(799./100.));
	bitrate_div = (uint8_t)(((float)F_CPU/(float)10001))/(float)bitrateKHz;
    1810:	a0 e0       	ldi	r26, 0x00	; 0
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	bc 01       	movw	r22, r24
    1816:	cd 01       	movw	r24, r26
    1818:	0e 94 23 35 	call	0x6a46	; 0x6a46 <__floatunsisf>
    181c:	9b 01       	movw	r18, r22
    181e:	ac 01       	movw	r20, r24
    1820:	60 e0       	ldi	r22, 0x00	; 0
    1822:	70 e0       	ldi	r23, 0x00	; 0
    1824:	8f e7       	ldi	r24, 0x7F	; 127
    1826:	93 e4       	ldi	r25, 0x43	; 67
    1828:	0e 94 8a 34 	call	0x6914	; 0x6914 <__divsf3>
    182c:	0e 94 f7 34 	call	0x69ee	; 0x69ee <__fixunssfsi>
	if(bitrate_div >= 16)
    1830:	60 31       	cpi	r22, 0x10	; 16
    1832:	30 f0       	brcs	.+12     	; 0x1840 <i2cSetBitrate+0x3a>
		bitrate_div = (bitrate_div-16)/2;
    1834:	86 2f       	mov	r24, r22
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	40 97       	sbiw	r24, 0x10	; 16
    183a:	95 95       	asr	r25
    183c:	87 95       	ror	r24
    183e:	68 2f       	mov	r22, r24
	//printf("bitrate: %d\n", bitrate_div);
	//printf("k: %d\n", bitrateKHz);
	TWBR = bitrate_div;
    1840:	60 93 b8 00 	sts	0x00B8, r22
	
	//TWSR |= _BV(TWPS0) | _BV(TWPS1);
	//TWBR = 97;
	
}
    1844:	08 95       	ret

00001846 <i2cInit>:
	sbi(PORTC, 1);	// i2c SDA on ATmega163,323,16,32,etc
	sbi(PORTD, 0);	// i2c SCL on ATmega128,64
	sbi(PORTD, 1);	// i2c SDA on ATmega128,64*/

	// clear SlaveReceive and SlaveTransmit handler to null
	i2cSlaveReceive = 0;
    1846:	10 92 21 03 	sts	0x0321, r1
    184a:	10 92 20 03 	sts	0x0320, r1
	i2cSlaveTransmit = 0;
    184e:	10 92 25 03 	sts	0x0325, r1
    1852:	10 92 24 03 	sts	0x0324, r1
	// set i2c bit rate to 100KHz
	i2cSetBitrate(100);
    1856:	84 e6       	ldi	r24, 0x64	; 100
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	0e 94 03 0c 	call	0x1806	; 0x1806 <i2cSetBitrate>
	// enable TWI (two-wire interface)
	TWCR |= _BV(TWEN);
    185e:	ec eb       	ldi	r30, 0xBC	; 188
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	84 60       	ori	r24, 0x04	; 4
    1866:	80 83       	st	Z, r24
	// set state
	I2cState = I2C_IDLE;
    1868:	10 92 d8 02 	sts	0x02D8, r1
	// enable TWI interrupt and slave address ACK
	TWCR |= _BV(TWIE) | _BV(TWEA);
    186c:	80 81       	ld	r24, Z
    186e:	81 64       	ori	r24, 0x41	; 65
    1870:	80 83       	st	Z, r24
	//outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
	// enable interrupts
	sei();
    1872:	78 94       	sei
}
    1874:	08 95       	ret

00001876 <i2cSetLocalDeviceAddr>:
	
}

//Mask is right-adjusted
void i2cSetLocalDeviceAddr(uint8_t deviceAddr, uint8_t maskAddr, uint8_t genCallEn, uint8_t wsGenCallEn, uint8_t wsGenCallAddr)
{
    1876:	0f 93       	push	r16
	// set local device address (used in slave mode only)
	TWAR =  ((deviceAddr&0xFE) | (genCallEn?1:0));
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	41 11       	cpse	r20, r1
    187c:	91 e0       	ldi	r25, 0x01	; 1
    187e:	8e 7f       	andi	r24, 0xFE	; 254
    1880:	98 2b       	or	r25, r24
    1882:	90 93 ba 00 	sts	0x00BA, r25
	TWAMR = maskAddr << 1;
    1886:	66 0f       	add	r22, r22
    1888:	60 93 bd 00 	sts	0x00BD, r22
	I2cWhiteStarGeneralEn = wsGenCallEn;
    188c:	20 93 db 02 	sts	0x02DB, r18
	I2cWhiteStarGeneralAddr = wsGenCallAddr;
    1890:	00 93 da 02 	sts	0x02DA, r16
	
}
    1894:	0f 91       	pop	r16
    1896:	08 95       	ret

00001898 <i2cSetSlaveReceiveHandler>:

void i2cSetSlaveReceiveHandler(void (*i2cSlaveRx_func)(uint8_t receiveDataLength, uint8_t* recieveData))
{
	i2cSlaveReceive = i2cSlaveRx_func;
    1898:	90 93 21 03 	sts	0x0321, r25
    189c:	80 93 20 03 	sts	0x0320, r24
}
    18a0:	08 95       	ret

000018a2 <i2cSetSlaveTransmitHandler>:

void i2cSetSlaveTransmitHandler(uint8_t (*i2cSlaveTx_func)(uint8_t transmitDataLengthMax, uint8_t* transmitData))
{
	i2cSlaveTransmit = i2cSlaveTx_func;
    18a2:	90 93 25 03 	sts	0x0325, r25
    18a6:	80 93 24 03 	sts	0x0324, r24
}
    18aa:	08 95       	ret

000018ac <i2cSendStart>:

inline void i2cSendStart(void)
{
	WRITE_sda();
    18ac:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
    18ae:	84 ea       	ldi	r24, 0xA4	; 164
    18b0:	80 93 bc 00 	sts	0x00BC, r24
}
    18b4:	08 95       	ret

000018b6 <i2cSendStop>:

inline void i2cSendStop(void)
{
	// transmit stop condition,
	// leave with TWEA on for slave receiving
	TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWSTO) | _BV(TWEN);
    18b6:	84 ed       	ldi	r24, 0xD4	; 212
    18b8:	80 93 bc 00 	sts	0x00BC, r24
}
    18bc:	08 95       	ret

000018be <i2cDisableInt>:

inline void i2cDisableInt(void)
{
	// disable TWI interrupt
	TWCR &= ~_BV(TWIE);
    18be:	ec eb       	ldi	r30, 0xBC	; 188
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	8e 7f       	andi	r24, 0xFE	; 254
    18c6:	80 83       	st	Z, r24
}
    18c8:	08 95       	ret

000018ca <i2cEnableInt>:

inline void i2cEnableInt(void)
{
	TWCR  |= _BV(TWIE);
    18ca:	ec eb       	ldi	r30, 0xBC	; 188
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	81 60       	ori	r24, 0x01	; 1
    18d2:	80 83       	st	Z, r24
}
    18d4:	08 95       	ret

000018d6 <i2cWaitForComplete>:

uint8_t i2cWaitForComplete(void)
{
    18d6:	df 93       	push	r29
    18d8:	cf 93       	push	r28
    18da:	0f 92       	push	r0
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
	// wait for i2c interface to complete operation
	volatile uint8_t i = 0;
    18e0:	19 82       	std	Y+1, r1	; 0x01
    18e2:	28 eb       	ldi	r18, 0xB8	; 184
    18e4:	3b e0       	ldi	r19, 0x0B	; 11
    18e6:	06 c0       	rjmp	.+12     	; 0x18f4 <i2cWaitForComplete+0x1e>
	while( !(TWCR & _BV(TWINT) ) && i < 100 )
	{
		i++;
    18e8:	89 81       	ldd	r24, Y+1	; 0x01
    18ea:	8f 5f       	subi	r24, 0xFF	; 255
    18ec:	89 83       	std	Y+1, r24	; 0x01
    18ee:	c9 01       	movw	r24, r18
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	f1 f7       	brne	.-4      	; 0x18f0 <i2cWaitForComplete+0x1a>

uint8_t i2cWaitForComplete(void)
{
	// wait for i2c interface to complete operation
	volatile uint8_t i = 0;
	while( !(TWCR & _BV(TWINT) ) && i < 100 )
    18f4:	80 91 bc 00 	lds	r24, 0x00BC
    18f8:	87 fd       	sbrc	r24, 7
    18fa:	03 c0       	rjmp	.+6      	; 0x1902 <i2cWaitForComplete+0x2c>
    18fc:	89 81       	ldd	r24, Y+1	; 0x01
    18fe:	84 36       	cpi	r24, 0x64	; 100
    1900:	98 f3       	brcs	.-26     	; 0x18e8 <i2cWaitForComplete+0x12>
	{
		i++;
		_delay_ms(1);
	}
	if(i >= 99)
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	83 36       	cpi	r24, 0x63	; 99
    1908:	08 f0       	brcs	.+2      	; 0x190c <i2cWaitForComplete+0x36>
    190a:	91 e0       	ldi	r25, 0x01	; 1
	{
		return 1;
	}
	return 0;
}
    190c:	89 2f       	mov	r24, r25
    190e:	0f 90       	pop	r0
    1910:	cf 91       	pop	r28
    1912:	df 91       	pop	r29
    1914:	08 95       	ret

00001916 <i2cSendByte>:

inline void i2cSendByte(uint8_t data)
{
	WRITE_sda();
    1916:	3c 9a       	sbi	0x07, 4	; 7
	// save data to the TWDR
	TWDR = data;
    1918:	80 93 bb 00 	sts	0x00BB, r24
	// begin send
	TWCR = _BV(TWINT)|_BV(TWEN);
    191c:	84 e8       	ldi	r24, 0x84	; 132
    191e:	80 93 bc 00 	sts	0x00BC, r24
}
    1922:	08 95       	ret

00001924 <i2cReceiveByte>:

inline void i2cReceiveByte(uint8_t ackFlag)
{
	// begin receive over i2c
	if( ackFlag )
    1924:	88 23       	and	r24, r24
    1926:	29 f0       	breq	.+10     	; 0x1932 <i2cReceiveByte+0xe>
	{
		// ackFlag = TRUE: ACK the recevied data
		TWCR = (TWCR & TWCR_CMD_MASK) | _BV(TWINT) | _BV(TWEA);
    1928:	80 91 bc 00 	lds	r24, 0x00BC
    192c:	8f 70       	andi	r24, 0x0F	; 15
    192e:	80 6c       	ori	r24, 0xC0	; 192
    1930:	04 c0       	rjmp	.+8      	; 0x193a <i2cReceiveByte+0x16>
	}
	else
	{
		// ackFlag = FALSE: NACK the recevied data
		TWCR = (TWCR & TWCR_CMD_MASK) | _BV(TWINT);
    1932:	80 91 bc 00 	lds	r24, 0x00BC
    1936:	8f 70       	andi	r24, 0x0F	; 15
    1938:	80 68       	ori	r24, 0x80	; 128
    193a:	80 93 bc 00 	sts	0x00BC, r24
    193e:	08 95       	ret

00001940 <i2cGetReceivedByte>:
}

inline uint8_t i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( TWDR );
    1940:	80 91 bb 00 	lds	r24, 0x00BB
}
    1944:	08 95       	ret

00001946 <i2cGetStatus>:

inline uint8_t i2cGetStatus(void)
{
	// retieve current i2c status from i2c TWSR
	return( TWSR );
    1946:	80 91 b9 00 	lds	r24, 0x00B9
}
    194a:	08 95       	ret

0000194c <i2cMasterSend>:

void i2cMasterSend(uint8_t deviceAddr, uint8_t length, uint8_t* data)
{
    194c:	98 2f       	mov	r25, r24
	uint8_t i;
	// wait for interface to be ready
	while(I2cState);
    194e:	80 91 d8 02 	lds	r24, 0x02D8
    1952:	88 23       	and	r24, r24
    1954:	e1 f7       	brne	.-8      	; 0x194e <i2cMasterSend+0x2>
	// set state
	I2cState = I2C_MASTER_TX;
    1956:	82 e0       	ldi	r24, 0x02	; 2
    1958:	80 93 d8 02 	sts	0x02D8, r24
	// save data
	I2cDeviceAddrRW = (deviceAddr & 0xFE);	// RW cleared: write operation
    195c:	9e 7f       	andi	r25, 0xFE	; 254
    195e:	90 93 d9 02 	sts	0x02D9, r25
    1962:	ac ed       	ldi	r26, 0xDC	; 220
    1964:	b2 e0       	ldi	r27, 0x02	; 2
    1966:	fa 01       	movw	r30, r20
    1968:	02 c0       	rjmp	.+4      	; 0x196e <i2cMasterSend+0x22>
	for(i=0; i<length; i++)
		I2cSendData[i] = *data++;
    196a:	81 91       	ld	r24, Z+
    196c:	8d 93       	st	X+, r24
	while(I2cState);
	// set state
	I2cState = I2C_MASTER_TX;
	// save data
	I2cDeviceAddrRW = (deviceAddr & 0xFE);	// RW cleared: write operation
	for(i=0; i<length; i++)
    196e:	8e 2f       	mov	r24, r30
    1970:	84 1b       	sub	r24, r20
    1972:	86 17       	cp	r24, r22
    1974:	d0 f3       	brcs	.-12     	; 0x196a <i2cMasterSend+0x1e>
		I2cSendData[i] = *data++;
	I2cSendDataIndex = 0;
    1976:	10 92 fc 02 	sts	0x02FC, r1
	I2cSendDataLength = length;
    197a:	60 93 fd 02 	sts	0x02FD, r22
	i2cSlaveTransmit = i2cSlaveTx_func;
}

inline void i2cSendStart(void)
{
	WRITE_sda();
    197e:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
    1980:	84 ea       	ldi	r24, 0xA4	; 164
    1982:	80 93 bc 00 	sts	0x00BC, r24
		I2cSendData[i] = *data++;
	I2cSendDataIndex = 0;
	I2cSendDataLength = length;
	// send start condition
	i2cSendStart();
}
    1986:	08 95       	ret

00001988 <i2cMasterReceive>:

void i2cMasterReceive(uint8_t deviceAddr, uint8_t length, uint8_t* data)
{
    1988:	98 2f       	mov	r25, r24
	uint8_t i;
	// wait for interface to be ready
	while(I2cState);
    198a:	80 91 d8 02 	lds	r24, 0x02D8
    198e:	88 23       	and	r24, r24
    1990:	e1 f7       	brne	.-8      	; 0x198a <i2cMasterReceive+0x2>
	// set state
	I2cState = I2C_MASTER_RX;
    1992:	83 e0       	ldi	r24, 0x03	; 3
    1994:	80 93 d8 02 	sts	0x02D8, r24
	// save data
	I2cDeviceAddrRW = (deviceAddr|0x01);	// RW set: read operation
    1998:	91 60       	ori	r25, 0x01	; 1
    199a:	90 93 d9 02 	sts	0x02D9, r25
	I2cReceiveDataIndex = 0;
    199e:	10 92 1e 03 	sts	0x031E, r1
	I2cReceiveDataLength = length;
    19a2:	60 93 1f 03 	sts	0x031F, r22
	i2cSlaveTransmit = i2cSlaveTx_func;
}

inline void i2cSendStart(void)
{
	WRITE_sda();
    19a6:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
    19a8:	84 ea       	ldi	r24, 0xA4	; 164
    19aa:	80 93 bc 00 	sts	0x00BC, r24
	I2cReceiveDataIndex = 0;
	I2cReceiveDataLength = length;
	// send start condition
	i2cSendStart();
	// wait for data
	while(I2cState);
    19ae:	80 91 d8 02 	lds	r24, 0x02D8
    19b2:	88 23       	and	r24, r24
    19b4:	e1 f7       	brne	.-8      	; 0x19ae <i2cMasterReceive+0x26>
    19b6:	ae ef       	ldi	r26, 0xFE	; 254
    19b8:	b2 e0       	ldi	r27, 0x02	; 2
    19ba:	fa 01       	movw	r30, r20
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <i2cMasterReceive+0x3a>
	// return data
	for(i=0; i<length; i++)
		*data++ = I2cReceiveData[i];
    19be:	8d 91       	ld	r24, X+
    19c0:	81 93       	st	Z+, r24
	// send start condition
	i2cSendStart();
	// wait for data
	while(I2cState);
	// return data
	for(i=0; i<length; i++)
    19c2:	8e 2f       	mov	r24, r30
    19c4:	84 1b       	sub	r24, r20
    19c6:	86 17       	cp	r24, r22
    19c8:	d0 f3       	brcs	.-12     	; 0x19be <i2cMasterReceive+0x36>
		*data++ = I2cReceiveData[i];
}
    19ca:	08 95       	ret

000019cc <i2cMasterSendNI>:

uint8_t i2cMasterSendNI(uint8_t deviceAddr, uint8_t length, uint8_t* data)
{
    19cc:	0f 93       	push	r16
    19ce:	1f 93       	push	r17
    19d0:	cf 93       	push	r28
    19d2:	df 93       	push	r29
    19d4:	18 2f       	mov	r17, r24
    19d6:	06 2f       	mov	r16, r22
    19d8:	ea 01       	movw	r28, r20
	uint8_t retval = I2C_OK;

	// disable TWI interrupt
	TWCR &= ~_BV(TWIE);
    19da:	80 91 bc 00 	lds	r24, 0x00BC
    19de:	8e 7f       	andi	r24, 0xFE	; 254
    19e0:	80 93 bc 00 	sts	0x00BC, r24
	i2cSlaveTransmit = i2cSlaveTx_func;
}

inline void i2cSendStart(void)
{
	WRITE_sda();
    19e4:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
    19e6:	84 ea       	ldi	r24, 0xA4	; 164
    19e8:	80 93 bc 00 	sts	0x00BC, r24
	// disable TWI interrupt
	TWCR &= ~_BV(TWIE);

	// send start condition
	i2cSendStart();
	i2cWaitForComplete();
    19ec:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>

	// send device address with write
	i2cSendByte( deviceAddr & 0xFE );
    19f0:	1e 7f       	andi	r17, 0xFE	; 254
	return 0;
}

inline void i2cSendByte(uint8_t data)
{
	WRITE_sda();
    19f2:	3c 9a       	sbi	0x07, 4	; 7
	// save data to the TWDR
	TWDR = data;
    19f4:	10 93 bb 00 	sts	0x00BB, r17
	// begin send
	TWCR = _BV(TWINT)|_BV(TWEN);
    19f8:	84 e8       	ldi	r24, 0x84	; 132
    19fa:	80 93 bc 00 	sts	0x00BC, r24
	i2cSendStart();
	i2cWaitForComplete();

	// send device address with write
	i2cSendByte( deviceAddr & 0xFE );
	i2cWaitForComplete();
    19fe:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>

	// check if device is present and live
	if( TWSR == TW_MT_SLA_ACK )
    1a02:	80 91 b9 00 	lds	r24, 0x00B9
    1a06:	88 31       	cpi	r24, 0x18	; 24
    1a08:	61 f0       	breq	.+24     	; 0x1a22 <i2cMasterSendNI+0x56>
    1a0a:	91 e0       	ldi	r25, 0x01	; 1
    1a0c:	0e c0       	rjmp	.+28     	; 0x1a2a <i2cMasterSendNI+0x5e>
	{
		// send data
		while(length)
		{
			i2cSendByte( *data++ );
    1a0e:	89 91       	ld	r24, Y+
	return 0;
}

inline void i2cSendByte(uint8_t data)
{
	WRITE_sda();
    1a10:	3c 9a       	sbi	0x07, 4	; 7
	// save data to the TWDR
	TWDR = data;
    1a12:	80 93 bb 00 	sts	0x00BB, r24
	// begin send
	TWCR = _BV(TWINT)|_BV(TWEN);
    1a16:	10 93 bc 00 	sts	0x00BC, r17
	{
		// send data
		while(length)
		{
			i2cSendByte( *data++ );
			i2cWaitForComplete();
    1a1a:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
			length--;
    1a1e:	01 50       	subi	r16, 0x01	; 1
    1a20:	01 c0       	rjmp	.+2      	; 0x1a24 <i2cMasterSendNI+0x58>
{
	WRITE_sda();
	// save data to the TWDR
	TWDR = data;
	// begin send
	TWCR = _BV(TWINT)|_BV(TWEN);
    1a22:	14 e8       	ldi	r17, 0x84	; 132

	// check if device is present and live
	if( TWSR == TW_MT_SLA_ACK )
	{
		// send data
		while(length)
    1a24:	00 23       	and	r16, r16
    1a26:	99 f7       	brne	.-26     	; 0x1a0e <i2cMasterSendNI+0x42>
    1a28:	90 e0       	ldi	r25, 0x00	; 0

inline void i2cSendStop(void)
{
	// transmit stop condition,
	// leave with TWEA on for slave receiving
	TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWSTO) | _BV(TWEN);
    1a2a:	84 ed       	ldi	r24, 0xD4	; 212
    1a2c:	80 93 bc 00 	sts	0x00BC, r24
	}

	// transmit stop condition
	// leave with TWEA on for slave receiving
	i2cSendStop();
	while( !(TWCR & _BV(TWSTO)) );
    1a30:	80 91 bc 00 	lds	r24, 0x00BC
    1a34:	84 ff       	sbrs	r24, 4
    1a36:	fc cf       	rjmp	.-8      	; 0x1a30 <i2cMasterSendNI+0x64>

	// enable TWI interrupt
	TWCR |= _BV(TWIE);
    1a38:	80 91 bc 00 	lds	r24, 0x00BC
    1a3c:	81 60       	ori	r24, 0x01	; 1
    1a3e:	80 93 bc 00 	sts	0x00BC, r24

	return retval;
}
    1a42:	89 2f       	mov	r24, r25
    1a44:	df 91       	pop	r29
    1a46:	cf 91       	pop	r28
    1a48:	1f 91       	pop	r17
    1a4a:	0f 91       	pop	r16
    1a4c:	08 95       	ret

00001a4e <i2cMasterReceiveNI>:

uint8_t i2cMasterReceiveNI(uint8_t deviceAddr, uint8_t length, uint8_t *data)
{
    1a4e:	0f 93       	push	r16
    1a50:	1f 93       	push	r17
    1a52:	cf 93       	push	r28
    1a54:	df 93       	push	r29
    1a56:	18 2f       	mov	r17, r24
    1a58:	06 2f       	mov	r16, r22
    1a5a:	ea 01       	movw	r28, r20
	uint8_t retval = I2C_OK;

	// disable TWI interrupt
	TWCR &= ~_BV(TWIE);
    1a5c:	80 91 bc 00 	lds	r24, 0x00BC
    1a60:	8e 7f       	andi	r24, 0xFE	; 254
    1a62:	80 93 bc 00 	sts	0x00BC, r24
	i2cSlaveTransmit = i2cSlaveTx_func;
}

inline void i2cSendStart(void)
{
	WRITE_sda();
    1a66:	3c 9a       	sbi	0x07, 4	; 7
	// send start condition
	TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
    1a68:	84 ea       	ldi	r24, 0xA4	; 164
    1a6a:	80 93 bc 00 	sts	0x00BC, r24
	// disable TWI interrupt
	TWCR &= ~_BV(TWIE);

	// send start condition
	i2cSendStart();
	i2cWaitForComplete();
    1a6e:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>

	// send device address with read
	i2cSendByte( deviceAddr | 0x01 );
    1a72:	11 60       	ori	r17, 0x01	; 1
	return 0;
}

inline void i2cSendByte(uint8_t data)
{
	WRITE_sda();
    1a74:	3c 9a       	sbi	0x07, 4	; 7
	// save data to the TWDR
	TWDR = data;
    1a76:	10 93 bb 00 	sts	0x00BB, r17
	// begin send
	TWCR = _BV(TWINT)|_BV(TWEN);
    1a7a:	84 e8       	ldi	r24, 0x84	; 132
    1a7c:	80 93 bc 00 	sts	0x00BC, r24
	i2cSendStart();
	i2cWaitForComplete();

	// send device address with read
	i2cSendByte( deviceAddr | 0x01 );
	i2cWaitForComplete();
    1a80:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>

	// check if device is present and live
	if( TWSR == TW_MR_SLA_ACK)
    1a84:	80 91 b9 00 	lds	r24, 0x00B9
    1a88:	80 34       	cpi	r24, 0x40	; 64
    1a8a:	59 f0       	breq	.+22     	; 0x1aa2 <i2cMasterReceiveNI+0x54>
    1a8c:	91 e0       	ldi	r25, 0x01	; 1
    1a8e:	14 c0       	rjmp	.+40     	; 0x1ab8 <i2cMasterReceiveNI+0x6a>
	{
		// accept receive data and ack it
		while(length > 1)
		{
			i2cReceiveByte(TRUE);
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	0e 94 92 0c 	call	0x1924	; 0x1924 <i2cReceiveByte>
			i2cWaitForComplete();
    1a96:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
}

inline uint8_t i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( TWDR );
    1a9a:	80 91 bb 00 	lds	r24, 0x00BB
		// accept receive data and ack it
		while(length > 1)
		{
			i2cReceiveByte(TRUE);
			i2cWaitForComplete();
			*data++ = i2cGetReceivedByte();
    1a9e:	89 93       	st	Y+, r24
			// decrement length
			length--;
    1aa0:	01 50       	subi	r16, 0x01	; 1

	// check if device is present and live
	if( TWSR == TW_MR_SLA_ACK)
	{
		// accept receive data and ack it
		while(length > 1)
    1aa2:	02 30       	cpi	r16, 0x02	; 2
    1aa4:	a8 f7       	brcc	.-22     	; 0x1a90 <i2cMasterReceiveNI+0x42>
			// decrement length
			length--;
		}

		// accept receive data and nack it (last-byte signal)
		i2cReceiveByte(FALSE);
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	0e 94 92 0c 	call	0x1924	; 0x1924 <i2cReceiveByte>
		i2cWaitForComplete();
    1aac:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
}

inline uint8_t i2cGetReceivedByte(void)
{
	// retieve received data byte from i2c TWDR
	return( TWDR );
    1ab0:	80 91 bb 00 	lds	r24, 0x00BB
		}

		// accept receive data and nack it (last-byte signal)
		i2cReceiveByte(FALSE);
		i2cWaitForComplete();
		*data++ = i2cGetReceivedByte();
    1ab4:	88 83       	st	Y, r24
    1ab6:	90 e0       	ldi	r25, 0x00	; 0

inline void i2cSendStop(void)
{
	// transmit stop condition,
	// leave with TWEA on for slave receiving
	TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWSTO) | _BV(TWEN);
    1ab8:	84 ed       	ldi	r24, 0xD4	; 212
    1aba:	80 93 bc 00 	sts	0x00BC, r24
	// transmit stop condition
	// leave with TWEA on for slave receiving
	i2cSendStop();

	// enable TWI interrupt
	TWCR |= _BV(TWIE);
    1abe:	80 91 bc 00 	lds	r24, 0x00BC
    1ac2:	81 60       	ori	r24, 0x01	; 1
    1ac4:	80 93 bc 00 	sts	0x00BC, r24

	return retval;
}
    1ac8:	89 2f       	mov	r24, r25
    1aca:	df 91       	pop	r29
    1acc:	cf 91       	pop	r28
    1ace:	1f 91       	pop	r17
    1ad0:	0f 91       	pop	r16
    1ad2:	08 95       	ret

00001ad4 <__vector_26>:
}
*/

//! I2C (TWI) interrupt service routine
ISR(TWI_vect)
{
    1ad4:	1f 92       	push	r1
    1ad6:	0f 92       	push	r0
    1ad8:	0f b6       	in	r0, 0x3f	; 63
    1ada:	0f 92       	push	r0
    1adc:	11 24       	eor	r1, r1
    1ade:	2f 93       	push	r18
    1ae0:	3f 93       	push	r19
    1ae2:	4f 93       	push	r20
    1ae4:	5f 93       	push	r21
    1ae6:	6f 93       	push	r22
    1ae8:	7f 93       	push	r23
    1aea:	8f 93       	push	r24
    1aec:	9f 93       	push	r25
    1aee:	af 93       	push	r26
    1af0:	bf 93       	push	r27
    1af2:	ef 93       	push	r30
    1af4:	ff 93       	push	r31
	//lprintf("In I2C int.\n");
	// read status bits
	uint8_t status = TWSR & TW_STATUS_MASK;
    1af6:	80 91 b9 00 	lds	r24, 0x00B9

	switch(status)
    1afa:	88 7f       	andi	r24, 0xF8	; 248
    1afc:	80 36       	cpi	r24, 0x60	; 96
    1afe:	09 f4       	brne	.+2      	; 0x1b02 <__vector_26+0x2e>
    1b00:	a0 c0       	rjmp	.+320    	; 0x1c42 <__vector_26+0x16e>
    1b02:	81 36       	cpi	r24, 0x61	; 97
    1b04:	70 f5       	brcc	.+92     	; 0x1b62 <__vector_26+0x8e>
    1b06:	88 32       	cpi	r24, 0x28	; 40
    1b08:	09 f4       	brne	.+2      	; 0x1b0c <__vector_26+0x38>
    1b0a:	5f c0       	rjmp	.+190    	; 0x1bca <__vector_26+0xf6>
    1b0c:	89 32       	cpi	r24, 0x29	; 41
    1b0e:	98 f4       	brcc	.+38     	; 0x1b36 <__vector_26+0x62>
    1b10:	80 31       	cpi	r24, 0x10	; 16
    1b12:	09 f4       	brne	.+2      	; 0x1b16 <__vector_26+0x42>
    1b14:	57 c0       	rjmp	.+174    	; 0x1bc4 <__vector_26+0xf0>
    1b16:	81 31       	cpi	r24, 0x11	; 17
    1b18:	38 f4       	brcc	.+14     	; 0x1b28 <__vector_26+0x54>
    1b1a:	88 23       	and	r24, r24
    1b1c:	09 f4       	brne	.+2      	; 0x1b20 <__vector_26+0x4c>
    1b1e:	16 c1       	rjmp	.+556    	; 0x1d4c <__vector_26+0x278>
    1b20:	88 30       	cpi	r24, 0x08	; 8
    1b22:	09 f0       	breq	.+2      	; 0x1b26 <__vector_26+0x52>
    1b24:	1a c1       	rjmp	.+564    	; 0x1d5a <__vector_26+0x286>
    1b26:	4e c0       	rjmp	.+156    	; 0x1bc4 <__vector_26+0xf0>
    1b28:	88 31       	cpi	r24, 0x18	; 24
    1b2a:	09 f4       	brne	.+2      	; 0x1b2e <__vector_26+0x5a>
    1b2c:	4e c0       	rjmp	.+156    	; 0x1bca <__vector_26+0xf6>
    1b2e:	80 32       	cpi	r24, 0x20	; 32
    1b30:	09 f0       	breq	.+2      	; 0x1b34 <__vector_26+0x60>
    1b32:	13 c1       	rjmp	.+550    	; 0x1d5a <__vector_26+0x286>
    1b34:	69 c0       	rjmp	.+210    	; 0x1c08 <__vector_26+0x134>
    1b36:	80 34       	cpi	r24, 0x40	; 64
    1b38:	09 f4       	brne	.+2      	; 0x1b3c <__vector_26+0x68>
    1b3a:	78 c0       	rjmp	.+240    	; 0x1c2c <__vector_26+0x158>
    1b3c:	81 34       	cpi	r24, 0x41	; 65
    1b3e:	38 f4       	brcc	.+14     	; 0x1b4e <__vector_26+0x7a>
    1b40:	80 33       	cpi	r24, 0x30	; 48
    1b42:	09 f4       	brne	.+2      	; 0x1b46 <__vector_26+0x72>
    1b44:	61 c0       	rjmp	.+194    	; 0x1c08 <__vector_26+0x134>
    1b46:	88 33       	cpi	r24, 0x38	; 56
    1b48:	09 f0       	breq	.+2      	; 0x1b4c <__vector_26+0x78>
    1b4a:	07 c1       	rjmp	.+526    	; 0x1d5a <__vector_26+0x286>
    1b4c:	5f c0       	rjmp	.+190    	; 0x1c0c <__vector_26+0x138>
    1b4e:	80 35       	cpi	r24, 0x50	; 80
    1b50:	09 f4       	brne	.+2      	; 0x1b54 <__vector_26+0x80>
    1b52:	60 c0       	rjmp	.+192    	; 0x1c14 <__vector_26+0x140>
    1b54:	88 35       	cpi	r24, 0x58	; 88
    1b56:	09 f4       	brne	.+2      	; 0x1b5a <__vector_26+0x86>
    1b58:	4b c0       	rjmp	.+150    	; 0x1bf0 <__vector_26+0x11c>
    1b5a:	88 34       	cpi	r24, 0x48	; 72
    1b5c:	09 f0       	breq	.+2      	; 0x1b60 <__vector_26+0x8c>
    1b5e:	fd c0       	rjmp	.+506    	; 0x1d5a <__vector_26+0x286>
    1b60:	53 c0       	rjmp	.+166    	; 0x1c08 <__vector_26+0x134>
    1b62:	88 39       	cpi	r24, 0x98	; 152
    1b64:	09 f4       	brne	.+2      	; 0x1b68 <__vector_26+0x94>
    1b66:	9d c0       	rjmp	.+314    	; 0x1ca2 <__vector_26+0x1ce>
    1b68:	89 39       	cpi	r24, 0x99	; 153
    1b6a:	b0 f4       	brcc	.+44     	; 0x1b98 <__vector_26+0xc4>
    1b6c:	88 37       	cpi	r24, 0x78	; 120
    1b6e:	09 f4       	brne	.+2      	; 0x1b72 <__vector_26+0x9e>
    1b70:	68 c0       	rjmp	.+208    	; 0x1c42 <__vector_26+0x16e>
    1b72:	89 37       	cpi	r24, 0x79	; 121
    1b74:	38 f4       	brcc	.+14     	; 0x1b84 <__vector_26+0xb0>
    1b76:	88 36       	cpi	r24, 0x68	; 104
    1b78:	09 f4       	brne	.+2      	; 0x1b7c <__vector_26+0xa8>
    1b7a:	63 c0       	rjmp	.+198    	; 0x1c42 <__vector_26+0x16e>
    1b7c:	80 37       	cpi	r24, 0x70	; 112
    1b7e:	09 f0       	breq	.+2      	; 0x1b82 <__vector_26+0xae>
    1b80:	ec c0       	rjmp	.+472    	; 0x1d5a <__vector_26+0x286>
    1b82:	5f c0       	rjmp	.+190    	; 0x1c42 <__vector_26+0x16e>
    1b84:	88 38       	cpi	r24, 0x88	; 136
    1b86:	09 f4       	brne	.+2      	; 0x1b8a <__vector_26+0xb6>
    1b88:	8c c0       	rjmp	.+280    	; 0x1ca2 <__vector_26+0x1ce>
    1b8a:	80 39       	cpi	r24, 0x90	; 144
    1b8c:	09 f4       	brne	.+2      	; 0x1b90 <__vector_26+0xbc>
    1b8e:	79 c0       	rjmp	.+242    	; 0x1c82 <__vector_26+0x1ae>
    1b90:	80 38       	cpi	r24, 0x80	; 128
    1b92:	09 f0       	breq	.+2      	; 0x1b96 <__vector_26+0xc2>
    1b94:	e2 c0       	rjmp	.+452    	; 0x1d5a <__vector_26+0x286>
    1b96:	75 c0       	rjmp	.+234    	; 0x1c82 <__vector_26+0x1ae>
    1b98:	80 3b       	cpi	r24, 0xB0	; 176
    1b9a:	09 f4       	brne	.+2      	; 0x1b9e <__vector_26+0xca>
    1b9c:	a1 c0       	rjmp	.+322    	; 0x1ce0 <__vector_26+0x20c>
    1b9e:	81 3b       	cpi	r24, 0xB1	; 177
    1ba0:	38 f4       	brcc	.+14     	; 0x1bb0 <__vector_26+0xdc>
    1ba2:	80 3a       	cpi	r24, 0xA0	; 160
    1ba4:	09 f4       	brne	.+2      	; 0x1ba8 <__vector_26+0xd4>
    1ba6:	81 c0       	rjmp	.+258    	; 0x1caa <__vector_26+0x1d6>
    1ba8:	88 3a       	cpi	r24, 0xA8	; 168
    1baa:	09 f0       	breq	.+2      	; 0x1bae <__vector_26+0xda>
    1bac:	d6 c0       	rjmp	.+428    	; 0x1d5a <__vector_26+0x286>
    1bae:	98 c0       	rjmp	.+304    	; 0x1ce0 <__vector_26+0x20c>
    1bb0:	80 3c       	cpi	r24, 0xC0	; 192
    1bb2:	09 f4       	brne	.+2      	; 0x1bb6 <__vector_26+0xe2>
    1bb4:	c7 c0       	rjmp	.+398    	; 0x1d44 <__vector_26+0x270>
    1bb6:	88 3c       	cpi	r24, 0xC8	; 200
    1bb8:	09 f4       	brne	.+2      	; 0x1bbc <__vector_26+0xe8>
    1bba:	c4 c0       	rjmp	.+392    	; 0x1d44 <__vector_26+0x270>
    1bbc:	88 3b       	cpi	r24, 0xB8	; 184
    1bbe:	09 f0       	breq	.+2      	; 0x1bc2 <__vector_26+0xee>
    1bc0:	cc c0       	rjmp	.+408    	; 0x1d5a <__vector_26+0x286>
    1bc2:	a6 c0       	rjmp	.+332    	; 0x1d10 <__vector_26+0x23c>
	case TW_REP_START:					// 0x10: Sent repeated start condition
		#ifdef I2C_DEBUG
		printf("I2C: M->START\r\n");
		#endif
		// send device address
		i2cSendByte(I2cDeviceAddrRW);
    1bc4:	80 91 d9 02 	lds	r24, 0x02D9
    1bc8:	0e c0       	rjmp	.+28     	; 0x1be6 <__vector_26+0x112>
	case TW_MT_SLA_ACK:					// 0x18: Slave address acknowledged
	case TW_MT_DATA_ACK:				// 0x28: Data acknowledged
		#ifdef I2C_DEBUG
		printf("I2C: MT->SLA_ACK or DATA_ACK\r\n");
		#endif
		if(I2cSendDataIndex < I2cSendDataLength)
    1bca:	90 91 fc 02 	lds	r25, 0x02FC
    1bce:	80 91 fd 02 	lds	r24, 0x02FD
    1bd2:	98 17       	cp	r25, r24
    1bd4:	c8 f4       	brcc	.+50     	; 0x1c08 <__vector_26+0x134>
		{
			// send data
			i2cSendByte( I2cSendData[I2cSendDataIndex++] );
    1bd6:	e9 2f       	mov	r30, r25
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	e4 52       	subi	r30, 0x24	; 36
    1bdc:	fd 4f       	sbci	r31, 0xFD	; 253
    1bde:	80 81       	ld	r24, Z
    1be0:	9f 5f       	subi	r25, 0xFF	; 255
    1be2:	90 93 fc 02 	sts	0x02FC, r25
	return 0;
}

inline void i2cSendByte(uint8_t data)
{
	WRITE_sda();
    1be6:	3c 9a       	sbi	0x07, 4	; 7
	// save data to the TWDR
	TWDR = data;
    1be8:	80 93 bb 00 	sts	0x00BB, r24
	// begin send
	TWCR = _BV(TWINT)|_BV(TWEN);
    1bec:	84 e8       	ldi	r24, 0x84	; 132
    1bee:	a7 c0       	rjmp	.+334    	; 0x1d3e <__vector_26+0x26a>
	case TW_MR_DATA_NACK:				// 0x58: Data received, NACK reply issued
		#ifdef I2C_DEBUG
		printf("I2C: MR->DATA_NACK\r\n");
		#endif
		// store final received data byte
		I2cReceiveData[I2cReceiveDataIndex++] = TWDR;
    1bf0:	80 91 1e 03 	lds	r24, 0x031E
    1bf4:	90 91 bb 00 	lds	r25, 0x00BB
    1bf8:	e8 2f       	mov	r30, r24
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	e2 50       	subi	r30, 0x02	; 2
    1bfe:	fd 4f       	sbci	r31, 0xFD	; 253
    1c00:	90 83       	st	Z, r25
    1c02:	8f 5f       	subi	r24, 0xFF	; 255
    1c04:	80 93 1e 03 	sts	0x031E, r24

inline void i2cSendStop(void)
{
	// transmit stop condition,
	// leave with TWEA on for slave receiving
	TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWSTO) | _BV(TWEN);
    1c08:	84 ed       	ldi	r24, 0xD4	; 212
    1c0a:	a3 c0       	rjmp	.+326    	; 0x1d52 <__vector_26+0x27e>
	//case TW_MR_ARB_LOST:				// 0x38: Bus arbitration lost
		#ifdef I2C_DEBUG
		printf("I2C: MT->ARB_LOST\r\n");
		#endif
		// release bus
		TWCR |= _BV(TWINT);
    1c0c:	80 91 bc 00 	lds	r24, 0x00BC
    1c10:	80 68       	ori	r24, 0x80	; 128
    1c12:	9f c0       	rjmp	.+318    	; 0x1d52 <__vector_26+0x27e>
	case TW_MR_DATA_ACK:				// 0x50: Data acknowledged
		#ifdef I2C_DEBUG
		printf("I2C: MR->DATA_ACK\r\n");
		#endif
		// store received data byte
		I2cReceiveData[I2cReceiveDataIndex++] = TWDR;
    1c14:	80 91 1e 03 	lds	r24, 0x031E
    1c18:	90 91 bb 00 	lds	r25, 0x00BB
    1c1c:	e8 2f       	mov	r30, r24
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	e2 50       	subi	r30, 0x02	; 2
    1c22:	fd 4f       	sbci	r31, 0xFD	; 253
    1c24:	90 83       	st	Z, r25
    1c26:	8f 5f       	subi	r24, 0xFF	; 255
    1c28:	80 93 1e 03 	sts	0x031E, r24
		// fall-through to see if more bytes will be received
	case TW_MR_SLA_ACK:					// 0x40: Slave address acknowledged
		#ifdef I2C_DEBUG
		printf("I2C: MR->SLA_ACK\r\n");
		#endif
		if(I2cReceiveDataIndex < (I2cReceiveDataLength-1))
    1c2c:	20 91 1e 03 	lds	r18, 0x031E
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	80 91 1f 03 	lds	r24, 0x031F
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	01 97       	sbiw	r24, 0x01	; 1
    1c3a:	28 17       	cp	r18, r24
    1c3c:	39 07       	cpc	r19, r25
    1c3e:	8c f5       	brge	.+98     	; 0x1ca2 <__vector_26+0x1ce>
    1c40:	2e c0       	rjmp	.+92     	; 0x1c9e <__vector_26+0x1ca>
		#ifdef I2C_DEBUG
		printf("I2C: SR->SLA_ACK\r\n");
		#endif
		//If the address sent is the same as the address in our TWAR register, do stuff.
		//Otherwise, maintain the old state.
		if( (TWDR & 0xFE) == (TWAR & 0xFE) )
    1c42:	90 91 bb 00 	lds	r25, 0x00BB
    1c46:	80 91 ba 00 	lds	r24, 0x00BA
    1c4a:	89 27       	eor	r24, r25
    1c4c:	8e 7f       	andi	r24, 0xFE	; 254
    1c4e:	11 f4       	brne	.+4      	; 0x1c54 <__vector_26+0x180>
			#ifdef I2C_DEBUG
			printf("I2C: Slave Address Directly\r\n");
			#endif
			// we are being addressed as slave for writing (data will be received from master)
			// set state
			I2cState = I2C_SLAVE_RX;
    1c50:	85 e0       	ldi	r24, 0x05	; 5
    1c52:	12 c0       	rjmp	.+36     	; 0x1c78 <__vector_26+0x1a4>
			// prepare buffer
			I2cReceiveDataIndex = 0;
			// receive data byte and return ACK
			TWCR |= _BV(TWINT) | _BV(TWEA);
		} else if ( ((TWDR & 0xFE) == I2cWhiteStarGeneralAddr) && I2cWhiteStarGeneralEn)
    1c54:	20 91 bb 00 	lds	r18, 0x00BB
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	2e 7f       	andi	r18, 0xFE	; 254
    1c5c:	30 70       	andi	r19, 0x00	; 0
    1c5e:	80 91 da 02 	lds	r24, 0x02DA
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	28 17       	cp	r18, r24
    1c66:	39 07       	cpc	r19, r25
    1c68:	09 f0       	breq	.+2      	; 0x1c6c <__vector_26+0x198>
    1c6a:	77 c0       	rjmp	.+238    	; 0x1d5a <__vector_26+0x286>
    1c6c:	80 91 db 02 	lds	r24, 0x02DB
    1c70:	88 23       	and	r24, r24
    1c72:	09 f4       	brne	.+2      	; 0x1c76 <__vector_26+0x1a2>
    1c74:	72 c0       	rjmp	.+228    	; 0x1d5a <__vector_26+0x286>
		{
			#ifdef I2C_DEBUG
			printf("I2C: WSB General Call\r\n");
			#endif
			//White Star Balloon General Call Mode, GO!
			I2cState = I2C_WSB_GENERAL;
    1c76:	86 e0       	ldi	r24, 0x06	; 6
    1c78:	80 93 d8 02 	sts	0x02D8, r24
			//Prepare Buffer
			I2cReceiveDataIndex = 0;
    1c7c:	10 92 1e 03 	sts	0x031E, r1
    1c80:	57 c0       	rjmp	.+174    	; 0x1d30 <__vector_26+0x25c>
	case TW_SR_GCALL_DATA_ACK:			// 0x90: data byte has been received, ACK has been returned
		#ifdef I2C_DEBUG
		printf("I2C: SR->DATA_ACK\r\n");
		#endif
		// get previously received data byte
		I2cReceiveData[I2cReceiveDataIndex++] = TWDR;
    1c82:	80 91 1e 03 	lds	r24, 0x031E
    1c86:	90 91 bb 00 	lds	r25, 0x00BB
    1c8a:	e8 2f       	mov	r30, r24
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	e2 50       	subi	r30, 0x02	; 2
    1c90:	fd 4f       	sbci	r31, 0xFD	; 253
    1c92:	90 83       	st	Z, r25
    1c94:	8f 5f       	subi	r24, 0xFF	; 255
    1c96:	80 93 1e 03 	sts	0x031E, r24
		// check receive buffer status
		if(I2cReceiveDataIndex < I2C_RECEIVE_DATA_BUFFER_SIZE)
    1c9a:	80 32       	cpi	r24, 0x20	; 32
    1c9c:	10 f4       	brcc	.+4      	; 0x1ca2 <__vector_26+0x1ce>
		{
			// receive data byte and return ACK
			i2cReceiveByte(TRUE);
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	01 c0       	rjmp	.+2      	; 0x1ca4 <__vector_26+0x1d0>
	case TW_SR_GCALL_DATA_NACK:			// 0x98: data byte has been received, NACK has been returned
		#ifdef I2C_DEBUG
		printf("I2C: SR->DATA_NACK\r\n");
		#endif
		// receive data byte and return NACK
		i2cReceiveByte(FALSE);
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	0e 94 92 0c 	call	0x1924	; 0x1924 <i2cReceiveByte>
    1ca8:	58 c0       	rjmp	.+176    	; 0x1d5a <__vector_26+0x286>
	case TW_SR_STOP:					// 0xA0: STOP or REPEATED START has been received while addressed as slave
		#ifdef I2C_DEBUG
		printf("I2C: SR->SR_STOP\r\n");
		#endif
		// switch to SR mode with SLA ACK
		TWCR |= _BV(TWINT) | _BV(TWEA);
    1caa:	80 91 bc 00 	lds	r24, 0x00BC
    1cae:	80 6c       	ori	r24, 0xC0	; 192
    1cb0:	80 93 bc 00 	sts	0x00BC, r24
		if(I2cState == I2C_WSB_GENERAL)
    1cb4:	80 91 d8 02 	lds	r24, 0x02D8
    1cb8:	86 30       	cpi	r24, 0x06	; 6
    1cba:	29 f4       	brne	.+10     	; 0x1cc6 <__vector_26+0x1f2>
		{
			if(i2cWSBReceive) i2cWSBReceive(I2cReceiveDataIndex, I2cReceiveData);
    1cbc:	e0 91 22 03 	lds	r30, 0x0322
    1cc0:	f0 91 23 03 	lds	r31, 0x0323
    1cc4:	04 c0       	rjmp	.+8      	; 0x1cce <__vector_26+0x1fa>
		} else {
			// i2c receive is complete, call i2cSlaveReceive
			if(i2cSlaveReceive) i2cSlaveReceive(I2cReceiveDataIndex, I2cReceiveData);
    1cc6:	e0 91 20 03 	lds	r30, 0x0320
    1cca:	f0 91 21 03 	lds	r31, 0x0321
    1cce:	30 97       	sbiw	r30, 0x00	; 0
    1cd0:	09 f4       	brne	.+2      	; 0x1cd4 <__vector_26+0x200>
    1cd2:	41 c0       	rjmp	.+130    	; 0x1d56 <__vector_26+0x282>
    1cd4:	80 91 1e 03 	lds	r24, 0x031E
    1cd8:	6e ef       	ldi	r22, 0xFE	; 254
    1cda:	72 e0       	ldi	r23, 0x02	; 2
    1cdc:	09 95       	icall
    1cde:	3b c0       	rjmp	.+118    	; 0x1d56 <__vector_26+0x282>
		#ifdef I2C_DEBUG
		printf("I2C: ST->SLA_ACK\r\n");
		#endif
		//If the address sent is the same as the address in our TWAR register, do stuff.
		//Otherwise, maintain the old state.
		if( (TWDR & 0xFE) == (TWAR & 0xFE) )
    1ce0:	90 91 bb 00 	lds	r25, 0x00BB
    1ce4:	80 91 ba 00 	lds	r24, 0x00BA
    1ce8:	89 27       	eor	r24, r25
    1cea:	8e 7f       	andi	r24, 0xFE	; 254
    1cec:	b1 f5       	brne	.+108    	; 0x1d5a <__vector_26+0x286>
		{
			// we are being addressed as slave for reading (data must be transmitted back to master)
			// set state
			I2cState = I2C_SLAVE_TX;
    1cee:	84 e0       	ldi	r24, 0x04	; 4
    1cf0:	80 93 d8 02 	sts	0x02D8, r24
			// request data from application
			if(i2cSlaveTransmit) I2cSendDataLength = i2cSlaveTransmit(I2C_SEND_DATA_BUFFER_SIZE, I2cSendData);
    1cf4:	e0 91 24 03 	lds	r30, 0x0324
    1cf8:	f0 91 25 03 	lds	r31, 0x0325
    1cfc:	30 97       	sbiw	r30, 0x00	; 0
    1cfe:	31 f0       	breq	.+12     	; 0x1d0c <__vector_26+0x238>
    1d00:	80 e2       	ldi	r24, 0x20	; 32
    1d02:	6c ed       	ldi	r22, 0xDC	; 220
    1d04:	72 e0       	ldi	r23, 0x02	; 2
    1d06:	09 95       	icall
    1d08:	80 93 fd 02 	sts	0x02FD, r24
			// reset data index
			I2cSendDataIndex = 0;
    1d0c:	10 92 fc 02 	sts	0x02FC, r1
	case TW_ST_DATA_ACK:				// 0xB8: data byte has been transmitted, ACK has been received
		#ifdef I2C_DEBUG
		printf("I2C: ST->DATA_ACK\r\n");
		#endif
		// transmit data byte
		TWDR = I2cSendData[I2cSendDataIndex++];
    1d10:	90 91 fc 02 	lds	r25, 0x02FC
    1d14:	e9 2f       	mov	r30, r25
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	e4 52       	subi	r30, 0x24	; 36
    1d1a:	fd 4f       	sbci	r31, 0xFD	; 253
    1d1c:	80 81       	ld	r24, Z
    1d1e:	80 93 bb 00 	sts	0x00BB, r24
    1d22:	9f 5f       	subi	r25, 0xFF	; 255
    1d24:	90 93 fc 02 	sts	0x02FC, r25
		if(I2cSendDataIndex < I2cSendDataLength)
    1d28:	80 91 fd 02 	lds	r24, 0x02FD
    1d2c:	98 17       	cp	r25, r24
    1d2e:	20 f4       	brcc	.+8      	; 0x1d38 <__vector_26+0x264>
			// expect ACK to data byte
			TWCR |= _BV(TWINT) | _BV(TWEA);
    1d30:	80 91 bc 00 	lds	r24, 0x00BC
    1d34:	80 6c       	ori	r24, 0xC0	; 192
    1d36:	03 c0       	rjmp	.+6      	; 0x1d3e <__vector_26+0x26a>
		else
			// expect NACK to data byte
			TWCR |= _BV(TWINT);
    1d38:	80 91 bc 00 	lds	r24, 0x00BC
    1d3c:	80 68       	ori	r24, 0x80	; 128
    1d3e:	80 93 bc 00 	sts	0x00BC, r24
    1d42:	0b c0       	rjmp	.+22     	; 0x1d5a <__vector_26+0x286>
		#ifdef I2C_DEBUG
		printf("I2C: ST->DATA_NACK or LAST_DATA\r\n");
		#endif
		// all done
		// switch to open slave
		TWCR |= _BV(TWINT) | _BV(TWEA);
    1d44:	80 91 bc 00 	lds	r24, 0x00BC
    1d48:	80 6c       	ori	r24, 0xC0	; 192
    1d4a:	03 c0       	rjmp	.+6      	; 0x1d52 <__vector_26+0x27e>
	case TW_BUS_ERROR:					// 0x00: Bus error due to illegal start or stop condition
		#ifdef I2C_DEBUG
		printf("I2C: BUS_ERROR\r\n");
		#endif
		// reset internal hardware and release bus
		TWCR |= _BV(TWINT) | _BV(TWSTO) | _BV(TWEA);
    1d4c:	80 91 bc 00 	lds	r24, 0x00BC
    1d50:	80 6d       	ori	r24, 0xD0	; 208
    1d52:	80 93 bc 00 	sts	0x00BC, r24
		// set state
		I2cState = I2C_IDLE;
    1d56:	10 92 d8 02 	sts	0x02D8, r1
		break;
	}
}
    1d5a:	ff 91       	pop	r31
    1d5c:	ef 91       	pop	r30
    1d5e:	bf 91       	pop	r27
    1d60:	af 91       	pop	r26
    1d62:	9f 91       	pop	r25
    1d64:	8f 91       	pop	r24
    1d66:	7f 91       	pop	r23
    1d68:	6f 91       	pop	r22
    1d6a:	5f 91       	pop	r21
    1d6c:	4f 91       	pop	r20
    1d6e:	3f 91       	pop	r19
    1d70:	2f 91       	pop	r18
    1d72:	0f 90       	pop	r0
    1d74:	0f be       	out	0x3f, r0	; 63
    1d76:	0f 90       	pop	r0
    1d78:	1f 90       	pop	r1
    1d7a:	18 95       	reti

00001d7c <i2cGetState>:

eI2cStateType i2cGetState(void)
{
	return I2cState;
    1d7c:	80 91 d8 02 	lds	r24, 0x02D8
}
    1d80:	08 95       	ret

00001d82 <get12bit2scomp>:
}

//THIS DOESN'T BELONG HERE, REMOVE IT
int16_t get12bit2scomp(uint16_t value)
{
	if(value > 0x7FF)
    1d82:	28 e0       	ldi	r18, 0x08	; 8
    1d84:	80 30       	cpi	r24, 0x00	; 0
    1d86:	92 07       	cpc	r25, r18
    1d88:	28 f0       	brcs	.+10     	; 0x1d94 <get12bit2scomp+0x12>
	{
		return (value&0x7FF) - 2048;
    1d8a:	9c 01       	movw	r18, r24
    1d8c:	37 70       	andi	r19, 0x07	; 7
    1d8e:	20 50       	subi	r18, 0x00	; 0
    1d90:	38 40       	sbci	r19, 0x08	; 8
    1d92:	01 c0       	rjmp	.+2      	; 0x1d96 <get12bit2scomp+0x14>
	} else {
		return (int16_t)value;
    1d94:	9c 01       	movw	r18, r24
	}
}
    1d96:	c9 01       	movw	r24, r18
    1d98:	08 95       	ret

00001d9a <set12bit2scomp>:

uint16_t set12bit2scomp(int16_t value)
{
	if(value < 0)
    1d9a:	97 ff       	sbrs	r25, 7
    1d9c:	04 c0       	rjmp	.+8      	; 0x1da6 <set12bit2scomp+0xc>
	{
		return (value + 2048) + 0x800;
    1d9e:	9c 01       	movw	r18, r24
    1da0:	20 50       	subi	r18, 0x00	; 0
    1da2:	30 4f       	sbci	r19, 0xF0	; 240
    1da4:	01 c0       	rjmp	.+2      	; 0x1da8 <set12bit2scomp+0xe>
	} else
	{
		return (uint16_t)value;
    1da6:	9c 01       	movw	r18, r24
	}
}
    1da8:	c9 01       	movw	r24, r18
    1daa:	08 95       	ret

00001dac <setTMP101Thermo>:
	return error;

}

uint8_t setTMP101Thermo(uint8_t address, uint8_t data, uint8_t tHigh)
{
    1dac:	df 92       	push	r13
    1dae:	ef 92       	push	r14
    1db0:	ff 92       	push	r15
    1db2:	0f 93       	push	r16
    1db4:	1f 93       	push	r17
    1db6:	08 2f       	mov	r16, r24
    1db8:	d6 2e       	mov	r13, r22
    1dba:	f4 2e       	mov	r15, r20

	uint8_t error;
	i2cDisableInt();
    1dbc:	0e 94 5f 0c 	call	0x18be	; 0x18be <i2cDisableInt>
	i2cSendStart();
    1dc0:	0e 94 56 0c 	call	0x18ac	; 0x18ac <i2cSendStart>
	error |= i2cWaitForComplete();
    1dc4:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    1dc8:	18 2f       	mov	r17, r24

	i2cSendByte(address);
    1dca:	80 2f       	mov	r24, r16
    1dcc:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	error |= i2cWaitForComplete();
    1dd0:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    1dd4:	e8 2e       	mov	r14, r24

	i2cSendByte(0b00000010 + tHigh);
    1dd6:	8f 2d       	mov	r24, r15
    1dd8:	8e 5f       	subi	r24, 0xFE	; 254
    1dda:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	error |= i2cWaitForComplete();
    1dde:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    1de2:	f8 2e       	mov	r15, r24

	i2cSendByte(data);
    1de4:	8d 2d       	mov	r24, r13
    1de6:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	error |= i2cWaitForComplete();
    1dea:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    1dee:	08 2f       	mov	r16, r24
	i2cDisableInt();
	i2cSendStart();
	error |= i2cWaitForComplete();

	i2cSendByte(address);
	error |= i2cWaitForComplete();
    1df0:	1e 29       	or	r17, r14

	i2cSendByte(0b00000010 + tHigh);
	error |= i2cWaitForComplete();
    1df2:	1f 29       	or	r17, r15

	i2cSendByte(data);
	error |= i2cWaitForComplete();

	i2cSendStop();
    1df4:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <i2cSendStop>
	i2cEnableInt();
    1df8:	0e 94 65 0c 	call	0x18ca	; 0x18ca <i2cEnableInt>

	return error;

}
    1dfc:	81 2f       	mov	r24, r17
    1dfe:	80 2b       	or	r24, r16
    1e00:	1f 91       	pop	r17
    1e02:	0f 91       	pop	r16
    1e04:	ff 90       	pop	r15
    1e06:	ef 90       	pop	r14
    1e08:	df 90       	pop	r13
    1e0a:	08 95       	ret

00001e0c <setTMP100config>:
	return data1;

}

uint8_t setTMP100config(uint8_t address, uint8_t data)
{
    1e0c:	df 92       	push	r13
    1e0e:	ef 92       	push	r14
    1e10:	ff 92       	push	r15
    1e12:	0f 93       	push	r16
    1e14:	1f 93       	push	r17
    1e16:	08 2f       	mov	r16, r24
    1e18:	d6 2e       	mov	r13, r22
	uint8_t error;
	i2cDisableInt();
    1e1a:	0e 94 5f 0c 	call	0x18be	; 0x18be <i2cDisableInt>
	i2cSendStart();
    1e1e:	0e 94 56 0c 	call	0x18ac	; 0x18ac <i2cSendStart>
	error |= i2cWaitForComplete();
    1e22:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    1e26:	18 2f       	mov	r17, r24

	i2cSendByte(address);
    1e28:	80 2f       	mov	r24, r16
    1e2a:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	error |= i2cWaitForComplete();
    1e2e:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    1e32:	e8 2e       	mov	r14, r24

	i2cSendByte(0b00000001);
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	error |= i2cWaitForComplete();
    1e3a:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    1e3e:	f8 2e       	mov	r15, r24

	i2cSendByte(data);
    1e40:	8d 2d       	mov	r24, r13
    1e42:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	error |= i2cWaitForComplete();
    1e46:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    1e4a:	08 2f       	mov	r16, r24
	i2cDisableInt();
	i2cSendStart();
	error |= i2cWaitForComplete();

	i2cSendByte(address);
	error |= i2cWaitForComplete();
    1e4c:	1e 29       	or	r17, r14

	i2cSendByte(0b00000001);
	error |= i2cWaitForComplete();
    1e4e:	1f 29       	or	r17, r15

	i2cSendByte(data);
	error |= i2cWaitForComplete();

	i2cSendStop();
    1e50:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <i2cSendStop>
	i2cEnableInt();
    1e54:	0e 94 65 0c 	call	0x18ca	; 0x18ca <i2cEnableInt>

	return error;

}
    1e58:	81 2f       	mov	r24, r17
    1e5a:	80 2b       	or	r24, r16
    1e5c:	1f 91       	pop	r17
    1e5e:	0f 91       	pop	r16
    1e60:	ff 90       	pop	r15
    1e62:	ef 90       	pop	r14
    1e64:	df 90       	pop	r13
    1e66:	08 95       	ret

00001e68 <getTMP100config>:
	}

}

uint8_t getTMP100config(uint8_t address)
{
    1e68:	1f 93       	push	r17
    1e6a:	18 2f       	mov	r17, r24

	i2cDisableInt();
    1e6c:	0e 94 5f 0c 	call	0x18be	; 0x18be <i2cDisableInt>
	i2cSendStart();
    1e70:	0e 94 56 0c 	call	0x18ac	; 0x18ac <i2cSendStart>
	i2cWaitForComplete();
    1e74:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>

	i2cSendByte(address);
    1e78:	81 2f       	mov	r24, r17
    1e7a:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	i2cWaitForComplete();
    1e7e:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	i2cSendByte(0b00000001);
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	i2cWaitForComplete();
    1e88:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>

	i2cSendStart();
    1e8c:	0e 94 56 0c 	call	0x18ac	; 0x18ac <i2cSendStart>
	i2cWaitForComplete();
    1e90:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>

	i2cSendByte(address+1);
    1e94:	81 2f       	mov	r24, r17
    1e96:	8f 5f       	subi	r24, 0xFF	; 255
    1e98:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	i2cWaitForComplete();
    1e9c:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>

	i2cReceiveByte(1);
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	0e 94 92 0c 	call	0x1924	; 0x1924 <i2cReceiveByte>
	i2cWaitForComplete();
    1ea6:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	uint8_t data1 = i2cGetReceivedByte(); //Read the MSB data
    1eaa:	0e 94 a0 0c 	call	0x1940	; 0x1940 <i2cGetReceivedByte>
    1eae:	18 2f       	mov	r17, r24
	i2cWaitForComplete();
    1eb0:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>

	i2cSendStop();
    1eb4:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <i2cSendStop>
	i2cEnableInt();
    1eb8:	0e 94 65 0c 	call	0x18ca	; 0x18ca <i2cEnableInt>

	return data1;

}
    1ebc:	81 2f       	mov	r24, r17
    1ebe:	1f 91       	pop	r17
    1ec0:	08 95       	ret

00001ec2 <tmp100rawTemp>:

#include "i2c.h"
#include "tmp100.h"

uint16_t tmp100rawTemp(uint8_t address)
{
    1ec2:	2f 92       	push	r2
    1ec4:	3f 92       	push	r3
    1ec6:	4f 92       	push	r4
    1ec8:	5f 92       	push	r5
    1eca:	6f 92       	push	r6
    1ecc:	7f 92       	push	r7
    1ece:	8f 92       	push	r8
    1ed0:	9f 92       	push	r9
    1ed2:	af 92       	push	r10
    1ed4:	bf 92       	push	r11
    1ed6:	cf 92       	push	r12
    1ed8:	df 92       	push	r13
    1eda:	ef 92       	push	r14
    1edc:	ff 92       	push	r15
    1ede:	0f 93       	push	r16
    1ee0:	1f 93       	push	r17
    1ee2:	df 93       	push	r29
    1ee4:	cf 93       	push	r28
    1ee6:	00 d0       	rcall	.+0      	; 0x1ee8 <tmp100rawTemp+0x26>
    1ee8:	cd b7       	in	r28, 0x3d	; 61
    1eea:	de b7       	in	r29, 0x3e	; 62
    1eec:	f8 2e       	mov	r15, r24
	uint16_t error;

	i2cDisableInt();
    1eee:	0e 94 5f 0c 	call	0x18be	; 0x18be <i2cDisableInt>

	i2cSendStart();
    1ef2:	0e 94 56 0c 	call	0x18ac	; 0x18ac <i2cSendStart>
	error |= i2cWaitForComplete();
    1ef6:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    1efa:	08 2f       	mov	r16, r24

	i2cSendByte(address);
    1efc:	8f 2d       	mov	r24, r15
    1efe:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	error |= i2cWaitForComplete();
    1f02:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    1f06:	d8 2e       	mov	r13, r24
	i2cSendByte(0b00000000);
    1f08:	80 e0       	ldi	r24, 0x00	; 0
    1f0a:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	error |= i2cWaitForComplete();
    1f0e:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    1f12:	28 2e       	mov	r2, r24

	i2cSendStart();
    1f14:	0e 94 56 0c 	call	0x18ac	; 0x18ac <i2cSendStart>
	error |= i2cWaitForComplete();
    1f18:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    1f1c:	48 2e       	mov	r4, r24

	i2cSendByte(address+1);
    1f1e:	8f 2d       	mov	r24, r15
    1f20:	8f 5f       	subi	r24, 0xFF	; 255
    1f22:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	error |= i2cWaitForComplete();
    1f26:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    1f2a:	68 2e       	mov	r6, r24

	i2cReceiveByte(1);
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	0e 94 92 0c 	call	0x1924	; 0x1924 <i2cReceiveByte>
	error |= i2cWaitForComplete();
    1f32:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    1f36:	88 2e       	mov	r8, r24
	uint8_t data1 = i2cGetReceivedByte(); //Read the MSB data
    1f38:	0e 94 a0 0c 	call	0x1940	; 0x1940 <i2cGetReceivedByte>
    1f3c:	8a 83       	std	Y+2, r24	; 0x02
	error |= i2cWaitForComplete();
    1f3e:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    1f42:	a8 2e       	mov	r10, r24

	i2cReceiveByte(0);
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	0e 94 92 0c 	call	0x1924	; 0x1924 <i2cReceiveByte>
	error |= i2cWaitForComplete();
    1f4a:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    1f4e:	e8 2e       	mov	r14, r24
	uint8_t data2 = i2cGetReceivedByte(); //Read the LSB data
    1f50:	0e 94 a0 0c 	call	0x1940	; 0x1940 <i2cGetReceivedByte>
    1f54:	89 83       	std	Y+1, r24	; 0x01
	error |= i2cWaitForComplete();
    1f56:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    1f5a:	c8 2e       	mov	r12, r24
	uint16_t error;

	i2cDisableInt();

	i2cSendStart();
	error |= i2cWaitForComplete();
    1f5c:	10 e0       	ldi	r17, 0x00	; 0
    1f5e:	8d 2d       	mov	r24, r13
    1f60:	90 e0       	ldi	r25, 0x00	; 0

	i2cSendByte(address);
	error |= i2cWaitForComplete();
    1f62:	08 2b       	or	r16, r24
    1f64:	19 2b       	or	r17, r25
	i2cSendByte(0b00000000);
	error |= i2cWaitForComplete();
    1f66:	33 24       	eor	r3, r3
    1f68:	02 29       	or	r16, r2
    1f6a:	13 29       	or	r17, r3

	i2cSendStart();
	error |= i2cWaitForComplete();
    1f6c:	55 24       	eor	r5, r5
    1f6e:	04 29       	or	r16, r4
    1f70:	15 29       	or	r17, r5

	i2cSendByte(address+1);
	error |= i2cWaitForComplete();
    1f72:	77 24       	eor	r7, r7
    1f74:	06 29       	or	r16, r6
    1f76:	17 29       	or	r17, r7

	i2cReceiveByte(1);
	error |= i2cWaitForComplete();
    1f78:	99 24       	eor	r9, r9
    1f7a:	08 29       	or	r16, r8
    1f7c:	19 29       	or	r17, r9
	uint8_t data1 = i2cGetReceivedByte(); //Read the MSB data
	error |= i2cWaitForComplete();
    1f7e:	bb 24       	eor	r11, r11
    1f80:	0a 29       	or	r16, r10
    1f82:	1b 29       	or	r17, r11

	i2cReceiveByte(0);
	error |= i2cWaitForComplete();
    1f84:	ff 24       	eor	r15, r15
    1f86:	0e 29       	or	r16, r14
    1f88:	1f 29       	or	r17, r15
	uint8_t data2 = i2cGetReceivedByte(); //Read the LSB data
	error |= i2cWaitForComplete();

	i2cSendStop();
    1f8a:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <i2cSendStop>
	i2cEnableInt();
    1f8e:	0e 94 65 0c 	call	0x18ca	; 0x18ca <i2cEnableInt>

	if(error == 0)
    1f92:	dd 24       	eor	r13, r13
    1f94:	0c 29       	or	r16, r12
    1f96:	1d 29       	or	r17, r13
    1f98:	01 2b       	or	r16, r17
    1f9a:	19 f0       	breq	.+6      	; 0x1fa2 <tmp100rawTemp+0xe0>
    1f9c:	2f ef       	ldi	r18, 0xFF	; 255
    1f9e:	3f ee       	ldi	r19, 0xEF	; 239
    1fa0:	07 c0       	rjmp	.+14     	; 0x1fb0 <tmp100rawTemp+0xee>
	{
		return data1 << 8 | data2;
    1fa2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	49 81       	ldd	r20, Y+1	; 0x01
    1fa8:	24 2f       	mov	r18, r20
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	28 2b       	or	r18, r24
    1fae:	39 2b       	or	r19, r25
	} else {
		return 0xEFFF;
	}

}
    1fb0:	c9 01       	movw	r24, r18
    1fb2:	0f 90       	pop	r0
    1fb4:	0f 90       	pop	r0
    1fb6:	cf 91       	pop	r28
    1fb8:	df 91       	pop	r29
    1fba:	1f 91       	pop	r17
    1fbc:	0f 91       	pop	r16
    1fbe:	ff 90       	pop	r15
    1fc0:	ef 90       	pop	r14
    1fc2:	df 90       	pop	r13
    1fc4:	cf 90       	pop	r12
    1fc6:	bf 90       	pop	r11
    1fc8:	af 90       	pop	r10
    1fca:	9f 90       	pop	r9
    1fcc:	8f 90       	pop	r8
    1fce:	7f 90       	pop	r7
    1fd0:	6f 90       	pop	r6
    1fd2:	5f 90       	pop	r5
    1fd4:	4f 90       	pop	r4
    1fd6:	3f 90       	pop	r3
    1fd8:	2f 90       	pop	r2
    1fda:	08 95       	ret

00001fdc <ol_putchar>:
	//while( (thisChar = (char)ol_getchar())!='>');

}

int ol_putchar(char c, FILE *stream)
{
    1fdc:	1f 93       	push	r17
    1fde:	18 2f       	mov	r17, r24
    if (c == '\n') ol_putchar('\r', stream);
    1fe0:	8a 30       	cpi	r24, 0x0A	; 10
    1fe2:	19 f4       	brne	.+6      	; 0x1fea <ol_putchar+0xe>
    1fe4:	8d e0       	ldi	r24, 0x0D	; 13
    1fe6:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <ol_putchar>

    loop_until_bit_is_set(UCSR0A, UDRE0);
    1fea:	80 91 c0 00 	lds	r24, 0x00C0
    1fee:	85 ff       	sbrs	r24, 5
    1ff0:	fc cf       	rjmp	.-8      	; 0x1fea <ol_putchar+0xe>
    UDR0 = c;
    1ff2:	10 93 c6 00 	sts	0x00C6, r17

    return 0;
}
    1ff6:	80 e0       	ldi	r24, 0x00	; 0
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	1f 91       	pop	r17
    1ffc:	08 95       	ret

00001ffe <ol_getchar>:

inline uint8_t ol_getchar(void)
{
    while( !(UCSR0A & (1<<RXC0)) );
    1ffe:	80 91 c0 00 	lds	r24, 0x00C0
    2002:	87 ff       	sbrs	r24, 7
    2004:	fc cf       	rjmp	.-8      	; 0x1ffe <ol_getchar>
    return(UDR0);
    2006:	80 91 c6 00 	lds	r24, 0x00C6
}
    200a:	08 95       	ret

0000200c <getDataSample>:
}

//16 bits is fine for speedball-1, check again for future flights, though
//Also, returnString needs to be long enough to hold the output plus null terminator, or bad things happen.
void getDataSample(uint16_t sampleNumber, char *returnString)
{
    200c:	ef 92       	push	r14
    200e:	ff 92       	push	r15
    2010:	0f 93       	push	r16
    2012:	1f 93       	push	r17
    2014:	df 93       	push	r29
    2016:	cf 93       	push	r28
    2018:	0f 92       	push	r0
    201a:	cd b7       	in	r28, 0x3d	; 61
    201c:	de b7       	in	r29, 0x3e	; 62
    201e:	8c 01       	movw	r16, r24
    2020:	7b 01       	movw	r14, r22
	uint16_t i;

	fprintf(&olout, "\r");
    2022:	8d e0       	ldi	r24, 0x0D	; 13
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	6d ea       	ldi	r22, 0xAD	; 173
    2028:	71 e0       	ldi	r23, 0x01	; 1
    202a:	0e 94 97 38 	call	0x712e	; 0x712e <fputc>
    return 0;
}

inline uint8_t ol_getchar(void)
{
    while( !(UCSR0A & (1<<RXC0)) );
    202e:	80 91 c0 00 	lds	r24, 0x00C0
    2032:	87 ff       	sbrs	r24, 7
    2034:	fc cf       	rjmp	.-8      	; 0x202e <getDataSample+0x22>
    return(UDR0);
    2036:	80 91 c6 00 	lds	r24, 0x00C6
void getDataSample(uint16_t sampleNumber, char *returnString)
{
	uint16_t i;

	fprintf(&olout, "\r");
	while((char)ol_getchar() != '>');
    203a:	8e 33       	cpi	r24, 0x3E	; 62
    203c:	c1 f7       	brne	.-16     	; 0x202e <getDataSample+0x22>
	i=0;
	volatile char thisChar;
	fprintf(&olout, "read samples.txt %d %d", (sampleNumber * (SAMPLESTRINGSIZEINCHARS + 5)), SAMPLESTRINGSIZEINCHARS);
    203e:	2d b7       	in	r18, 0x3d	; 61
    2040:	3e b7       	in	r19, 0x3e	; 62
    2042:	28 50       	subi	r18, 0x08	; 8
    2044:	30 40       	sbci	r19, 0x00	; 0
    2046:	0f b6       	in	r0, 0x3f	; 63
    2048:	f8 94       	cli
    204a:	3e bf       	out	0x3e, r19	; 62
    204c:	0f be       	out	0x3f, r0	; 63
    204e:	2d bf       	out	0x3d, r18	; 61
    2050:	ed b7       	in	r30, 0x3d	; 61
    2052:	fe b7       	in	r31, 0x3e	; 62
    2054:	31 96       	adiw	r30, 0x01	; 1
    2056:	8d ea       	ldi	r24, 0xAD	; 173
    2058:	91 e0       	ldi	r25, 0x01	; 1
    205a:	ad b7       	in	r26, 0x3d	; 61
    205c:	be b7       	in	r27, 0x3e	; 62
    205e:	12 96       	adiw	r26, 0x02	; 2
    2060:	9c 93       	st	X, r25
    2062:	8e 93       	st	-X, r24
    2064:	11 97       	sbiw	r26, 0x01	; 1
    2066:	85 e4       	ldi	r24, 0x45	; 69
    2068:	91 e0       	ldi	r25, 0x01	; 1
    206a:	93 83       	std	Z+3, r25	; 0x03
    206c:	82 83       	std	Z+2, r24	; 0x02
    206e:	86 ee       	ldi	r24, 0xE6	; 230
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	9c 01       	movw	r18, r24
    2074:	02 9f       	mul	r16, r18
    2076:	c0 01       	movw	r24, r0
    2078:	03 9f       	mul	r16, r19
    207a:	90 0d       	add	r25, r0
    207c:	12 9f       	mul	r17, r18
    207e:	90 0d       	add	r25, r0
    2080:	11 24       	eor	r1, r1
    2082:	95 83       	std	Z+5, r25	; 0x05
    2084:	84 83       	std	Z+4, r24	; 0x04
    2086:	81 ee       	ldi	r24, 0xE1	; 225
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	97 83       	std	Z+7, r25	; 0x07
    208c:	86 83       	std	Z+6, r24	; 0x06
    208e:	0e 94 83 38 	call	0x7106	; 0x7106 <fprintf>
    2092:	8d b7       	in	r24, 0x3d	; 61
    2094:	9e b7       	in	r25, 0x3e	; 62
    2096:	08 96       	adiw	r24, 0x08	; 8
    2098:	0f b6       	in	r0, 0x3f	; 63
    209a:	f8 94       	cli
    209c:	9e bf       	out	0x3e, r25	; 62
    209e:	0f be       	out	0x3f, r0	; 63
    20a0:	8d bf       	out	0x3d, r24	; 61

	loop_until_bit_is_set(UCSR0A, UDRE0);
    20a2:	80 91 c0 00 	lds	r24, 0x00C0
    20a6:	85 ff       	sbrs	r24, 5
    20a8:	fc cf       	rjmp	.-8      	; 0x20a2 <getDataSample+0x96>
    UDR0 = '\r';
    20aa:	8d e0       	ldi	r24, 0x0D	; 13
    20ac:	80 93 c6 00 	sts	0x00C6, r24
    return 0;
}

inline uint8_t ol_getchar(void)
{
    while( !(UCSR0A & (1<<RXC0)) );
    20b0:	80 91 c0 00 	lds	r24, 0x00C0
    20b4:	87 ff       	sbrs	r24, 7
    20b6:	fc cf       	rjmp	.-8      	; 0x20b0 <getDataSample+0xa4>
    return(UDR0);
    20b8:	80 91 c6 00 	lds	r24, 0x00C6
    return 0;
}

inline uint8_t ol_getchar(void)
{
    while( !(UCSR0A & (1<<RXC0)) );
    20bc:	80 91 c0 00 	lds	r24, 0x00C0
    20c0:	87 ff       	sbrs	r24, 7
    20c2:	fc cf       	rjmp	.-8      	; 0x20bc <getDataSample+0xb0>
    return(UDR0);
    20c4:	80 91 c6 00 	lds	r24, 0x00C6
    20c8:	a0 e0       	ldi	r26, 0x00	; 0
    20ca:	b0 e0       	ldi	r27, 0x00	; 0
    20cc:	06 c0       	rjmp	.+12     	; 0x20da <getDataSample+0xce>
    ol_getchar();
    ol_getchar();
   // lprintf();
	while( ((thisChar = (char)ol_getchar())!='>') && (i < SAMPLESTRINGSIZEINCHARS))
	{
		returnString[i] = thisChar;
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
    20d0:	f7 01       	movw	r30, r14
    20d2:	ea 0f       	add	r30, r26
    20d4:	fb 1f       	adc	r31, r27
    20d6:	80 83       	st	Z, r24
		i++;
    20d8:	11 96       	adiw	r26, 0x01	; 1
    return 0;
}

inline uint8_t ol_getchar(void)
{
    while( !(UCSR0A & (1<<RXC0)) );
    20da:	80 91 c0 00 	lds	r24, 0x00C0
    20de:	87 ff       	sbrs	r24, 7
    20e0:	fc cf       	rjmp	.-8      	; 0x20da <getDataSample+0xce>
    return(UDR0);
    20e2:	80 91 c6 00 	lds	r24, 0x00C6
	loop_until_bit_is_set(UCSR0A, UDRE0);
    UDR0 = '\r';
    ol_getchar();
    ol_getchar();
   // lprintf();
	while( ((thisChar = (char)ol_getchar())!='>') && (i < SAMPLESTRINGSIZEINCHARS))
    20e6:	89 83       	std	Y+1, r24	; 0x01
    20e8:	89 81       	ldd	r24, Y+1	; 0x01
    20ea:	8e 33       	cpi	r24, 0x3E	; 62
    20ec:	19 f0       	breq	.+6      	; 0x20f4 <getDataSample+0xe8>
    20ee:	a1 3e       	cpi	r26, 0xE1	; 225
    20f0:	b1 05       	cpc	r27, r1
    20f2:	69 f7       	brne	.-38     	; 0x20ce <getDataSample+0xc2>
		returnString[i] = thisChar;
		i++;
	}
	//lprintf("Read: %d %d\n", (sampleNumber * (SAMPLESTRINGSIZEINCHARS + 5)), SAMPLESTRINGSIZEINCHARS);

	returnString[i] = '\0';
    20f4:	ae 0d       	add	r26, r14
    20f6:	bf 1d       	adc	r27, r15
    20f8:	1c 92       	st	X, r1
	//while( (thisChar = (char)ol_getchar())!='>');

}
    20fa:	0f 90       	pop	r0
    20fc:	cf 91       	pop	r28
    20fe:	df 91       	pop	r29
    2100:	1f 91       	pop	r17
    2102:	0f 91       	pop	r16
    2104:	ff 90       	pop	r15
    2106:	ef 90       	pop	r14
    2108:	08 95       	ret

0000210a <initOpenLogFlight>:
}

void initOpenLogFlight(void)
{

	UBRR0H = OPENLOGUBRR >> 8;
    210a:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = OPENLOGUBRR;
    210e:	8d e4       	ldi	r24, 0x4D	; 77
    2110:	80 93 c4 00 	sts	0x00C4, r24
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    2114:	88 e1       	ldi	r24, 0x18	; 24
    2116:	80 93 c1 00 	sts	0x00C1, r24
    211a:	80 e2       	ldi	r24, 0x20	; 32
    211c:	9e e4       	ldi	r25, 0x4E	; 78
    211e:	2c e2       	ldi	r18, 0x2C	; 44
    2120:	31 e0       	ldi	r19, 0x01	; 1
    2122:	f9 01       	movw	r30, r18
    2124:	31 97       	sbiw	r30, 0x01	; 1
    2126:	f1 f7       	brne	.-4      	; 0x2124 <initOpenLogFlight+0x1a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2128:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    212a:	d9 f7       	brne	.-10     	; 0x2122 <initOpenLogFlight+0x18>

	//Delay for Openlog to start
	_delay_ms(2000);
	//Ensure we're in command mode.
	fprintf(&olout, "%c%c%c\r", (char)0x1a,(char)0x1a,(char)0x1a);
    212c:	8d b7       	in	r24, 0x3d	; 61
    212e:	9e b7       	in	r25, 0x3e	; 62
    2130:	0a 97       	sbiw	r24, 0x0a	; 10
    2132:	0f b6       	in	r0, 0x3f	; 63
    2134:	f8 94       	cli
    2136:	9e bf       	out	0x3e, r25	; 62
    2138:	0f be       	out	0x3f, r0	; 63
    213a:	8d bf       	out	0x3d, r24	; 61
    213c:	ed b7       	in	r30, 0x3d	; 61
    213e:	fe b7       	in	r31, 0x3e	; 62
    2140:	31 96       	adiw	r30, 0x01	; 1
    2142:	8d ea       	ldi	r24, 0xAD	; 173
    2144:	91 e0       	ldi	r25, 0x01	; 1
    2146:	ad b7       	in	r26, 0x3d	; 61
    2148:	be b7       	in	r27, 0x3e	; 62
    214a:	12 96       	adiw	r26, 0x02	; 2
    214c:	9c 93       	st	X, r25
    214e:	8e 93       	st	-X, r24
    2150:	11 97       	sbiw	r26, 0x01	; 1
    2152:	8c e5       	ldi	r24, 0x5C	; 92
    2154:	91 e0       	ldi	r25, 0x01	; 1
    2156:	93 83       	std	Z+3, r25	; 0x03
    2158:	82 83       	std	Z+2, r24	; 0x02
    215a:	8a e1       	ldi	r24, 0x1A	; 26
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	95 83       	std	Z+5, r25	; 0x05
    2160:	84 83       	std	Z+4, r24	; 0x04
    2162:	97 83       	std	Z+7, r25	; 0x07
    2164:	86 83       	std	Z+6, r24	; 0x06
    2166:	91 87       	std	Z+9, r25	; 0x09
    2168:	80 87       	std	Z+8, r24	; 0x08
    216a:	0e 94 83 38 	call	0x7106	; 0x7106 <fprintf>
    216e:	8d b7       	in	r24, 0x3d	; 61
    2170:	9e b7       	in	r25, 0x3e	; 62
    2172:	0a 96       	adiw	r24, 0x0a	; 10
    2174:	0f b6       	in	r0, 0x3f	; 63
    2176:	f8 94       	cli
    2178:	9e bf       	out	0x3e, r25	; 62
    217a:	0f be       	out	0x3f, r0	; 63
    217c:	8d bf       	out	0x3d, r24	; 61

}
    217e:	08 95       	ret

00002180 <putDataSample>:

void putDataSample(char *string)
{
    2180:	cf 93       	push	r28
    2182:	df 93       	push	r29
    2184:	ec 01       	movw	r28, r24
	//lprintf("h1\n");
	//Open file for writing
	fprintf(&olout, "append SAMPLES.TXT\r");
    2186:	84 e6       	ldi	r24, 0x64	; 100
    2188:	91 e0       	ldi	r25, 0x01	; 1
    218a:	6d ea       	ldi	r22, 0xAD	; 173
    218c:	71 e0       	ldi	r23, 0x01	; 1
    218e:	0e 94 c3 38 	call	0x7186	; 0x7186 <fputs>
    return 0;
}

inline uint8_t ol_getchar(void)
{
    while( !(UCSR0A & (1<<RXC0)) );
    2192:	80 91 c0 00 	lds	r24, 0x00C0
    2196:	87 ff       	sbrs	r24, 7
    2198:	fc cf       	rjmp	.-8      	; 0x2192 <putDataSample+0x12>
    return(UDR0);
    219a:	80 91 c6 00 	lds	r24, 0x00C6
void putDataSample(char *string)
{
	//lprintf("h1\n");
	//Open file for writing
	fprintf(&olout, "append SAMPLES.TXT\r");
	while((char)ol_getchar() != '<');
    219e:	8c 33       	cpi	r24, 0x3C	; 60
    21a0:	c1 f7       	brne	.-16     	; 0x2192 <putDataSample+0x12>
	//write the string (must be null terminated!)
	//lprintf("P: %s\n", string);
	fprintf(&olout, "%s\n", string);
    21a2:	00 d0       	rcall	.+0      	; 0x21a4 <putDataSample+0x24>
    21a4:	00 d0       	rcall	.+0      	; 0x21a6 <putDataSample+0x26>
    21a6:	00 d0       	rcall	.+0      	; 0x21a8 <putDataSample+0x28>
    21a8:	ed b7       	in	r30, 0x3d	; 61
    21aa:	fe b7       	in	r31, 0x3e	; 62
    21ac:	31 96       	adiw	r30, 0x01	; 1
    21ae:	8d ea       	ldi	r24, 0xAD	; 173
    21b0:	91 e0       	ldi	r25, 0x01	; 1
    21b2:	ad b7       	in	r26, 0x3d	; 61
    21b4:	be b7       	in	r27, 0x3e	; 62
    21b6:	12 96       	adiw	r26, 0x02	; 2
    21b8:	9c 93       	st	X, r25
    21ba:	8e 93       	st	-X, r24
    21bc:	11 97       	sbiw	r26, 0x01	; 1
    21be:	88 e7       	ldi	r24, 0x78	; 120
    21c0:	91 e0       	ldi	r25, 0x01	; 1
    21c2:	93 83       	std	Z+3, r25	; 0x03
    21c4:	82 83       	std	Z+2, r24	; 0x02
    21c6:	d5 83       	std	Z+5, r29	; 0x05
    21c8:	c4 83       	std	Z+4, r28	; 0x04
    21ca:	0e 94 83 38 	call	0x7106	; 0x7106 <fprintf>
    21ce:	28 ee       	ldi	r18, 0xE8	; 232
    21d0:	33 e0       	ldi	r19, 0x03	; 3
    21d2:	8d b7       	in	r24, 0x3d	; 61
    21d4:	9e b7       	in	r25, 0x3e	; 62
    21d6:	06 96       	adiw	r24, 0x06	; 6
    21d8:	0f b6       	in	r0, 0x3f	; 63
    21da:	f8 94       	cli
    21dc:	9e bf       	out	0x3e, r25	; 62
    21de:	0f be       	out	0x3f, r0	; 63
    21e0:	8d bf       	out	0x3d, r24	; 61
    21e2:	4c e2       	ldi	r20, 0x2C	; 44
    21e4:	51 e0       	ldi	r21, 0x01	; 1
    21e6:	ca 01       	movw	r24, r20
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	f1 f7       	brne	.-4      	; 0x21e8 <putDataSample+0x68>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ec:	21 50       	subi	r18, 0x01	; 1
    21ee:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f0:	d1 f7       	brne	.-12     	; 0x21e6 <putDataSample+0x66>
	_delay_ms(100);
	//Back to command mode.
	fprintf(&olout, "%c%c%c\r", (char)0x1a, (char)0x1a, (char)0x1a);
    21f2:	ad b7       	in	r26, 0x3d	; 61
    21f4:	be b7       	in	r27, 0x3e	; 62
    21f6:	1a 97       	sbiw	r26, 0x0a	; 10
    21f8:	0f b6       	in	r0, 0x3f	; 63
    21fa:	f8 94       	cli
    21fc:	be bf       	out	0x3e, r27	; 62
    21fe:	0f be       	out	0x3f, r0	; 63
    2200:	ad bf       	out	0x3d, r26	; 61
    2202:	ed b7       	in	r30, 0x3d	; 61
    2204:	fe b7       	in	r31, 0x3e	; 62
    2206:	31 96       	adiw	r30, 0x01	; 1
    2208:	8d ea       	ldi	r24, 0xAD	; 173
    220a:	91 e0       	ldi	r25, 0x01	; 1
    220c:	12 96       	adiw	r26, 0x02	; 2
    220e:	9c 93       	st	X, r25
    2210:	8e 93       	st	-X, r24
    2212:	11 97       	sbiw	r26, 0x01	; 1
    2214:	8c e5       	ldi	r24, 0x5C	; 92
    2216:	91 e0       	ldi	r25, 0x01	; 1
    2218:	93 83       	std	Z+3, r25	; 0x03
    221a:	82 83       	std	Z+2, r24	; 0x02
    221c:	8a e1       	ldi	r24, 0x1A	; 26
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	95 83       	std	Z+5, r25	; 0x05
    2222:	84 83       	std	Z+4, r24	; 0x04
    2224:	97 83       	std	Z+7, r25	; 0x07
    2226:	86 83       	std	Z+6, r24	; 0x06
    2228:	91 87       	std	Z+9, r25	; 0x09
    222a:	80 87       	std	Z+8, r24	; 0x08
    222c:	0e 94 83 38 	call	0x7106	; 0x7106 <fprintf>
    2230:	8d b7       	in	r24, 0x3d	; 61
    2232:	9e b7       	in	r25, 0x3e	; 62
    2234:	0a 96       	adiw	r24, 0x0a	; 10
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	f8 94       	cli
    223a:	9e bf       	out	0x3e, r25	; 62
    223c:	0f be       	out	0x3f, r0	; 63
    223e:	8d bf       	out	0x3d, r24	; 61
    return 0;
}

inline uint8_t ol_getchar(void)
{
    while( !(UCSR0A & (1<<RXC0)) );
    2240:	80 91 c0 00 	lds	r24, 0x00C0
    2244:	87 ff       	sbrs	r24, 7
    2246:	fc cf       	rjmp	.-8      	; 0x2240 <putDataSample+0xc0>
    return(UDR0);
    2248:	80 91 c6 00 	lds	r24, 0x00C6
	//lprintf("P: %s\n", string);
	fprintf(&olout, "%s\n", string);
	_delay_ms(100);
	//Back to command mode.
	fprintf(&olout, "%c%c%c\r", (char)0x1a, (char)0x1a, (char)0x1a);
	while((char)ol_getchar() != '>');
    224c:	8e 33       	cpi	r24, 0x3E	; 62
    224e:	c1 f7       	brne	.-16     	; 0x2240 <putDataSample+0xc0>
    return 0;
}

inline uint8_t ol_getchar(void)
{
    while( !(UCSR0A & (1<<RXC0)) );
    2250:	80 91 c0 00 	lds	r24, 0x00C0
    2254:	87 ff       	sbrs	r24, 7
    2256:	fc cf       	rjmp	.-8      	; 0x2250 <putDataSample+0xd0>
    return(UDR0);
    2258:	80 91 c6 00 	lds	r24, 0x00C6
	fprintf(&olout, "%s\n", string);
	_delay_ms(100);
	//Back to command mode.
	fprintf(&olout, "%c%c%c\r", (char)0x1a, (char)0x1a, (char)0x1a);
	while((char)ol_getchar() != '>');
	while((char)ol_getchar() != '>');
    225c:	8e 33       	cpi	r24, 0x3E	; 62
    225e:	c1 f7       	brne	.-16     	; 0x2250 <putDataSample+0xd0>
	//Sync to card in case we lose power or something
	fprintf(&olout, "sync\r");
    2260:	8c e7       	ldi	r24, 0x7C	; 124
    2262:	91 e0       	ldi	r25, 0x01	; 1
    2264:	6d ea       	ldi	r22, 0xAD	; 173
    2266:	71 e0       	ldi	r23, 0x01	; 1
    2268:	0e 94 c3 38 	call	0x7186	; 0x7186 <fputs>
    return 0;
}

inline uint8_t ol_getchar(void)
{
    while( !(UCSR0A & (1<<RXC0)) );
    226c:	80 91 c0 00 	lds	r24, 0x00C0
    2270:	87 ff       	sbrs	r24, 7
    2272:	fc cf       	rjmp	.-8      	; 0x226c <putDataSample+0xec>
    return(UDR0);
    2274:	80 91 c6 00 	lds	r24, 0x00C6
	fprintf(&olout, "%c%c%c\r", (char)0x1a, (char)0x1a, (char)0x1a);
	while((char)ol_getchar() != '>');
	while((char)ol_getchar() != '>');
	//Sync to card in case we lose power or something
	fprintf(&olout, "sync\r");
	while((char)ol_getchar() != '>');
    2278:	8e 33       	cpi	r24, 0x3E	; 62
    227a:	c1 f7       	brne	.-16     	; 0x226c <putDataSample+0xec>

}
    227c:	df 91       	pop	r29
    227e:	cf 91       	pop	r28
    2280:	08 95       	ret

00002282 <initOpenLogTest>:

//REMOVE BEFORE FLIGHT, THIS REMOVES THE LOG ON INIT
void initOpenLogTest(void)
{

	UBRR0H = OPENLOGUBRR >> 8;
    2282:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = OPENLOGUBRR;
    2286:	8d e4       	ldi	r24, 0x4D	; 77
    2288:	80 93 c4 00 	sts	0x00C4, r24
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    228c:	88 e1       	ldi	r24, 0x18	; 24
    228e:	80 93 c1 00 	sts	0x00C1, r24
    2292:	88 e9       	ldi	r24, 0x98	; 152
    2294:	9a e3       	ldi	r25, 0x3A	; 58
    2296:	2c e2       	ldi	r18, 0x2C	; 44
    2298:	31 e0       	ldi	r19, 0x01	; 1
    229a:	f9 01       	movw	r30, r18
    229c:	31 97       	sbiw	r30, 0x01	; 1
    229e:	f1 f7       	brne	.-4      	; 0x229c <initOpenLogTest+0x1a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a2:	d9 f7       	brne	.-10     	; 0x229a <initOpenLogTest+0x18>

	_delay_ms(1500);
	fprintf(&olout, "%c%c%c\r", (char)0x1a,(char)0x1a,(char)0x1a);
    22a4:	8d b7       	in	r24, 0x3d	; 61
    22a6:	9e b7       	in	r25, 0x3e	; 62
    22a8:	0a 97       	sbiw	r24, 0x0a	; 10
    22aa:	0f b6       	in	r0, 0x3f	; 63
    22ac:	f8 94       	cli
    22ae:	9e bf       	out	0x3e, r25	; 62
    22b0:	0f be       	out	0x3f, r0	; 63
    22b2:	8d bf       	out	0x3d, r24	; 61
    22b4:	ed b7       	in	r30, 0x3d	; 61
    22b6:	fe b7       	in	r31, 0x3e	; 62
    22b8:	31 96       	adiw	r30, 0x01	; 1
    22ba:	8d ea       	ldi	r24, 0xAD	; 173
    22bc:	91 e0       	ldi	r25, 0x01	; 1
    22be:	ad b7       	in	r26, 0x3d	; 61
    22c0:	be b7       	in	r27, 0x3e	; 62
    22c2:	12 96       	adiw	r26, 0x02	; 2
    22c4:	9c 93       	st	X, r25
    22c6:	8e 93       	st	-X, r24
    22c8:	11 97       	sbiw	r26, 0x01	; 1
    22ca:	8c e5       	ldi	r24, 0x5C	; 92
    22cc:	91 e0       	ldi	r25, 0x01	; 1
    22ce:	93 83       	std	Z+3, r25	; 0x03
    22d0:	82 83       	std	Z+2, r24	; 0x02
    22d2:	8a e1       	ldi	r24, 0x1A	; 26
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	95 83       	std	Z+5, r25	; 0x05
    22d8:	84 83       	std	Z+4, r24	; 0x04
    22da:	97 83       	std	Z+7, r25	; 0x07
    22dc:	86 83       	std	Z+6, r24	; 0x06
    22de:	91 87       	std	Z+9, r25	; 0x09
    22e0:	80 87       	std	Z+8, r24	; 0x08
    22e2:	0e 94 83 38 	call	0x7106	; 0x7106 <fprintf>
    22e6:	8d b7       	in	r24, 0x3d	; 61
    22e8:	9e b7       	in	r25, 0x3e	; 62
    22ea:	0a 96       	adiw	r24, 0x0a	; 10
    22ec:	0f b6       	in	r0, 0x3f	; 63
    22ee:	f8 94       	cli
    22f0:	9e bf       	out	0x3e, r25	; 62
    22f2:	0f be       	out	0x3f, r0	; 63
    22f4:	8d bf       	out	0x3d, r24	; 61
    return 0;
}

inline uint8_t ol_getchar(void)
{
    while( !(UCSR0A & (1<<RXC0)) );
    22f6:	80 91 c0 00 	lds	r24, 0x00C0
    22fa:	87 ff       	sbrs	r24, 7
    22fc:	fc cf       	rjmp	.-8      	; 0x22f6 <initOpenLogTest+0x74>
    return(UDR0);
    22fe:	80 91 c6 00 	lds	r24, 0x00C6
    UBRR0L = OPENLOGUBRR;
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);

	_delay_ms(1500);
	fprintf(&olout, "%c%c%c\r", (char)0x1a,(char)0x1a,(char)0x1a);
	while((char)ol_getchar() != '>');
    2302:	8e 33       	cpi	r24, 0x3E	; 62
    2304:	c1 f7       	brne	.-16     	; 0x22f6 <initOpenLogTest+0x74>

	fprintf(&olout, "echo off\r");
    2306:	82 e8       	ldi	r24, 0x82	; 130
    2308:	91 e0       	ldi	r25, 0x01	; 1
    230a:	6d ea       	ldi	r22, 0xAD	; 173
    230c:	71 e0       	ldi	r23, 0x01	; 1
    230e:	0e 94 c3 38 	call	0x7186	; 0x7186 <fputs>
    return 0;
}

inline uint8_t ol_getchar(void)
{
    while( !(UCSR0A & (1<<RXC0)) );
    2312:	80 91 c0 00 	lds	r24, 0x00C0
    2316:	87 ff       	sbrs	r24, 7
    2318:	fc cf       	rjmp	.-8      	; 0x2312 <initOpenLogTest+0x90>
    return(UDR0);
    231a:	80 91 c6 00 	lds	r24, 0x00C6
	_delay_ms(1500);
	fprintf(&olout, "%c%c%c\r", (char)0x1a,(char)0x1a,(char)0x1a);
	while((char)ol_getchar() != '>');

	fprintf(&olout, "echo off\r");
	while((char)ol_getchar() != '>');
    231e:	8e 33       	cpi	r24, 0x3E	; 62
    2320:	c1 f7       	brne	.-16     	; 0x2312 <initOpenLogTest+0x90>

	fprintf(&olout, "\r");
    2322:	8d e0       	ldi	r24, 0x0D	; 13
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	6d ea       	ldi	r22, 0xAD	; 173
    2328:	71 e0       	ldi	r23, 0x01	; 1
    232a:	0e 94 97 38 	call	0x712e	; 0x712e <fputc>
    return 0;
}

inline uint8_t ol_getchar(void)
{
    while( !(UCSR0A & (1<<RXC0)) );
    232e:	80 91 c0 00 	lds	r24, 0x00C0
    2332:	87 ff       	sbrs	r24, 7
    2334:	fc cf       	rjmp	.-8      	; 0x232e <initOpenLogTest+0xac>
    return(UDR0);
    2336:	80 91 c6 00 	lds	r24, 0x00C6

	fprintf(&olout, "echo off\r");
	while((char)ol_getchar() != '>');

	fprintf(&olout, "\r");
	while((char)ol_getchar() != '>');
    233a:	8e 33       	cpi	r24, 0x3E	; 62
    233c:	c1 f7       	brne	.-16     	; 0x232e <initOpenLogTest+0xac>

	fprintf(&olout, "rm SAMPLES.TXT\r");
    233e:	8c e8       	ldi	r24, 0x8C	; 140
    2340:	91 e0       	ldi	r25, 0x01	; 1
    2342:	6d ea       	ldi	r22, 0xAD	; 173
    2344:	71 e0       	ldi	r23, 0x01	; 1
    2346:	0e 94 c3 38 	call	0x7186	; 0x7186 <fputs>
    return 0;
}

inline uint8_t ol_getchar(void)
{
    while( !(UCSR0A & (1<<RXC0)) );
    234a:	80 91 c0 00 	lds	r24, 0x00C0
    234e:	87 ff       	sbrs	r24, 7
    2350:	fc cf       	rjmp	.-8      	; 0x234a <initOpenLogTest+0xc8>
    return(UDR0);
    2352:	80 91 c6 00 	lds	r24, 0x00C6

	fprintf(&olout, "\r");
	while((char)ol_getchar() != '>');

	fprintf(&olout, "rm SAMPLES.TXT\r");
	while((char)ol_getchar() != '>');
    2356:	8e 33       	cpi	r24, 0x3E	; 62
    2358:	c1 f7       	brne	.-16     	; 0x234a <initOpenLogTest+0xc8>

	fprintf(&olout, "new SAMPLES.TXT\r");
    235a:	8c e9       	ldi	r24, 0x9C	; 156
    235c:	91 e0       	ldi	r25, 0x01	; 1
    235e:	6d ea       	ldi	r22, 0xAD	; 173
    2360:	71 e0       	ldi	r23, 0x01	; 1
    2362:	0e 94 c3 38 	call	0x7186	; 0x7186 <fputs>
    return 0;
}

inline uint8_t ol_getchar(void)
{
    while( !(UCSR0A & (1<<RXC0)) );
    2366:	80 91 c0 00 	lds	r24, 0x00C0
    236a:	87 ff       	sbrs	r24, 7
    236c:	fc cf       	rjmp	.-8      	; 0x2366 <initOpenLogTest+0xe4>
    return(UDR0);
    236e:	80 91 c6 00 	lds	r24, 0x00C6

	fprintf(&olout, "rm SAMPLES.TXT\r");
	while((char)ol_getchar() != '>');

	fprintf(&olout, "new SAMPLES.TXT\r");
	while((char)ol_getchar() != '>');
    2372:	8e 33       	cpi	r24, 0x3E	; 62
    2374:	c1 f7       	brne	.-16     	; 0x2366 <initOpenLogTest+0xe4>

}
    2376:	08 95       	ret

00002378 <dumpGPS>:

	/*lprintf_P(PSTR("Lat: %f Lon: %f\n"), currentPositionData.latitude, currentPositionData.longitude);
	lprintf_P(PSTR("Alt: %d Sats: %d\n"), currentPositionData.altitude, currentPositionData.numberOfSats);
	lprintf_P(PSTR("vdop: %d hdop: %d\n"), currentPositionData.vdop, currentPositionData.hdop);*/

}
    2378:	08 95       	ret

0000237a <timedCutdown>:
void timedCutdown(uint32_t time)
{
	//BEFORE FLIGHT
	//Send Comm Controller the cutdown command
	//In response, will  I receive the Cutdown Now command?
}
    237a:	08 95       	ret

0000237c <uart_putchar>:
}



static int uart_putchar(char c, FILE *stream)
{
    237c:	1f 93       	push	r17
    237e:	18 2f       	mov	r17, r24
    if (c == '\n') uart_putchar('\r', stream);
    2380:	8a 30       	cpi	r24, 0x0A	; 10
    2382:	19 f4       	brne	.+6      	; 0x238a <uart_putchar+0xe>
    2384:	8d e0       	ldi	r24, 0x0D	; 13
    2386:	0e 94 be 11 	call	0x237c	; 0x237c <uart_putchar>

    loop_until_bit_is_set(UCSR1A, UDRE1);
    238a:	80 91 c8 00 	lds	r24, 0x00C8
    238e:	85 ff       	sbrs	r24, 5
    2390:	fc cf       	rjmp	.-8      	; 0x238a <uart_putchar+0xe>
    UDR1 = c;
    2392:	10 93 ce 00 	sts	0x00CE, r17

    return 0;
}
    2396:	80 e0       	ldi	r24, 0x00	; 0
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	1f 91       	pop	r17
    239c:	08 95       	ret

0000239e <uart_getchar>:

uint8_t uart_getchar(void)
{
    239e:	2f ef       	ldi	r18, 0xFF	; 255
    23a0:	3f ef       	ldi	r19, 0xFF	; 255
    23a2:	02 c0       	rjmp	.+4      	; 0x23a8 <uart_getchar+0xa>
	uint16_t errorCounter = 0xFFFF;
    while( !(UCSR1A & (1<<RXC1)) && (errorCounter > 100))
    {
		errorCounter--;
    23a4:	21 50       	subi	r18, 0x01	; 1
    23a6:	30 40       	sbci	r19, 0x00	; 0
}

uint8_t uart_getchar(void)
{
	uint16_t errorCounter = 0xFFFF;
    while( !(UCSR1A & (1<<RXC1)) && (errorCounter > 100))
    23a8:	80 91 c8 00 	lds	r24, 0x00C8
    23ac:	87 ff       	sbrs	r24, 7
    23ae:	04 c0       	rjmp	.+8      	; 0x23b8 <uart_getchar+0x1a>
    {
		errorCounter--;
	}
	if(errorCounter <= 101)
    23b0:	26 36       	cpi	r18, 0x66	; 102
    23b2:	31 05       	cpc	r19, r1
    23b4:	28 f4       	brcc	.+10     	; 0x23c0 <uart_getchar+0x22>
    23b6:	07 c0       	rjmp	.+14     	; 0x23c6 <uart_getchar+0x28>
}

uint8_t uart_getchar(void)
{
	uint16_t errorCounter = 0xFFFF;
    while( !(UCSR1A & (1<<RXC1)) && (errorCounter > 100))
    23b8:	24 36       	cpi	r18, 0x64	; 100
    23ba:	31 05       	cpc	r19, r1
    23bc:	99 f7       	brne	.-26     	; 0x23a4 <uart_getchar+0x6>
    23be:	03 c0       	rjmp	.+6      	; 0x23c6 <uart_getchar+0x28>
	}
	if(errorCounter <= 101)
	{
        return 0xff;
	} else {
        return UDR1;
    23c0:	80 91 ce 00 	lds	r24, 0x00CE
    23c4:	08 95       	ret
    23c6:	8f ef       	ldi	r24, 0xFF	; 255
	}

}
    23c8:	08 95       	ret

000023ca <lprintf_P>:
	}
	_delay_ms(100);
}

int lprintf_P(const char *str, ...)
{
    23ca:	0f 93       	push	r16
    23cc:	1f 93       	push	r17
    23ce:	df 93       	push	r29
    23d0:	cf 93       	push	r28
    23d2:	cd b7       	in	r28, 0x3d	; 61
    23d4:	de b7       	in	r29, 0x3e	; 62
    23d6:	c9 5c       	subi	r28, 0xC9	; 201
    23d8:	d0 40       	sbci	r29, 0x00	; 0
    23da:	0f b6       	in	r0, 0x3f	; 63
    23dc:	f8 94       	cli
    23de:	de bf       	out	0x3e, r29	; 62
    23e0:	0f be       	out	0x3f, r0	; 63
    23e2:	cd bf       	out	0x3d, r28	; 61
    23e4:	fe 01       	movw	r30, r28
    23e6:	e0 53       	subi	r30, 0x30	; 48
    23e8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ea:	41 91       	ld	r20, Z+
    23ec:	51 91       	ld	r21, Z+
	int chars;
	va_list args;

	va_start(args, str);

	chars = vsnprintf_P(lstr, 100, str, args);
    23ee:	8e 01       	movw	r16, r28
    23f0:	0f 5f       	subi	r16, 0xFF	; 255
    23f2:	1f 4f       	sbci	r17, 0xFF	; 255
    23f4:	c8 01       	movw	r24, r16
    23f6:	64 e6       	ldi	r22, 0x64	; 100
    23f8:	70 e0       	ldi	r23, 0x00	; 0
    23fa:	9f 01       	movw	r18, r30
    23fc:	0e 94 54 39 	call	0x72a8	; 0x72a8 <vsnprintf_P>
    2400:	bc 01       	movw	r22, r24

	if(chars > 100)
    2402:	85 36       	cpi	r24, 0x65	; 101
    2404:	91 05       	cpc	r25, r1
    2406:	1c f0       	brlt	.+6      	; 0x240e <lprintf_P+0x44>
    2408:	21 e0       	ldi	r18, 0x01	; 1
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	1c c0       	rjmp	.+56     	; 0x2446 <lprintf_P+0x7c>
	{
		va_end(args);
		return 1;
	} else {
		int i=0;
		i2cSend[0] = 0x05;
    240e:	fe 01       	movw	r30, r28
    2410:	eb 59       	subi	r30, 0x9B	; 155
    2412:	ff 4f       	sbci	r31, 0xFF	; 255
    2414:	85 e0       	ldi	r24, 0x05	; 5
    2416:	80 83       	st	Z, r24
    2418:	d8 01       	movw	r26, r16
    241a:	20 e0       	ldi	r18, 0x00	; 0
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	af 01       	movw	r20, r30
    2420:	07 c0       	rjmp	.+14     	; 0x2430 <lprintf_P+0x66>
		for(i=0; i <=chars; i++)
		{
			i2cSend[i+1] = (uint8_t)lstr[i];
    2422:	2f 5f       	subi	r18, 0xFF	; 255
    2424:	3f 4f       	sbci	r19, 0xFF	; 255
    2426:	fa 01       	movw	r30, r20
    2428:	e2 0f       	add	r30, r18
    242a:	f3 1f       	adc	r31, r19
    242c:	8d 91       	ld	r24, X+
    242e:	80 83       	st	Z, r24
		va_end(args);
		return 1;
	} else {
		int i=0;
		i2cSend[0] = 0x05;
		for(i=0; i <=chars; i++)
    2430:	62 17       	cp	r22, r18
    2432:	73 07       	cpc	r23, r19
    2434:	b4 f7       	brge	.-20     	; 0x2422 <lprintf_P+0x58>
		{
			i2cSend[i+1] = (uint8_t)lstr[i];
		}
		uint8_t retVal = i2cMasterSendNI(0b00001110, chars+1, i2cSend);
    2436:	6f 5f       	subi	r22, 0xFF	; 255
    2438:	8e e0       	ldi	r24, 0x0E	; 14
    243a:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <i2cMasterSendNI>
		if(retVal != I2C_OK)
    243e:	81 11       	cpse	r24, r1
		{
			yellow_on();
    2440:	2b 9a       	sbi	0x05, 3	; 5
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	30 e0       	ldi	r19, 0x00	; 0

		va_end(args);
		return 0;
	}
	_delay_ms(100);
}
    2446:	c9 01       	movw	r24, r18
    2448:	c7 53       	subi	r28, 0x37	; 55
    244a:	df 4f       	sbci	r29, 0xFF	; 255
    244c:	0f b6       	in	r0, 0x3f	; 63
    244e:	f8 94       	cli
    2450:	de bf       	out	0x3e, r29	; 62
    2452:	0f be       	out	0x3f, r0	; 63
    2454:	cd bf       	out	0x3d, r28	; 61
    2456:	cf 91       	pop	r28
    2458:	df 91       	pop	r29
    245a:	1f 91       	pop	r17
    245c:	0f 91       	pop	r16
    245e:	08 95       	ret

00002460 <lprintf>:
	}

}

int lprintf(char *str, ...)
{
    2460:	0f 93       	push	r16
    2462:	1f 93       	push	r17
    2464:	df 93       	push	r29
    2466:	cf 93       	push	r28
    2468:	cd b7       	in	r28, 0x3d	; 61
    246a:	de b7       	in	r29, 0x3e	; 62
    246c:	c9 5c       	subi	r28, 0xC9	; 201
    246e:	d0 40       	sbci	r29, 0x00	; 0
    2470:	0f b6       	in	r0, 0x3f	; 63
    2472:	f8 94       	cli
    2474:	de bf       	out	0x3e, r29	; 62
    2476:	0f be       	out	0x3f, r0	; 63
    2478:	cd bf       	out	0x3d, r28	; 61
    247a:	fe 01       	movw	r30, r28
    247c:	e0 53       	subi	r30, 0x30	; 48
    247e:	ff 4f       	sbci	r31, 0xFF	; 255
    2480:	41 91       	ld	r20, Z+
    2482:	51 91       	ld	r21, Z+
	int chars;
	va_list args;

	va_start(args, str);

	chars = vsnprintf(lstr, 100, str, args);
    2484:	8e 01       	movw	r16, r28
    2486:	0f 5f       	subi	r16, 0xFF	; 255
    2488:	1f 4f       	sbci	r17, 0xFF	; 255
    248a:	c8 01       	movw	r24, r16
    248c:	64 e6       	ldi	r22, 0x64	; 100
    248e:	70 e0       	ldi	r23, 0x00	; 0
    2490:	9f 01       	movw	r18, r30
    2492:	0e 94 2a 39 	call	0x7254	; 0x7254 <vsnprintf>
    2496:	bc 01       	movw	r22, r24

	if(chars > 100)
    2498:	85 36       	cpi	r24, 0x65	; 101
    249a:	91 05       	cpc	r25, r1
    249c:	1c f0       	brlt	.+6      	; 0x24a4 <lprintf+0x44>
    249e:	21 e0       	ldi	r18, 0x01	; 1
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	1c c0       	rjmp	.+56     	; 0x24dc <lprintf+0x7c>
	{
		va_end(args);
		return 1;
	} else {
		int i=0;
		i2cSend[0] = 0x05;
    24a4:	fe 01       	movw	r30, r28
    24a6:	eb 59       	subi	r30, 0x9B	; 155
    24a8:	ff 4f       	sbci	r31, 0xFF	; 255
    24aa:	85 e0       	ldi	r24, 0x05	; 5
    24ac:	80 83       	st	Z, r24
    24ae:	d8 01       	movw	r26, r16
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	af 01       	movw	r20, r30
    24b6:	07 c0       	rjmp	.+14     	; 0x24c6 <lprintf+0x66>
		for(i=0; i <=chars; i++)
		{
			i2cSend[i+1] = (uint8_t)lstr[i];
    24b8:	2f 5f       	subi	r18, 0xFF	; 255
    24ba:	3f 4f       	sbci	r19, 0xFF	; 255
    24bc:	fa 01       	movw	r30, r20
    24be:	e2 0f       	add	r30, r18
    24c0:	f3 1f       	adc	r31, r19
    24c2:	8d 91       	ld	r24, X+
    24c4:	80 83       	st	Z, r24
		va_end(args);
		return 1;
	} else {
		int i=0;
		i2cSend[0] = 0x05;
		for(i=0; i <=chars; i++)
    24c6:	62 17       	cp	r22, r18
    24c8:	73 07       	cpc	r23, r19
    24ca:	b4 f7       	brge	.-20     	; 0x24b8 <lprintf+0x58>
		{
			i2cSend[i+1] = (uint8_t)lstr[i];
		}
		uint8_t retVal = i2cMasterSendNI(0b00001110, chars+1, i2cSend);
    24cc:	6f 5f       	subi	r22, 0xFF	; 255
    24ce:	8e e0       	ldi	r24, 0x0E	; 14
    24d0:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <i2cMasterSendNI>
		if(retVal != I2C_OK)
    24d4:	81 11       	cpse	r24, r1
		{
			yellow_on();
    24d6:	2b 9a       	sbi	0x05, 3	; 5
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	30 e0       	ldi	r19, 0x00	; 0

		va_end(args);
		return 0;
	}
	_delay_ms(100);
}
    24dc:	c9 01       	movw	r24, r18
    24de:	c7 53       	subi	r28, 0x37	; 55
    24e0:	df 4f       	sbci	r29, 0xFF	; 255
    24e2:	0f b6       	in	r0, 0x3f	; 63
    24e4:	f8 94       	cli
    24e6:	de bf       	out	0x3e, r29	; 62
    24e8:	0f be       	out	0x3f, r0	; 63
    24ea:	cd bf       	out	0x3d, r28	; 61
    24ec:	cf 91       	pop	r28
    24ee:	df 91       	pop	r29
    24f0:	1f 91       	pop	r17
    24f2:	0f 91       	pop	r16
    24f4:	08 95       	ret

000024f6 <debugBallast>:
			break;
	}
}

void debugBallast(void)
{
    24f6:	ef 92       	push	r14
    24f8:	ff 92       	push	r15
    24fa:	0f 93       	push	r16
    24fc:	1f 93       	push	r17
    24fe:	df 93       	push	r29
    2500:	cf 93       	push	r28
    2502:	0f 92       	push	r0
    2504:	cd b7       	in	r28, 0x3d	; 61
    2506:	de b7       	in	r29, 0x3e	; 62
	lprintf_P(PSTR("testing ballast\n"));
    2508:	00 d0       	rcall	.+0      	; 0x250a <debugBallast+0x14>
    250a:	81 ec       	ldi	r24, 0xC1	; 193
    250c:	93 e0       	ldi	r25, 0x03	; 3
    250e:	ed b7       	in	r30, 0x3d	; 61
    2510:	fe b7       	in	r31, 0x3e	; 62
    2512:	92 83       	std	Z+2, r25	; 0x02
    2514:	81 83       	std	Z+1, r24	; 0x01
    2516:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>

	uint8_t data = 19;
    251a:	83 e1       	ldi	r24, 0x13	; 19
    251c:	89 83       	std	Y+1, r24	; 0x01
    251e:	0f 90       	pop	r0
    2520:	0f 90       	pop	r0
	uint8_t retVal;
	while( (retVal = i2cMasterSendNI(BALLASTMODULE, 1, &data)) != I2C_OK)
    2522:	7e 01       	movw	r14, r28
    2524:	08 94       	sec
    2526:	e1 1c       	adc	r14, r1
    2528:	f1 1c       	adc	r15, r1
    252a:	0c e2       	ldi	r16, 0x2C	; 44
    252c:	11 e0       	ldi	r17, 0x01	; 1
    252e:	07 c0       	rjmp	.+14     	; 0x253e <debugBallast+0x48>
    2530:	88 e8       	ldi	r24, 0x88	; 136
    2532:	93 e1       	ldi	r25, 0x13	; 19
    2534:	f8 01       	movw	r30, r16
    2536:	31 97       	sbiw	r30, 0x01	; 1
    2538:	f1 f7       	brne	.-4      	; 0x2536 <debugBallast+0x40>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    253a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    253c:	d9 f7       	brne	.-10     	; 0x2534 <debugBallast+0x3e>
    253e:	82 e1       	ldi	r24, 0x12	; 18
    2540:	61 e0       	ldi	r22, 0x01	; 1
    2542:	a7 01       	movw	r20, r14
    2544:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <i2cMasterSendNI>
    2548:	88 23       	and	r24, r24
    254a:	91 f7       	brne	.-28     	; 0x2530 <debugBallast+0x3a>
    254c:	80 e1       	ldi	r24, 0x10	; 16
    254e:	97 e2       	ldi	r25, 0x27	; 39
    2550:	2c e2       	ldi	r18, 0x2C	; 44
    2552:	31 e0       	ldi	r19, 0x01	; 1
    2554:	f9 01       	movw	r30, r18
    2556:	31 97       	sbiw	r30, 0x01	; 1
    2558:	f1 f7       	brne	.-4      	; 0x2556 <debugBallast+0x60>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    255a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    255c:	d9 f7       	brne	.-10     	; 0x2554 <debugBallast+0x5e>
	{
		_delay_ms(500);
	}
	_delay_ms(1000);
	lprintf(PSTR("turned ballast on.\n"));
    255e:	00 d0       	rcall	.+0      	; 0x2560 <debugBallast+0x6a>
    2560:	8d ea       	ldi	r24, 0xAD	; 173
    2562:	93 e0       	ldi	r25, 0x03	; 3
    2564:	ed b7       	in	r30, 0x3d	; 61
    2566:	fe b7       	in	r31, 0x3e	; 62
    2568:	92 83       	std	Z+2, r25	; 0x02
    256a:	81 83       	std	Z+1, r24	; 0x01
    256c:	0e 94 30 12 	call	0x2460	; 0x2460 <lprintf>
    2570:	2f ef       	ldi	r18, 0xFF	; 255
    2572:	3f ef       	ldi	r19, 0xFF	; 255
    2574:	0f 90       	pop	r0
    2576:	0f 90       	pop	r0
    2578:	4c e2       	ldi	r20, 0x2C	; 44
    257a:	51 e0       	ldi	r21, 0x01	; 1
    257c:	ca 01       	movw	r24, r20
    257e:	01 97       	sbiw	r24, 0x01	; 1
    2580:	f1 f7       	brne	.-4      	; 0x257e <debugBallast+0x88>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2582:	21 50       	subi	r18, 0x01	; 1
    2584:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2586:	d1 f7       	brne	.-12     	; 0x257c <debugBallast+0x86>
	_delay_ms(10000);
	lprintf("Done waiting\n");
    2588:	00 d0       	rcall	.+0      	; 0x258a <debugBallast+0x94>
    258a:	8b eb       	ldi	r24, 0xBB	; 187
    258c:	91 e0       	ldi	r25, 0x01	; 1
    258e:	ed b7       	in	r30, 0x3d	; 61
    2590:	fe b7       	in	r31, 0x3e	; 62
    2592:	92 83       	std	Z+2, r25	; 0x02
    2594:	81 83       	std	Z+1, r24	; 0x01
    2596:	0e 94 30 12 	call	0x2460	; 0x2460 <lprintf>
	data = 18;
    259a:	82 e1       	ldi	r24, 0x12	; 18
    259c:	89 83       	std	Y+1, r24	; 0x01
    259e:	0f 90       	pop	r0
    25a0:	0f 90       	pop	r0
	while( (retVal = i2cMasterSendNI(BALLASTMODULE, 1, &data)) != I2C_OK)
    25a2:	7e 01       	movw	r14, r28
    25a4:	08 94       	sec
    25a6:	e1 1c       	adc	r14, r1
    25a8:	f1 1c       	adc	r15, r1
    25aa:	0c e2       	ldi	r16, 0x2C	; 44
    25ac:	11 e0       	ldi	r17, 0x01	; 1
    25ae:	07 c0       	rjmp	.+14     	; 0x25be <debugBallast+0xc8>
    25b0:	88 e8       	ldi	r24, 0x88	; 136
    25b2:	93 e1       	ldi	r25, 0x13	; 19
    25b4:	f8 01       	movw	r30, r16
    25b6:	31 97       	sbiw	r30, 0x01	; 1
    25b8:	f1 f7       	brne	.-4      	; 0x25b6 <debugBallast+0xc0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ba:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25bc:	d9 f7       	brne	.-10     	; 0x25b4 <debugBallast+0xbe>
    25be:	82 e1       	ldi	r24, 0x12	; 18
    25c0:	61 e0       	ldi	r22, 0x01	; 1
    25c2:	a7 01       	movw	r20, r14
    25c4:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <i2cMasterSendNI>
    25c8:	88 23       	and	r24, r24
    25ca:	91 f7       	brne	.-28     	; 0x25b0 <debugBallast+0xba>
	{
		_delay_ms(500);
	}
	lprintf("out\n");
    25cc:	00 d0       	rcall	.+0      	; 0x25ce <debugBallast+0xd8>
    25ce:	89 ec       	ldi	r24, 0xC9	; 201
    25d0:	91 e0       	ldi	r25, 0x01	; 1
    25d2:	ed b7       	in	r30, 0x3d	; 61
    25d4:	fe b7       	in	r31, 0x3e	; 62
    25d6:	92 83       	std	Z+2, r25	; 0x02
    25d8:	81 83       	std	Z+1, r24	; 0x01
    25da:	0e 94 30 12 	call	0x2460	; 0x2460 <lprintf>
}
    25de:	0f 90       	pop	r0
    25e0:	0f 90       	pop	r0
    25e2:	0f 90       	pop	r0
    25e4:	cf 91       	pop	r28
    25e6:	df 91       	pop	r29
    25e8:	1f 91       	pop	r17
    25ea:	0f 91       	pop	r16
    25ec:	ff 90       	pop	r15
    25ee:	ef 90       	pop	r14
    25f0:	08 95       	ret

000025f2 <ioinit>:
}

void ioinit (void)
{
    //1 = output, 0 = input
    DDRA = 0b00010000;
    25f2:	80 e1       	ldi	r24, 0x10	; 16
    25f4:	81 b9       	out	0x01, r24	; 1
    DDRB = 0b11111111; //PB4 = MISO
    25f6:	8f ef       	ldi	r24, 0xFF	; 255
    25f8:	84 b9       	out	0x04, r24	; 4
    DDRC = 0b11111111; //
    25fa:	87 b9       	out	0x07, r24	; 7
    DDRD = 0b11011010; //PORTD (RX on PD0)
    25fc:	8a ed       	ldi	r24, 0xDA	; 218
    25fe:	8a b9       	out	0x0a, r24	; 10

    PORTD |= _BV(TAKEOFFPIN);
    2600:	5d 9a       	sbi	0x0b, 5	; 11

    XCLR_P |= _BV(XCLR);
    2602:	14 9a       	sbi	0x02, 4	; 2
    PORTB &= ~_BV(0) & ~_BV(1);
    2604:	85 b1       	in	r24, 0x05	; 5
    2606:	8c 7f       	andi	r24, 0xFC	; 252
    2608:	85 b9       	out	0x05, r24	; 5

    UBRR1H = MYUBRR >> 8;
    260a:	10 92 cd 00 	sts	0x00CD, r1
    UBRR1L = MYUBRR;
    260e:	8c e0       	ldi	r24, 0x0C	; 12
    2610:	80 93 cc 00 	sts	0x00CC, r24
    UCSR1B = (1<<RXEN1)|(1<<TXEN1);
    2614:	88 e1       	ldi	r24, 0x18	; 24
    2616:	80 93 c9 00 	sts	0x00C9, r24


    stdout = &mystdout; //Required for printf init
    261a:	8f e4       	ldi	r24, 0x4F	; 79
    261c:	92 e0       	ldi	r25, 0x02	; 2
    261e:	90 93 89 04 	sts	0x0489, r25
    2622:	80 93 88 04 	sts	0x0488, r24

    i2cInit();
    2626:	0e 94 23 0c 	call	0x1846	; 0x1846 <i2cInit>
    //i2cSetBitrate(10);

}
    262a:	08 95       	ret

0000262c <now>:

}


inline uint32_t now(void)
{
    262c:	4f 92       	push	r4
    262e:	5f 92       	push	r5
    2630:	7f 92       	push	r7
    2632:	8f 92       	push	r8
    2634:	9f 92       	push	r9
    2636:	af 92       	push	r10
    2638:	bf 92       	push	r11
    263a:	cf 92       	push	r12
    263c:	df 92       	push	r13
    263e:	ef 92       	push	r14
    2640:	ff 92       	push	r15
    2642:	0f 93       	push	r16
    2644:	1f 93       	push	r17
    2646:	df 93       	push	r29
    2648:	cf 93       	push	r28
    264a:	00 d0       	rcall	.+0      	; 0x264c <now+0x20>
    264c:	00 d0       	rcall	.+0      	; 0x264e <now+0x22>
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
	uint8_t seconds, minutes, hours, days;
	uint8_t error;
	error = getTime(&seconds, &minutes, &hours, &days);
    2652:	8e 01       	movw	r16, r28
    2654:	0e 5f       	subi	r16, 0xFE	; 254
    2656:	1f 4f       	sbci	r17, 0xFF	; 255
    2658:	33 e0       	ldi	r19, 0x03	; 3
    265a:	e3 2e       	mov	r14, r19
    265c:	f1 2c       	mov	r15, r1
    265e:	ec 0e       	add	r14, r28
    2660:	fd 1e       	adc	r15, r29
    2662:	24 e0       	ldi	r18, 0x04	; 4
    2664:	c2 2e       	mov	r12, r18
    2666:	d1 2c       	mov	r13, r1
    2668:	cc 0e       	add	r12, r28
    266a:	dd 1e       	adc	r13, r29
    266c:	5e 01       	movw	r10, r28
    266e:	08 94       	sec
    2670:	a1 1c       	adc	r10, r1
    2672:	b1 1c       	adc	r11, r1
    2674:	c5 01       	movw	r24, r10
    2676:	b8 01       	movw	r22, r16
    2678:	a7 01       	movw	r20, r14
    267a:	96 01       	movw	r18, r12
    267c:	0e 94 15 0b 	call	0x162a	; 0x162a <getTime>
    2680:	9c e2       	ldi	r25, 0x2C	; 44
    2682:	49 2e       	mov	r4, r25
    2684:	91 e0       	ldi	r25, 0x01	; 1
    2686:	59 2e       	mov	r5, r25
	while(error != 0)
	{
		_delay_ms(50);
		error = getTime(&seconds, &minutes, &hours, &days);
    2688:	70 2e       	mov	r7, r16
    268a:	81 2e       	mov	r8, r17
    268c:	9e 2c       	mov	r9, r14
    268e:	ef 2c       	mov	r14, r15
    2690:	0c 2d       	mov	r16, r12
    2692:	cd 2c       	mov	r12, r13
    2694:	1a 2d       	mov	r17, r10
    2696:	ab 2c       	mov	r10, r11
    2698:	11 c0       	rjmp	.+34     	; 0x26bc <now+0x90>
inline uint32_t now(void)
{
	uint8_t seconds, minutes, hours, days;
	uint8_t error;
	error = getTime(&seconds, &minutes, &hours, &days);
	while(error != 0)
    269a:	84 ef       	ldi	r24, 0xF4	; 244
    269c:	91 e0       	ldi	r25, 0x01	; 1
    269e:	f2 01       	movw	r30, r4
    26a0:	31 97       	sbiw	r30, 0x01	; 1
    26a2:	f1 f7       	brne	.-4      	; 0x26a0 <now+0x74>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a6:	d9 f7       	brne	.-10     	; 0x269e <now+0x72>
	{
		_delay_ms(50);
		error = getTime(&seconds, &minutes, &hours, &days);
    26a8:	81 2f       	mov	r24, r17
    26aa:	9a 2d       	mov	r25, r10
    26ac:	67 2d       	mov	r22, r7
    26ae:	78 2d       	mov	r23, r8
    26b0:	49 2d       	mov	r20, r9
    26b2:	5e 2d       	mov	r21, r14
    26b4:	20 2f       	mov	r18, r16
    26b6:	3c 2d       	mov	r19, r12
    26b8:	0e 94 15 0b 	call	0x162a	; 0x162a <getTime>
inline uint32_t now(void)
{
	uint8_t seconds, minutes, hours, days;
	uint8_t error;
	error = getTime(&seconds, &minutes, &hours, &days);
	while(error != 0)
    26bc:	88 23       	and	r24, r24
    26be:	69 f7       	brne	.-38     	; 0x269a <now+0x6e>
	{
		_delay_ms(50);
		error = getTime(&seconds, &minutes, &hours, &days);
	}
	return getEpochSeconds(seconds, minutes, hours, days);
    26c0:	89 81       	ldd	r24, Y+1	; 0x01
    26c2:	6a 81       	ldd	r22, Y+2	; 0x02
    26c4:	4b 81       	ldd	r20, Y+3	; 0x03
    26c6:	2c 81       	ldd	r18, Y+4	; 0x04
    26c8:	0e 94 00 25 	call	0x4a00	; 0x4a00 <getEpochSeconds>
}
    26cc:	0f 90       	pop	r0
    26ce:	0f 90       	pop	r0
    26d0:	0f 90       	pop	r0
    26d2:	0f 90       	pop	r0
    26d4:	cf 91       	pop	r28
    26d6:	df 91       	pop	r29
    26d8:	1f 91       	pop	r17
    26da:	0f 91       	pop	r16
    26dc:	ff 90       	pop	r15
    26de:	ef 90       	pop	r14
    26e0:	df 90       	pop	r13
    26e2:	cf 90       	pop	r12
    26e4:	bf 90       	pop	r11
    26e6:	af 90       	pop	r10
    26e8:	9f 90       	pop	r9
    26ea:	8f 90       	pop	r8
    26ec:	7f 90       	pop	r7
    26ee:	5f 90       	pop	r5
    26f0:	4f 90       	pop	r4
    26f2:	08 95       	ret

000026f4 <ballastStaticTickle>:
	}
}


void ballastStaticTickle(uint32_t time)
{
    26f4:	8f 92       	push	r8
    26f6:	9f 92       	push	r9
    26f8:	af 92       	push	r10
    26fa:	bf 92       	push	r11
    26fc:	df 92       	push	r13
    26fe:	ef 92       	push	r14
    2700:	ff 92       	push	r15
    2702:	0f 93       	push	r16
    2704:	1f 93       	push	r17
    2706:	df 93       	push	r29
    2708:	cf 93       	push	r28
    270a:	00 d0       	rcall	.+0      	; 0x270c <ballastStaticTickle+0x18>
    270c:	0f 92       	push	r0
    270e:	cd b7       	in	r28, 0x3d	; 61
    2710:	de b7       	in	r29, 0x3e	; 62
    2712:	7b 01       	movw	r14, r22
    2714:	8c 01       	movw	r16, r24
	#ifdef FCPUDEBUG
		lprintf_P(PSTR("In ballast tickle\n"));
	#endif
	if((time - lastBallastTime) > 3600)
    2716:	80 91 4f 04 	lds	r24, 0x044F
    271a:	90 91 50 04 	lds	r25, 0x0450
    271e:	a0 91 51 04 	lds	r26, 0x0451
    2722:	b0 91 52 04 	lds	r27, 0x0452
    2726:	a8 01       	movw	r20, r16
    2728:	97 01       	movw	r18, r14
    272a:	28 1b       	sub	r18, r24
    272c:	39 0b       	sbc	r19, r25
    272e:	4a 0b       	sbc	r20, r26
    2730:	5b 0b       	sbc	r21, r27
    2732:	da 01       	movw	r26, r20
    2734:	c9 01       	movw	r24, r18
    2736:	81 51       	subi	r24, 0x11	; 17
    2738:	9e 40       	sbci	r25, 0x0E	; 14
    273a:	a0 40       	sbci	r26, 0x00	; 0
    273c:	b0 40       	sbci	r27, 0x00	; 0
    273e:	c0 f1       	brcs	.+112    	; 0x27b0 <ballastStaticTickle+0xbc>
	{
		uint8_t retVal;
		uint8_t dataToSend[3] = {20,00,01};
    2740:	de 01       	movw	r26, r28
    2742:	11 96       	adiw	r26, 0x01	; 1
    2744:	ed e5       	ldi	r30, 0x5D	; 93
    2746:	f2 e0       	ldi	r31, 0x02	; 2
    2748:	83 e0       	ldi	r24, 0x03	; 3
    274a:	01 90       	ld	r0, Z+
    274c:	0d 92       	st	X+, r0
    274e:	81 50       	subi	r24, 0x01	; 1
    2750:	e1 f7       	brne	.-8      	; 0x274a <ballastStaticTickle+0x56>
    2752:	dd 24       	eor	r13, r13
		uint8_t errorTolerance = 0;
		while( ((retVal = i2cMasterSendNI(18, 3, dataToSend)) != I2C_OK) && errorTolerance < CRITCOMFAIL)
    2754:	4e 01       	movw	r8, r28
    2756:	08 94       	sec
    2758:	81 1c       	adc	r8, r1
    275a:	91 1c       	adc	r9, r1
    275c:	4c e2       	ldi	r20, 0x2C	; 44
    275e:	a4 2e       	mov	r10, r20
    2760:	41 e0       	ldi	r20, 0x01	; 1
    2762:	b4 2e       	mov	r11, r20
    2764:	08 c0       	rjmp	.+16     	; 0x2776 <ballastStaticTickle+0x82>
    2766:	88 e8       	ldi	r24, 0x88	; 136
    2768:	93 e1       	ldi	r25, 0x13	; 19
    276a:	f5 01       	movw	r30, r10
    276c:	31 97       	sbiw	r30, 0x01	; 1
    276e:	f1 f7       	brne	.-4      	; 0x276c <ballastStaticTickle+0x78>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2770:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2772:	d9 f7       	brne	.-10     	; 0x276a <ballastStaticTickle+0x76>
		{
			_delay_ms(500);
			errorTolerance++;
    2774:	d3 94       	inc	r13
	if((time - lastBallastTime) > 3600)
	{
		uint8_t retVal;
		uint8_t dataToSend[3] = {20,00,01};
		uint8_t errorTolerance = 0;
		while( ((retVal = i2cMasterSendNI(18, 3, dataToSend)) != I2C_OK) && errorTolerance < CRITCOMFAIL)
    2776:	82 e1       	ldi	r24, 0x12	; 18
    2778:	63 e0       	ldi	r22, 0x03	; 3
    277a:	a4 01       	movw	r20, r8
    277c:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <i2cMasterSendNI>
    2780:	88 23       	and	r24, r24
    2782:	21 f0       	breq	.+8      	; 0x278c <ballastStaticTickle+0x98>
    2784:	49 e1       	ldi	r20, 0x19	; 25
    2786:	d4 16       	cp	r13, r20
    2788:	71 f7       	brne	.-36     	; 0x2766 <ballastStaticTickle+0x72>
    278a:	03 c0       	rjmp	.+6      	; 0x2792 <ballastStaticTickle+0x9e>
		{
			_delay_ms(500);
			errorTolerance++;
		}
		if(errorTolerance >= CRITCOMFAIL)
    278c:	58 e1       	ldi	r21, 0x18	; 24
    278e:	5d 15       	cp	r21, r13
    2790:	30 f4       	brcc	.+12     	; 0x279e <ballastStaticTickle+0xaa>
		{
			#ifdef FCPUDEBUG
				lprintf_P(PSTR("Ballast Error\n"));
			#endif
			statusCode = (statusCode & 0xFFFD) | (1 << 1);
    2792:	80 91 2b 03 	lds	r24, 0x032B
    2796:	90 91 2c 03 	lds	r25, 0x032C
    279a:	82 60       	ori	r24, 0x02	; 2
    279c:	05 c0       	rjmp	.+10     	; 0x27a8 <ballastStaticTickle+0xb4>
		} else {
			statusCode = (statusCode & 0xFFFD);
    279e:	80 91 2b 03 	lds	r24, 0x032B
    27a2:	90 91 2c 03 	lds	r25, 0x032C
    27a6:	8d 7f       	andi	r24, 0xFD	; 253
    27a8:	90 93 2c 03 	sts	0x032C, r25
    27ac:	80 93 2b 03 	sts	0x032B, r24
		}
	}
	scheduleQueueAdd(&ballastStaticTickle, time+3600);
    27b0:	80 e1       	ldi	r24, 0x10	; 16
    27b2:	9e e0       	ldi	r25, 0x0E	; 14
    27b4:	a0 e0       	ldi	r26, 0x00	; 0
    27b6:	b0 e0       	ldi	r27, 0x00	; 0
    27b8:	e8 0e       	add	r14, r24
    27ba:	f9 1e       	adc	r15, r25
    27bc:	0a 1f       	adc	r16, r26
    27be:	1b 1f       	adc	r17, r27
    27c0:	8a e7       	ldi	r24, 0x7A	; 122
    27c2:	93 e1       	ldi	r25, 0x13	; 19
    27c4:	b8 01       	movw	r22, r16
    27c6:	a7 01       	movw	r20, r14
    27c8:	0e 94 47 2c 	call	0x588e	; 0x588e <scheduleQueueAdd>
}
    27cc:	0f 90       	pop	r0
    27ce:	0f 90       	pop	r0
    27d0:	0f 90       	pop	r0
    27d2:	cf 91       	pop	r28
    27d4:	df 91       	pop	r29
    27d6:	1f 91       	pop	r17
    27d8:	0f 91       	pop	r16
    27da:	ff 90       	pop	r15
    27dc:	ef 90       	pop	r14
    27de:	df 90       	pop	r13
    27e0:	bf 90       	pop	r11
    27e2:	af 90       	pop	r10
    27e4:	9f 90       	pop	r9
    27e6:	8f 90       	pop	r8
    27e8:	08 95       	ret

000027ea <rapidHFXmit>:

//Simply add this to the scheduler queue if you want it.
//Note: needs to be able to remove itself from the queue.

void rapidHFXmit(uint32_t time)
{
    27ea:	ef 92       	push	r14
    27ec:	ff 92       	push	r15
    27ee:	0f 93       	push	r16
    27f0:	1f 93       	push	r17
    27f2:	7b 01       	movw	r14, r22
    27f4:	8c 01       	movw	r16, r24
	#ifdef FCPUDEBUG
		lprintf_P(PSTR("In Rapid HF TX\n"));
	#endif
	if(rapidHFEnable == 1)
    27f6:	80 91 2e 03 	lds	r24, 0x032E
    27fa:	81 30       	cpi	r24, 0x01	; 1
    27fc:	71 f4       	brne	.+28     	; 0x281a <rapidHFXmit+0x30>
	{
		//send comm controller rapid HF command
		scheduleQueueAdd(&rapidHFXmit, time+eeprom_read_byte(&EEhfRapidTransmit));
    27fe:	83 e2       	ldi	r24, 0x23	; 35
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	0e 94 06 3a 	call	0x740c	; 0x740c <__eerd_byte_m324p>
    2806:	e8 0e       	add	r14, r24
    2808:	f1 1c       	adc	r15, r1
    280a:	01 1d       	adc	r16, r1
    280c:	11 1d       	adc	r17, r1
    280e:	85 ef       	ldi	r24, 0xF5	; 245
    2810:	93 e1       	ldi	r25, 0x13	; 19
    2812:	b8 01       	movw	r22, r16
    2814:	a7 01       	movw	r20, r14
    2816:	0e 94 47 2c 	call	0x588e	; 0x588e <scheduleQueueAdd>
	}
}
    281a:	1f 91       	pop	r17
    281c:	0f 91       	pop	r16
    281e:	ff 90       	pop	r15
    2820:	ef 90       	pop	r14
    2822:	08 95       	ret

00002824 <updateCommHFTelemetry>:


}

void updateCommHFTelemetry(uint32_t time)
{
    2824:	ab 01       	movw	r20, r22
    2826:	bc 01       	movw	r22, r24
	//send raw pack voltage
	//send top temp

	//send to comm controller

	scheduleQueueAdd(&updateCommHFTelemetry, time+60);
    2828:	44 5c       	subi	r20, 0xC4	; 196
    282a:	5f 4f       	sbci	r21, 0xFF	; 255
    282c:	6f 4f       	sbci	r22, 0xFF	; 255
    282e:	7f 4f       	sbci	r23, 0xFF	; 255
    2830:	82 e1       	ldi	r24, 0x12	; 18
    2832:	94 e1       	ldi	r25, 0x14	; 20
    2834:	0e 94 47 2c 	call	0x588e	; 0x588e <scheduleQueueAdd>
}
    2838:	08 95       	ret

0000283a <autoBallast>:
uint8_t ballastBabySit;
int16_t babySitVertSpeed;
int16_t currentTargetVspeed;
uint32_t lastBallastTime;
void autoBallast(uint32_t time)
{
    283a:	8f 92       	push	r8
    283c:	9f 92       	push	r9
    283e:	af 92       	push	r10
    2840:	bf 92       	push	r11
    2842:	cf 92       	push	r12
    2844:	df 92       	push	r13
    2846:	ef 92       	push	r14
    2848:	ff 92       	push	r15
    284a:	0f 93       	push	r16
    284c:	1f 93       	push	r17
    284e:	df 93       	push	r29
    2850:	cf 93       	push	r28
    2852:	cd b7       	in	r28, 0x3d	; 61
    2854:	de b7       	in	r29, 0x3e	; 62
    2856:	67 97       	sbiw	r28, 0x17	; 23
    2858:	0f b6       	in	r0, 0x3f	; 63
    285a:	f8 94       	cli
    285c:	de bf       	out	0x3e, r29	; 62
    285e:	0f be       	out	0x3f, r0	; 63
    2860:	cd bf       	out	0x3d, r28	; 61
    2862:	7b 01       	movw	r14, r22
    2864:	8c 01       	movw	r16, r24
	#ifdef FCPUDEBUG
		lprintf_P(PSTR("In autoBallast\n"));
	#endif
	uint8_t retVal;
	uint16_t targetAltitude = eeprom_read_word(&EEballastTargetAltitude);
    2866:	85 e0       	ldi	r24, 0x05	; 5
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>
    286e:	5c 01       	movw	r10, r24
	uint16_t ballastSafety = eeprom_read_word(&EEballastSafetyAltThresh);
    2870:	8f e0       	ldi	r24, 0x0F	; 15
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>
    2878:	6c 01       	movw	r12, r24
	uint8_t ballastDisabled = eeprom_read_byte(&EEautoBallastDisable);
    287a:	81 e1       	ldi	r24, 0x11	; 17
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	0e 94 06 3a 	call	0x740c	; 0x740c <__eerd_byte_m324p>
    2882:	98 2f       	mov	r25, r24

	struct gpsData myGPS = currentPositionData;
    2884:	de 01       	movw	r26, r28
    2886:	12 96       	adiw	r26, 0x02	; 2
    2888:	e7 e3       	ldi	r30, 0x37	; 55
    288a:	f4 e0       	ldi	r31, 0x04	; 4
    288c:	86 e1       	ldi	r24, 0x16	; 22
    288e:	01 90       	ld	r0, Z+
    2890:	0d 92       	st	X+, r0
    2892:	81 50       	subi	r24, 0x01	; 1
    2894:	e1 f7       	brne	.-8      	; 0x288e <autoBallast+0x54>
    2896:	2d 89       	ldd	r18, Y+21	; 0x15
    2898:	3e 89       	ldd	r19, Y+22	; 0x16

	//Failure mode: Try to maintain stability (moderate upward float)
	uint16_t thisAltitude = myGPS.altitude;

	if(ballastBabySit == 1)
    289a:	80 91 55 04 	lds	r24, 0x0455
    289e:	81 30       	cpi	r24, 0x01	; 1
    28a0:	09 f0       	breq	.+2      	; 0x28a4 <autoBallast+0x6a>
    28a2:	58 c0       	rjmp	.+176    	; 0x2954 <autoBallast+0x11a>
	{
			#ifdef FCPUDEBUG
				lprintf_P(PSTR("Ballast Babysit Enable!\n"));
			#endif
		if(vSpeedAvg > (currentTargetVspeed + babySitVertSpeed)/2)
    28a4:	80 91 4d 04 	lds	r24, 0x044D
    28a8:	90 91 4e 04 	lds	r25, 0x044E
    28ac:	20 91 53 04 	lds	r18, 0x0453
    28b0:	30 91 54 04 	lds	r19, 0x0454
    28b4:	82 0f       	add	r24, r18
    28b6:	93 1f       	adc	r25, r19
    28b8:	62 e0       	ldi	r22, 0x02	; 2
    28ba:	70 e0       	ldi	r23, 0x00	; 0
    28bc:	0e 94 63 36 	call	0x6cc6	; 0x6cc6 <__divmodhi4>
    28c0:	80 91 34 04 	lds	r24, 0x0434
    28c4:	90 91 35 04 	lds	r25, 0x0435
    28c8:	68 17       	cp	r22, r24
    28ca:	79 07       	cpc	r23, r25
    28cc:	0c f0       	brlt	.+2      	; 0x28d0 <autoBallast+0x96>
    28ce:	bb c0       	rjmp	.+374    	; 0x2a46 <autoBallast+0x20c>
			#ifdef FCPUDEBUG
				lprintf_P(PSTR("Babysit: 1/2 T reached\n"));
			#endif
			//Close ballast
			//Send i2c address 0x09, 0d18
			uint8_t data = 18;
    28d0:	82 e1       	ldi	r24, 0x12	; 18
    28d2:	89 83       	std	Y+1, r24	; 0x01
    28d4:	dd 24       	eor	r13, r13
			uint8_t errorTolerance = 0;
			while( ((retVal = i2cMasterSendNI(BALLASTMODULE, 1, &data)) != I2C_OK) && errorTolerance < CRITCOMFAIL)
    28d6:	4e 01       	movw	r8, r28
    28d8:	08 94       	sec
    28da:	81 1c       	adc	r8, r1
    28dc:	91 1c       	adc	r9, r1
    28de:	7c e2       	ldi	r23, 0x2C	; 44
    28e0:	a7 2e       	mov	r10, r23
    28e2:	71 e0       	ldi	r23, 0x01	; 1
    28e4:	b7 2e       	mov	r11, r23
    28e6:	08 c0       	rjmp	.+16     	; 0x28f8 <autoBallast+0xbe>
    28e8:	88 e8       	ldi	r24, 0x88	; 136
    28ea:	93 e1       	ldi	r25, 0x13	; 19
    28ec:	f5 01       	movw	r30, r10
    28ee:	31 97       	sbiw	r30, 0x01	; 1
    28f0:	f1 f7       	brne	.-4      	; 0x28ee <autoBallast+0xb4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28f2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28f4:	d9 f7       	brne	.-10     	; 0x28ec <autoBallast+0xb2>
			{
				_delay_ms(500);
				errorTolerance++;
    28f6:	d3 94       	inc	r13
			#endif
			//Close ballast
			//Send i2c address 0x09, 0d18
			uint8_t data = 18;
			uint8_t errorTolerance = 0;
			while( ((retVal = i2cMasterSendNI(BALLASTMODULE, 1, &data)) != I2C_OK) && errorTolerance < CRITCOMFAIL)
    28f8:	82 e1       	ldi	r24, 0x12	; 18
    28fa:	61 e0       	ldi	r22, 0x01	; 1
    28fc:	a4 01       	movw	r20, r8
    28fe:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <i2cMasterSendNI>
    2902:	88 23       	and	r24, r24
    2904:	21 f0       	breq	.+8      	; 0x290e <autoBallast+0xd4>
    2906:	89 e1       	ldi	r24, 0x19	; 25
    2908:	d8 16       	cp	r13, r24
    290a:	71 f7       	brne	.-36     	; 0x28e8 <autoBallast+0xae>
    290c:	03 c0       	rjmp	.+6      	; 0x2914 <autoBallast+0xda>
			{
				_delay_ms(500);
				errorTolerance++;
			}
			if(errorTolerance >= CRITCOMFAIL)
    290e:	98 e1       	ldi	r25, 0x18	; 24
    2910:	9d 15       	cp	r25, r13
    2912:	30 f4       	brcc	.+12     	; 0x2920 <autoBallast+0xe6>
			{
				#ifdef FCPUDEBUG
					lprintf_P(PSTR("Ballast Error\n"));
				#endif
				statusCode = (statusCode & 0xFFFD) | (1 << 1);
    2914:	80 91 2b 03 	lds	r24, 0x032B
    2918:	90 91 2c 03 	lds	r25, 0x032C
    291c:	82 60       	ori	r24, 0x02	; 2
    291e:	05 c0       	rjmp	.+10     	; 0x292a <autoBallast+0xf0>
			} else {
				statusCode = (statusCode & 0xFFFD);
    2920:	80 91 2b 03 	lds	r24, 0x032B
    2924:	90 91 2c 03 	lds	r25, 0x032C
    2928:	8d 7f       	andi	r24, 0xFD	; 253
    292a:	90 93 2c 03 	sts	0x032C, r25
    292e:	80 93 2b 03 	sts	0x032B, r24
			}
			scheduleQueueAdd(&autoBallast, time+60);
    2932:	8c e3       	ldi	r24, 0x3C	; 60
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	a0 e0       	ldi	r26, 0x00	; 0
    2938:	b0 e0       	ldi	r27, 0x00	; 0
    293a:	e8 0e       	add	r14, r24
    293c:	f9 1e       	adc	r15, r25
    293e:	0a 1f       	adc	r16, r26
    2940:	1b 1f       	adc	r17, r27
    2942:	8d e1       	ldi	r24, 0x1D	; 29
    2944:	94 e1       	ldi	r25, 0x14	; 20
    2946:	b8 01       	movw	r22, r16
    2948:	a7 01       	movw	r20, r14
    294a:	0e 94 47 2c 	call	0x588e	; 0x588e <scheduleQueueAdd>
			ballastBabySit = 0;
    294e:	10 92 55 04 	sts	0x0455, r1
    2952:	bd c0       	rjmp	.+378    	; 0x2ace <autoBallast+0x294>
		#ifdef FCPUDEBUG
			lprintf_P(PSTR("No babysity\n"));
		#endif

		//If we're above the safety threshold
		if(ballastSafety < thisAltitude && ballastDisabled != 1)
    2954:	c2 16       	cp	r12, r18
    2956:	d3 06       	cpc	r13, r19
    2958:	08 f0       	brcs	.+2      	; 0x295c <autoBallast+0x122>
    295a:	7a c0       	rjmp	.+244    	; 0x2a50 <autoBallast+0x216>
    295c:	91 30       	cpi	r25, 0x01	; 1
    295e:	09 f4       	brne	.+2      	; 0x2962 <autoBallast+0x128>
    2960:	77 c0       	rjmp	.+238    	; 0x2a50 <autoBallast+0x216>
				//Switch to positive target velocity
			//else if current altitude is above target altitude
				//use negative target velocity
			//else if current altitude is below target altitude AND vertical velocity is below target
				//use zero target
			if(thisAltitude <= targetAltitude && vSpeedAvg > currentTargetVspeed)
    2962:	a2 16       	cp	r10, r18
    2964:	b3 06       	cpc	r11, r19
    2966:	80 f0       	brcs	.+32     	; 0x2988 <autoBallast+0x14e>
    2968:	40 91 34 04 	lds	r20, 0x0434
    296c:	50 91 35 04 	lds	r21, 0x0435
    2970:	80 91 53 04 	lds	r24, 0x0453
    2974:	90 91 54 04 	lds	r25, 0x0454
    2978:	84 17       	cp	r24, r20
    297a:	95 07       	cpc	r25, r21
    297c:	74 f4       	brge	.+28     	; 0x299a <autoBallast+0x160>
			{
				#ifdef FCPUDEBUG
					lprintf_P(PSTR("Ballast: TVSpeed+\n"));
				#endif
				currentTargetVspeed = eeprom_read_word(&EEballastTargetPositiveVSpeed);
    297e:	87 e0       	ldi	r24, 0x07	; 7
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>
    2986:	04 c0       	rjmp	.+8      	; 0x2990 <autoBallast+0x156>
			} else if(thisAltitude > targetAltitude)
			{
				#ifdef FCPUDEBUG
					lprintf_P(PSTR("Ballast: TVSpeed-\n"));
				#endif
				currentTargetVspeed = eeprom_read_word(&EEballastTargetNegativeVSpeed);
    2988:	89 e0       	ldi	r24, 0x09	; 9
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>
    2990:	90 93 54 04 	sts	0x0454, r25
    2994:	80 93 53 04 	sts	0x0453, r24
    2998:	0a c0       	rjmp	.+20     	; 0x29ae <autoBallast+0x174>
			} else if(thisAltitude < targetAltitude && vSpeedAvg < currentTargetVspeed)
    299a:	2a 15       	cp	r18, r10
    299c:	3b 05       	cpc	r19, r11
    299e:	38 f4       	brcc	.+14     	; 0x29ae <autoBallast+0x174>
    29a0:	48 17       	cp	r20, r24
    29a2:	59 07       	cpc	r21, r25
    29a4:	24 f4       	brge	.+8      	; 0x29ae <autoBallast+0x174>
			{
				#ifdef FCPUDEBUG
					lprintf_P(PSTR("Ballast: TVSpeed0\n"));
				#endif
				currentTargetVspeed = 0;
    29a6:	10 92 54 04 	sts	0x0454, r1
    29aa:	10 92 53 04 	sts	0x0453, r1

			//if vertical velocity is below target
			//save VV
			//set "come back and check" flag
			//turn on the ballast
			if(vSpeedAvg < currentTargetVspeed)
    29ae:	20 91 34 04 	lds	r18, 0x0434
    29b2:	30 91 35 04 	lds	r19, 0x0435
    29b6:	80 91 53 04 	lds	r24, 0x0453
    29ba:	90 91 54 04 	lds	r25, 0x0454
    29be:	28 17       	cp	r18, r24
    29c0:	39 07       	cpc	r19, r25
    29c2:	0c f0       	brlt	.+2      	; 0x29c6 <autoBallast+0x18c>
    29c4:	76 c0       	rjmp	.+236    	; 0x2ab2 <autoBallast+0x278>
			{
				ballastBabySit = 1;
    29c6:	81 e0       	ldi	r24, 0x01	; 1
    29c8:	80 93 55 04 	sts	0x0455, r24
				babySitVertSpeed = vSpeedAvg;
    29cc:	30 93 4e 04 	sts	0x044E, r19
    29d0:	20 93 4d 04 	sts	0x044D, r18
				lastBallastTime = time;
    29d4:	e0 92 4f 04 	sts	0x044F, r14
    29d8:	f0 92 50 04 	sts	0x0450, r15
    29dc:	00 93 51 04 	sts	0x0451, r16
    29e0:	10 93 52 04 	sts	0x0452, r17
				//turn on the ballast
				//send 0x09 0d19
				uint8_t data = 19;
    29e4:	83 e1       	ldi	r24, 0x13	; 19
    29e6:	89 83       	std	Y+1, r24	; 0x01
    29e8:	dd 24       	eor	r13, r13
				uint8_t errorTolerance = 0;
				while( ((retVal = i2cMasterSendNI(BALLASTMODULE, 1, &data)) != I2C_OK) && errorTolerance < CRITCOMFAIL)
    29ea:	4e 01       	movw	r8, r28
    29ec:	08 94       	sec
    29ee:	81 1c       	adc	r8, r1
    29f0:	91 1c       	adc	r9, r1
    29f2:	6c e2       	ldi	r22, 0x2C	; 44
    29f4:	a6 2e       	mov	r10, r22
    29f6:	61 e0       	ldi	r22, 0x01	; 1
    29f8:	b6 2e       	mov	r11, r22
    29fa:	08 c0       	rjmp	.+16     	; 0x2a0c <autoBallast+0x1d2>
    29fc:	88 e8       	ldi	r24, 0x88	; 136
    29fe:	93 e1       	ldi	r25, 0x13	; 19
    2a00:	f5 01       	movw	r30, r10
    2a02:	31 97       	sbiw	r30, 0x01	; 1
    2a04:	f1 f7       	brne	.-4      	; 0x2a02 <autoBallast+0x1c8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a06:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a08:	d9 f7       	brne	.-10     	; 0x2a00 <autoBallast+0x1c6>
				{
					_delay_ms(500);
					errorTolerance++;
    2a0a:	d3 94       	inc	r13
				lastBallastTime = time;
				//turn on the ballast
				//send 0x09 0d19
				uint8_t data = 19;
				uint8_t errorTolerance = 0;
				while( ((retVal = i2cMasterSendNI(BALLASTMODULE, 1, &data)) != I2C_OK) && errorTolerance < CRITCOMFAIL)
    2a0c:	82 e1       	ldi	r24, 0x12	; 18
    2a0e:	61 e0       	ldi	r22, 0x01	; 1
    2a10:	a4 01       	movw	r20, r8
    2a12:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <i2cMasterSendNI>
    2a16:	88 23       	and	r24, r24
    2a18:	21 f0       	breq	.+8      	; 0x2a22 <autoBallast+0x1e8>
    2a1a:	99 e1       	ldi	r25, 0x19	; 25
    2a1c:	d9 16       	cp	r13, r25
    2a1e:	71 f7       	brne	.-36     	; 0x29fc <autoBallast+0x1c2>
    2a20:	03 c0       	rjmp	.+6      	; 0x2a28 <autoBallast+0x1ee>
				{
					_delay_ms(500);
					errorTolerance++;
				}
				if(errorTolerance >= CRITCOMFAIL)
    2a22:	a8 e1       	ldi	r26, 0x18	; 24
    2a24:	ad 15       	cp	r26, r13
    2a26:	30 f4       	brcc	.+12     	; 0x2a34 <autoBallast+0x1fa>
				{
					#ifdef FCPUDEBUG
						lprintf_P(PSTR("Ballast Error\n"));
					#endif
					statusCode = (statusCode & 0xFFFD) | (1 << 1);
    2a28:	80 91 2b 03 	lds	r24, 0x032B
    2a2c:	90 91 2c 03 	lds	r25, 0x032C
    2a30:	82 60       	ori	r24, 0x02	; 2
    2a32:	05 c0       	rjmp	.+10     	; 0x2a3e <autoBallast+0x204>
				} else {
					statusCode = (statusCode & 0xFFFD);
    2a34:	80 91 2b 03 	lds	r24, 0x032B
    2a38:	90 91 2c 03 	lds	r25, 0x032C
    2a3c:	8d 7f       	andi	r24, 0xFD	; 253
    2a3e:	90 93 2c 03 	sts	0x032C, r25
    2a42:	80 93 2b 03 	sts	0x032B, r24
				}
				scheduleQueueAdd(&autoBallast, time+10);
    2a46:	8a e0       	ldi	r24, 0x0A	; 10
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	a0 e0       	ldi	r26, 0x00	; 0
    2a4c:	b0 e0       	ldi	r27, 0x00	; 0
    2a4e:	35 c0       	rjmp	.+106    	; 0x2aba <autoBallast+0x280>
				lprintf_P(PSTR("Ballast Disabled\n"));
			#endif

			//turn off the ballast
			//send 0x09 0d19
			uint8_t data = 18;
    2a50:	82 e1       	ldi	r24, 0x12	; 18
    2a52:	89 83       	std	Y+1, r24	; 0x01
    2a54:	dd 24       	eor	r13, r13
			uint8_t errorTolerance = 0;
			while( ((retVal = i2cMasterSendNI(BALLASTMODULE, 1, &data)) != I2C_OK) && errorTolerance < CRITCOMFAIL)
    2a56:	4e 01       	movw	r8, r28
    2a58:	08 94       	sec
    2a5a:	81 1c       	adc	r8, r1
    2a5c:	91 1c       	adc	r9, r1
    2a5e:	5c e2       	ldi	r21, 0x2C	; 44
    2a60:	a5 2e       	mov	r10, r21
    2a62:	51 e0       	ldi	r21, 0x01	; 1
    2a64:	b5 2e       	mov	r11, r21
    2a66:	08 c0       	rjmp	.+16     	; 0x2a78 <autoBallast+0x23e>
    2a68:	88 e8       	ldi	r24, 0x88	; 136
    2a6a:	93 e1       	ldi	r25, 0x13	; 19
    2a6c:	f5 01       	movw	r30, r10
    2a6e:	31 97       	sbiw	r30, 0x01	; 1
    2a70:	f1 f7       	brne	.-4      	; 0x2a6e <autoBallast+0x234>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a72:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a74:	d9 f7       	brne	.-10     	; 0x2a6c <autoBallast+0x232>
			{
				_delay_ms(500);
				errorTolerance++;
    2a76:	d3 94       	inc	r13

			//turn off the ballast
			//send 0x09 0d19
			uint8_t data = 18;
			uint8_t errorTolerance = 0;
			while( ((retVal = i2cMasterSendNI(BALLASTMODULE, 1, &data)) != I2C_OK) && errorTolerance < CRITCOMFAIL)
    2a78:	82 e1       	ldi	r24, 0x12	; 18
    2a7a:	61 e0       	ldi	r22, 0x01	; 1
    2a7c:	a4 01       	movw	r20, r8
    2a7e:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <i2cMasterSendNI>
    2a82:	88 23       	and	r24, r24
    2a84:	21 f0       	breq	.+8      	; 0x2a8e <autoBallast+0x254>
    2a86:	99 e1       	ldi	r25, 0x19	; 25
    2a88:	d9 16       	cp	r13, r25
    2a8a:	71 f7       	brne	.-36     	; 0x2a68 <autoBallast+0x22e>
    2a8c:	03 c0       	rjmp	.+6      	; 0x2a94 <autoBallast+0x25a>
			{
				_delay_ms(500);
				errorTolerance++;
			}
			if(errorTolerance >= CRITCOMFAIL)
    2a8e:	a8 e1       	ldi	r26, 0x18	; 24
    2a90:	ad 15       	cp	r26, r13
    2a92:	30 f4       	brcc	.+12     	; 0x2aa0 <autoBallast+0x266>
			{
				statusCode = (statusCode & 0xFFFD) | (1 << 1);
    2a94:	80 91 2b 03 	lds	r24, 0x032B
    2a98:	90 91 2c 03 	lds	r25, 0x032C
    2a9c:	82 60       	ori	r24, 0x02	; 2
    2a9e:	05 c0       	rjmp	.+10     	; 0x2aaa <autoBallast+0x270>
			} else {
				statusCode = (statusCode & 0xFFFD);
    2aa0:	80 91 2b 03 	lds	r24, 0x032B
    2aa4:	90 91 2c 03 	lds	r25, 0x032C
    2aa8:	8d 7f       	andi	r24, 0xFD	; 253
    2aaa:	90 93 2c 03 	sts	0x032C, r25
    2aae:	80 93 2b 03 	sts	0x032B, r24
			}
			scheduleQueueAdd(&autoBallast, time+60);
    2ab2:	8c e3       	ldi	r24, 0x3C	; 60
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	a0 e0       	ldi	r26, 0x00	; 0
    2ab8:	b0 e0       	ldi	r27, 0x00	; 0
    2aba:	e8 0e       	add	r14, r24
    2abc:	f9 1e       	adc	r15, r25
    2abe:	0a 1f       	adc	r16, r26
    2ac0:	1b 1f       	adc	r17, r27
    2ac2:	8d e1       	ldi	r24, 0x1D	; 29
    2ac4:	94 e1       	ldi	r25, 0x14	; 20
    2ac6:	b8 01       	movw	r22, r16
    2ac8:	a7 01       	movw	r20, r14
    2aca:	0e 94 47 2c 	call	0x588e	; 0x588e <scheduleQueueAdd>
		}
	}

}
    2ace:	67 96       	adiw	r28, 0x17	; 23
    2ad0:	0f b6       	in	r0, 0x3f	; 63
    2ad2:	f8 94       	cli
    2ad4:	de bf       	out	0x3e, r29	; 62
    2ad6:	0f be       	out	0x3f, r0	; 63
    2ad8:	cd bf       	out	0x3d, r28	; 61
    2ada:	cf 91       	pop	r28
    2adc:	df 91       	pop	r29
    2ade:	1f 91       	pop	r17
    2ae0:	0f 91       	pop	r16
    2ae2:	ff 90       	pop	r15
    2ae4:	ef 90       	pop	r14
    2ae6:	df 90       	pop	r13
    2ae8:	cf 90       	pop	r12
    2aea:	bf 90       	pop	r11
    2aec:	af 90       	pop	r10
    2aee:	9f 90       	pop	r9
    2af0:	8f 90       	pop	r8
    2af2:	08 95       	ret

00002af4 <flightPhaseLogic>:
}

//1 implies that we have cutdown

void flightPhaseLogic(uint32_t time)
{
    2af4:	6f 92       	push	r6
    2af6:	7f 92       	push	r7
    2af8:	8f 92       	push	r8
    2afa:	9f 92       	push	r9
    2afc:	af 92       	push	r10
    2afe:	bf 92       	push	r11
    2b00:	cf 92       	push	r12
    2b02:	df 92       	push	r13
    2b04:	ef 92       	push	r14
    2b06:	ff 92       	push	r15
    2b08:	0f 93       	push	r16
    2b0a:	1f 93       	push	r17
    2b0c:	df 93       	push	r29
    2b0e:	cf 93       	push	r28
    2b10:	cd b7       	in	r28, 0x3d	; 61
    2b12:	de b7       	in	r29, 0x3e	; 62
    2b14:	66 97       	sbiw	r28, 0x16	; 22
    2b16:	0f b6       	in	r0, 0x3f	; 63
    2b18:	f8 94       	cli
    2b1a:	de bf       	out	0x3e, r29	; 62
    2b1c:	0f be       	out	0x3f, r0	; 63
    2b1e:	cd bf       	out	0x3d, r28	; 61
    2b20:	7b 01       	movw	r14, r22
    2b22:	8c 01       	movw	r16, r24
	#ifdef FCPUDEBUG
		lprintf_P(PSTR("In Phase Logic\n"));
	#endif
	uint8_t currentPhase = eeprom_read_byte(&EEflightPhase);
    2b24:	84 e3       	ldi	r24, 0x34	; 52
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	0e 94 06 3a 	call	0x740c	; 0x740c <__eerd_byte_m324p>
    2b2c:	a8 2e       	mov	r10, r24
	struct gpsData myGPS = currentPositionData;
    2b2e:	de 01       	movw	r26, r28
    2b30:	11 96       	adiw	r26, 0x01	; 1
    2b32:	e7 e3       	ldi	r30, 0x37	; 55
    2b34:	f4 e0       	ldi	r31, 0x04	; 4
    2b36:	86 e1       	ldi	r24, 0x16	; 22
    2b38:	01 90       	ld	r0, Z+
    2b3a:	0d 92       	st	X+, r0
    2b3c:	81 50       	subi	r24, 0x01	; 1
    2b3e:	e1 f7       	brne	.-8      	; 0x2b38 <flightPhaseLogic+0x44>
    2b40:	8c 88       	ldd	r8, Y+20	; 0x14
    2b42:	9d 88       	ldd	r9, Y+21	; 0x15


	//Failure Condition: We will enter mayday mode.
	uint16_t thisAltitude = myGPS.altitude;

	uint16_t maydayAltitude = eeprom_read_word(&EEmaydayAltitude);
    2b44:	8b e0       	ldi	r24, 0x0B	; 11
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>
    2b4c:	3c 01       	movw	r6, r24
	int16_t maydayVSpeed = eeprom_read_word(&EEmaydayVSpeed);
    2b4e:	8d e0       	ldi	r24, 0x0D	; 13
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>
    2b56:	6c 01       	movw	r12, r24
	uint8_t myPhase = currentPhase & 0x0F;
    2b58:	9f e0       	ldi	r25, 0x0F	; 15
    2b5a:	b9 2e       	mov	r11, r25
    2b5c:	ba 20       	and	r11, r10
	uint8_t myFlags = currentPhase >> 4;
    2b5e:	a2 94       	swap	r10
    2b60:	8f e0       	ldi	r24, 0x0F	; 15
    2b62:	a8 22       	and	r10, r24
	switch(myPhase)
    2b64:	82 e0       	ldi	r24, 0x02	; 2
    2b66:	b8 16       	cp	r11, r24
    2b68:	d9 f1       	breq	.+118    	; 0x2be0 <flightPhaseLogic+0xec>
    2b6a:	8b 15       	cp	r24, r11
    2b6c:	38 f0       	brcs	.+14     	; 0x2b7c <flightPhaseLogic+0x88>
    2b6e:	bb 20       	and	r11, r11
    2b70:	71 f0       	breq	.+28     	; 0x2b8e <flightPhaseLogic+0x9a>
    2b72:	91 e0       	ldi	r25, 0x01	; 1
    2b74:	b9 16       	cp	r11, r25
    2b76:	09 f0       	breq	.+2      	; 0x2b7a <flightPhaseLogic+0x86>
    2b78:	84 c0       	rjmp	.+264    	; 0x2c82 <flightPhaseLogic+0x18e>
    2b7a:	0b c0       	rjmp	.+22     	; 0x2b92 <flightPhaseLogic+0x9e>
    2b7c:	a3 e0       	ldi	r26, 0x03	; 3
    2b7e:	ba 16       	cp	r11, r26
    2b80:	09 f4       	brne	.+2      	; 0x2b84 <flightPhaseLogic+0x90>
    2b82:	4c c0       	rjmp	.+152    	; 0x2c1c <flightPhaseLogic+0x128>
    2b84:	b4 e0       	ldi	r27, 0x04	; 4
    2b86:	bb 16       	cp	r11, r27
    2b88:	09 f0       	breq	.+2      	; 0x2b8c <flightPhaseLogic+0x98>
    2b8a:	7b c0       	rjmp	.+246    	; 0x2c82 <flightPhaseLogic+0x18e>
    2b8c:	6c c0       	rjmp	.+216    	; 0x2c66 <flightPhaseLogic+0x172>
	{

		case 0:
			if(((PIND & _BV(TAKEOFFPIN)) == 1) && (myFlags & 1 == 1))
    2b8e:	89 b1       	in	r24, 0x09	; 9
    2b90:	64 c0       	rjmp	.+200    	; 0x2c5a <flightPhaseLogic+0x166>
			//reschedule 1 second from now
			scheduleQueueAdd(&flightPhaseLogic, time+1);
			break;
		case 1:
			//change sample time to 30 seconds
			eeprom_write_word(&EEdataCollectionInterval, 30);
    2b92:	8b e1       	ldi	r24, 0x1B	; 27
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	6e e1       	ldi	r22, 0x1E	; 30
    2b98:	70 e0       	ldi	r23, 0x00	; 0
    2b9a:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__eewr_word_m324p>
			//schedule rapid hf xmit
			if(rapidHFEnable == 0)
    2b9e:	80 91 2e 03 	lds	r24, 0x032E
    2ba2:	88 23       	and	r24, r24
    2ba4:	31 f4       	brne	.+12     	; 0x2bb2 <flightPhaseLogic+0xbe>
			{
				scheduleQueueAdd(&rapidHFXmit, time);
    2ba6:	85 ef       	ldi	r24, 0xF5	; 245
    2ba8:	93 e1       	ldi	r25, 0x13	; 19
    2baa:	b8 01       	movw	r22, r16
    2bac:	a7 01       	movw	r20, r14
    2bae:	0e 94 47 2c 	call	0x588e	; 0x588e <scheduleQueueAdd>
			}
			//enable rapid hf xmit
			rapidHFEnable = 1;
    2bb2:	81 e0       	ldi	r24, 0x01	; 1
    2bb4:	80 93 2e 03 	sts	0x032E, r24


			//reschedule 1 minute from now
			if((myGPS.altitude > 8500) && (vSpeedAvg < 0) && (myFlags & 1 == 1))
    2bb8:	85 e3       	ldi	r24, 0x35	; 53
    2bba:	88 16       	cp	r8, r24
    2bbc:	81 e2       	ldi	r24, 0x21	; 33
    2bbe:	98 06       	cpc	r9, r24
    2bc0:	50 f0       	brcs	.+20     	; 0x2bd6 <flightPhaseLogic+0xe2>
    2bc2:	80 91 34 04 	lds	r24, 0x0434
    2bc6:	90 91 35 04 	lds	r25, 0x0435
    2bca:	97 ff       	sbrs	r25, 7
    2bcc:	04 c0       	rjmp	.+8      	; 0x2bd6 <flightPhaseLogic+0xe2>
    2bce:	a0 fe       	sbrs	r10, 0
    2bd0:	02 c0       	rjmp	.+4      	; 0x2bd6 <flightPhaseLogic+0xe2>
    2bd2:	b2 e0       	ldi	r27, 0x02	; 2
    2bd4:	bb 2e       	mov	r11, r27
			{
				myPhase = 2;
			}
			scheduleQueueAdd(&flightPhaseLogic, time+10);
    2bd6:	8a e0       	ldi	r24, 0x0A	; 10
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	a0 e0       	ldi	r26, 0x00	; 0
    2bdc:	b0 e0       	ldi	r27, 0x00	; 0
    2bde:	47 c0       	rjmp	.+142    	; 0x2c6e <flightPhaseLogic+0x17a>
				lprintf_P(PSTR("Phase 1: Climb\n"));
			#endif
			break;
		case 2:
			//disable rapid hf xmit
			rapidHFEnable = 0;
    2be0:	10 92 2e 03 	sts	0x032E, r1
			//make sure sat is enabled in here! BEFORE FLIGHT
			if((vSpeedAvg < maydayVSpeed) || (thisAltitude < maydayAltitude)  || (cutdownStatus == 1) && (myFlags & 1 == 1))
    2be4:	80 91 34 04 	lds	r24, 0x0434
    2be8:	90 91 35 04 	lds	r25, 0x0435
    2bec:	8c 15       	cp	r24, r12
    2bee:	9d 05       	cpc	r25, r13
    2bf0:	4c f0       	brlt	.+18     	; 0x2c04 <flightPhaseLogic+0x110>
    2bf2:	86 14       	cp	r8, r6
    2bf4:	97 04       	cpc	r9, r7
    2bf6:	30 f0       	brcs	.+12     	; 0x2c04 <flightPhaseLogic+0x110>
    2bf8:	80 91 2d 03 	lds	r24, 0x032D
    2bfc:	81 30       	cpi	r24, 0x01	; 1
    2bfe:	21 f4       	brne	.+8      	; 0x2c08 <flightPhaseLogic+0x114>
    2c00:	a0 fe       	sbrs	r10, 0
    2c02:	02 c0       	rjmp	.+4      	; 0x2c08 <flightPhaseLogic+0x114>
    2c04:	a3 e0       	ldi	r26, 0x03	; 3
    2c06:	ba 2e       	mov	r11, r26
				myPhase = 3;
			}
			#ifdef FCPUDEBUG
				lprintf_P(PSTR("Phase 2: Cruise\n"));
			#endif
			scheduleQueueAdd(&flightPhaseLogic, time+30);
    2c08:	b8 01       	movw	r22, r16
    2c0a:	a7 01       	movw	r20, r14
    2c0c:	42 5e       	subi	r20, 0xE2	; 226
    2c0e:	5f 4f       	sbci	r21, 0xFF	; 255
    2c10:	6f 4f       	sbci	r22, 0xFF	; 255
    2c12:	7f 4f       	sbci	r23, 0xFF	; 255
    2c14:	8a e7       	ldi	r24, 0x7A	; 122
    2c16:	95 e1       	ldi	r25, 0x15	; 21
    2c18:	0e 94 47 2c 	call	0x588e	; 0x588e <scheduleQueueAdd>
		case 3:
			//disable sat in here! BEFORE FLIGHT
			//enable rapid hf xmit
			if(rapidHFEnable == 0)
    2c1c:	80 91 2e 03 	lds	r24, 0x032E
    2c20:	88 23       	and	r24, r24
    2c22:	31 f4       	brne	.+12     	; 0x2c30 <flightPhaseLogic+0x13c>
			{
				scheduleQueueAdd(&rapidHFXmit, time);
    2c24:	85 ef       	ldi	r24, 0xF5	; 245
    2c26:	93 e1       	ldi	r25, 0x13	; 19
    2c28:	b8 01       	movw	r22, r16
    2c2a:	a7 01       	movw	r20, r14
    2c2c:	0e 94 47 2c 	call	0x588e	; 0x588e <scheduleQueueAdd>
			}
			rapidHFEnable = 1;
    2c30:	81 e0       	ldi	r24, 0x01	; 1
    2c32:	80 93 2e 03 	sts	0x032E, r24
			if((vSpeedAvg > maydayVSpeed) && (thisAltitude > maydayAltitude) && (cutdownStatus != 0) && (myFlags & 1 == 1))
    2c36:	80 91 34 04 	lds	r24, 0x0434
    2c3a:	90 91 35 04 	lds	r25, 0x0435
    2c3e:	c8 16       	cp	r12, r24
    2c40:	d9 06       	cpc	r13, r25
    2c42:	5c f4       	brge	.+22     	; 0x2c5a <flightPhaseLogic+0x166>
    2c44:	68 14       	cp	r6, r8
    2c46:	79 04       	cpc	r7, r9
    2c48:	40 f4       	brcc	.+16     	; 0x2c5a <flightPhaseLogic+0x166>
    2c4a:	80 91 2d 03 	lds	r24, 0x032D
    2c4e:	88 23       	and	r24, r24
    2c50:	21 f0       	breq	.+8      	; 0x2c5a <flightPhaseLogic+0x166>
    2c52:	a0 fe       	sbrs	r10, 0
    2c54:	02 c0       	rjmp	.+4      	; 0x2c5a <flightPhaseLogic+0x166>
    2c56:	f2 e0       	ldi	r31, 0x02	; 2
    2c58:	bf 2e       	mov	r11, r31
					myPhase = 2;
			}
			#ifdef FCPUDEBUG
				lprintf_P(PSTR("Phase 3: FALLING OUT OF SKY\n"));
			#endif
			scheduleQueueAdd(&flightPhaseLogic, time+1);
    2c5a:	08 94       	sec
    2c5c:	e1 1c       	adc	r14, r1
    2c5e:	f1 1c       	adc	r15, r1
    2c60:	01 1d       	adc	r16, r1
    2c62:	11 1d       	adc	r17, r1
    2c64:	08 c0       	rjmp	.+16     	; 0x2c76 <flightPhaseLogic+0x182>
			break;
		case 4:
			//reset HF and Sat Sample and Transmit Intervals to 1 hour
			scheduleQueueAdd(&flightPhaseLogic, time+3600);
    2c66:	80 e1       	ldi	r24, 0x10	; 16
    2c68:	9e e0       	ldi	r25, 0x0E	; 14
    2c6a:	a0 e0       	ldi	r26, 0x00	; 0
    2c6c:	b0 e0       	ldi	r27, 0x00	; 0
    2c6e:	e8 0e       	add	r14, r24
    2c70:	f9 1e       	adc	r15, r25
    2c72:	0a 1f       	adc	r16, r26
    2c74:	1b 1f       	adc	r17, r27
    2c76:	8a e7       	ldi	r24, 0x7A	; 122
    2c78:	95 e1       	ldi	r25, 0x15	; 21
    2c7a:	b8 01       	movw	r22, r16
    2c7c:	a7 01       	movw	r20, r14
    2c7e:	0e 94 47 2c 	call	0x588e	; 0x588e <scheduleQueueAdd>
				lprintf_P(PSTR("ERROR!\n"));
			#endif
			break;
		}

	eeprom_write_byte(&EEflightPhase, (myFlags << 4) + myPhase);
    2c82:	a2 94       	swap	r10
    2c84:	e0 ef       	ldi	r30, 0xF0	; 240
    2c86:	ae 22       	and	r10, r30
    2c88:	ba 0c       	add	r11, r10
    2c8a:	84 e3       	ldi	r24, 0x34	; 52
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	6b 2d       	mov	r22, r11
    2c90:	0e 94 24 3a 	call	0x7448	; 0x7448 <__eewr_byte_m324p>

}
    2c94:	66 96       	adiw	r28, 0x16	; 22
    2c96:	0f b6       	in	r0, 0x3f	; 63
    2c98:	f8 94       	cli
    2c9a:	de bf       	out	0x3e, r29	; 62
    2c9c:	0f be       	out	0x3f, r0	; 63
    2c9e:	cd bf       	out	0x3d, r28	; 61
    2ca0:	cf 91       	pop	r28
    2ca2:	df 91       	pop	r29
    2ca4:	1f 91       	pop	r17
    2ca6:	0f 91       	pop	r16
    2ca8:	ff 90       	pop	r15
    2caa:	ef 90       	pop	r14
    2cac:	df 90       	pop	r13
    2cae:	cf 90       	pop	r12
    2cb0:	bf 90       	pop	r11
    2cb2:	af 90       	pop	r10
    2cb4:	9f 90       	pop	r9
    2cb6:	8f 90       	pop	r8
    2cb8:	7f 90       	pop	r7
    2cba:	6f 90       	pop	r6
    2cbc:	08 95       	ret

00002cbe <transmitSamples>:
		//BEFORE FLIGHT Send this data to the comm controller
	}
}

void transmitSamples(uint32_t time)
{
    2cbe:	ef 92       	push	r14
    2cc0:	ff 92       	push	r15
    2cc2:	0f 93       	push	r16
    2cc4:	1f 93       	push	r17
    2cc6:	cf 93       	push	r28
    2cc8:	df 93       	push	r29
    2cca:	7b 01       	movw	r14, r22
    2ccc:	8c 01       	movw	r16, r24
	#ifdef FCPUDEBUG
		lprintf_P(PSTR("In Sample TX\n"));
	#endif
	loadBatch();
    2cce:	0e 94 86 06 	call	0xd0c	; 0xd0c <loadBatch>
	flushSatQueue();
    2cd2:	0e 94 12 03 	call	0x624	; 0x624 <flushSatQueue>
	uint16_t maxTX = eeprom_read_word(&EEmaxAllowableTXInterval);
    2cd6:	88 e1       	ldi	r24, 0x18	; 24
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>
    2cde:	ec 01       	movw	r28, r24
	uint16_t desiredTX = eeprom_read_word(&EEdataTransmitInterval);
    2ce0:	8d e1       	ldi	r24, 0x1D	; 29
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>


	if(maxTX > desiredTX)
    2ce8:	8c 17       	cp	r24, r28
    2cea:	9d 07       	cpc	r25, r29
    2cec:	10 f4       	brcc	.+4      	; 0x2cf2 <transmitSamples+0x34>
		scheduleQueueAdd(&transmitSamples, time+desiredTX);
    2cee:	ac 01       	movw	r20, r24
    2cf0:	01 c0       	rjmp	.+2      	; 0x2cf4 <transmitSamples+0x36>
	else
		scheduleQueueAdd(&transmitSamples, time+maxTX);
    2cf2:	ae 01       	movw	r20, r28
    2cf4:	60 e0       	ldi	r22, 0x00	; 0
    2cf6:	70 e0       	ldi	r23, 0x00	; 0
    2cf8:	4e 0d       	add	r20, r14
    2cfa:	5f 1d       	adc	r21, r15
    2cfc:	60 1f       	adc	r22, r16
    2cfe:	71 1f       	adc	r23, r17
    2d00:	8f e5       	ldi	r24, 0x5F	; 95
    2d02:	96 e1       	ldi	r25, 0x16	; 22
    2d04:	0e 94 47 2c 	call	0x588e	; 0x588e <scheduleQueueAdd>


}
    2d08:	df 91       	pop	r29
    2d0a:	cf 91       	pop	r28
    2d0c:	1f 91       	pop	r17
    2d0e:	0f 91       	pop	r16
    2d10:	ff 90       	pop	r15
    2d12:	ef 90       	pop	r14
    2d14:	08 95       	ret

00002d16 <transmitShortReport>:
		//Bogus time means testing time!
	}
}

void transmitShortReport(uint32_t time)
{
    2d16:	8f 92       	push	r8
    2d18:	9f 92       	push	r9
    2d1a:	af 92       	push	r10
    2d1c:	bf 92       	push	r11
    2d1e:	cf 92       	push	r12
    2d20:	df 92       	push	r13
    2d22:	ef 92       	push	r14
    2d24:	ff 92       	push	r15
    2d26:	0f 93       	push	r16
    2d28:	1f 93       	push	r17
    2d2a:	df 93       	push	r29
    2d2c:	cf 93       	push	r28
    2d2e:	cd b7       	in	r28, 0x3d	; 61
    2d30:	de b7       	in	r29, 0x3e	; 62
    2d32:	64 97       	sbiw	r28, 0x14	; 20
    2d34:	0f b6       	in	r0, 0x3f	; 63
    2d36:	f8 94       	cli
    2d38:	de bf       	out	0x3e, r29	; 62
    2d3a:	0f be       	out	0x3f, r0	; 63
    2d3c:	cd bf       	out	0x3d, r28	; 61
    2d3e:	5b 01       	movw	r10, r22
    2d40:	6c 01       	movw	r12, r24
    if(enableReports)
    2d42:	80 91 4e 02 	lds	r24, 0x024E
    2d46:	88 23       	and	r24, r24
    2d48:	09 f4       	brne	.+2      	; 0x2d4c <transmitShortReport+0x36>
    2d4a:	00 c1       	rjmp	.+512    	; 0x2f4c <transmitShortReport+0x236>
	{
		#ifdef FCPUDEBUG
			lprintf_P(PSTR("Generating Report\n"));
		#endif
		uint16_t desiredTX = eeprom_read_word(&EEshortDataTransmitInterval);
    2d4c:	8f e1       	ldi	r24, 0x1F	; 31
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>
    2d54:	4c 01       	movw	r8, r24
		long double lon_code, lat_code, tmp1;
		uint8_t packet1[6];
		uint8_t packet2[6];
		if(currentPositionData.longitude < 0.0)
    2d56:	e0 90 3c 04 	lds	r14, 0x043C
    2d5a:	f0 90 3d 04 	lds	r15, 0x043D
    2d5e:	00 91 3e 04 	lds	r16, 0x043E
    2d62:	10 91 3f 04 	lds	r17, 0x043F
    2d66:	c8 01       	movw	r24, r16
    2d68:	b7 01       	movw	r22, r14
    2d6a:	20 e0       	ldi	r18, 0x00	; 0
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	40 e0       	ldi	r20, 0x00	; 0
    2d70:	50 e0       	ldi	r21, 0x00	; 0
    2d72:	0e 94 86 34 	call	0x690c	; 0x690c <__cmpsf2>
    2d76:	88 23       	and	r24, r24
    2d78:	4c f4       	brge	.+18     	; 0x2d8c <transmitShortReport+0x76>
		{
			tmp1 = (currentPositionData.longitude + 360.)/360.;
    2d7a:	c8 01       	movw	r24, r16
    2d7c:	b7 01       	movw	r22, r14
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	44 eb       	ldi	r20, 0xB4	; 180
    2d84:	53 e4       	ldi	r21, 0x43	; 67
    2d86:	0e 94 22 34 	call	0x6844	; 0x6844 <__addsf3>
    2d8a:	02 c0       	rjmp	.+4      	; 0x2d90 <transmitShortReport+0x7a>
		} else {
			tmp1 = currentPositionData.longitude/360.;
    2d8c:	c8 01       	movw	r24, r16
    2d8e:	b7 01       	movw	r22, r14
    2d90:	20 e0       	ldi	r18, 0x00	; 0
    2d92:	30 e0       	ldi	r19, 0x00	; 0
    2d94:	44 eb       	ldi	r20, 0xB4	; 180
    2d96:	53 e4       	ldi	r21, 0x43	; 67
    2d98:	0e 94 8a 34 	call	0x6914	; 0x6914 <__divsf3>
		}
		lon_code = (unsigned long) (tmp1 * 0x0ffffff) & 0x0ffffff;
    2d9c:	2f ef       	ldi	r18, 0xFF	; 255
    2d9e:	3f ef       	ldi	r19, 0xFF	; 255
    2da0:	4f e7       	ldi	r20, 0x7F	; 127
    2da2:	5b e4       	ldi	r21, 0x4B	; 75
    2da4:	0e 94 d5 35 	call	0x6baa	; 0x6baa <__mulsf3>
    2da8:	0e 94 f7 34 	call	0x69ee	; 0x69ee <__fixunssfsi>
    2dac:	90 70       	andi	r25, 0x00	; 0
    2dae:	0e 94 23 35 	call	0x6a46	; 0x6a46 <__floatunsisf>
    2db2:	69 83       	std	Y+1, r22	; 0x01
    2db4:	7a 83       	std	Y+2, r23	; 0x02
    2db6:	8b 83       	std	Y+3, r24	; 0x03
    2db8:	9c 83       	std	Y+4, r25	; 0x04
		tmp1 = -(currentPositionData.latitude - 90.)/180.;
		lat_code = (unsigned long) (tmp1 * 0x0ffffff) & 0x0ffffff;
    2dba:	60 91 38 04 	lds	r22, 0x0438
    2dbe:	70 91 39 04 	lds	r23, 0x0439
    2dc2:	80 91 3a 04 	lds	r24, 0x043A
    2dc6:	90 91 3b 04 	lds	r25, 0x043B
    2dca:	20 e0       	ldi	r18, 0x00	; 0
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	44 eb       	ldi	r20, 0xB4	; 180
    2dd0:	52 e4       	ldi	r21, 0x42	; 66
    2dd2:	0e 94 21 34 	call	0x6842	; 0x6842 <__subsf3>
    2dd6:	20 e0       	ldi	r18, 0x00	; 0
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	44 e3       	ldi	r20, 0x34	; 52
    2ddc:	53 ec       	ldi	r21, 0xC3	; 195
    2dde:	0e 94 8a 34 	call	0x6914	; 0x6914 <__divsf3>
    2de2:	2f ef       	ldi	r18, 0xFF	; 255
    2de4:	3f ef       	ldi	r19, 0xFF	; 255
    2de6:	4f e7       	ldi	r20, 0x7F	; 127
    2de8:	5b e4       	ldi	r21, 0x4B	; 75
    2dea:	0e 94 d5 35 	call	0x6baa	; 0x6baa <__mulsf3>
    2dee:	0e 94 f7 34 	call	0x69ee	; 0x69ee <__fixunssfsi>
    2df2:	90 70       	andi	r25, 0x00	; 0
    2df4:	0e 94 23 35 	call	0x6a46	; 0x6a46 <__floatunsisf>
    2df8:	6d 83       	std	Y+5, r22	; 0x05
    2dfa:	7e 83       	std	Y+6, r23	; 0x06
    2dfc:	8f 83       	std	Y+7, r24	; 0x07
    2dfe:	98 87       	std	Y+8, r25	; 0x08
		memcpy(packet1, &lon_code, 3*sizeof(uint8_t));
    2e00:	de 01       	movw	r26, r28
    2e02:	19 96       	adiw	r26, 0x09	; 9
    2e04:	fe 01       	movw	r30, r28
    2e06:	31 96       	adiw	r30, 0x01	; 1
    2e08:	83 e0       	ldi	r24, 0x03	; 3
    2e0a:	01 90       	ld	r0, Z+
    2e0c:	0d 92       	st	X+, r0
    2e0e:	81 50       	subi	r24, 0x01	; 1
    2e10:	e1 f7       	brne	.-8      	; 0x2e0a <transmitShortReport+0xf4>
		packet1[3] = currentPositionData.bearing >> 1;
    2e12:	80 91 41 04 	lds	r24, 0x0441
    2e16:	90 91 42 04 	lds	r25, 0x0442
    2e1a:	96 95       	lsr	r25
    2e1c:	87 95       	ror	r24
    2e1e:	8c 87       	std	Y+12, r24	; 0x0c
		packet1[4] = currentPositionData.altitude >> 8;
    2e20:	80 91 4a 04 	lds	r24, 0x044A
    2e24:	90 91 4b 04 	lds	r25, 0x044B
    2e28:	9d 87       	std	Y+13, r25	; 0x0d
		packet1[5] = (currentPositionData.altitude && 0x00F0) | (reportCounter && 0x000F);
    2e2a:	20 e0       	ldi	r18, 0x00	; 0
    2e2c:	89 2b       	or	r24, r25
    2e2e:	09 f0       	breq	.+2      	; 0x2e32 <transmitShortReport+0x11c>
    2e30:	21 e0       	ldi	r18, 0x01	; 1
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	80 91 36 04 	lds	r24, 0x0436
    2e38:	81 11       	cpse	r24, r1
    2e3a:	91 e0       	ldi	r25, 0x01	; 1
    2e3c:	29 2b       	or	r18, r25
    2e3e:	2e 87       	std	Y+14, r18	; 0x0e



		uint32_t rightNow = now();
    2e40:	0e 94 16 13 	call	0x262c	; 0x262c <now>
    2e44:	7b 01       	movw	r14, r22
    2e46:	8c 01       	movw	r16, r24
		memcpy(packet2, &lat_code, 3*sizeof(uint8_t));
    2e48:	de 01       	movw	r26, r28
    2e4a:	1f 96       	adiw	r26, 0x0f	; 15
    2e4c:	fe 01       	movw	r30, r28
    2e4e:	35 96       	adiw	r30, 0x05	; 5
    2e50:	83 e0       	ldi	r24, 0x03	; 3
    2e52:	01 90       	ld	r0, Z+
    2e54:	0d 92       	st	X+, r0
    2e56:	81 50       	subi	r24, 0x01	; 1
    2e58:	e1 f7       	brne	.-8      	; 0x2e52 <transmitShortReport+0x13c>
		packet2[3] = currentPositionData.speed;
    2e5a:	80 91 40 04 	lds	r24, 0x0440
    2e5e:	8a 8b       	std	Y+18, r24	; 0x12
		packet2[4] = (rightNow/60) >> 8;
    2e60:	c8 01       	movw	r24, r16
    2e62:	b7 01       	movw	r22, r14
    2e64:	2c e3       	ldi	r18, 0x3C	; 60
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	40 e0       	ldi	r20, 0x00	; 0
    2e6a:	50 e0       	ldi	r21, 0x00	; 0
    2e6c:	0e 94 76 36 	call	0x6cec	; 0x6cec <__udivmodsi4>
    2e70:	23 2f       	mov	r18, r19
    2e72:	34 2f       	mov	r19, r20
    2e74:	45 2f       	mov	r20, r21
    2e76:	55 27       	eor	r21, r21
    2e78:	2b 8b       	std	Y+19, r18	; 0x13
		packet2[5] = ((rightNow/60) && 0x00F0) | (reportCounter && 0x000F);
    2e7a:	90 91 36 04 	lds	r25, 0x0436
    2e7e:	80 e0       	ldi	r24, 0x00	; 0
    2e80:	2c e3       	ldi	r18, 0x3C	; 60
    2e82:	e2 16       	cp	r14, r18
    2e84:	f1 04       	cpc	r15, r1
    2e86:	01 05       	cpc	r16, r1
    2e88:	11 05       	cpc	r17, r1
    2e8a:	08 f0       	brcs	.+2      	; 0x2e8e <transmitShortReport+0x178>
    2e8c:	81 e0       	ldi	r24, 0x01	; 1
    2e8e:	20 e0       	ldi	r18, 0x00	; 0
    2e90:	91 11       	cpse	r25, r1
    2e92:	21 e0       	ldi	r18, 0x01	; 1
    2e94:	82 2b       	or	r24, r18
    2e96:	8c 8b       	std	Y+20, r24	; 0x14

        //lprintf_P(PSTR("La: %f Lo: %f "), currentPositionData.latitude, currentPositionData.longitude);
        //lprintf_P(PSTR("La: %f "),lat_code);
        //lprintf_P(PSTR("Lo %f\n"), lon_code);

		reportCounter++;
    2e98:	9f 5f       	subi	r25, 0xFF	; 255
    2e9a:	90 93 36 04 	sts	0x0436, r25

		i2cSendStart();
    2e9e:	0e 94 56 0c 	call	0x18ac	; 0x18ac <i2cSendStart>
        i2cWaitForComplete();
    2ea2:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
        i2cSendByte(0x10);
    2ea6:	80 e1       	ldi	r24, 0x10	; 16
    2ea8:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
        i2cWaitForComplete();
    2eac:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
        i2cSendByte(0x0);
    2eb0:	80 e0       	ldi	r24, 0x00	; 0
    2eb2:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
        i2cWaitForComplete();
    2eb6:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>

        i2cSendByte(packet1[0]);
    2eba:	89 85       	ldd	r24, Y+9	; 0x09
    2ebc:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
        i2cWaitForComplete();
    2ec0:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
        i2cSendByte(packet1[1]);
    2ec4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ec6:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
        i2cWaitForComplete();
    2eca:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
        i2cSendByte(packet1[2]);
    2ece:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ed0:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
        i2cWaitForComplete();
    2ed4:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
        i2cSendByte(packet1[3]);
    2ed8:	8c 85       	ldd	r24, Y+12	; 0x0c
    2eda:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
        i2cWaitForComplete();
    2ede:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
        i2cSendByte(packet1[4]);
    2ee2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ee4:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
        i2cWaitForComplete();
    2ee8:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
        i2cSendByte(packet1[5]);
    2eec:	8e 85       	ldd	r24, Y+14	; 0x0e
    2eee:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
        i2cWaitForComplete();
    2ef2:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>

        i2cSendByte(packet2[0]);
    2ef6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ef8:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
        i2cWaitForComplete();
    2efc:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
        i2cSendByte(packet2[1]);
    2f00:	88 89       	ldd	r24, Y+16	; 0x10
    2f02:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
        i2cWaitForComplete();
    2f06:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
        i2cSendByte(packet2[2]);
    2f0a:	89 89       	ldd	r24, Y+17	; 0x11
    2f0c:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
        i2cWaitForComplete();
    2f10:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
        i2cSendByte(packet2[3]);
    2f14:	8a 89       	ldd	r24, Y+18	; 0x12
    2f16:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
        i2cWaitForComplete();
    2f1a:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
        i2cSendByte(packet2[4]);
    2f1e:	8b 89       	ldd	r24, Y+19	; 0x13
    2f20:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
        i2cWaitForComplete();
    2f24:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
        i2cSendByte(packet2[5]);
    2f28:	8c 89       	ldd	r24, Y+20	; 0x14
    2f2a:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
        i2cWaitForComplete();
    2f2e:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>

        i2cSendStop();
    2f32:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <i2cSendStop>

        scheduleQueueAdd(&transmitShortReport, time+desiredTX);
    2f36:	a4 01       	movw	r20, r8
    2f38:	60 e0       	ldi	r22, 0x00	; 0
    2f3a:	70 e0       	ldi	r23, 0x00	; 0
    2f3c:	4a 0d       	add	r20, r10
    2f3e:	5b 1d       	adc	r21, r11
    2f40:	6c 1d       	adc	r22, r12
    2f42:	7d 1d       	adc	r23, r13
    2f44:	8b e8       	ldi	r24, 0x8B	; 139
    2f46:	96 e1       	ldi	r25, 0x16	; 22
    2f48:	0e 94 47 2c 	call	0x588e	; 0x588e <scheduleQueueAdd>
		//BEFORE FLIGHT Send this data to the comm controller
	}
}
    2f4c:	64 96       	adiw	r28, 0x14	; 20
    2f4e:	0f b6       	in	r0, 0x3f	; 63
    2f50:	f8 94       	cli
    2f52:	de bf       	out	0x3e, r29	; 62
    2f54:	0f be       	out	0x3f, r0	; 63
    2f56:	cd bf       	out	0x3d, r28	; 61
    2f58:	cf 91       	pop	r28
    2f5a:	df 91       	pop	r29
    2f5c:	1f 91       	pop	r17
    2f5e:	0f 91       	pop	r16
    2f60:	ff 90       	pop	r15
    2f62:	ef 90       	pop	r14
    2f64:	df 90       	pop	r13
    2f66:	cf 90       	pop	r12
    2f68:	bf 90       	pop	r11
    2f6a:	af 90       	pop	r10
    2f6c:	9f 90       	pop	r9
    2f6e:	8f 90       	pop	r8
    2f70:	08 95       	ret

00002f72 <bmpTest>:
	}
	lprintf("out\n");
}

void bmpTest(void)
{
    2f72:	df 93       	push	r29
    2f74:	cf 93       	push	r28
    2f76:	cd b7       	in	r28, 0x3d	; 61
    2f78:	de b7       	in	r29, 0x3e	; 62
    2f7a:	28 97       	sbiw	r28, 0x08	; 8
    2f7c:	0f b6       	in	r0, 0x3f	; 63
    2f7e:	f8 94       	cli
    2f80:	de bf       	out	0x3e, r29	; 62
    2f82:	0f be       	out	0x3f, r0	; 63
    2f84:	cd bf       	out	0x3d, r28	; 61
	long myPressure;
	long myTemp;
	bmp085Convert(&myTemp, &myPressure);
    2f86:	ce 01       	movw	r24, r28
    2f88:	05 96       	adiw	r24, 0x05	; 5
    2f8a:	be 01       	movw	r22, r28
    2f8c:	6f 5f       	subi	r22, 0xFF	; 255
    2f8e:	7f 4f       	sbci	r23, 0xFF	; 255
    2f90:	0e 94 35 08 	call	0x106a	; 0x106a <bmp085Convert>

	//lprintf_P(PSTR("BMP085 Temp: %ld Pressure %ld\n"), myTemp, myPressure);
	lprintf_P(PSTR("BMP T: %ld\n"), myTemp);
    2f94:	00 d0       	rcall	.+0      	; 0x2f96 <bmpTest+0x24>
    2f96:	00 d0       	rcall	.+0      	; 0x2f98 <bmpTest+0x26>
    2f98:	00 d0       	rcall	.+0      	; 0x2f9a <bmpTest+0x28>
    2f9a:	81 ea       	ldi	r24, 0xA1	; 161
    2f9c:	93 e0       	ldi	r25, 0x03	; 3
    2f9e:	ed b7       	in	r30, 0x3d	; 61
    2fa0:	fe b7       	in	r31, 0x3e	; 62
    2fa2:	92 83       	std	Z+2, r25	; 0x02
    2fa4:	81 83       	std	Z+1, r24	; 0x01
    2fa6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fa8:	9e 81       	ldd	r25, Y+6	; 0x06
    2faa:	af 81       	ldd	r26, Y+7	; 0x07
    2fac:	b8 85       	ldd	r27, Y+8	; 0x08
    2fae:	83 83       	std	Z+3, r24	; 0x03
    2fb0:	94 83       	std	Z+4, r25	; 0x04
    2fb2:	a5 83       	std	Z+5, r26	; 0x05
    2fb4:	b6 83       	std	Z+6, r27	; 0x06
    2fb6:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>
	lprintf_P(PSTR("BMP P: %ld\n"), myPressure);
    2fba:	85 e9       	ldi	r24, 0x95	; 149
    2fbc:	93 e0       	ldi	r25, 0x03	; 3
    2fbe:	ed b7       	in	r30, 0x3d	; 61
    2fc0:	fe b7       	in	r31, 0x3e	; 62
    2fc2:	92 83       	std	Z+2, r25	; 0x02
    2fc4:	81 83       	std	Z+1, r24	; 0x01
    2fc6:	89 81       	ldd	r24, Y+1	; 0x01
    2fc8:	9a 81       	ldd	r25, Y+2	; 0x02
    2fca:	ab 81       	ldd	r26, Y+3	; 0x03
    2fcc:	bc 81       	ldd	r27, Y+4	; 0x04
    2fce:	83 83       	std	Z+3, r24	; 0x03
    2fd0:	94 83       	std	Z+4, r25	; 0x04
    2fd2:	a5 83       	std	Z+5, r26	; 0x05
    2fd4:	b6 83       	std	Z+6, r27	; 0x06
    2fd6:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>
	lprintf("Test\n");
    2fda:	0f 90       	pop	r0
    2fdc:	0f 90       	pop	r0
    2fde:	0f 90       	pop	r0
    2fe0:	0f 90       	pop	r0
    2fe2:	8e ec       	ldi	r24, 0xCE	; 206
    2fe4:	91 e0       	ldi	r25, 0x01	; 1
    2fe6:	ed b7       	in	r30, 0x3d	; 61
    2fe8:	fe b7       	in	r31, 0x3e	; 62
    2fea:	92 83       	std	Z+2, r25	; 0x02
    2fec:	81 83       	std	Z+1, r24	; 0x01
    2fee:	0e 94 30 12 	call	0x2460	; 0x2460 <lprintf>
    2ff2:	0f 90       	pop	r0
    2ff4:	0f 90       	pop	r0
}
    2ff6:	28 96       	adiw	r28, 0x08	; 8
    2ff8:	0f b6       	in	r0, 0x3f	; 63
    2ffa:	f8 94       	cli
    2ffc:	de bf       	out	0x3e, r29	; 62
    2ffe:	0f be       	out	0x3f, r0	; 63
    3000:	cd bf       	out	0x3d, r28	; 61
    3002:	cf 91       	pop	r28
    3004:	df 91       	pop	r29
    3006:	08 95       	ret

00003008 <dumpTemps>:

void dumpTemps(void)
{
    3008:	8f 92       	push	r8
    300a:	9f 92       	push	r9
    300c:	af 92       	push	r10
    300e:	bf 92       	push	r11
    3010:	cf 92       	push	r12
    3012:	df 92       	push	r13
    3014:	ef 92       	push	r14
    3016:	ff 92       	push	r15
    3018:	0f 93       	push	r16
    301a:	1f 93       	push	r17
    301c:	cf 93       	push	r28
    301e:	df 93       	push	r29
	//get FC temp
	uint16_t rawFCTemp;
	int8_t internalTemp;
	rawFCTemp = tmp100rawTemp(TMP100FC)>>4;
    3020:	8e e9       	ldi	r24, 0x9E	; 158
    3022:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <tmp100rawTemp>
    3026:	ec 01       	movw	r28, r24
    3028:	a4 e0       	ldi	r26, 0x04	; 4
    302a:	d6 95       	lsr	r29
    302c:	c7 95       	ror	r28
    302e:	aa 95       	dec	r26
    3030:	e1 f7       	brne	.-8      	; 0x302a <dumpTemps+0x22>
	int16_t fctinm = get12bit2scomp(rawFCTemp);
    3032:	ce 01       	movw	r24, r28
    3034:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <get12bit2scomp>
    3038:	6c 01       	movw	r12, r24
	internalTemp = (int8_t)(fctinm/16);
	//Convert to 8 bit

	//get ext temp
	uint16_t rawExtTemp = tmp100rawTemp(TMP100EXT)>>4;
    303a:	86 e9       	ldi	r24, 0x96	; 150
    303c:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <tmp100rawTemp>
    3040:	8c 01       	movw	r16, r24
    3042:	f4 e0       	ldi	r31, 0x04	; 4
    3044:	16 95       	lsr	r17
    3046:	07 95       	ror	r16
    3048:	fa 95       	dec	r31
    304a:	e1 f7       	brne	.-8      	; 0x3044 <dumpTemps+0x3c>
	int16_t externalTemperature = get12bit2scomp(rawExtTemp);
    304c:	c8 01       	movw	r24, r16
    304e:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <get12bit2scomp>
    3052:	5c 01       	movw	r10, r24

	//get battetry temp
	uint16_t rawBattTemp = tmp100rawTemp(TMP101BH)>>4;
    3054:	82 e9       	ldi	r24, 0x92	; 146
    3056:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <tmp100rawTemp>
    305a:	7c 01       	movw	r14, r24
    305c:	e4 e0       	ldi	r30, 0x04	; 4
    305e:	f6 94       	lsr	r15
    3060:	e7 94       	ror	r14
    3062:	ea 95       	dec	r30
    3064:	e1 f7       	brne	.-8      	; 0x305e <dumpTemps+0x56>
	int16_t btinm = get12bit2scomp(rawBattTemp);
    3066:	c7 01       	movw	r24, r14
    3068:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <get12bit2scomp>
    306c:	4c 01       	movw	r8, r24
	int8_t batteryTemperature = (int8_t)(btinm/16);
	//conver to 8 bit

	if(rawFCTemp != 0xEFF)
    306e:	8e e0       	ldi	r24, 0x0E	; 14
    3070:	cf 3f       	cpi	r28, 0xFF	; 255
    3072:	d8 07       	cpc	r29, r24
    3074:	29 f1       	breq	.+74     	; 0x30c0 <dumpTemps+0xb8>
	{
		lprintf_P(PSTR("FC: Raw: %x Calc: %d\n"), rawFCTemp, internalTemp);
    3076:	00 d0       	rcall	.+0      	; 0x3078 <dumpTemps+0x70>
    3078:	00 d0       	rcall	.+0      	; 0x307a <dumpTemps+0x72>
    307a:	00 d0       	rcall	.+0      	; 0x307c <dumpTemps+0x74>
    307c:	ed b7       	in	r30, 0x3d	; 61
    307e:	fe b7       	in	r31, 0x3e	; 62
    3080:	31 96       	adiw	r30, 0x01	; 1
    3082:	8f e7       	ldi	r24, 0x7F	; 127
    3084:	93 e0       	ldi	r25, 0x03	; 3
    3086:	ad b7       	in	r26, 0x3d	; 61
    3088:	be b7       	in	r27, 0x3e	; 62
    308a:	12 96       	adiw	r26, 0x02	; 2
    308c:	9c 93       	st	X, r25
    308e:	8e 93       	st	-X, r24
    3090:	11 97       	sbiw	r26, 0x01	; 1
    3092:	d3 83       	std	Z+3, r29	; 0x03
    3094:	c2 83       	std	Z+2, r28	; 0x02
    3096:	c6 01       	movw	r24, r12
    3098:	60 e1       	ldi	r22, 0x10	; 16
    309a:	70 e0       	ldi	r23, 0x00	; 0
    309c:	0e 94 63 36 	call	0x6cc6	; 0x6cc6 <__divmodhi4>
    30a0:	77 27       	eor	r23, r23
    30a2:	67 fd       	sbrc	r22, 7
    30a4:	70 95       	com	r23
    30a6:	75 83       	std	Z+5, r23	; 0x05
    30a8:	64 83       	std	Z+4, r22	; 0x04
    30aa:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>
    30ae:	ed b7       	in	r30, 0x3d	; 61
    30b0:	fe b7       	in	r31, 0x3e	; 62
    30b2:	36 96       	adiw	r30, 0x06	; 6
    30b4:	0f b6       	in	r0, 0x3f	; 63
    30b6:	f8 94       	cli
    30b8:	fe bf       	out	0x3e, r31	; 62
    30ba:	0f be       	out	0x3f, r0	; 63
    30bc:	ed bf       	out	0x3d, r30	; 61
    30be:	0d c0       	rjmp	.+26     	; 0x30da <dumpTemps+0xd2>
	} else {
		lprintf_P(PSTR("Error Reading FC Temp\n"));
    30c0:	00 d0       	rcall	.+0      	; 0x30c2 <dumpTemps+0xba>
    30c2:	88 e6       	ldi	r24, 0x68	; 104
    30c4:	93 e0       	ldi	r25, 0x03	; 3
    30c6:	ad b7       	in	r26, 0x3d	; 61
    30c8:	be b7       	in	r27, 0x3e	; 62
    30ca:	12 96       	adiw	r26, 0x02	; 2
    30cc:	9c 93       	st	X, r25
    30ce:	8e 93       	st	-X, r24
    30d0:	11 97       	sbiw	r26, 0x01	; 1
    30d2:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>
    30d6:	0f 90       	pop	r0
    30d8:	0f 90       	pop	r0
	}

	if(rawExtTemp != 0xEFF)
    30da:	be e0       	ldi	r27, 0x0E	; 14
    30dc:	0f 3f       	cpi	r16, 0xFF	; 255
    30de:	1b 07       	cpc	r17, r27
    30e0:	e9 f0       	breq	.+58     	; 0x311c <dumpTemps+0x114>
	{
		lprintf_P(PSTR("Ext: Raw: %x Calc: %d\n"), rawExtTemp, externalTemperature);
    30e2:	00 d0       	rcall	.+0      	; 0x30e4 <dumpTemps+0xdc>
    30e4:	00 d0       	rcall	.+0      	; 0x30e6 <dumpTemps+0xde>
    30e6:	00 d0       	rcall	.+0      	; 0x30e8 <dumpTemps+0xe0>
    30e8:	ed b7       	in	r30, 0x3d	; 61
    30ea:	fe b7       	in	r31, 0x3e	; 62
    30ec:	31 96       	adiw	r30, 0x01	; 1
    30ee:	81 e5       	ldi	r24, 0x51	; 81
    30f0:	93 e0       	ldi	r25, 0x03	; 3
    30f2:	ad b7       	in	r26, 0x3d	; 61
    30f4:	be b7       	in	r27, 0x3e	; 62
    30f6:	12 96       	adiw	r26, 0x02	; 2
    30f8:	9c 93       	st	X, r25
    30fa:	8e 93       	st	-X, r24
    30fc:	11 97       	sbiw	r26, 0x01	; 1
    30fe:	13 83       	std	Z+3, r17	; 0x03
    3100:	02 83       	std	Z+2, r16	; 0x02
    3102:	b5 82       	std	Z+5, r11	; 0x05
    3104:	a4 82       	std	Z+4, r10	; 0x04
    3106:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>
    310a:	ed b7       	in	r30, 0x3d	; 61
    310c:	fe b7       	in	r31, 0x3e	; 62
    310e:	36 96       	adiw	r30, 0x06	; 6
    3110:	0f b6       	in	r0, 0x3f	; 63
    3112:	f8 94       	cli
    3114:	fe bf       	out	0x3e, r31	; 62
    3116:	0f be       	out	0x3f, r0	; 63
    3118:	ed bf       	out	0x3d, r30	; 61
    311a:	0d c0       	rjmp	.+26     	; 0x3136 <dumpTemps+0x12e>
	} else {
		lprintf_P(PSTR("Error Reading External Temp\n"));
    311c:	00 d0       	rcall	.+0      	; 0x311e <dumpTemps+0x116>
    311e:	84 e3       	ldi	r24, 0x34	; 52
    3120:	93 e0       	ldi	r25, 0x03	; 3
    3122:	ad b7       	in	r26, 0x3d	; 61
    3124:	be b7       	in	r27, 0x3e	; 62
    3126:	12 96       	adiw	r26, 0x02	; 2
    3128:	9c 93       	st	X, r25
    312a:	8e 93       	st	-X, r24
    312c:	11 97       	sbiw	r26, 0x01	; 1
    312e:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>
    3132:	0f 90       	pop	r0
    3134:	0f 90       	pop	r0
	}

	if(rawBattTemp != 0xEFF)
    3136:	bf ef       	ldi	r27, 0xFF	; 255
    3138:	eb 16       	cp	r14, r27
    313a:	be e0       	ldi	r27, 0x0E	; 14
    313c:	fb 06       	cpc	r15, r27
    313e:	29 f1       	breq	.+74     	; 0x318a <dumpTemps+0x182>
	{
		lprintf_P(PSTR("Batt: Raw: %x Calc: %d\n"), rawBattTemp, batteryTemperature);
    3140:	00 d0       	rcall	.+0      	; 0x3142 <dumpTemps+0x13a>
    3142:	00 d0       	rcall	.+0      	; 0x3144 <dumpTemps+0x13c>
    3144:	00 d0       	rcall	.+0      	; 0x3146 <dumpTemps+0x13e>
    3146:	ed b7       	in	r30, 0x3d	; 61
    3148:	fe b7       	in	r31, 0x3e	; 62
    314a:	31 96       	adiw	r30, 0x01	; 1
    314c:	8c e1       	ldi	r24, 0x1C	; 28
    314e:	93 e0       	ldi	r25, 0x03	; 3
    3150:	ad b7       	in	r26, 0x3d	; 61
    3152:	be b7       	in	r27, 0x3e	; 62
    3154:	12 96       	adiw	r26, 0x02	; 2
    3156:	9c 93       	st	X, r25
    3158:	8e 93       	st	-X, r24
    315a:	11 97       	sbiw	r26, 0x01	; 1
    315c:	f3 82       	std	Z+3, r15	; 0x03
    315e:	e2 82       	std	Z+2, r14	; 0x02
    3160:	c4 01       	movw	r24, r8
    3162:	60 e1       	ldi	r22, 0x10	; 16
    3164:	70 e0       	ldi	r23, 0x00	; 0
    3166:	0e 94 63 36 	call	0x6cc6	; 0x6cc6 <__divmodhi4>
    316a:	77 27       	eor	r23, r23
    316c:	67 fd       	sbrc	r22, 7
    316e:	70 95       	com	r23
    3170:	75 83       	std	Z+5, r23	; 0x05
    3172:	64 83       	std	Z+4, r22	; 0x04
    3174:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>
    3178:	ed b7       	in	r30, 0x3d	; 61
    317a:	fe b7       	in	r31, 0x3e	; 62
    317c:	36 96       	adiw	r30, 0x06	; 6
    317e:	0f b6       	in	r0, 0x3f	; 63
    3180:	f8 94       	cli
    3182:	fe bf       	out	0x3e, r31	; 62
    3184:	0f be       	out	0x3f, r0	; 63
    3186:	ed bf       	out	0x3d, r30	; 61
    3188:	0d c0       	rjmp	.+26     	; 0x31a4 <dumpTemps+0x19c>
	} else {
		lprintf_P(PSTR("Error Reading Battery Temp\n"));
    318a:	00 d0       	rcall	.+0      	; 0x318c <dumpTemps+0x184>
    318c:	80 e0       	ldi	r24, 0x00	; 0
    318e:	93 e0       	ldi	r25, 0x03	; 3
    3190:	ad b7       	in	r26, 0x3d	; 61
    3192:	be b7       	in	r27, 0x3e	; 62
    3194:	12 96       	adiw	r26, 0x02	; 2
    3196:	9c 93       	st	X, r25
    3198:	8e 93       	st	-X, r24
    319a:	11 97       	sbiw	r26, 0x01	; 1
    319c:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>
    31a0:	0f 90       	pop	r0
    31a2:	0f 90       	pop	r0
	}
}
    31a4:	df 91       	pop	r29
    31a6:	cf 91       	pop	r28
    31a8:	1f 91       	pop	r17
    31aa:	0f 91       	pop	r16
    31ac:	ff 90       	pop	r15
    31ae:	ef 90       	pop	r14
    31b0:	df 90       	pop	r13
    31b2:	cf 90       	pop	r12
    31b4:	bf 90       	pop	r11
    31b6:	af 90       	pop	r10
    31b8:	9f 90       	pop	r9
    31ba:	8f 90       	pop	r8
    31bc:	08 95       	ret

000031be <collectData>:

}


void collectData(uint32_t time)
{
    31be:	2f 92       	push	r2
    31c0:	3f 92       	push	r3
    31c2:	4f 92       	push	r4
    31c4:	5f 92       	push	r5
    31c6:	6f 92       	push	r6
    31c8:	7f 92       	push	r7
    31ca:	8f 92       	push	r8
    31cc:	9f 92       	push	r9
    31ce:	af 92       	push	r10
    31d0:	bf 92       	push	r11
    31d2:	cf 92       	push	r12
    31d4:	df 92       	push	r13
    31d6:	ef 92       	push	r14
    31d8:	ff 92       	push	r15
    31da:	0f 93       	push	r16
    31dc:	1f 93       	push	r17
    31de:	df 93       	push	r29
    31e0:	cf 93       	push	r28
    31e2:	cd b7       	in	r28, 0x3d	; 61
    31e4:	de b7       	in	r29, 0x3e	; 62
    31e6:	ca 53       	subi	r28, 0x3A	; 58
    31e8:	d1 40       	sbci	r29, 0x01	; 1
    31ea:	0f b6       	in	r0, 0x3f	; 63
    31ec:	f8 94       	cli
    31ee:	de bf       	out	0x3e, r29	; 62
    31f0:	0f be       	out	0x3f, r0	; 63
    31f2:	cd bf       	out	0x3d, r28	; 61
    31f4:	cd 5c       	subi	r28, 0xCD	; 205
    31f6:	de 4f       	sbci	r29, 0xFE	; 254
    31f8:	68 83       	st	Y, r22
    31fa:	79 83       	std	Y+1, r23	; 0x01
    31fc:	8a 83       	std	Y+2, r24	; 0x02
    31fe:	9b 83       	std	Y+3, r25	; 0x03
    3200:	c3 53       	subi	r28, 0x33	; 51
    3202:	d1 40       	sbci	r29, 0x01	; 1
	#ifdef FCPUDEBUG
		lprintf_P(PSTR("In Data Collector\n"));
	#endif
	char sampleString[SAMPLESTRINGSIZEINCHARS];
	memset(sampleString, 0x00, SAMPLESTRINGSIZEINCHARS);
    3204:	81 ee       	ldi	r24, 0xE1	; 225
    3206:	fe 01       	movw	r30, r28
    3208:	7f 96       	adiw	r30, 0x1f	; 31
    320a:	df 01       	movw	r26, r30
    320c:	1d 92       	st	X+, r1
    320e:	8a 95       	dec	r24
    3210:	e9 f7       	brne	.-6      	; 0x320c <collectData+0x4e>

	//get time
	uint32_t epochNow = now();
    3212:	0e 94 16 13 	call	0x262c	; 0x262c <now>
    3216:	c2 5e       	subi	r28, 0xE2	; 226
    3218:	de 4f       	sbci	r29, 0xFE	; 254
    321a:	68 83       	st	Y, r22
    321c:	79 83       	std	Y+1, r23	; 0x01
    321e:	8a 83       	std	Y+2, r24	; 0x02
    3220:	9b 83       	std	Y+3, r25	; 0x03
    3222:	ce 51       	subi	r28, 0x1E	; 30
    3224:	d1 40       	sbci	r29, 0x01	; 1
	//get ambient pressure
	long myPressure;
	long myTemp;
	bmp085Convert(&myTemp, &myPressure);
    3226:	ce 01       	movw	r24, r28
    3228:	05 96       	adiw	r24, 0x05	; 5
    322a:	be 01       	movw	r22, r28
    322c:	6f 5f       	subi	r22, 0xFF	; 255
    322e:	7f 4f       	sbci	r23, 0xFF	; 255
    3230:	0e 94 35 08 	call	0x106a	; 0x106a <bmp085Convert>
	//get FC temp
	uint16_t rawFCTemp;
	int8_t internalTemp;
	rawFCTemp = tmp100rawTemp(TMP100FC)>>4;
    3234:	8e e9       	ldi	r24, 0x9E	; 158
    3236:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <tmp100rawTemp>
    323a:	34 e0       	ldi	r19, 0x04	; 4
    323c:	96 95       	lsr	r25
    323e:	87 95       	ror	r24
    3240:	3a 95       	dec	r19
    3242:	e1 f7       	brne	.-8      	; 0x323c <collectData+0x7e>
    3244:	c4 5e       	subi	r28, 0xE4	; 228
    3246:	de 4f       	sbci	r29, 0xFE	; 254
    3248:	99 83       	std	Y+1, r25	; 0x01
    324a:	88 83       	st	Y, r24
    324c:	cc 51       	subi	r28, 0x1C	; 28
    324e:	d1 40       	sbci	r29, 0x01	; 1
	int16_t fctinm = get12bit2scomp(rawFCTemp);
    3250:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <get12bit2scomp>
    3254:	c6 5e       	subi	r28, 0xE6	; 230
    3256:	de 4f       	sbci	r29, 0xFE	; 254
    3258:	99 83       	std	Y+1, r25	; 0x01
    325a:	88 83       	st	Y, r24
    325c:	ca 51       	subi	r28, 0x1A	; 26
    325e:	d1 40       	sbci	r29, 0x01	; 1
	internalTemp = (int8_t)(fctinm/16);
	//Convert to 8 bit

	//get ext temp
	uint16_t rawExtTemp = tmp100rawTemp(TMP100EXT)>>4;
    3260:	86 e9       	ldi	r24, 0x96	; 150
    3262:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <tmp100rawTemp>
    3266:	24 e0       	ldi	r18, 0x04	; 4
    3268:	96 95       	lsr	r25
    326a:	87 95       	ror	r24
    326c:	2a 95       	dec	r18
    326e:	e1 f7       	brne	.-8      	; 0x3268 <collectData+0xaa>
    3270:	c8 5e       	subi	r28, 0xE8	; 232
    3272:	de 4f       	sbci	r29, 0xFE	; 254
    3274:	99 83       	std	Y+1, r25	; 0x01
    3276:	88 83       	st	Y, r24
    3278:	c8 51       	subi	r28, 0x18	; 24
    327a:	d1 40       	sbci	r29, 0x01	; 1
	int16_t externalTemperature = get12bit2scomp(rawExtTemp);
    327c:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <get12bit2scomp>
    3280:	ca 5e       	subi	r28, 0xEA	; 234
    3282:	de 4f       	sbci	r29, 0xFE	; 254
    3284:	99 83       	std	Y+1, r25	; 0x01
    3286:	88 83       	st	Y, r24
    3288:	c6 51       	subi	r28, 0x16	; 22
    328a:	d1 40       	sbci	r29, 0x01	; 1

	//get battetry temp
	uint16_t rawBattTemp = tmp100rawTemp(TMP101BH)>>4;
    328c:	82 e9       	ldi	r24, 0x92	; 146
    328e:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <tmp100rawTemp>
    3292:	04 e0       	ldi	r16, 0x04	; 4
    3294:	96 95       	lsr	r25
    3296:	87 95       	ror	r24
    3298:	0a 95       	dec	r16
    329a:	e1 f7       	brne	.-8      	; 0x3294 <collectData+0xd6>
    329c:	cc 5e       	subi	r28, 0xEC	; 236
    329e:	de 4f       	sbci	r29, 0xFE	; 254
    32a0:	99 83       	std	Y+1, r25	; 0x01
    32a2:	88 83       	st	Y, r24
    32a4:	c4 51       	subi	r28, 0x14	; 20
    32a6:	d1 40       	sbci	r29, 0x01	; 1
	int16_t btinm = get12bit2scomp(rawBattTemp);
    32a8:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <get12bit2scomp>
    32ac:	ce 5e       	subi	r28, 0xEE	; 238
    32ae:	de 4f       	sbci	r29, 0xFE	; 254
    32b0:	99 83       	std	Y+1, r25	; 0x01
    32b2:	88 83       	st	Y, r24
    32b4:	c2 51       	subi	r28, 0x12	; 18
    32b6:	d1 40       	sbci	r29, 0x01	; 1

	//get humidity
	//NEED COMMANDS FROM TIM
	uint8_t humidity[2] = {0,0};
	uint8_t humFinal;
	i2cSendStart();
    32b8:	0e 94 56 0c 	call	0x18ac	; 0x18ac <i2cSendStart>
	i2cWaitForComplete();
    32bc:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	i2cSendByte(INTSENSOR);
    32c0:	84 e1       	ldi	r24, 0x14	; 20
    32c2:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	i2cWaitForComplete();
    32c6:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	i2cSendByte(0x04);
    32ca:	84 e0       	ldi	r24, 0x04	; 4
    32cc:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	i2cWaitForComplete();
    32d0:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	i2cSendStop();
    32d4:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <i2cSendStop>
    32d8:	00 e3       	ldi	r16, 0x30	; 48
    32da:	15 e7       	ldi	r17, 0x75	; 117
    32dc:	c8 01       	movw	r24, r16
    32de:	01 97       	sbiw	r24, 0x01	; 1
    32e0:	f1 f7       	brne	.-4      	; 0x32de <collectData+0x120>

	_delay_ms(10);

	i2cSendStart();
    32e2:	0e 94 56 0c 	call	0x18ac	; 0x18ac <i2cSendStart>
	i2cWaitForComplete();
    32e6:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	i2cSendByte(INTSENSOR+1);
    32ea:	85 e1       	ldi	r24, 0x15	; 21
    32ec:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	i2cWaitForComplete();
    32f0:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	i2cReceiveByte(1);
    32f4:	81 e0       	ldi	r24, 0x01	; 1
    32f6:	0e 94 92 0c 	call	0x1924	; 0x1924 <i2cReceiveByte>
	i2cWaitForComplete();
    32fa:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	humidity[0] = i2cGetReceivedByte();
    32fe:	0e 94 a0 0c 	call	0x1940	; 0x1940 <i2cGetReceivedByte>
    3302:	ce 5c       	subi	r28, 0xCE	; 206
    3304:	de 4f       	sbci	r29, 0xFE	; 254
    3306:	88 83       	st	Y, r24
    3308:	c2 53       	subi	r28, 0x32	; 50
    330a:	d1 40       	sbci	r29, 0x01	; 1
	i2cWaitForComplete();
    330c:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	i2cReceiveByte(0);
    3310:	80 e0       	ldi	r24, 0x00	; 0
    3312:	0e 94 92 0c 	call	0x1924	; 0x1924 <i2cReceiveByte>
	i2cWaitForComplete();
    3316:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	humidity[1] += i2cGetReceivedByte();
    331a:	0e 94 a0 0c 	call	0x1940	; 0x1940 <i2cGetReceivedByte>
    331e:	cf 5c       	subi	r28, 0xCF	; 207
    3320:	de 4f       	sbci	r29, 0xFE	; 254
    3322:	88 83       	st	Y, r24
    3324:	c1 53       	subi	r28, 0x31	; 49
    3326:	d1 40       	sbci	r29, 0x01	; 1
	i2cWaitForComplete();
    3328:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	i2cSendStop();
    332c:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <i2cSendStop>
	humFinal = (uint8_t)(humInt*2);

	//get coud sensor value
	uint8_t cloudVal[2]= {0,0};
	uint8_t cloudFinal;
	i2cSendStart();
    3330:	0e 94 56 0c 	call	0x18ac	; 0x18ac <i2cSendStart>
	i2cWaitForComplete();
    3334:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	i2cSendByte(INTSENSOR);
    3338:	84 e1       	ldi	r24, 0x14	; 20
    333a:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	i2cWaitForComplete();
    333e:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	i2cSendByte(0x09);
    3342:	89 e0       	ldi	r24, 0x09	; 9
    3344:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	i2cWaitForComplete();
    3348:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	i2cSendStop();
    334c:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <i2cSendStop>
    3350:	c8 01       	movw	r24, r16
    3352:	01 97       	sbiw	r24, 0x01	; 1
    3354:	f1 f7       	brne	.-4      	; 0x3352 <collectData+0x194>

	_delay_ms(10);

	i2cSendStart();
    3356:	0e 94 56 0c 	call	0x18ac	; 0x18ac <i2cSendStart>
	i2cWaitForComplete();
    335a:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	i2cSendByte(INTSENSOR+1);
    335e:	85 e1       	ldi	r24, 0x15	; 21
    3360:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	i2cWaitForComplete();
    3364:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	i2cReceiveByte(1);
    3368:	81 e0       	ldi	r24, 0x01	; 1
    336a:	0e 94 92 0c 	call	0x1924	; 0x1924 <i2cReceiveByte>
	i2cWaitForComplete();
    336e:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	cloudVal[0] = i2cGetReceivedByte();
    3372:	0e 94 a0 0c 	call	0x1940	; 0x1940 <i2cGetReceivedByte>
    3376:	c0 5d       	subi	r28, 0xD0	; 208
    3378:	de 4f       	sbci	r29, 0xFE	; 254
    337a:	88 83       	st	Y, r24
    337c:	c0 53       	subi	r28, 0x30	; 48
    337e:	d1 40       	sbci	r29, 0x01	; 1
	i2cWaitForComplete();
    3380:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	i2cReceiveByte(0);
    3384:	80 e0       	ldi	r24, 0x00	; 0
    3386:	0e 94 92 0c 	call	0x1924	; 0x1924 <i2cReceiveByte>
	i2cWaitForComplete();
    338a:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	cloudVal[1] += i2cGetReceivedByte();
    338e:	0e 94 a0 0c 	call	0x1940	; 0x1940 <i2cGetReceivedByte>
    3392:	c1 5d       	subi	r28, 0xD1	; 209
    3394:	de 4f       	sbci	r29, 0xFE	; 254
    3396:	88 83       	st	Y, r24
    3398:	cf 52       	subi	r28, 0x2F	; 47
    339a:	d1 40       	sbci	r29, 0x01	; 1
	i2cWaitForComplete();
    339c:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	i2cSendStop();
    33a0:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <i2cSendStop>
	//get heading
	//get ground speed
	//get gps fix
	//get HDOP
	//get VDOP
	struct gpsData myGPS = currentPositionData;
    33a4:	de 01       	movw	r26, r28
    33a6:	19 96       	adiw	r26, 0x09	; 9
    33a8:	e7 e3       	ldi	r30, 0x37	; 55
    33aa:	f4 e0       	ldi	r31, 0x04	; 4
    33ac:	86 e1       	ldi	r24, 0x16	; 22
    33ae:	01 90       	ld	r0, Z+
    33b0:	0d 92       	st	X+, r0
    33b2:	81 50       	subi	r24, 0x01	; 1
    33b4:	e1 f7       	brne	.-8      	; 0x33ae <collectData+0x1f0>
    33b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    33b8:	9f 85       	ldd	r25, Y+15	; 0x0f
    33ba:	a8 89       	ldd	r26, Y+16	; 0x10
    33bc:	b9 89       	ldd	r27, Y+17	; 0x11
    33be:	c2 5f       	subi	r28, 0xF2	; 242
    33c0:	de 4f       	sbci	r29, 0xFE	; 254
    33c2:	88 83       	st	Y, r24
    33c4:	99 83       	std	Y+1, r25	; 0x01
    33c6:	aa 83       	std	Y+2, r26	; 0x02
    33c8:	bb 83       	std	Y+3, r27	; 0x03
    33ca:	ce 50       	subi	r28, 0x0E	; 14
    33cc:	d1 40       	sbci	r29, 0x01	; 1
    33ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    33d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    33d2:	ac 85       	ldd	r26, Y+12	; 0x0c
    33d4:	bd 85       	ldd	r27, Y+13	; 0x0d
    33d6:	c6 5f       	subi	r28, 0xF6	; 246
    33d8:	de 4f       	sbci	r29, 0xFE	; 254
    33da:	88 83       	st	Y, r24
    33dc:	99 83       	std	Y+1, r25	; 0x01
    33de:	aa 83       	std	Y+2, r26	; 0x02
    33e0:	bb 83       	std	Y+3, r27	; 0x03
    33e2:	ca 50       	subi	r28, 0x0A	; 10
    33e4:	d1 40       	sbci	r29, 0x01	; 1
    33e6:	ac 8d       	ldd	r26, Y+28	; 0x1c
    33e8:	bd 8d       	ldd	r27, Y+29	; 0x1d
    33ea:	c8 5f       	subi	r28, 0xF8	; 248
    33ec:	de 4f       	sbci	r29, 0xFE	; 254
    33ee:	b9 83       	std	Y+1, r27	; 0x01
    33f0:	a8 83       	st	Y, r26
    33f2:	c8 50       	subi	r28, 0x08	; 8
    33f4:	d1 40       	sbci	r29, 0x01	; 1
    33f6:	eb 89       	ldd	r30, Y+19	; 0x13
    33f8:	fc 89       	ldd	r31, Y+20	; 0x14
    33fa:	ca 5f       	subi	r28, 0xFA	; 250
    33fc:	de 4f       	sbci	r29, 0xFE	; 254
    33fe:	f9 83       	std	Y+1, r31	; 0x01
    3400:	e8 83       	st	Y, r30
    3402:	c6 50       	subi	r28, 0x06	; 6
    3404:	d1 40       	sbci	r29, 0x01	; 1
    3406:	fa 89       	ldd	r31, Y+18	; 0x12
    3408:	cb 5f       	subi	r28, 0xFB	; 251
    340a:	de 4f       	sbci	r29, 0xFE	; 254
    340c:	f8 83       	st	Y, r31
    340e:	c5 50       	subi	r28, 0x05	; 5
    3410:	d1 40       	sbci	r29, 0x01	; 1
    3412:	29 85       	ldd	r18, Y+9	; 0x09
    3414:	cc 5f       	subi	r28, 0xFC	; 252
    3416:	de 4f       	sbci	r29, 0xFE	; 254
    3418:	28 83       	st	Y, r18
    341a:	c4 50       	subi	r28, 0x04	; 4
    341c:	d1 40       	sbci	r29, 0x01	; 1
    341e:	8d 89       	ldd	r24, Y+21	; 0x15
    3420:	9e 89       	ldd	r25, Y+22	; 0x16
    3422:	ce 5f       	subi	r28, 0xFE	; 254
    3424:	de 4f       	sbci	r29, 0xFE	; 254
    3426:	99 83       	std	Y+1, r25	; 0x01
    3428:	88 83       	st	Y, r24
    342a:	c2 50       	subi	r28, 0x02	; 2
    342c:	d1 40       	sbci	r29, 0x01	; 1
    342e:	af 89       	ldd	r26, Y+23	; 0x17
    3430:	b8 8d       	ldd	r27, Y+24	; 0x18
    3432:	c0 50       	subi	r28, 0x00	; 0
    3434:	df 4f       	sbci	r29, 0xFF	; 255
    3436:	b9 83       	std	Y+1, r27	; 0x01
    3438:	a8 83       	st	Y, r26
    343a:	c0 50       	subi	r28, 0x00	; 0
    343c:	d1 40       	sbci	r29, 0x01	; 1
	//get climb rate
	//This is global variable VSpeedAvg

	//get raw pack voltage
	//AD7998 Interfacing
	i2cSendStart();
    343e:	0e 94 56 0c 	call	0x18ac	; 0x18ac <i2cSendStart>
	i2cWaitForComplete();
    3442:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	i2cSendByte(AD7992);
    3446:	80 e4       	ldi	r24, 0x40	; 64
    3448:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	i2cWaitForComplete();
    344c:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	i2cSendByte(0x10);
    3450:	80 e1       	ldi	r24, 0x10	; 16
    3452:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	i2cWaitForComplete();
    3456:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	i2cSendStop();
    345a:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <i2cSendStop>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    345e:	84 e1       	ldi	r24, 0x14	; 20
    3460:	8a 95       	dec	r24
    3462:	f1 f7       	brne	.-4      	; 0x3460 <collectData+0x2a2>

	_delay_us(5);

	i2cSendStart();
    3464:	0e 94 56 0c 	call	0x18ac	; 0x18ac <i2cSendStart>
	i2cWaitForComplete();
    3468:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	i2cSendByte(AD7992+1);
    346c:	81 e4       	ldi	r24, 0x41	; 65
    346e:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	i2cWaitForComplete();
    3472:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	i2cReceiveByte(1);
    3476:	81 e0       	ldi	r24, 0x01	; 1
    3478:	0e 94 92 0c 	call	0x1924	; 0x1924 <i2cReceiveByte>
	i2cWaitForComplete();
    347c:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	uint16_t batteryValue = (uint16_t)i2cGetReceivedByte() << 8;
    3480:	0e 94 a0 0c 	call	0x1940	; 0x1940 <i2cGetReceivedByte>
    3484:	c2 5d       	subi	r28, 0xD2	; 210
    3486:	de 4f       	sbci	r29, 0xFE	; 254
    3488:	88 83       	st	Y, r24
    348a:	ce 52       	subi	r28, 0x2E	; 46
    348c:	d1 40       	sbci	r29, 0x01	; 1
	i2cWaitForComplete();
    348e:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	i2cReceiveByte(0);
    3492:	80 e0       	ldi	r24, 0x00	; 0
    3494:	0e 94 92 0c 	call	0x1924	; 0x1924 <i2cReceiveByte>
	i2cWaitForComplete();
    3498:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	batteryValue += i2cGetReceivedByte();
    349c:	0e 94 a0 0c 	call	0x1940	; 0x1940 <i2cGetReceivedByte>
    34a0:	c3 5d       	subi	r28, 0xD3	; 211
    34a2:	de 4f       	sbci	r29, 0xFE	; 254
    34a4:	88 83       	st	Y, r24
    34a6:	cd 52       	subi	r28, 0x2D	; 45
    34a8:	d1 40       	sbci	r29, 0x01	; 1
	i2cWaitForComplete();
    34aa:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	i2cSendStop();
    34ae:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <i2cSendStop>
	batteryValue = (uint16_t)((((float)batteryValue*0.0047647))*10.);
	uint8_t outputVoltage = (uint8_t)batteryValue;

	//get ballast valve state
	uint8_t ballastError = 0;
	i2cSendStart();
    34b2:	0e 94 56 0c 	call	0x18ac	; 0x18ac <i2cSendStart>
	ballastError |= i2cWaitForComplete();
    34b6:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    34ba:	c4 5d       	subi	r28, 0xD4	; 212
    34bc:	de 4f       	sbci	r29, 0xFE	; 254
    34be:	88 83       	st	Y, r24
    34c0:	cc 52       	subi	r28, 0x2C	; 44
    34c2:	d1 40       	sbci	r29, 0x01	; 1
	i2cSendByte(18);
    34c4:	82 e1       	ldi	r24, 0x12	; 18
    34c6:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	ballastError |= i2cWaitForComplete();
    34ca:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    34ce:	88 2e       	mov	r8, r24
	i2cSendByte(9);
    34d0:	89 e0       	ldi	r24, 0x09	; 9
    34d2:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	ballastError |= i2cWaitForComplete();
    34d6:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    34da:	c5 5d       	subi	r28, 0xD5	; 213
    34dc:	de 4f       	sbci	r29, 0xFE	; 254
    34de:	88 83       	st	Y, r24
    34e0:	cb 52       	subi	r28, 0x2B	; 43
    34e2:	d1 40       	sbci	r29, 0x01	; 1
	i2cSendByte(1);
    34e4:	81 e0       	ldi	r24, 0x01	; 1
    34e6:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	ballastError |= i2cWaitForComplete();
    34ea:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    34ee:	c6 5d       	subi	r28, 0xD6	; 214
    34f0:	de 4f       	sbci	r29, 0xFE	; 254
    34f2:	88 83       	st	Y, r24
    34f4:	ca 52       	subi	r28, 0x2A	; 42
    34f6:	d1 40       	sbci	r29, 0x01	; 1
	i2cSendStop();
    34f8:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <i2cSendStop>
    34fc:	80 e1       	ldi	r24, 0x10	; 16
    34fe:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3500:	2c e2       	ldi	r18, 0x2C	; 44
    3502:	31 e0       	ldi	r19, 0x01	; 1
    3504:	f9 01       	movw	r30, r18
    3506:	31 97       	sbiw	r30, 0x01	; 1
    3508:	f1 f7       	brne	.-4      	; 0x3506 <collectData+0x348>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    350a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    350c:	d9 f7       	brne	.-10     	; 0x3504 <collectData+0x346>

	_delay_ms(1000);

	i2cSendStart();
    350e:	0e 94 56 0c 	call	0x18ac	; 0x18ac <i2cSendStart>
	ballastError |= i2cWaitForComplete();
    3512:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    3516:	c7 5d       	subi	r28, 0xD7	; 215
    3518:	de 4f       	sbci	r29, 0xFE	; 254
    351a:	88 83       	st	Y, r24
    351c:	c9 52       	subi	r28, 0x29	; 41
    351e:	d1 40       	sbci	r29, 0x01	; 1
	i2cSendByte(0x13);
    3520:	83 e1       	ldi	r24, 0x13	; 19
    3522:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	ballastError |= i2cWaitForComplete();
    3526:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    352a:	c8 5d       	subi	r28, 0xD8	; 216
    352c:	de 4f       	sbci	r29, 0xFE	; 254
    352e:	88 83       	st	Y, r24
    3530:	c8 52       	subi	r28, 0x28	; 40
    3532:	d1 40       	sbci	r29, 0x01	; 1
	i2cReceiveByte(1);
    3534:	81 e0       	ldi	r24, 0x01	; 1
    3536:	0e 94 92 0c 	call	0x1924	; 0x1924 <i2cReceiveByte>
	ballastError |= i2cWaitForComplete();
    353a:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    353e:	c9 5d       	subi	r28, 0xD9	; 217
    3540:	de 4f       	sbci	r29, 0xFE	; 254
    3542:	88 83       	st	Y, r24
    3544:	c7 52       	subi	r28, 0x27	; 39
    3546:	d1 40       	sbci	r29, 0x01	; 1
	uint16_t valveStatus = (uint16_t)i2cGetReceivedByte() << 8;
    3548:	0e 94 a0 0c 	call	0x1940	; 0x1940 <i2cGetReceivedByte>
    354c:	ca 5d       	subi	r28, 0xDA	; 218
    354e:	de 4f       	sbci	r29, 0xFE	; 254
    3550:	88 83       	st	Y, r24
    3552:	c6 52       	subi	r28, 0x26	; 38
    3554:	d1 40       	sbci	r29, 0x01	; 1
	ballastError |= i2cWaitForComplete();
    3556:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    355a:	38 2e       	mov	r3, r24
	i2cReceiveByte(0);
    355c:	80 e0       	ldi	r24, 0x00	; 0
    355e:	0e 94 92 0c 	call	0x1924	; 0x1924 <i2cReceiveByte>
	ballastError |= i2cWaitForComplete();
    3562:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    3566:	58 2e       	mov	r5, r24
	valveStatus += i2cGetReceivedByte();
    3568:	0e 94 a0 0c 	call	0x1940	; 0x1940 <i2cGetReceivedByte>
    356c:	cb 5d       	subi	r28, 0xDB	; 219
    356e:	de 4f       	sbci	r29, 0xFE	; 254
    3570:	88 83       	st	Y, r24
    3572:	c5 52       	subi	r28, 0x25	; 37
    3574:	d1 40       	sbci	r29, 0x01	; 1
	ballastError |= i2cWaitForComplete();
    3576:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    357a:	68 2e       	mov	r6, r24
	i2cSendStop();
    357c:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <i2cSendStop>

	//1 = open, 0 = closed

	//get ballast remaining
	i2cSendStart();
    3580:	0e 94 56 0c 	call	0x18ac	; 0x18ac <i2cSendStart>
	ballastError |= i2cWaitForComplete();
    3584:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    3588:	78 2e       	mov	r7, r24
	i2cSendByte(18);
    358a:	82 e1       	ldi	r24, 0x12	; 18
    358c:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	ballastError |= i2cWaitForComplete();
    3590:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    3594:	98 2e       	mov	r9, r24
	i2cSendByte(9);
    3596:	89 e0       	ldi	r24, 0x09	; 9
    3598:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	ballastError |= i2cWaitForComplete();
    359c:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    35a0:	28 2e       	mov	r2, r24
	i2cSendByte(2);
    35a2:	82 e0       	ldi	r24, 0x02	; 2
    35a4:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	ballastError |= i2cWaitForComplete();
    35a8:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    35ac:	48 2e       	mov	r4, r24
	i2cSendStop();
    35ae:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <i2cSendStop>
    35b2:	80 e1       	ldi	r24, 0x10	; 16
    35b4:	97 e2       	ldi	r25, 0x27	; 39
    35b6:	2c e2       	ldi	r18, 0x2C	; 44
    35b8:	31 e0       	ldi	r19, 0x01	; 1
    35ba:	f9 01       	movw	r30, r18
    35bc:	31 97       	sbiw	r30, 0x01	; 1
    35be:	f1 f7       	brne	.-4      	; 0x35bc <collectData+0x3fe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35c2:	d9 f7       	brne	.-10     	; 0x35ba <collectData+0x3fc>

	_delay_ms(1000);

	i2cSendStart();
    35c4:	0e 94 56 0c 	call	0x18ac	; 0x18ac <i2cSendStart>
	ballastError |= i2cWaitForComplete();
    35c8:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    35cc:	a8 2e       	mov	r10, r24
	i2cSendByte(18+1);
    35ce:	83 e1       	ldi	r24, 0x13	; 19
    35d0:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	ballastError |= i2cWaitForComplete();
    35d4:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    35d8:	b8 2e       	mov	r11, r24
	i2cReceiveByte(1);
    35da:	81 e0       	ldi	r24, 0x01	; 1
    35dc:	0e 94 92 0c 	call	0x1924	; 0x1924 <i2cReceiveByte>
	ballastError |= i2cWaitForComplete();
    35e0:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    35e4:	e8 2e       	mov	r14, r24
	uint16_t ballastRemaining = (uint16_t)i2cGetReceivedByte() << 8;
    35e6:	0e 94 a0 0c 	call	0x1940	; 0x1940 <i2cGetReceivedByte>
    35ea:	d8 2e       	mov	r13, r24
    35ec:	cc 24       	eor	r12, r12
	ballastError |= i2cWaitForComplete();
    35ee:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    35f2:	f8 2e       	mov	r15, r24
	i2cReceiveByte(0);
    35f4:	80 e0       	ldi	r24, 0x00	; 0
    35f6:	0e 94 92 0c 	call	0x1924	; 0x1924 <i2cReceiveByte>
	ballastError |= i2cWaitForComplete();
    35fa:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    35fe:	08 2f       	mov	r16, r24
	ballastRemaining += (uint16_t)i2cGetReceivedByte();
    3600:	0e 94 a0 0c 	call	0x1940	; 0x1940 <i2cGetReceivedByte>
    3604:	cc 5d       	subi	r28, 0xDC	; 220
    3606:	de 4f       	sbci	r29, 0xFE	; 254
    3608:	88 83       	st	Y, r24
    360a:	c4 52       	subi	r28, 0x24	; 36
    360c:	d1 40       	sbci	r29, 0x01	; 1
	ballastError |= i2cWaitForComplete();
    360e:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
    3612:	18 2f       	mov	r17, r24
	//get ballast valve state
	uint8_t ballastError = 0;
	i2cSendStart();
	ballastError |= i2cWaitForComplete();
	i2cSendByte(18);
	ballastError |= i2cWaitForComplete();
    3614:	c4 5d       	subi	r28, 0xD4	; 212
    3616:	de 4f       	sbci	r29, 0xFE	; 254
    3618:	b8 81       	ld	r27, Y
    361a:	cc 52       	subi	r28, 0x2C	; 44
    361c:	d1 40       	sbci	r29, 0x01	; 1
    361e:	8b 2a       	or	r8, r27
	i2cSendByte(9);
	ballastError |= i2cWaitForComplete();
    3620:	c5 5d       	subi	r28, 0xD5	; 213
    3622:	de 4f       	sbci	r29, 0xFE	; 254
    3624:	e8 81       	ld	r30, Y
    3626:	cb 52       	subi	r28, 0x2B	; 43
    3628:	d1 40       	sbci	r29, 0x01	; 1
    362a:	8e 2a       	or	r8, r30
	i2cSendByte(1);
	ballastError |= i2cWaitForComplete();
    362c:	c6 5d       	subi	r28, 0xD6	; 214
    362e:	de 4f       	sbci	r29, 0xFE	; 254
    3630:	f8 81       	ld	r31, Y
    3632:	ca 52       	subi	r28, 0x2A	; 42
    3634:	d1 40       	sbci	r29, 0x01	; 1
    3636:	8f 2a       	or	r8, r31
	i2cSendStop();

	_delay_ms(1000);

	i2cSendStart();
	ballastError |= i2cWaitForComplete();
    3638:	c7 5d       	subi	r28, 0xD7	; 215
    363a:	de 4f       	sbci	r29, 0xFE	; 254
    363c:	28 81       	ld	r18, Y
    363e:	c9 52       	subi	r28, 0x29	; 41
    3640:	d1 40       	sbci	r29, 0x01	; 1
    3642:	82 2a       	or	r8, r18
	i2cSendByte(0x13);
	ballastError |= i2cWaitForComplete();
    3644:	c8 5d       	subi	r28, 0xD8	; 216
    3646:	de 4f       	sbci	r29, 0xFE	; 254
    3648:	38 81       	ld	r19, Y
    364a:	c8 52       	subi	r28, 0x28	; 40
    364c:	d1 40       	sbci	r29, 0x01	; 1
    364e:	83 2a       	or	r8, r19
	i2cReceiveByte(1);
	ballastError |= i2cWaitForComplete();
    3650:	c9 5d       	subi	r28, 0xD9	; 217
    3652:	de 4f       	sbci	r29, 0xFE	; 254
    3654:	88 81       	ld	r24, Y
    3656:	c7 52       	subi	r28, 0x27	; 39
    3658:	d1 40       	sbci	r29, 0x01	; 1
    365a:	88 2a       	or	r8, r24
	uint16_t valveStatus = (uint16_t)i2cGetReceivedByte() << 8;
	ballastError |= i2cWaitForComplete();
    365c:	83 28       	or	r8, r3
	i2cReceiveByte(0);
	ballastError |= i2cWaitForComplete();
    365e:	85 28       	or	r8, r5
	valveStatus += i2cGetReceivedByte();
	ballastError |= i2cWaitForComplete();
    3660:	86 28       	or	r8, r6

	//1 = open, 0 = closed

	//get ballast remaining
	i2cSendStart();
	ballastError |= i2cWaitForComplete();
    3662:	87 28       	or	r8, r7
	i2cSendByte(18);
	ballastError |= i2cWaitForComplete();
    3664:	89 28       	or	r8, r9
	i2cSendByte(9);
	ballastError |= i2cWaitForComplete();
    3666:	82 28       	or	r8, r2
	i2cSendByte(2);
	ballastError |= i2cWaitForComplete();
    3668:	84 28       	or	r8, r4
	i2cSendStop();

	_delay_ms(1000);

	i2cSendStart();
	ballastError |= i2cWaitForComplete();
    366a:	8a 28       	or	r8, r10
	i2cSendByte(18+1);
	ballastError |= i2cWaitForComplete();
    366c:	8b 28       	or	r8, r11
	i2cReceiveByte(1);
	ballastError |= i2cWaitForComplete();
    366e:	8e 28       	or	r8, r14
	uint16_t ballastRemaining = (uint16_t)i2cGetReceivedByte() << 8;
	ballastError |= i2cWaitForComplete();
    3670:	8f 28       	or	r8, r15
	i2cReceiveByte(0);
	ballastError |= i2cWaitForComplete();
    3672:	80 2a       	or	r8, r16
	ballastRemaining += (uint16_t)i2cGetReceivedByte();
	ballastError |= i2cWaitForComplete();
	i2cSendStop();
    3674:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <i2cSendStop>

	statusCode = (statusCode & 0xFFFD) | (ballastError << 1);
    3678:	81 2a       	or	r8, r17
    367a:	28 2d       	mov	r18, r8
    367c:	30 e0       	ldi	r19, 0x00	; 0
    367e:	22 0f       	add	r18, r18
    3680:	33 1f       	adc	r19, r19
    3682:	80 91 2b 03 	lds	r24, 0x032B
    3686:	90 91 2c 03 	lds	r25, 0x032C
    368a:	8d 7f       	andi	r24, 0xFD	; 253
    368c:	28 2b       	or	r18, r24
    368e:	39 2b       	or	r19, r25
    3690:	30 93 2c 03 	sts	0x032C, r19
    3694:	20 93 2b 03 	sts	0x032B, r18
	//variable StatusCode

	//Get Helium temperature
	int16_t heliumTemperature;
	uint8_t helVal[2]= {0,0};
	i2cSendStart();
    3698:	0e 94 56 0c 	call	0x18ac	; 0x18ac <i2cSendStart>
	i2cWaitForComplete();
    369c:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	i2cSendByte(INTSENSOR);
    36a0:	84 e1       	ldi	r24, 0x14	; 20
    36a2:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	i2cWaitForComplete();
    36a6:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	i2cSendByte(0x0A);
    36aa:	8a e0       	ldi	r24, 0x0A	; 10
    36ac:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	i2cWaitForComplete();
    36b0:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	i2cSendStop();
    36b4:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <i2cSendStop>
    36b8:	80 e3       	ldi	r24, 0x30	; 48
    36ba:	95 e7       	ldi	r25, 0x75	; 117
    36bc:	01 97       	sbiw	r24, 0x01	; 1
    36be:	f1 f7       	brne	.-4      	; 0x36bc <collectData+0x4fe>

	_delay_ms(10);

	i2cSendStart();
    36c0:	0e 94 56 0c 	call	0x18ac	; 0x18ac <i2cSendStart>
	i2cWaitForComplete();
    36c4:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	i2cSendByte(INTSENSOR+1);
    36c8:	85 e1       	ldi	r24, 0x15	; 21
    36ca:	0e 94 8b 0c 	call	0x1916	; 0x1916 <i2cSendByte>
	i2cWaitForComplete();
    36ce:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	i2cReceiveByte(1);
    36d2:	81 e0       	ldi	r24, 0x01	; 1
    36d4:	0e 94 92 0c 	call	0x1924	; 0x1924 <i2cReceiveByte>
	i2cWaitForComplete();
    36d8:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	helVal[0] = i2cGetReceivedByte();
    36dc:	0e 94 a0 0c 	call	0x1940	; 0x1940 <i2cGetReceivedByte>
    36e0:	cd 5d       	subi	r28, 0xDD	; 221
    36e2:	de 4f       	sbci	r29, 0xFE	; 254
    36e4:	88 83       	st	Y, r24
    36e6:	c3 52       	subi	r28, 0x23	; 35
    36e8:	d1 40       	sbci	r29, 0x01	; 1
	i2cWaitForComplete();
    36ea:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	i2cReceiveByte(0);
    36ee:	80 e0       	ldi	r24, 0x00	; 0
    36f0:	0e 94 92 0c 	call	0x1924	; 0x1924 <i2cReceiveByte>
	i2cWaitForComplete();
    36f4:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	helVal[1] += i2cGetReceivedByte();
    36f8:	0e 94 a0 0c 	call	0x1940	; 0x1940 <i2cGetReceivedByte>
    36fc:	ce 5d       	subi	r28, 0xDE	; 222
    36fe:	de 4f       	sbci	r29, 0xFE	; 254
    3700:	88 83       	st	Y, r24
    3702:	c2 52       	subi	r28, 0x22	; 34
    3704:	d1 40       	sbci	r29, 0x01	; 1
	i2cWaitForComplete();
    3706:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <i2cWaitForComplete>
	i2cSendStop();
    370a:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <i2cSendStop>
	heliumTemperature = (int16_t)(((uint16_t)helVal[0] * 256) + (helVal[1]));
	//NEED COMMANDS FROM TIM

	//format into string
	sprintf_P(sampleString, PSTR("%ld," //Epoch
    370e:	49 80       	ldd	r4, Y+1	; 0x01
    3710:	5a 80       	ldd	r5, Y+2	; 0x02
    3712:	6b 80       	ldd	r6, Y+3	; 0x03
    3714:	7c 80       	ldd	r7, Y+4	; 0x04
    3716:	ce 5c       	subi	r28, 0xCE	; 206
    3718:	de 4f       	sbci	r29, 0xFE	; 254
    371a:	78 81       	ld	r23, Y
    371c:	c2 53       	subi	r28, 0x32	; 50
    371e:	d1 40       	sbci	r29, 0x01	; 1
    3720:	60 e0       	ldi	r22, 0x00	; 0
    3722:	cf 5c       	subi	r28, 0xCF	; 207
    3724:	de 4f       	sbci	r29, 0xFE	; 254
    3726:	98 81       	ld	r25, Y
    3728:	c1 53       	subi	r28, 0x31	; 49
    372a:	d1 40       	sbci	r29, 0x01	; 1
    372c:	29 2f       	mov	r18, r25
    372e:	30 e0       	ldi	r19, 0x00	; 0
    3730:	62 2b       	or	r22, r18
    3732:	73 2b       	or	r23, r19
    3734:	80 e0       	ldi	r24, 0x00	; 0
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	0e 94 23 35 	call	0x6a46	; 0x6a46 <__floatunsisf>
    373c:	20 e0       	ldi	r18, 0x00	; 0
    373e:	30 e0       	ldi	r19, 0x00	; 0
    3740:	40 e8       	ldi	r20, 0x80	; 128
    3742:	5a e3       	ldi	r21, 0x3A	; 58
    3744:	0e 94 d5 35 	call	0x6baa	; 0x6baa <__mulsf3>
    3748:	2a e0       	ldi	r18, 0x0A	; 10
    374a:	37 ed       	ldi	r19, 0xD7	; 215
    374c:	43 e2       	ldi	r20, 0x23	; 35
    374e:	5e e3       	ldi	r21, 0x3E	; 62
    3750:	0e 94 21 34 	call	0x6842	; 0x6842 <__subsf3>
    3754:	2f e5       	ldi	r18, 0x5F	; 95
    3756:	39 e2       	ldi	r19, 0x29	; 41
    3758:	4b ec       	ldi	r20, 0xCB	; 203
    375a:	5b e3       	ldi	r21, 0x3B	; 59
    375c:	0e 94 8a 34 	call	0x6914	; 0x6914 <__divsf3>
    3760:	9b 01       	movw	r18, r22
    3762:	ac 01       	movw	r20, r24
    3764:	0e 94 22 34 	call	0x6844	; 0x6844 <__addsf3>
    3768:	0e 94 f7 34 	call	0x69ee	; 0x69ee <__fixunssfsi>
    376c:	4b 01       	movw	r8, r22
    376e:	5c 01       	movw	r10, r24
	i2cWaitForComplete();
	i2cSendByte(AD7992+1);
	i2cWaitForComplete();
	i2cReceiveByte(1);
	i2cWaitForComplete();
	uint16_t batteryValue = (uint16_t)i2cGetReceivedByte() << 8;
    3770:	c2 5d       	subi	r28, 0xD2	; 210
    3772:	de 4f       	sbci	r29, 0xFE	; 254
    3774:	78 81       	ld	r23, Y
    3776:	ce 52       	subi	r28, 0x2E	; 46
    3778:	d1 40       	sbci	r29, 0x01	; 1
    377a:	60 e0       	ldi	r22, 0x00	; 0
	i2cWaitForComplete();
	i2cReceiveByte(0);
	i2cWaitForComplete();
	batteryValue += i2cGetReceivedByte();
    377c:	c3 5d       	subi	r28, 0xD3	; 211
    377e:	de 4f       	sbci	r29, 0xFE	; 254
    3780:	a8 81       	ld	r26, Y
    3782:	cd 52       	subi	r28, 0x2D	; 45
    3784:	d1 40       	sbci	r29, 0x01	; 1
    3786:	6a 0f       	add	r22, r26
    3788:	71 1d       	adc	r23, r1
	batteryValue &= 0x0FFF;
	//This is not such a magic value.  12 bits AD = 4096
	//Divider network = 4.07 kohms and 20 khoms
	//(3.3 volts / 4096) * (24.07/4.07) = 0.0047647
	//Multiply by 10 to get bigger value.
	batteryValue = (uint16_t)((((float)batteryValue*0.0047647))*10.);
    378a:	7f 70       	andi	r23, 0x0F	; 15
    378c:	80 e0       	ldi	r24, 0x00	; 0
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	0e 94 23 35 	call	0x6a46	; 0x6a46 <__floatunsisf>
    3794:	23 e3       	ldi	r18, 0x33	; 51
    3796:	31 e2       	ldi	r19, 0x21	; 33
    3798:	4c e9       	ldi	r20, 0x9C	; 156
    379a:	5b e3       	ldi	r21, 0x3B	; 59
    379c:	0e 94 d5 35 	call	0x6baa	; 0x6baa <__mulsf3>
    37a0:	20 e0       	ldi	r18, 0x00	; 0
    37a2:	30 e0       	ldi	r19, 0x00	; 0
    37a4:	40 e2       	ldi	r20, 0x20	; 32
    37a6:	51 e4       	ldi	r21, 0x41	; 65
    37a8:	0e 94 d5 35 	call	0x6baa	; 0x6baa <__mulsf3>
    37ac:	c9 5c       	subi	r28, 0xC9	; 201
    37ae:	de 4f       	sbci	r29, 0xFE	; 254
    37b0:	68 83       	st	Y, r22
    37b2:	79 83       	std	Y+1, r23	; 0x01
    37b4:	8a 83       	std	Y+2, r24	; 0x02
    37b6:	9b 83       	std	Y+3, r25	; 0x03
    37b8:	c7 53       	subi	r28, 0x37	; 55
    37ba:	d1 40       	sbci	r29, 0x01	; 1
	ballastError |= i2cWaitForComplete();
	i2cSendByte(0x13);
	ballastError |= i2cWaitForComplete();
	i2cReceiveByte(1);
	ballastError |= i2cWaitForComplete();
	uint16_t valveStatus = (uint16_t)i2cGetReceivedByte() << 8;
    37bc:	ca 5d       	subi	r28, 0xDA	; 218
    37be:	de 4f       	sbci	r29, 0xFE	; 254
    37c0:	f8 80       	ld	r15, Y
    37c2:	c6 52       	subi	r28, 0x26	; 38
    37c4:	d1 40       	sbci	r29, 0x01	; 1
    37c6:	ee 24       	eor	r14, r14
	i2cSendStop();
	heliumTemperature = (int16_t)(((uint16_t)helVal[0] * 256) + (helVal[1]));
	//NEED COMMANDS FROM TIM

	//format into string
	sprintf_P(sampleString, PSTR("%ld," //Epoch
    37c8:	ed b7       	in	r30, 0x3d	; 61
    37ca:	fe b7       	in	r31, 0x3e	; 62
    37cc:	e6 55       	subi	r30, 0x56	; 86
    37ce:	f0 40       	sbci	r31, 0x00	; 0
    37d0:	0f b6       	in	r0, 0x3f	; 63
    37d2:	f8 94       	cli
    37d4:	fe bf       	out	0x3e, r31	; 62
    37d6:	0f be       	out	0x3f, r0	; 63
    37d8:	ed bf       	out	0x3d, r30	; 61
    37da:	0d b7       	in	r16, 0x3d	; 61
    37dc:	1e b7       	in	r17, 0x3e	; 62
    37de:	0f 5f       	subi	r16, 0xFF	; 255
    37e0:	1f 4f       	sbci	r17, 0xFF	; 255
    37e2:	bf e1       	ldi	r27, 0x1F	; 31
    37e4:	2b 2e       	mov	r2, r27
    37e6:	31 2c       	mov	r3, r1
    37e8:	2c 0e       	add	r2, r28
    37ea:	3d 1e       	adc	r3, r29
    37ec:	32 82       	std	Z+2, r3	; 0x02
    37ee:	21 82       	std	Z+1, r2	; 0x01
    37f0:	83 eb       	ldi	r24, 0xB3	; 179
    37f2:	90 e0       	ldi	r25, 0x00	; 0
    37f4:	d8 01       	movw	r26, r16
    37f6:	13 96       	adiw	r26, 0x03	; 3
    37f8:	9c 93       	st	X, r25
    37fa:	8e 93       	st	-X, r24
    37fc:	12 97       	sbiw	r26, 0x02	; 2
    37fe:	c2 5e       	subi	r28, 0xE2	; 226
    3800:	de 4f       	sbci	r29, 0xFE	; 254
    3802:	88 81       	ld	r24, Y
    3804:	99 81       	ldd	r25, Y+1	; 0x01
    3806:	aa 81       	ldd	r26, Y+2	; 0x02
    3808:	bb 81       	ldd	r27, Y+3	; 0x03
    380a:	ce 51       	subi	r28, 0x1E	; 30
    380c:	d1 40       	sbci	r29, 0x01	; 1
    380e:	f8 01       	movw	r30, r16
    3810:	84 83       	std	Z+4, r24	; 0x04
    3812:	95 83       	std	Z+5, r25	; 0x05
    3814:	a6 83       	std	Z+6, r26	; 0x06
    3816:	b7 83       	std	Z+7, r27	; 0x07
    3818:	d8 01       	movw	r26, r16
    381a:	18 96       	adiw	r26, 0x08	; 8
    381c:	4d 92       	st	X+, r4
    381e:	5d 92       	st	X+, r5
    3820:	6d 92       	st	X+, r6
    3822:	7c 92       	st	X, r7
    3824:	1b 97       	sbiw	r26, 0x0b	; 11
    3826:	c3 01       	movw	r24, r6
    3828:	b2 01       	movw	r22, r4
    382a:	22 e0       	ldi	r18, 0x02	; 2
    382c:	30 e0       	ldi	r19, 0x00	; 0
    382e:	40 e0       	ldi	r20, 0x00	; 0
    3830:	50 e0       	ldi	r21, 0x00	; 0
    3832:	0e 94 98 36 	call	0x6d30	; 0x6d30 <__divmodsi4>
    3836:	f8 01       	movw	r30, r16
    3838:	24 87       	std	Z+12, r18	; 0x0c
    383a:	35 87       	std	Z+13, r19	; 0x0d
    383c:	46 87       	std	Z+14, r20	; 0x0e
    383e:	57 87       	std	Z+15, r21	; 0x0f
    3840:	c4 5e       	subi	r28, 0xE4	; 228
    3842:	de 4f       	sbci	r29, 0xFE	; 254
    3844:	28 81       	ld	r18, Y
    3846:	39 81       	ldd	r19, Y+1	; 0x01
    3848:	cc 51       	subi	r28, 0x1C	; 28
    384a:	d1 40       	sbci	r29, 0x01	; 1
    384c:	31 8b       	std	Z+17, r19	; 0x11
    384e:	20 8b       	std	Z+16, r18	; 0x10
    3850:	c6 5e       	subi	r28, 0xE6	; 230
    3852:	de 4f       	sbci	r29, 0xFE	; 254
    3854:	88 81       	ld	r24, Y
    3856:	99 81       	ldd	r25, Y+1	; 0x01
    3858:	ca 51       	subi	r28, 0x1A	; 26
    385a:	d1 40       	sbci	r29, 0x01	; 1
    385c:	60 e1       	ldi	r22, 0x10	; 16
    385e:	70 e0       	ldi	r23, 0x00	; 0
    3860:	0e 94 63 36 	call	0x6cc6	; 0x6cc6 <__divmodhi4>
    3864:	77 27       	eor	r23, r23
    3866:	67 fd       	sbrc	r22, 7
    3868:	70 95       	com	r23
    386a:	73 8b       	std	Z+19, r23	; 0x13
    386c:	62 8b       	std	Z+18, r22	; 0x12
    386e:	c8 5e       	subi	r28, 0xE8	; 232
    3870:	de 4f       	sbci	r29, 0xFE	; 254
    3872:	88 81       	ld	r24, Y
    3874:	99 81       	ldd	r25, Y+1	; 0x01
    3876:	c8 51       	subi	r28, 0x18	; 24
    3878:	d1 40       	sbci	r29, 0x01	; 1
    387a:	95 8b       	std	Z+21, r25	; 0x15
    387c:	84 8b       	std	Z+20, r24	; 0x14
    387e:	ca 5e       	subi	r28, 0xEA	; 234
    3880:	de 4f       	sbci	r29, 0xFE	; 254
    3882:	a8 81       	ld	r26, Y
    3884:	b9 81       	ldd	r27, Y+1	; 0x01
    3886:	c6 51       	subi	r28, 0x16	; 22
    3888:	d1 40       	sbci	r29, 0x01	; 1
    388a:	b7 8b       	std	Z+23, r27	; 0x17
    388c:	a6 8b       	std	Z+22, r26	; 0x16
    388e:	cc 5e       	subi	r28, 0xEC	; 236
    3890:	de 4f       	sbci	r29, 0xFE	; 254
    3892:	28 81       	ld	r18, Y
    3894:	39 81       	ldd	r19, Y+1	; 0x01
    3896:	c4 51       	subi	r28, 0x14	; 20
    3898:	d1 40       	sbci	r29, 0x01	; 1
    389a:	31 8f       	std	Z+25, r19	; 0x19
    389c:	20 8f       	std	Z+24, r18	; 0x18
    389e:	ce 5e       	subi	r28, 0xEE	; 238
    38a0:	de 4f       	sbci	r29, 0xFE	; 254
    38a2:	88 81       	ld	r24, Y
    38a4:	99 81       	ldd	r25, Y+1	; 0x01
    38a6:	c2 51       	subi	r28, 0x12	; 18
    38a8:	d1 40       	sbci	r29, 0x01	; 1
    38aa:	60 e1       	ldi	r22, 0x10	; 16
    38ac:	70 e0       	ldi	r23, 0x00	; 0
    38ae:	0e 94 63 36 	call	0x6cc6	; 0x6cc6 <__divmodhi4>
    38b2:	77 27       	eor	r23, r23
    38b4:	67 fd       	sbrc	r22, 7
    38b6:	70 95       	com	r23
    38b8:	73 8f       	std	Z+27, r23	; 0x1b
    38ba:	62 8f       	std	Z+26, r22	; 0x1a
    38bc:	84 8e       	std	Z+28, r8	; 0x1c
    38be:	15 8e       	std	Z+29, r1	; 0x1d
    38c0:	86 8e       	std	Z+30, r8	; 0x1e
    38c2:	17 8e       	std	Z+31, r1	; 0x1f
    38c4:	c0 5d       	subi	r28, 0xD0	; 208
    38c6:	de 4f       	sbci	r29, 0xFE	; 254
    38c8:	38 81       	ld	r19, Y
    38ca:	c0 53       	subi	r28, 0x30	; 48
    38cc:	d1 40       	sbci	r29, 0x01	; 1
    38ce:	32 95       	swap	r19
    38d0:	33 0f       	add	r19, r19
    38d2:	33 0f       	add	r19, r19
    38d4:	30 7c       	andi	r19, 0xC0	; 192
    38d6:	c1 5d       	subi	r28, 0xD1	; 209
    38d8:	de 4f       	sbci	r29, 0xFE	; 254
    38da:	88 81       	ld	r24, Y
    38dc:	cf 52       	subi	r28, 0x2F	; 47
    38de:	d1 40       	sbci	r29, 0x01	; 1
    38e0:	86 95       	lsr	r24
    38e2:	86 95       	lsr	r24
    38e4:	38 2b       	or	r19, r24
    38e6:	30 a3       	std	Z+32, r19	; 0x20
    38e8:	11 a2       	std	Z+33, r1	; 0x21
    38ea:	84 ed       	ldi	r24, 0xD4	; 212
    38ec:	91 e0       	ldi	r25, 0x01	; 1
    38ee:	93 a3       	std	Z+35, r25	; 0x23
    38f0:	82 a3       	std	Z+34, r24	; 0x22
    38f2:	c2 5f       	subi	r28, 0xF2	; 242
    38f4:	de 4f       	sbci	r29, 0xFE	; 254
    38f6:	88 81       	ld	r24, Y
    38f8:	99 81       	ldd	r25, Y+1	; 0x01
    38fa:	aa 81       	ldd	r26, Y+2	; 0x02
    38fc:	bb 81       	ldd	r27, Y+3	; 0x03
    38fe:	ce 50       	subi	r28, 0x0E	; 14
    3900:	d1 40       	sbci	r29, 0x01	; 1
    3902:	84 a3       	std	Z+36, r24	; 0x24
    3904:	95 a3       	std	Z+37, r25	; 0x25
    3906:	a6 a3       	std	Z+38, r26	; 0x26
    3908:	b7 a3       	std	Z+39, r27	; 0x27
    390a:	88 ed       	ldi	r24, 0xD8	; 216
    390c:	91 e0       	ldi	r25, 0x01	; 1
    390e:	91 a7       	std	Z+41, r25	; 0x29
    3910:	80 a7       	std	Z+40, r24	; 0x28
    3912:	c6 5f       	subi	r28, 0xF6	; 246
    3914:	de 4f       	sbci	r29, 0xFE	; 254
    3916:	88 81       	ld	r24, Y
    3918:	99 81       	ldd	r25, Y+1	; 0x01
    391a:	aa 81       	ldd	r26, Y+2	; 0x02
    391c:	bb 81       	ldd	r27, Y+3	; 0x03
    391e:	ca 50       	subi	r28, 0x0A	; 10
    3920:	d1 40       	sbci	r29, 0x01	; 1
    3922:	82 a7       	std	Z+42, r24	; 0x2a
    3924:	93 a7       	std	Z+43, r25	; 0x2b
    3926:	a4 a7       	std	Z+44, r26	; 0x2c
    3928:	b5 a7       	std	Z+45, r27	; 0x2d
    392a:	8c ed       	ldi	r24, 0xDC	; 220
    392c:	91 e0       	ldi	r25, 0x01	; 1
    392e:	97 a7       	std	Z+47, r25	; 0x2f
    3930:	86 a7       	std	Z+46, r24	; 0x2e
    3932:	c8 5f       	subi	r28, 0xF8	; 248
    3934:	de 4f       	sbci	r29, 0xFE	; 254
    3936:	28 81       	ld	r18, Y
    3938:	39 81       	ldd	r19, Y+1	; 0x01
    393a:	c8 50       	subi	r28, 0x08	; 8
    393c:	d1 40       	sbci	r29, 0x01	; 1
    393e:	31 ab       	std	Z+49, r19	; 0x31
    3940:	20 ab       	std	Z+48, r18	; 0x30
    3942:	80 ee       	ldi	r24, 0xE0	; 224
    3944:	91 e0       	ldi	r25, 0x01	; 1
    3946:	93 ab       	std	Z+51, r25	; 0x33
    3948:	82 ab       	std	Z+50, r24	; 0x32
    394a:	ca 5f       	subi	r28, 0xFA	; 250
    394c:	de 4f       	sbci	r29, 0xFE	; 254
    394e:	88 81       	ld	r24, Y
    3950:	99 81       	ldd	r25, Y+1	; 0x01
    3952:	c6 50       	subi	r28, 0x06	; 6
    3954:	d1 40       	sbci	r29, 0x01	; 1
    3956:	95 ab       	std	Z+53, r25	; 0x35
    3958:	84 ab       	std	Z+52, r24	; 0x34
    395a:	84 ee       	ldi	r24, 0xE4	; 228
    395c:	91 e0       	ldi	r25, 0x01	; 1
    395e:	97 ab       	std	Z+55, r25	; 0x37
    3960:	86 ab       	std	Z+54, r24	; 0x36
    3962:	cb 5f       	subi	r28, 0xFB	; 251
    3964:	de 4f       	sbci	r29, 0xFE	; 254
    3966:	98 81       	ld	r25, Y
    3968:	c5 50       	subi	r28, 0x05	; 5
    396a:	d1 40       	sbci	r29, 0x01	; 1
    396c:	90 af       	std	Z+56, r25	; 0x38
    396e:	11 ae       	std	Z+57, r1	; 0x39
    3970:	13 ae       	std	Z+59, r1	; 0x3b
    3972:	12 ae       	std	Z+58, r1	; 0x3a
    3974:	15 ae       	std	Z+61, r1	; 0x3d
    3976:	14 ae       	std	Z+60, r1	; 0x3c
    3978:	cc 5f       	subi	r28, 0xFC	; 252
    397a:	de 4f       	sbci	r29, 0xFE	; 254
    397c:	a8 81       	ld	r26, Y
    397e:	c4 50       	subi	r28, 0x04	; 4
    3980:	d1 40       	sbci	r29, 0x01	; 1
    3982:	a6 af       	std	Z+62, r26	; 0x3e
    3984:	17 ae       	std	Z+63, r1	; 0x3f
    3986:	ed b7       	in	r30, 0x3d	; 61
    3988:	fe b7       	in	r31, 0x3e	; 62
    398a:	ef 5b       	subi	r30, 0xBF	; 191
    398c:	ff 4f       	sbci	r31, 0xFF	; 255
    398e:	88 ee       	ldi	r24, 0xE8	; 232
    3990:	91 e0       	ldi	r25, 0x01	; 1
    3992:	91 83       	std	Z+1, r25	; 0x01
    3994:	80 83       	st	Z, r24
    3996:	ed b7       	in	r30, 0x3d	; 61
    3998:	fe b7       	in	r31, 0x3e	; 62
    399a:	ed 5b       	subi	r30, 0xBD	; 189
    399c:	ff 4f       	sbci	r31, 0xFF	; 255
    399e:	ce 5f       	subi	r28, 0xFE	; 254
    39a0:	de 4f       	sbci	r29, 0xFE	; 254
    39a2:	28 81       	ld	r18, Y
    39a4:	39 81       	ldd	r19, Y+1	; 0x01
    39a6:	c2 50       	subi	r28, 0x02	; 2
    39a8:	d1 40       	sbci	r29, 0x01	; 1
    39aa:	31 83       	std	Z+1, r19	; 0x01
    39ac:	20 83       	st	Z, r18
    39ae:	ed b7       	in	r30, 0x3d	; 61
    39b0:	fe b7       	in	r31, 0x3e	; 62
    39b2:	eb 5b       	subi	r30, 0xBB	; 187
    39b4:	ff 4f       	sbci	r31, 0xFF	; 255
    39b6:	8c ee       	ldi	r24, 0xEC	; 236
    39b8:	91 e0       	ldi	r25, 0x01	; 1
    39ba:	91 83       	std	Z+1, r25	; 0x01
    39bc:	80 83       	st	Z, r24
    39be:	ed b7       	in	r30, 0x3d	; 61
    39c0:	fe b7       	in	r31, 0x3e	; 62
    39c2:	e9 5b       	subi	r30, 0xB9	; 185
    39c4:	ff 4f       	sbci	r31, 0xFF	; 255
    39c6:	c0 50       	subi	r28, 0x00	; 0
    39c8:	df 4f       	sbci	r29, 0xFF	; 255
    39ca:	88 81       	ld	r24, Y
    39cc:	99 81       	ldd	r25, Y+1	; 0x01
    39ce:	c0 50       	subi	r28, 0x00	; 0
    39d0:	d1 40       	sbci	r29, 0x01	; 1
    39d2:	91 83       	std	Z+1, r25	; 0x01
    39d4:	80 83       	st	Z, r24
    39d6:	ed b7       	in	r30, 0x3d	; 61
    39d8:	fe b7       	in	r31, 0x3e	; 62
    39da:	e7 5b       	subi	r30, 0xB7	; 183
    39dc:	ff 4f       	sbci	r31, 0xFF	; 255
    39de:	80 91 34 04 	lds	r24, 0x0434
    39e2:	90 91 35 04 	lds	r25, 0x0435
    39e6:	91 83       	std	Z+1, r25	; 0x01
    39e8:	80 83       	st	Z, r24
    39ea:	c9 5c       	subi	r28, 0xC9	; 201
    39ec:	de 4f       	sbci	r29, 0xFE	; 254
    39ee:	68 81       	ld	r22, Y
    39f0:	79 81       	ldd	r23, Y+1	; 0x01
    39f2:	8a 81       	ldd	r24, Y+2	; 0x02
    39f4:	9b 81       	ldd	r25, Y+3	; 0x03
    39f6:	c7 53       	subi	r28, 0x37	; 55
    39f8:	d1 40       	sbci	r29, 0x01	; 1
    39fa:	0e 94 f7 34 	call	0x69ee	; 0x69ee <__fixunssfsi>
    39fe:	f8 01       	movw	r30, r16
    3a00:	e6 5b       	subi	r30, 0xB6	; 182
    3a02:	ff 4f       	sbci	r31, 0xFF	; 255
    3a04:	60 83       	st	Z, r22
    3a06:	11 82       	std	Z+1, r1	; 0x01
    3a08:	cb 5d       	subi	r28, 0xDB	; 219
    3a0a:	de 4f       	sbci	r29, 0xFE	; 254
    3a0c:	98 81       	ld	r25, Y
    3a0e:	c5 52       	subi	r28, 0x25	; 37
    3a10:	d1 40       	sbci	r29, 0x01	; 1
    3a12:	e9 0e       	add	r14, r25
    3a14:	f1 1c       	adc	r15, r1
    3a16:	f8 01       	movw	r30, r16
    3a18:	e4 5b       	subi	r30, 0xB4	; 180
    3a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1c:	e0 82       	st	Z, r14
    3a1e:	11 82       	std	Z+1, r1	; 0x01
    3a20:	cc 5d       	subi	r28, 0xDC	; 220
    3a22:	de 4f       	sbci	r29, 0xFE	; 254
    3a24:	a8 81       	ld	r26, Y
    3a26:	c4 52       	subi	r28, 0x24	; 36
    3a28:	d1 40       	sbci	r29, 0x01	; 1
    3a2a:	ca 0e       	add	r12, r26
    3a2c:	d1 1c       	adc	r13, r1
    3a2e:	02 5b       	subi	r16, 0xB2	; 178
    3a30:	1f 4f       	sbci	r17, 0xFF	; 255
    3a32:	f8 01       	movw	r30, r16
    3a34:	c1 92       	st	Z+, r12
    3a36:	d1 92       	st	Z+, r13
    3a38:	82 ef       	ldi	r24, 0xF2	; 242
    3a3a:	9f ef       	ldi	r25, 0xFF	; 255
    3a3c:	df 01       	movw	r26, r30
    3a3e:	8d 93       	st	X+, r24
    3a40:	9d 93       	st	X+, r25
    3a42:	80 91 2b 03 	lds	r24, 0x032B
    3a46:	90 91 2c 03 	lds	r25, 0x032C
    3a4a:	fd 01       	movw	r30, r26
    3a4c:	81 93       	st	Z+, r24
    3a4e:	91 93       	st	Z+, r25
    3a50:	8f 01       	movw	r16, r30
    3a52:	cd 5d       	subi	r28, 0xDD	; 221
    3a54:	de 4f       	sbci	r29, 0xFE	; 254
    3a56:	98 81       	ld	r25, Y
    3a58:	c3 52       	subi	r28, 0x23	; 35
    3a5a:	d1 40       	sbci	r29, 0x01	; 1
    3a5c:	80 e0       	ldi	r24, 0x00	; 0
    3a5e:	ce 5d       	subi	r28, 0xDE	; 222
    3a60:	de 4f       	sbci	r29, 0xFE	; 254
    3a62:	f8 81       	ld	r31, Y
    3a64:	c2 52       	subi	r28, 0x22	; 34
    3a66:	d1 40       	sbci	r29, 0x01	; 1
    3a68:	8f 0f       	add	r24, r31
    3a6a:	91 1d       	adc	r25, r1
    3a6c:	d8 01       	movw	r26, r16
    3a6e:	8d 93       	st	X+, r24
    3a70:	9c 93       	st	X, r25
    3a72:	0e 94 ec 38 	call	0x71d8	; 0x71d8 <sprintf_P>
		ballastRemaining,
		-14,
		statusCode, heliumTemperature);

	//Pad with spaces
	uint8_t ssLen = strlen(sampleString);
    3a76:	f1 01       	movw	r30, r2
    3a78:	01 90       	ld	r0, Z+
    3a7a:	00 20       	and	r0, r0
    3a7c:	e9 f7       	brne	.-6      	; 0x3a78 <collectData+0x8ba>
    3a7e:	31 97       	sbiw	r30, 0x01	; 1
    3a80:	8e 2f       	mov	r24, r30
    3a82:	82 19       	sub	r24, r2
    3a84:	ed b7       	in	r30, 0x3d	; 61
    3a86:	fe b7       	in	r31, 0x3e	; 62
    3a88:	ea 5a       	subi	r30, 0xAA	; 170
    3a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8c:	0f b6       	in	r0, 0x3f	; 63
    3a8e:	f8 94       	cli
    3a90:	fe bf       	out	0x3e, r31	; 62
    3a92:	0f be       	out	0x3f, r0	; 63
    3a94:	ed bf       	out	0x3d, r30	; 61
    3a96:	91 01       	movw	r18, r2
	uint8_t k;
	for(k = ssLen; k < (SAMPLESTRINGSIZEINCHARS - 2); k++)
	{
		sampleString[k] = '.';
    3a98:	9e e2       	ldi	r25, 0x2E	; 46
    3a9a:	05 c0       	rjmp	.+10     	; 0x3aa6 <collectData+0x8e8>
    3a9c:	f9 01       	movw	r30, r18
    3a9e:	e8 0f       	add	r30, r24
    3aa0:	f1 1d       	adc	r31, r1
    3aa2:	90 83       	st	Z, r25
		statusCode, heliumTemperature);

	//Pad with spaces
	uint8_t ssLen = strlen(sampleString);
	uint8_t k;
	for(k = ssLen; k < (SAMPLESTRINGSIZEINCHARS - 2); k++)
    3aa4:	8f 5f       	subi	r24, 0xFF	; 255
    3aa6:	8f 3d       	cpi	r24, 0xDF	; 223
    3aa8:	c8 f3       	brcs	.-14     	; 0x3a9c <collectData+0x8de>
	{
		sampleString[k] = '.';
	}
	//lprintf("pw: %d\n", k);

	sampleString[SAMPLESTRINGSIZEINCHARS-2] = '\r';
    3aaa:	8d e0       	ldi	r24, 0x0D	; 13
    3aac:	fe 01       	movw	r30, r28
    3aae:	e2 50       	subi	r30, 0x02	; 2
    3ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab2:	80 83       	st	Z, r24
	sampleString[SAMPLESTRINGSIZEINCHARS-1] = '\n';
    3ab4:	8a e0       	ldi	r24, 0x0A	; 10
    3ab6:	fe 01       	movw	r30, r28
    3ab8:	e1 50       	subi	r30, 0x01	; 1
    3aba:	ff 4f       	sbci	r31, 0xFF	; 255
    3abc:	80 83       	st	Z, r24
	sampleString[SAMPLESTRINGSIZEINCHARS] = '\0';
    3abe:	fe 01       	movw	r30, r28
    3ac0:	e0 50       	subi	r30, 0x00	; 0
    3ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac4:	10 82       	st	Z, r1
		for(int i=0; i < SAMPLESTRINGSIZEINCHARS; i++)
		{
			lprintf("%c", sampleString[i]);
		}
	#endif
	putDataSample(sampleString);
    3ac6:	c9 01       	movw	r24, r18
    3ac8:	0e 94 c0 10 	call	0x2180	; 0x2180 <putDataSample>

	//Here is where we increment the batch so that things actually get transmitted.
	uint16_t batchSampleEnd = eeprom_read_word(&EEbatchSampleEnd);
    3acc:	8c e2       	ldi	r24, 0x2C	; 44
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>
	eeprom_write_word(&EEbatchSampleEnd, ++batchSampleEnd);
    3ad4:	bc 01       	movw	r22, r24
    3ad6:	6f 5f       	subi	r22, 0xFF	; 255
    3ad8:	7f 4f       	sbci	r23, 0xFF	; 255
    3ada:	8c e2       	ldi	r24, 0x2C	; 44
    3adc:	90 e0       	ldi	r25, 0x00	; 0
    3ade:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__eewr_word_m324p>

	//reschedule myself
	if(time != 0xFFFFFFFF)
    3ae2:	cd 5c       	subi	r28, 0xCD	; 205
    3ae4:	de 4f       	sbci	r29, 0xFE	; 254
    3ae6:	88 81       	ld	r24, Y
    3ae8:	99 81       	ldd	r25, Y+1	; 0x01
    3aea:	aa 81       	ldd	r26, Y+2	; 0x02
    3aec:	bb 81       	ldd	r27, Y+3	; 0x03
    3aee:	c3 53       	subi	r28, 0x33	; 51
    3af0:	d1 40       	sbci	r29, 0x01	; 1
    3af2:	8f 5f       	subi	r24, 0xFF	; 255
    3af4:	9f 4f       	sbci	r25, 0xFF	; 255
    3af6:	af 4f       	sbci	r26, 0xFF	; 255
    3af8:	bf 4f       	sbci	r27, 0xFF	; 255
    3afa:	b9 f0       	breq	.+46     	; 0x3b2a <collectData+0x96c>
	{
		scheduleQueueAdd(&collectData, time+eeprom_read_word(&EEdataCollectionInterval));
    3afc:	8b e1       	ldi	r24, 0x1B	; 27
    3afe:	90 e0       	ldi	r25, 0x00	; 0
    3b00:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>
    3b04:	ac 01       	movw	r20, r24
    3b06:	60 e0       	ldi	r22, 0x00	; 0
    3b08:	70 e0       	ldi	r23, 0x00	; 0
    3b0a:	cd 5c       	subi	r28, 0xCD	; 205
    3b0c:	de 4f       	sbci	r29, 0xFE	; 254
    3b0e:	88 81       	ld	r24, Y
    3b10:	99 81       	ldd	r25, Y+1	; 0x01
    3b12:	aa 81       	ldd	r26, Y+2	; 0x02
    3b14:	bb 81       	ldd	r27, Y+3	; 0x03
    3b16:	c3 53       	subi	r28, 0x33	; 51
    3b18:	d1 40       	sbci	r29, 0x01	; 1
    3b1a:	48 0f       	add	r20, r24
    3b1c:	59 1f       	adc	r21, r25
    3b1e:	6a 1f       	adc	r22, r26
    3b20:	7b 1f       	adc	r23, r27
    3b22:	8f ed       	ldi	r24, 0xDF	; 223
    3b24:	98 e1       	ldi	r25, 0x18	; 24
    3b26:	0e 94 47 2c 	call	0x588e	; 0x588e <scheduleQueueAdd>
	} else {
		//Bogus time means testing time!
	}
}
    3b2a:	c6 5c       	subi	r28, 0xC6	; 198
    3b2c:	de 4f       	sbci	r29, 0xFE	; 254
    3b2e:	0f b6       	in	r0, 0x3f	; 63
    3b30:	f8 94       	cli
    3b32:	de bf       	out	0x3e, r29	; 62
    3b34:	0f be       	out	0x3f, r0	; 63
    3b36:	cd bf       	out	0x3d, r28	; 61
    3b38:	cf 91       	pop	r28
    3b3a:	df 91       	pop	r29
    3b3c:	1f 91       	pop	r17
    3b3e:	0f 91       	pop	r16
    3b40:	ff 90       	pop	r15
    3b42:	ef 90       	pop	r14
    3b44:	df 90       	pop	r13
    3b46:	cf 90       	pop	r12
    3b48:	bf 90       	pop	r11
    3b4a:	af 90       	pop	r10
    3b4c:	9f 90       	pop	r9
    3b4e:	8f 90       	pop	r8
    3b50:	7f 90       	pop	r7
    3b52:	6f 90       	pop	r6
    3b54:	5f 90       	pop	r5
    3b56:	4f 90       	pop	r4
    3b58:	3f 90       	pop	r3
    3b5a:	2f 90       	pop	r2
    3b5c:	08 95       	ret

00003b5e <calculateVspeed>:
//THIS IS DEFINED IN EEPROMVARS.H, GOD THIS IS STUPID
#define VSPEEDSAMPLESDESIRED 20


void calculateVspeed(uint32_t time)
{
    3b5e:	3f 92       	push	r3
    3b60:	4f 92       	push	r4
    3b62:	5f 92       	push	r5
    3b64:	6f 92       	push	r6
    3b66:	7f 92       	push	r7
    3b68:	8f 92       	push	r8
    3b6a:	9f 92       	push	r9
    3b6c:	af 92       	push	r10
    3b6e:	bf 92       	push	r11
    3b70:	cf 92       	push	r12
    3b72:	df 92       	push	r13
    3b74:	ef 92       	push	r14
    3b76:	ff 92       	push	r15
    3b78:	0f 93       	push	r16
    3b7a:	1f 93       	push	r17
    3b7c:	df 93       	push	r29
    3b7e:	cf 93       	push	r28
    3b80:	cd b7       	in	r28, 0x3d	; 61
    3b82:	de b7       	in	r29, 0x3e	; 62
    3b84:	ee 97       	sbiw	r28, 0x3e	; 62
    3b86:	0f b6       	in	r0, 0x3f	; 63
    3b88:	f8 94       	cli
    3b8a:	de bf       	out	0x3e, r29	; 62
    3b8c:	0f be       	out	0x3f, r0	; 63
    3b8e:	cd bf       	out	0x3d, r28	; 61
    3b90:	3b 01       	movw	r6, r22
    3b92:	4c 01       	movw	r8, r24
	#ifdef FCPUDEBUG
		lprintf_P(PSTR("In Vspeed Calculator\n"));
	#endif
	struct gpsData myGPS = currentPositionData;
    3b94:	de 01       	movw	r26, r28
    3b96:	11 96       	adiw	r26, 0x01	; 1
    3b98:	e7 e3       	ldi	r30, 0x37	; 55
    3b9a:	f4 e0       	ldi	r31, 0x04	; 4
    3b9c:	86 e1       	ldi	r24, 0x16	; 22
    3b9e:	01 90       	ld	r0, Z+
    3ba0:	0d 92       	st	X+, r0
    3ba2:	81 50       	subi	r24, 0x01	; 1
    3ba4:	e1 f7       	brne	.-8      	; 0x3b9e <calculateVspeed+0x40>
    3ba6:	4c 88       	ldd	r4, Y+20	; 0x14
    3ba8:	5d 88       	ldd	r5, Y+21	; 0x15
	//Failure mode: Assume we're at the same altitude we were at.
	//This means
	uint16_t thisAltitude = myGPS.altitude;

	int16_t vSpeedInstant[VSPEEDSAMPLESDESIRED];
	eeprom_read_block(vSpeedInstant, &EEvSpeedHolderSamples, sizeof(int16_t)*VSPEEDSAMPLESDESIRED);
    3baa:	8e 01       	movw	r16, r28
    3bac:	09 5e       	subi	r16, 0xE9	; 233
    3bae:	1f 4f       	sbci	r17, 0xFF	; 255
    3bb0:	c8 01       	movw	r24, r16
    3bb2:	63 e4       	ldi	r22, 0x43	; 67
    3bb4:	70 e0       	ldi	r23, 0x00	; 0
    3bb6:	48 e2       	ldi	r20, 0x28	; 40
    3bb8:	50 e0       	ldi	r21, 0x00	; 0
    3bba:	0e 94 f6 39 	call	0x73ec	; 0x73ec <__eerd_block_m324p>
	if(numberOfVSpeedSamples == VSPEEDSAMPLESDESIRED)
    3bbe:	80 91 26 03 	lds	r24, 0x0326
    3bc2:	84 31       	cpi	r24, 0x14	; 20
    3bc4:	61 f4       	brne	.+24     	; 0x3bde <calculateVspeed+0x80>
    3bc6:	f8 01       	movw	r30, r16
	{
		for(int i=1; i <= VSPEEDSAMPLESDESIRED; i++)
    3bc8:	9e 01       	movw	r18, r28
    3bca:	21 5c       	subi	r18, 0xC1	; 193
    3bcc:	3f 4f       	sbci	r19, 0xFF	; 255
		{
			vSpeedInstant[i-1] = vSpeedInstant[i];
    3bce:	82 81       	ldd	r24, Z+2	; 0x02
    3bd0:	93 81       	ldd	r25, Z+3	; 0x03
    3bd2:	81 93       	st	Z+, r24
    3bd4:	91 93       	st	Z+, r25

	int16_t vSpeedInstant[VSPEEDSAMPLESDESIRED];
	eeprom_read_block(vSpeedInstant, &EEvSpeedHolderSamples, sizeof(int16_t)*VSPEEDSAMPLESDESIRED);
	if(numberOfVSpeedSamples == VSPEEDSAMPLESDESIRED)
	{
		for(int i=1; i <= VSPEEDSAMPLESDESIRED; i++)
    3bd6:	e2 17       	cp	r30, r18
    3bd8:	f3 07       	cpc	r31, r19
    3bda:	c9 f7       	brne	.-14     	; 0x3bce <calculateVspeed+0x70>
    3bdc:	03 c0       	rjmp	.+6      	; 0x3be4 <calculateVspeed+0x86>
		{
			vSpeedInstant[i-1] = vSpeedInstant[i];
		}
	} else {
		numberOfVSpeedSamples++;
    3bde:	8f 5f       	subi	r24, 0xFF	; 255
    3be0:	80 93 26 03 	sts	0x0326, r24
	}

	int16_t thisVspeed = (thisAltitude - lastAltitude) / ((float)(time - lastRunTime)/60.);
	vSpeedInstant[numberOfVSpeedSamples-1] = thisVspeed;
    3be4:	30 90 26 03 	lds	r3, 0x0326
    3be8:	a3 2c       	mov	r10, r3
    3bea:	bb 24       	eor	r11, r11
    3bec:	c5 01       	movw	r24, r10
    3bee:	01 97       	sbiw	r24, 0x01	; 1
    3bf0:	88 0f       	add	r24, r24
    3bf2:	99 1f       	adc	r25, r25
    3bf4:	6e 01       	movw	r12, r28
    3bf6:	08 94       	sec
    3bf8:	c1 1c       	adc	r12, r1
    3bfa:	d1 1c       	adc	r13, r1
    3bfc:	c8 0e       	add	r12, r24
    3bfe:	d9 1e       	adc	r13, r25
    3c00:	80 91 27 03 	lds	r24, 0x0327
    3c04:	90 91 28 03 	lds	r25, 0x0328
    3c08:	b2 01       	movw	r22, r4
    3c0a:	68 1b       	sub	r22, r24
    3c0c:	79 0b       	sbc	r23, r25
    3c0e:	80 e0       	ldi	r24, 0x00	; 0
    3c10:	90 e0       	ldi	r25, 0x00	; 0
    3c12:	0e 94 23 35 	call	0x6a46	; 0x6a46 <__floatunsisf>
    3c16:	7b 01       	movw	r14, r22
    3c18:	8c 01       	movw	r16, r24
    3c1a:	80 91 29 03 	lds	r24, 0x0329
    3c1e:	90 91 2a 03 	lds	r25, 0x032A
    3c22:	a0 e0       	ldi	r26, 0x00	; 0
    3c24:	b0 e0       	ldi	r27, 0x00	; 0
    3c26:	a4 01       	movw	r20, r8
    3c28:	93 01       	movw	r18, r6
    3c2a:	28 1b       	sub	r18, r24
    3c2c:	39 0b       	sbc	r19, r25
    3c2e:	4a 0b       	sbc	r20, r26
    3c30:	5b 0b       	sbc	r21, r27
    3c32:	ca 01       	movw	r24, r20
    3c34:	b9 01       	movw	r22, r18
    3c36:	0e 94 23 35 	call	0x6a46	; 0x6a46 <__floatunsisf>
    3c3a:	20 e0       	ldi	r18, 0x00	; 0
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	40 e7       	ldi	r20, 0x70	; 112
    3c40:	52 e4       	ldi	r21, 0x42	; 66
    3c42:	0e 94 8a 34 	call	0x6914	; 0x6914 <__divsf3>
    3c46:	9b 01       	movw	r18, r22
    3c48:	ac 01       	movw	r20, r24
    3c4a:	c8 01       	movw	r24, r16
    3c4c:	b7 01       	movw	r22, r14
    3c4e:	0e 94 8a 34 	call	0x6914	; 0x6914 <__divsf3>
    3c52:	0e 94 f2 34 	call	0x69e4	; 0x69e4 <__fixsfsi>
    3c56:	d6 01       	movw	r26, r12
    3c58:	57 96       	adiw	r26, 0x17	; 23
    3c5a:	7c 93       	st	X, r23
    3c5c:	6e 93       	st	-X, r22
    3c5e:	56 97       	sbiw	r26, 0x16	; 22
    3c60:	fe 01       	movw	r30, r28
    3c62:	77 96       	adiw	r30, 0x17	; 23
    3c64:	40 e0       	ldi	r20, 0x00	; 0
    3c66:	50 e0       	ldi	r21, 0x00	; 0
	int16_t vSpeedAdder=0;
	for(int i = 0; i < numberOfVSpeedSamples; i++)
    3c68:	cf 01       	movw	r24, r30
    3c6a:	1e 2f       	mov	r17, r30
    3c6c:	09 2f       	mov	r16, r25
    3c6e:	95 01       	movw	r18, r10
    3c70:	22 0f       	add	r18, r18
    3c72:	33 1f       	adc	r19, r19
    3c74:	2e 0f       	add	r18, r30
    3c76:	3f 1f       	adc	r19, r31
    3c78:	04 c0       	rjmp	.+8      	; 0x3c82 <calculateVspeed+0x124>
	{
		vSpeedAdder += vSpeedInstant[i];
    3c7a:	81 91       	ld	r24, Z+
    3c7c:	91 91       	ld	r25, Z+
    3c7e:	48 0f       	add	r20, r24
    3c80:	59 1f       	adc	r21, r25
	}

	int16_t thisVspeed = (thisAltitude - lastAltitude) / ((float)(time - lastRunTime)/60.);
	vSpeedInstant[numberOfVSpeedSamples-1] = thisVspeed;
	int16_t vSpeedAdder=0;
	for(int i = 0; i < numberOfVSpeedSamples; i++)
    3c82:	e2 17       	cp	r30, r18
    3c84:	f3 07       	cpc	r31, r19
    3c86:	c9 f7       	brne	.-14     	; 0x3c7a <calculateVspeed+0x11c>
	{
		vSpeedAdder += vSpeedInstant[i];
	}
	vSpeedAvg = vSpeedAdder / (int8_t)numberOfVSpeedSamples;
    3c88:	63 2d       	mov	r22, r3
    3c8a:	77 27       	eor	r23, r23
    3c8c:	67 fd       	sbrc	r22, 7
    3c8e:	70 95       	com	r23
    3c90:	ca 01       	movw	r24, r20
    3c92:	0e 94 63 36 	call	0x6cc6	; 0x6cc6 <__divmodhi4>
    3c96:	70 93 35 04 	sts	0x0435, r23
    3c9a:	60 93 34 04 	sts	0x0434, r22

	lastRunTime = time;
    3c9e:	70 92 2a 03 	sts	0x032A, r7
    3ca2:	60 92 29 03 	sts	0x0329, r6
	lastAltitude = thisAltitude;
    3ca6:	50 92 28 03 	sts	0x0328, r5
    3caa:	40 92 27 03 	sts	0x0327, r4
	eeprom_write_block(vSpeedInstant, &EEvSpeedHolderSamples, sizeof(int16_t)*VSPEEDSAMPLESDESIRED);
    3cae:	81 2f       	mov	r24, r17
    3cb0:	90 2f       	mov	r25, r16
    3cb2:	63 e4       	ldi	r22, 0x43	; 67
    3cb4:	70 e0       	ldi	r23, 0x00	; 0
    3cb6:	48 e2       	ldi	r20, 0x28	; 40
    3cb8:	50 e0       	ldi	r21, 0x00	; 0
    3cba:	0e 94 1a 3a 	call	0x7434	; 0x7434 <__eewr_block_m324p>



	scheduleQueueAdd(&calculateVspeed, time+5);
    3cbe:	25 e0       	ldi	r18, 0x05	; 5
    3cc0:	30 e0       	ldi	r19, 0x00	; 0
    3cc2:	40 e0       	ldi	r20, 0x00	; 0
    3cc4:	50 e0       	ldi	r21, 0x00	; 0
    3cc6:	62 0e       	add	r6, r18
    3cc8:	73 1e       	adc	r7, r19
    3cca:	84 1e       	adc	r8, r20
    3ccc:	95 1e       	adc	r9, r21
    3cce:	8f ea       	ldi	r24, 0xAF	; 175
    3cd0:	9d e1       	ldi	r25, 0x1D	; 29
    3cd2:	b4 01       	movw	r22, r8
    3cd4:	a3 01       	movw	r20, r6
    3cd6:	0e 94 47 2c 	call	0x588e	; 0x588e <scheduleQueueAdd>
}
    3cda:	ee 96       	adiw	r28, 0x3e	; 62
    3cdc:	0f b6       	in	r0, 0x3f	; 63
    3cde:	f8 94       	cli
    3ce0:	de bf       	out	0x3e, r29	; 62
    3ce2:	0f be       	out	0x3f, r0	; 63
    3ce4:	cd bf       	out	0x3d, r28	; 61
    3ce6:	cf 91       	pop	r28
    3ce8:	df 91       	pop	r29
    3cea:	1f 91       	pop	r17
    3cec:	0f 91       	pop	r16
    3cee:	ff 90       	pop	r15
    3cf0:	ef 90       	pop	r14
    3cf2:	df 90       	pop	r13
    3cf4:	cf 90       	pop	r12
    3cf6:	bf 90       	pop	r11
    3cf8:	af 90       	pop	r10
    3cfa:	9f 90       	pop	r9
    3cfc:	8f 90       	pop	r8
    3cfe:	7f 90       	pop	r7
    3d00:	6f 90       	pop	r6
    3d02:	5f 90       	pop	r5
    3d04:	4f 90       	pop	r4
    3d06:	3f 90       	pop	r3
    3d08:	08 95       	ret

00003d0a <dumpVarsToGSP>:
		lprintf_P(PSTR("Error Reading Battery Temp\n"));
	}
}

void dumpVarsToGSP(void)
{
    3d0a:	88 e8       	ldi	r24, 0x88	; 136
    3d0c:	93 e1       	ldi	r25, 0x13	; 19
    3d0e:	2c e2       	ldi	r18, 0x2C	; 44
    3d10:	31 e0       	ldi	r19, 0x01	; 1
    3d12:	f9 01       	movw	r30, r18
    3d14:	31 97       	sbiw	r30, 0x01	; 1
    3d16:	f1 f7       	brne	.-4      	; 0x3d14 <dumpVarsToGSP+0xa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d18:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d1a:	d9 f7       	brne	.-10     	; 0x3d12 <dumpVarsToGSP+0x8>
    3d1c:	88 e8       	ldi	r24, 0x88	; 136
    3d1e:	93 e1       	ldi	r25, 0x13	; 19
    3d20:	2c e2       	ldi	r18, 0x2C	; 44
    3d22:	31 e0       	ldi	r19, 0x01	; 1
    3d24:	f9 01       	movw	r30, r18
    3d26:	31 97       	sbiw	r30, 0x01	; 1
    3d28:	f1 f7       	brne	.-4      	; 0x3d26 <dumpVarsToGSP+0x1c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d2a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d2c:	d9 f7       	brne	.-10     	; 0x3d24 <dumpVarsToGSP+0x1a>

	//lprintf_P(PSTR("maydayAlt: %d\n"), eeprom_read_word(&EEmaydayAltitude));
	//lprintf_P(PSTR("maydayVSpd: %d\n"), eeprom_read_word(&EEmaydayVSpeed));
	_delay_ms(500);

	lprintf_P(PSTR("ballastSftyAlt: %d\n"), eeprom_read_word(&EEballastSafetyAltThresh));
    3d2e:	8f e0       	ldi	r24, 0x0F	; 15
    3d30:	90 e0       	ldi	r25, 0x00	; 0
    3d32:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>
    3d36:	00 d0       	rcall	.+0      	; 0x3d38 <dumpVarsToGSP+0x2e>
    3d38:	00 d0       	rcall	.+0      	; 0x3d3a <dumpVarsToGSP+0x30>
    3d3a:	2c ee       	ldi	r18, 0xEC	; 236
    3d3c:	32 e0       	ldi	r19, 0x02	; 2
    3d3e:	ad b7       	in	r26, 0x3d	; 61
    3d40:	be b7       	in	r27, 0x3e	; 62
    3d42:	12 96       	adiw	r26, 0x02	; 2
    3d44:	3c 93       	st	X, r19
    3d46:	2e 93       	st	-X, r18
    3d48:	11 97       	sbiw	r26, 0x01	; 1
    3d4a:	14 96       	adiw	r26, 0x04	; 4
    3d4c:	9c 93       	st	X, r25
    3d4e:	8e 93       	st	-X, r24
    3d50:	13 97       	sbiw	r26, 0x03	; 3
    3d52:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>
	uint8_t variable = (volatile)eeprom_read_byte(&EEautoBallastDisable);
    3d56:	0f 90       	pop	r0
    3d58:	0f 90       	pop	r0
    3d5a:	0f 90       	pop	r0
    3d5c:	0f 90       	pop	r0
    3d5e:	81 e1       	ldi	r24, 0x11	; 17
    3d60:	90 e0       	ldi	r25, 0x00	; 0
    3d62:	0e 94 06 3a 	call	0x740c	; 0x740c <__eerd_byte_m324p>
	lprintf_P(PSTR("autoBallast dsbled?: %d\n"), variable);
    3d66:	00 d0       	rcall	.+0      	; 0x3d68 <dumpVarsToGSP+0x5e>
    3d68:	00 d0       	rcall	.+0      	; 0x3d6a <dumpVarsToGSP+0x60>
    3d6a:	ed b7       	in	r30, 0x3d	; 61
    3d6c:	fe b7       	in	r31, 0x3e	; 62
    3d6e:	31 96       	adiw	r30, 0x01	; 1
    3d70:	23 ed       	ldi	r18, 0xD3	; 211
    3d72:	32 e0       	ldi	r19, 0x02	; 2
    3d74:	ad b7       	in	r26, 0x3d	; 61
    3d76:	be b7       	in	r27, 0x3e	; 62
    3d78:	12 96       	adiw	r26, 0x02	; 2
    3d7a:	3c 93       	st	X, r19
    3d7c:	2e 93       	st	-X, r18
    3d7e:	11 97       	sbiw	r26, 0x01	; 1
    3d80:	82 83       	std	Z+2, r24	; 0x02
    3d82:	13 82       	std	Z+3, r1	; 0x03
    3d84:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>
    3d88:	28 e8       	ldi	r18, 0x88	; 136
    3d8a:	33 e1       	ldi	r19, 0x13	; 19
    3d8c:	0f 90       	pop	r0
    3d8e:	0f 90       	pop	r0
    3d90:	0f 90       	pop	r0
    3d92:	0f 90       	pop	r0
    3d94:	4c e2       	ldi	r20, 0x2C	; 44
    3d96:	51 e0       	ldi	r21, 0x01	; 1
    3d98:	ca 01       	movw	r24, r20
    3d9a:	01 97       	sbiw	r24, 0x01	; 1
    3d9c:	f1 f7       	brne	.-4      	; 0x3d9a <dumpVarsToGSP+0x90>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d9e:	21 50       	subi	r18, 0x01	; 1
    3da0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3da2:	d1 f7       	brne	.-12     	; 0x3d98 <dumpVarsToGSP+0x8e>

	//lprintf_P(PSTR("nightTempForecast: %d\n"), eeprom_read_byte(&EEnightTemperatureForecast));
	//lprintf_P(PSTR("sunriseAntcpation: %ld\n"), eeprom_read_dword(&EEsunriseAnticipation));
	_delay_ms(500);

	lprintf_P(PSTR("maxAllowedTXInterval: %d\n"), eeprom_read_word(&EEmaxAllowableTXInterval));
    3da4:	88 e1       	ldi	r24, 0x18	; 24
    3da6:	90 e0       	ldi	r25, 0x00	; 0
    3da8:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>
    3dac:	00 d0       	rcall	.+0      	; 0x3dae <dumpVarsToGSP+0xa4>
    3dae:	00 d0       	rcall	.+0      	; 0x3db0 <dumpVarsToGSP+0xa6>
    3db0:	29 eb       	ldi	r18, 0xB9	; 185
    3db2:	32 e0       	ldi	r19, 0x02	; 2
    3db4:	ed b7       	in	r30, 0x3d	; 61
    3db6:	fe b7       	in	r31, 0x3e	; 62
    3db8:	32 83       	std	Z+2, r19	; 0x02
    3dba:	21 83       	std	Z+1, r18	; 0x01
    3dbc:	94 83       	std	Z+4, r25	; 0x04
    3dbe:	83 83       	std	Z+3, r24	; 0x03
    3dc0:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>

	lprintf_P(PSTR("batteryHeaterSet: %d\n"), eeprom_read_byte(&EEbatteryHeaterSetpoint));
    3dc4:	0f 90       	pop	r0
    3dc6:	0f 90       	pop	r0
    3dc8:	0f 90       	pop	r0
    3dca:	0f 90       	pop	r0
    3dcc:	8a e1       	ldi	r24, 0x1A	; 26
    3dce:	90 e0       	ldi	r25, 0x00	; 0
    3dd0:	0e 94 06 3a 	call	0x740c	; 0x740c <__eerd_byte_m324p>
    3dd4:	00 d0       	rcall	.+0      	; 0x3dd6 <dumpVarsToGSP+0xcc>
    3dd6:	00 d0       	rcall	.+0      	; 0x3dd8 <dumpVarsToGSP+0xce>
    3dd8:	ed b7       	in	r30, 0x3d	; 61
    3dda:	fe b7       	in	r31, 0x3e	; 62
    3ddc:	31 96       	adiw	r30, 0x01	; 1
    3dde:	23 ea       	ldi	r18, 0xA3	; 163
    3de0:	32 e0       	ldi	r19, 0x02	; 2
    3de2:	ad b7       	in	r26, 0x3d	; 61
    3de4:	be b7       	in	r27, 0x3e	; 62
    3de6:	12 96       	adiw	r26, 0x02	; 2
    3de8:	3c 93       	st	X, r19
    3dea:	2e 93       	st	-X, r18
    3dec:	11 97       	sbiw	r26, 0x01	; 1
    3dee:	82 83       	std	Z+2, r24	; 0x02
    3df0:	13 82       	std	Z+3, r1	; 0x03
    3df2:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>

	lprintf_P(PSTR("dataSampleInterval: %d\n"), eeprom_read_word(&EEdataCollectionInterval));
    3df6:	0f 90       	pop	r0
    3df8:	0f 90       	pop	r0
    3dfa:	0f 90       	pop	r0
    3dfc:	0f 90       	pop	r0
    3dfe:	8b e1       	ldi	r24, 0x1B	; 27
    3e00:	90 e0       	ldi	r25, 0x00	; 0
    3e02:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>
    3e06:	00 d0       	rcall	.+0      	; 0x3e08 <dumpVarsToGSP+0xfe>
    3e08:	00 d0       	rcall	.+0      	; 0x3e0a <dumpVarsToGSP+0x100>
    3e0a:	2b e8       	ldi	r18, 0x8B	; 139
    3e0c:	32 e0       	ldi	r19, 0x02	; 2
    3e0e:	ed b7       	in	r30, 0x3d	; 61
    3e10:	fe b7       	in	r31, 0x3e	; 62
    3e12:	32 83       	std	Z+2, r19	; 0x02
    3e14:	21 83       	std	Z+1, r18	; 0x01
    3e16:	94 83       	std	Z+4, r25	; 0x04
    3e18:	83 83       	std	Z+3, r24	; 0x03
    3e1a:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>
	lprintf_P(PSTR("batchTXInterval: %d\n"), eeprom_read_word(&EEdataTransmitInterval));
    3e1e:	0f 90       	pop	r0
    3e20:	0f 90       	pop	r0
    3e22:	0f 90       	pop	r0
    3e24:	0f 90       	pop	r0
    3e26:	8d e1       	ldi	r24, 0x1D	; 29
    3e28:	90 e0       	ldi	r25, 0x00	; 0
    3e2a:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>
    3e2e:	00 d0       	rcall	.+0      	; 0x3e30 <dumpVarsToGSP+0x126>
    3e30:	00 d0       	rcall	.+0      	; 0x3e32 <dumpVarsToGSP+0x128>
    3e32:	26 e7       	ldi	r18, 0x76	; 118
    3e34:	32 e0       	ldi	r19, 0x02	; 2
    3e36:	ad b7       	in	r26, 0x3d	; 61
    3e38:	be b7       	in	r27, 0x3e	; 62
    3e3a:	12 96       	adiw	r26, 0x02	; 2
    3e3c:	3c 93       	st	X, r19
    3e3e:	2e 93       	st	-X, r18
    3e40:	11 97       	sbiw	r26, 0x01	; 1
    3e42:	14 96       	adiw	r26, 0x04	; 4
    3e44:	9c 93       	st	X, r25
    3e46:	8e 93       	st	-X, r24
    3e48:	13 97       	sbiw	r26, 0x03	; 3
    3e4a:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>
    lprintf_P(PSTR("shortTXInterval: %d\n"), eeprom_read_word(&EEshortDataTransmitInterval));
    3e4e:	0f 90       	pop	r0
    3e50:	0f 90       	pop	r0
    3e52:	0f 90       	pop	r0
    3e54:	0f 90       	pop	r0
    3e56:	8f e1       	ldi	r24, 0x1F	; 31
    3e58:	90 e0       	ldi	r25, 0x00	; 0
    3e5a:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>
    3e5e:	00 d0       	rcall	.+0      	; 0x3e60 <dumpVarsToGSP+0x156>
    3e60:	00 d0       	rcall	.+0      	; 0x3e62 <dumpVarsToGSP+0x158>
    3e62:	21 e6       	ldi	r18, 0x61	; 97
    3e64:	32 e0       	ldi	r19, 0x02	; 2
    3e66:	ed b7       	in	r30, 0x3d	; 61
    3e68:	fe b7       	in	r31, 0x3e	; 62
    3e6a:	32 83       	std	Z+2, r19	; 0x02
    3e6c:	21 83       	std	Z+1, r18	; 0x01
    3e6e:	94 83       	std	Z+4, r25	; 0x04
    3e70:	83 83       	std	Z+3, r24	; 0x03
    3e72:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>
    3e76:	28 e8       	ldi	r18, 0x88	; 136
    3e78:	33 e1       	ldi	r19, 0x13	; 19
    3e7a:	0f 90       	pop	r0
    3e7c:	0f 90       	pop	r0
    3e7e:	0f 90       	pop	r0
    3e80:	0f 90       	pop	r0
    3e82:	4c e2       	ldi	r20, 0x2C	; 44
    3e84:	51 e0       	ldi	r21, 0x01	; 1
    3e86:	ca 01       	movw	r24, r20
    3e88:	01 97       	sbiw	r24, 0x01	; 1
    3e8a:	f1 f7       	brne	.-4      	; 0x3e88 <dumpVarsToGSP+0x17e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e8c:	21 50       	subi	r18, 0x01	; 1
    3e8e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e90:	d1 f7       	brne	.-12     	; 0x3e86 <dumpVarsToGSP+0x17c>
	_delay_ms(500);

	lprintf_P(PSTR("HFdataXmitInterval: %d\n"), eeprom_read_word(&EEhfDataTransmitInterval));
    3e92:	81 e2       	ldi	r24, 0x21	; 33
    3e94:	90 e0       	ldi	r25, 0x00	; 0
    3e96:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>
    3e9a:	00 d0       	rcall	.+0      	; 0x3e9c <dumpVarsToGSP+0x192>
    3e9c:	00 d0       	rcall	.+0      	; 0x3e9e <dumpVarsToGSP+0x194>
    3e9e:	29 e4       	ldi	r18, 0x49	; 73
    3ea0:	32 e0       	ldi	r19, 0x02	; 2
    3ea2:	ad b7       	in	r26, 0x3d	; 61
    3ea4:	be b7       	in	r27, 0x3e	; 62
    3ea6:	12 96       	adiw	r26, 0x02	; 2
    3ea8:	3c 93       	st	X, r19
    3eaa:	2e 93       	st	-X, r18
    3eac:	11 97       	sbiw	r26, 0x01	; 1
    3eae:	14 96       	adiw	r26, 0x04	; 4
    3eb0:	9c 93       	st	X, r25
    3eb2:	8e 93       	st	-X, r24
    3eb4:	13 97       	sbiw	r26, 0x03	; 3
    3eb6:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>
	lprintf_P(PSTR("HFrapidXmitInterval: %d\n"), eeprom_read_byte(&EEhfRapidTransmit));
    3eba:	0f 90       	pop	r0
    3ebc:	0f 90       	pop	r0
    3ebe:	0f 90       	pop	r0
    3ec0:	0f 90       	pop	r0
    3ec2:	83 e2       	ldi	r24, 0x23	; 35
    3ec4:	90 e0       	ldi	r25, 0x00	; 0
    3ec6:	0e 94 06 3a 	call	0x740c	; 0x740c <__eerd_byte_m324p>
    3eca:	00 d0       	rcall	.+0      	; 0x3ecc <dumpVarsToGSP+0x1c2>
    3ecc:	00 d0       	rcall	.+0      	; 0x3ece <dumpVarsToGSP+0x1c4>
    3ece:	ed b7       	in	r30, 0x3d	; 61
    3ed0:	fe b7       	in	r31, 0x3e	; 62
    3ed2:	31 96       	adiw	r30, 0x01	; 1
    3ed4:	20 e3       	ldi	r18, 0x30	; 48
    3ed6:	32 e0       	ldi	r19, 0x02	; 2
    3ed8:	ad b7       	in	r26, 0x3d	; 61
    3eda:	be b7       	in	r27, 0x3e	; 62
    3edc:	12 96       	adiw	r26, 0x02	; 2
    3ede:	3c 93       	st	X, r19
    3ee0:	2e 93       	st	-X, r18
    3ee2:	11 97       	sbiw	r26, 0x01	; 1
    3ee4:	82 83       	std	Z+2, r24	; 0x02
    3ee6:	13 82       	std	Z+3, r1	; 0x03
    3ee8:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>

	lprintf_P(PSTR("epochOfLastBatchTX: %ld\n"), eeprom_read_dword(&EEepochOfLastBatchTransmit));
    3eec:	0f 90       	pop	r0
    3eee:	0f 90       	pop	r0
    3ef0:	0f 90       	pop	r0
    3ef2:	0f 90       	pop	r0
    3ef4:	84 e2       	ldi	r24, 0x24	; 36
    3ef6:	90 e0       	ldi	r25, 0x00	; 0
    3ef8:	0e 94 0e 3a 	call	0x741c	; 0x741c <__eerd_dword_m324p>
    3efc:	00 d0       	rcall	.+0      	; 0x3efe <dumpVarsToGSP+0x1f4>
    3efe:	00 d0       	rcall	.+0      	; 0x3f00 <dumpVarsToGSP+0x1f6>
    3f00:	00 d0       	rcall	.+0      	; 0x3f02 <dumpVarsToGSP+0x1f8>
    3f02:	27 e1       	ldi	r18, 0x17	; 23
    3f04:	32 e0       	ldi	r19, 0x02	; 2
    3f06:	ed b7       	in	r30, 0x3d	; 61
    3f08:	fe b7       	in	r31, 0x3e	; 62
    3f0a:	32 83       	std	Z+2, r19	; 0x02
    3f0c:	21 83       	std	Z+1, r18	; 0x01
    3f0e:	ad b7       	in	r26, 0x3d	; 61
    3f10:	be b7       	in	r27, 0x3e	; 62
    3f12:	13 96       	adiw	r26, 0x03	; 3
    3f14:	6d 93       	st	X+, r22
    3f16:	7d 93       	st	X+, r23
    3f18:	8d 93       	st	X+, r24
    3f1a:	9c 93       	st	X, r25
    3f1c:	16 97       	sbiw	r26, 0x06	; 6
    3f1e:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>

	lprintf_P(PSTR("curBatchNumber: %d\n"), eeprom_read_word(&EEcurrentBatchNumber));
    3f22:	ed b7       	in	r30, 0x3d	; 61
    3f24:	fe b7       	in	r31, 0x3e	; 62
    3f26:	36 96       	adiw	r30, 0x06	; 6
    3f28:	0f b6       	in	r0, 0x3f	; 63
    3f2a:	f8 94       	cli
    3f2c:	fe bf       	out	0x3e, r31	; 62
    3f2e:	0f be       	out	0x3f, r0	; 63
    3f30:	ed bf       	out	0x3d, r30	; 61
    3f32:	88 e2       	ldi	r24, 0x28	; 40
    3f34:	90 e0       	ldi	r25, 0x00	; 0
    3f36:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>
    3f3a:	00 d0       	rcall	.+0      	; 0x3f3c <dumpVarsToGSP+0x232>
    3f3c:	00 d0       	rcall	.+0      	; 0x3f3e <dumpVarsToGSP+0x234>
    3f3e:	23 e0       	ldi	r18, 0x03	; 3
    3f40:	32 e0       	ldi	r19, 0x02	; 2
    3f42:	ad b7       	in	r26, 0x3d	; 61
    3f44:	be b7       	in	r27, 0x3e	; 62
    3f46:	12 96       	adiw	r26, 0x02	; 2
    3f48:	3c 93       	st	X, r19
    3f4a:	2e 93       	st	-X, r18
    3f4c:	11 97       	sbiw	r26, 0x01	; 1
    3f4e:	14 96       	adiw	r26, 0x04	; 4
    3f50:	9c 93       	st	X, r25
    3f52:	8e 93       	st	-X, r24
    3f54:	13 97       	sbiw	r26, 0x03	; 3
    3f56:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>
	lprintf_P(PSTR("batchSampleStart: %d\n"), eeprom_read_word(&EEbatchSampleStart));
    3f5a:	0f 90       	pop	r0
    3f5c:	0f 90       	pop	r0
    3f5e:	0f 90       	pop	r0
    3f60:	0f 90       	pop	r0
    3f62:	8a e2       	ldi	r24, 0x2A	; 42
    3f64:	90 e0       	ldi	r25, 0x00	; 0
    3f66:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>
    3f6a:	00 d0       	rcall	.+0      	; 0x3f6c <dumpVarsToGSP+0x262>
    3f6c:	00 d0       	rcall	.+0      	; 0x3f6e <dumpVarsToGSP+0x264>
    3f6e:	2d ee       	ldi	r18, 0xED	; 237
    3f70:	31 e0       	ldi	r19, 0x01	; 1
    3f72:	ed b7       	in	r30, 0x3d	; 61
    3f74:	fe b7       	in	r31, 0x3e	; 62
    3f76:	32 83       	std	Z+2, r19	; 0x02
    3f78:	21 83       	std	Z+1, r18	; 0x01
    3f7a:	94 83       	std	Z+4, r25	; 0x04
    3f7c:	83 83       	std	Z+3, r24	; 0x03
    3f7e:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>
	lprintf_P(PSTR("batchSampleEnd: %d\n"), eeprom_read_word(&EEbatchSampleEnd));
    3f82:	0f 90       	pop	r0
    3f84:	0f 90       	pop	r0
    3f86:	0f 90       	pop	r0
    3f88:	0f 90       	pop	r0
    3f8a:	8c e2       	ldi	r24, 0x2C	; 44
    3f8c:	90 e0       	ldi	r25, 0x00	; 0
    3f8e:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>
    3f92:	00 d0       	rcall	.+0      	; 0x3f94 <dumpVarsToGSP+0x28a>
    3f94:	00 d0       	rcall	.+0      	; 0x3f96 <dumpVarsToGSP+0x28c>
    3f96:	29 ed       	ldi	r18, 0xD9	; 217
    3f98:	31 e0       	ldi	r19, 0x01	; 1
    3f9a:	ad b7       	in	r26, 0x3d	; 61
    3f9c:	be b7       	in	r27, 0x3e	; 62
    3f9e:	12 96       	adiw	r26, 0x02	; 2
    3fa0:	3c 93       	st	X, r19
    3fa2:	2e 93       	st	-X, r18
    3fa4:	11 97       	sbiw	r26, 0x01	; 1
    3fa6:	14 96       	adiw	r26, 0x04	; 4
    3fa8:	9c 93       	st	X, r25
    3faa:	8e 93       	st	-X, r24
    3fac:	13 97       	sbiw	r26, 0x03	; 3
    3fae:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>
    3fb2:	28 e8       	ldi	r18, 0x88	; 136
    3fb4:	33 e1       	ldi	r19, 0x13	; 19
    3fb6:	0f 90       	pop	r0
    3fb8:	0f 90       	pop	r0
    3fba:	0f 90       	pop	r0
    3fbc:	0f 90       	pop	r0
    3fbe:	4c e2       	ldi	r20, 0x2C	; 44
    3fc0:	51 e0       	ldi	r21, 0x01	; 1
    3fc2:	ca 01       	movw	r24, r20
    3fc4:	01 97       	sbiw	r24, 0x01	; 1
    3fc6:	f1 f7       	brne	.-4      	; 0x3fc4 <dumpVarsToGSP+0x2ba>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fc8:	21 50       	subi	r18, 0x01	; 1
    3fca:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fcc:	d1 f7       	brne	.-12     	; 0x3fc2 <dumpVarsToGSP+0x2b8>
	_delay_ms(500);

	lprintf_P(PSTR("commEEPROMStart: %d\n"), eeprom_read_word(&EEcommPromStart));
    3fce:	8e e2       	ldi	r24, 0x2E	; 46
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>
    3fd6:	00 d0       	rcall	.+0      	; 0x3fd8 <dumpVarsToGSP+0x2ce>
    3fd8:	00 d0       	rcall	.+0      	; 0x3fda <dumpVarsToGSP+0x2d0>
    3fda:	24 ec       	ldi	r18, 0xC4	; 196
    3fdc:	31 e0       	ldi	r19, 0x01	; 1
    3fde:	ed b7       	in	r30, 0x3d	; 61
    3fe0:	fe b7       	in	r31, 0x3e	; 62
    3fe2:	32 83       	std	Z+2, r19	; 0x02
    3fe4:	21 83       	std	Z+1, r18	; 0x01
    3fe6:	94 83       	std	Z+4, r25	; 0x04
    3fe8:	83 83       	std	Z+3, r24	; 0x03
    3fea:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>
	lprintf_P(PSTR("commEEPROMEnd: %d\n"), eeprom_read_word(&EEcommPromEnd));
    3fee:	0f 90       	pop	r0
    3ff0:	0f 90       	pop	r0
    3ff2:	0f 90       	pop	r0
    3ff4:	0f 90       	pop	r0
    3ff6:	80 e3       	ldi	r24, 0x30	; 48
    3ff8:	90 e0       	ldi	r25, 0x00	; 0
    3ffa:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>
    3ffe:	00 d0       	rcall	.+0      	; 0x4000 <dumpVarsToGSP+0x2f6>
    4000:	00 d0       	rcall	.+0      	; 0x4002 <dumpVarsToGSP+0x2f8>
    4002:	21 eb       	ldi	r18, 0xB1	; 177
    4004:	31 e0       	ldi	r19, 0x01	; 1
    4006:	ad b7       	in	r26, 0x3d	; 61
    4008:	be b7       	in	r27, 0x3e	; 62
    400a:	12 96       	adiw	r26, 0x02	; 2
    400c:	3c 93       	st	X, r19
    400e:	2e 93       	st	-X, r18
    4010:	11 97       	sbiw	r26, 0x01	; 1
    4012:	14 96       	adiw	r26, 0x04	; 4
    4014:	9c 93       	st	X, r25
    4016:	8e 93       	st	-X, r24
    4018:	13 97       	sbiw	r26, 0x03	; 3
    401a:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>

	lprintf_P(PSTR("flightComputerResetCount: %d\n"), eeprom_read_byte(&EEflightComputerResetCount));
    401e:	0f 90       	pop	r0
    4020:	0f 90       	pop	r0
    4022:	0f 90       	pop	r0
    4024:	0f 90       	pop	r0
    4026:	82 e3       	ldi	r24, 0x32	; 50
    4028:	90 e0       	ldi	r25, 0x00	; 0
    402a:	0e 94 06 3a 	call	0x740c	; 0x740c <__eerd_byte_m324p>
    402e:	00 d0       	rcall	.+0      	; 0x4030 <dumpVarsToGSP+0x326>
    4030:	00 d0       	rcall	.+0      	; 0x4032 <dumpVarsToGSP+0x328>
    4032:	ed b7       	in	r30, 0x3d	; 61
    4034:	fe b7       	in	r31, 0x3e	; 62
    4036:	31 96       	adiw	r30, 0x01	; 1
    4038:	23 e9       	ldi	r18, 0x93	; 147
    403a:	31 e0       	ldi	r19, 0x01	; 1
    403c:	ad b7       	in	r26, 0x3d	; 61
    403e:	be b7       	in	r27, 0x3e	; 62
    4040:	12 96       	adiw	r26, 0x02	; 2
    4042:	3c 93       	st	X, r19
    4044:	2e 93       	st	-X, r18
    4046:	11 97       	sbiw	r26, 0x01	; 1
    4048:	82 83       	std	Z+2, r24	; 0x02
    404a:	13 82       	std	Z+3, r1	; 0x03
    404c:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>
	lprintf_P(PSTR("commModuleResetCount: %d\n"), eeprom_read_byte(&EEcommModuleResetCount));
    4050:	0f 90       	pop	r0
    4052:	0f 90       	pop	r0
    4054:	0f 90       	pop	r0
    4056:	0f 90       	pop	r0
    4058:	83 e3       	ldi	r24, 0x33	; 51
    405a:	90 e0       	ldi	r25, 0x00	; 0
    405c:	0e 94 06 3a 	call	0x740c	; 0x740c <__eerd_byte_m324p>
    4060:	00 d0       	rcall	.+0      	; 0x4062 <dumpVarsToGSP+0x358>
    4062:	00 d0       	rcall	.+0      	; 0x4064 <dumpVarsToGSP+0x35a>
    4064:	ed b7       	in	r30, 0x3d	; 61
    4066:	fe b7       	in	r31, 0x3e	; 62
    4068:	31 96       	adiw	r30, 0x01	; 1
    406a:	29 e7       	ldi	r18, 0x79	; 121
    406c:	31 e0       	ldi	r19, 0x01	; 1
    406e:	ad b7       	in	r26, 0x3d	; 61
    4070:	be b7       	in	r27, 0x3e	; 62
    4072:	12 96       	adiw	r26, 0x02	; 2
    4074:	3c 93       	st	X, r19
    4076:	2e 93       	st	-X, r18
    4078:	11 97       	sbiw	r26, 0x01	; 1
    407a:	82 83       	std	Z+2, r24	; 0x02
    407c:	13 82       	std	Z+3, r1	; 0x03
    407e:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>

	lprintf_P(PSTR("Phase: %d\n"), eeprom_read_byte(&EEflightPhase));
    4082:	0f 90       	pop	r0
    4084:	0f 90       	pop	r0
    4086:	0f 90       	pop	r0
    4088:	0f 90       	pop	r0
    408a:	84 e3       	ldi	r24, 0x34	; 52
    408c:	90 e0       	ldi	r25, 0x00	; 0
    408e:	0e 94 06 3a 	call	0x740c	; 0x740c <__eerd_byte_m324p>
    4092:	00 d0       	rcall	.+0      	; 0x4094 <dumpVarsToGSP+0x38a>
    4094:	00 d0       	rcall	.+0      	; 0x4096 <dumpVarsToGSP+0x38c>
    4096:	ed b7       	in	r30, 0x3d	; 61
    4098:	fe b7       	in	r31, 0x3e	; 62
    409a:	31 96       	adiw	r30, 0x01	; 1
    409c:	2e e6       	ldi	r18, 0x6E	; 110
    409e:	31 e0       	ldi	r19, 0x01	; 1
    40a0:	ad b7       	in	r26, 0x3d	; 61
    40a2:	be b7       	in	r27, 0x3e	; 62
    40a4:	12 96       	adiw	r26, 0x02	; 2
    40a6:	3c 93       	st	X, r19
    40a8:	2e 93       	st	-X, r18
    40aa:	11 97       	sbiw	r26, 0x01	; 1
    40ac:	82 83       	std	Z+2, r24	; 0x02
    40ae:	13 82       	std	Z+3, r1	; 0x03
    40b0:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>
    40b4:	28 e8       	ldi	r18, 0x88	; 136
    40b6:	33 e1       	ldi	r19, 0x13	; 19
    40b8:	0f 90       	pop	r0
    40ba:	0f 90       	pop	r0
    40bc:	0f 90       	pop	r0
    40be:	0f 90       	pop	r0
    40c0:	4c e2       	ldi	r20, 0x2C	; 44
    40c2:	51 e0       	ldi	r21, 0x01	; 1
    40c4:	ca 01       	movw	r24, r20
    40c6:	01 97       	sbiw	r24, 0x01	; 1
    40c8:	f1 f7       	brne	.-4      	; 0x40c6 <dumpVarsToGSP+0x3bc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40ca:	21 50       	subi	r18, 0x01	; 1
    40cc:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40ce:	d1 f7       	brne	.-12     	; 0x40c4 <dumpVarsToGSP+0x3ba>
	_delay_ms(500);

	lprintf_P(PSTR("TelemBitmap: %lx "), eeprom_read_dword(&EEcurrentTelemetryBitmap[0]));
    40d0:	85 e3       	ldi	r24, 0x35	; 53
    40d2:	90 e0       	ldi	r25, 0x00	; 0
    40d4:	0e 94 0e 3a 	call	0x741c	; 0x741c <__eerd_dword_m324p>
    40d8:	00 d0       	rcall	.+0      	; 0x40da <dumpVarsToGSP+0x3d0>
    40da:	00 d0       	rcall	.+0      	; 0x40dc <dumpVarsToGSP+0x3d2>
    40dc:	00 d0       	rcall	.+0      	; 0x40de <dumpVarsToGSP+0x3d4>
    40de:	2c e5       	ldi	r18, 0x5C	; 92
    40e0:	31 e0       	ldi	r19, 0x01	; 1
    40e2:	ed b7       	in	r30, 0x3d	; 61
    40e4:	fe b7       	in	r31, 0x3e	; 62
    40e6:	32 83       	std	Z+2, r19	; 0x02
    40e8:	21 83       	std	Z+1, r18	; 0x01
    40ea:	ad b7       	in	r26, 0x3d	; 61
    40ec:	be b7       	in	r27, 0x3e	; 62
    40ee:	13 96       	adiw	r26, 0x03	; 3
    40f0:	6d 93       	st	X+, r22
    40f2:	7d 93       	st	X+, r23
    40f4:	8d 93       	st	X+, r24
    40f6:	9c 93       	st	X, r25
    40f8:	16 97       	sbiw	r26, 0x06	; 6
    40fa:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>
    lprintf_P(PSTR("%lx "), eeprom_read_dword(&EEcurrentTelemetryBitmap[1]));
    40fe:	ed b7       	in	r30, 0x3d	; 61
    4100:	fe b7       	in	r31, 0x3e	; 62
    4102:	36 96       	adiw	r30, 0x06	; 6
    4104:	0f b6       	in	r0, 0x3f	; 63
    4106:	f8 94       	cli
    4108:	fe bf       	out	0x3e, r31	; 62
    410a:	0f be       	out	0x3f, r0	; 63
    410c:	ed bf       	out	0x3d, r30	; 61
    410e:	89 e3       	ldi	r24, 0x39	; 57
    4110:	90 e0       	ldi	r25, 0x00	; 0
    4112:	0e 94 0e 3a 	call	0x741c	; 0x741c <__eerd_dword_m324p>
    4116:	00 d0       	rcall	.+0      	; 0x4118 <dumpVarsToGSP+0x40e>
    4118:	00 d0       	rcall	.+0      	; 0x411a <dumpVarsToGSP+0x410>
    411a:	00 d0       	rcall	.+0      	; 0x411c <dumpVarsToGSP+0x412>
    411c:	27 e5       	ldi	r18, 0x57	; 87
    411e:	31 e0       	ldi	r19, 0x01	; 1
    4120:	ad b7       	in	r26, 0x3d	; 61
    4122:	be b7       	in	r27, 0x3e	; 62
    4124:	12 96       	adiw	r26, 0x02	; 2
    4126:	3c 93       	st	X, r19
    4128:	2e 93       	st	-X, r18
    412a:	11 97       	sbiw	r26, 0x01	; 1
    412c:	ed b7       	in	r30, 0x3d	; 61
    412e:	fe b7       	in	r31, 0x3e	; 62
    4130:	63 83       	std	Z+3, r22	; 0x03
    4132:	74 83       	std	Z+4, r23	; 0x04
    4134:	85 83       	std	Z+5, r24	; 0x05
    4136:	96 83       	std	Z+6, r25	; 0x06
    4138:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>
    lprintf_P(PSTR("%lx\n"), eeprom_read_dword(&EEcurrentTelemetryBitmap[2]));
    413c:	8d b7       	in	r24, 0x3d	; 61
    413e:	9e b7       	in	r25, 0x3e	; 62
    4140:	06 96       	adiw	r24, 0x06	; 6
    4142:	0f b6       	in	r0, 0x3f	; 63
    4144:	f8 94       	cli
    4146:	9e bf       	out	0x3e, r25	; 62
    4148:	0f be       	out	0x3f, r0	; 63
    414a:	8d bf       	out	0x3d, r24	; 61
    414c:	8d e3       	ldi	r24, 0x3D	; 61
    414e:	90 e0       	ldi	r25, 0x00	; 0
    4150:	0e 94 0e 3a 	call	0x741c	; 0x741c <__eerd_dword_m324p>
    4154:	00 d0       	rcall	.+0      	; 0x4156 <dumpVarsToGSP+0x44c>
    4156:	00 d0       	rcall	.+0      	; 0x4158 <dumpVarsToGSP+0x44e>
    4158:	00 d0       	rcall	.+0      	; 0x415a <dumpVarsToGSP+0x450>
    415a:	22 e5       	ldi	r18, 0x52	; 82
    415c:	31 e0       	ldi	r19, 0x01	; 1
    415e:	ad b7       	in	r26, 0x3d	; 61
    4160:	be b7       	in	r27, 0x3e	; 62
    4162:	12 96       	adiw	r26, 0x02	; 2
    4164:	3c 93       	st	X, r19
    4166:	2e 93       	st	-X, r18
    4168:	11 97       	sbiw	r26, 0x01	; 1
    416a:	ed b7       	in	r30, 0x3d	; 61
    416c:	fe b7       	in	r31, 0x3e	; 62
    416e:	63 83       	std	Z+3, r22	; 0x03
    4170:	74 83       	std	Z+4, r23	; 0x04
    4172:	85 83       	std	Z+5, r24	; 0x05
    4174:	96 83       	std	Z+6, r25	; 0x06
    4176:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>
	lprintf_P(PSTR("telemetrySpeedDial: %d\n"), eeprom_read_word(&EEcurrentTelemetryVersion));
    417a:	8d b7       	in	r24, 0x3d	; 61
    417c:	9e b7       	in	r25, 0x3e	; 62
    417e:	06 96       	adiw	r24, 0x06	; 6
    4180:	0f b6       	in	r0, 0x3f	; 63
    4182:	f8 94       	cli
    4184:	9e bf       	out	0x3e, r25	; 62
    4186:	0f be       	out	0x3f, r0	; 63
    4188:	8d bf       	out	0x3d, r24	; 61
    418a:	81 e4       	ldi	r24, 0x41	; 65
    418c:	90 e0       	ldi	r25, 0x00	; 0
    418e:	0e 94 14 3a 	call	0x7428	; 0x7428 <__eerd_word_m324p>
    4192:	00 d0       	rcall	.+0      	; 0x4194 <dumpVarsToGSP+0x48a>
    4194:	00 d0       	rcall	.+0      	; 0x4196 <dumpVarsToGSP+0x48c>
    4196:	2a e3       	ldi	r18, 0x3A	; 58
    4198:	31 e0       	ldi	r19, 0x01	; 1
    419a:	ad b7       	in	r26, 0x3d	; 61
    419c:	be b7       	in	r27, 0x3e	; 62
    419e:	12 96       	adiw	r26, 0x02	; 2
    41a0:	3c 93       	st	X, r19
    41a2:	2e 93       	st	-X, r18
    41a4:	11 97       	sbiw	r26, 0x01	; 1
    41a6:	14 96       	adiw	r26, 0x04	; 4
    41a8:	9c 93       	st	X, r25
    41aa:	8e 93       	st	-X, r24
    41ac:	13 97       	sbiw	r26, 0x03	; 3
    41ae:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>

    lprintf_P(PSTR("epLoc: %d\n"), eeprom_read_byte(&EEEpochLock));
    41b2:	0f 90       	pop	r0
    41b4:	0f 90       	pop	r0
    41b6:	0f 90       	pop	r0
    41b8:	0f 90       	pop	r0
    41ba:	80 e0       	ldi	r24, 0x00	; 0
    41bc:	90 e0       	ldi	r25, 0x00	; 0
    41be:	0e 94 06 3a 	call	0x740c	; 0x740c <__eerd_byte_m324p>
    41c2:	00 d0       	rcall	.+0      	; 0x41c4 <dumpVarsToGSP+0x4ba>
    41c4:	00 d0       	rcall	.+0      	; 0x41c6 <dumpVarsToGSP+0x4bc>
    41c6:	ed b7       	in	r30, 0x3d	; 61
    41c8:	fe b7       	in	r31, 0x3e	; 62
    41ca:	31 96       	adiw	r30, 0x01	; 1
    41cc:	2f e2       	ldi	r18, 0x2F	; 47
    41ce:	31 e0       	ldi	r19, 0x01	; 1
    41d0:	ad b7       	in	r26, 0x3d	; 61
    41d2:	be b7       	in	r27, 0x3e	; 62
    41d4:	12 96       	adiw	r26, 0x02	; 2
    41d6:	3c 93       	st	X, r19
    41d8:	2e 93       	st	-X, r18
    41da:	11 97       	sbiw	r26, 0x01	; 1
    41dc:	82 83       	std	Z+2, r24	; 0x02
    41de:	13 82       	std	Z+3, r1	; 0x03
    41e0:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>
    41e4:	0f 90       	pop	r0
    41e6:	0f 90       	pop	r0
    41e8:	0f 90       	pop	r0
    41ea:	0f 90       	pop	r0

	//int16_t EEMEM EEvSpeedHolderSamples[VSPEEDSAMPLESDESIRED];
	//Maybe should print this for debug...

}
    41ec:	08 95       	ret

000041ee <processMonitor>:
}

uint8_t gpsFailures = 0;

void processMonitor(uint32_t time)
{
    41ee:	4f 92       	push	r4
    41f0:	5f 92       	push	r5
    41f2:	6f 92       	push	r6
    41f4:	7f 92       	push	r7
    41f6:	8f 92       	push	r8
    41f8:	9f 92       	push	r9
    41fa:	af 92       	push	r10
    41fc:	bf 92       	push	r11
    41fe:	cf 92       	push	r12
    4200:	df 92       	push	r13
    4202:	ef 92       	push	r14
    4204:	ff 92       	push	r15
    4206:	0f 93       	push	r16
    4208:	1f 93       	push	r17
    420a:	df 93       	push	r29
    420c:	cf 93       	push	r28
    420e:	00 d0       	rcall	.+0      	; 0x4210 <processMonitor+0x22>
    4210:	00 d0       	rcall	.+0      	; 0x4212 <processMonitor+0x24>
    4212:	cd b7       	in	r28, 0x3d	; 61
    4214:	de b7       	in	r29, 0x3e	; 62
    4216:	4b 01       	movw	r8, r22
    4218:	5c 01       	movw	r10, r24
	#ifdef FCPUDEBUG
		lprintf_P(PSTR("In Process Monitor\n"));
	#endif

	uint32_t currentBitmask[3];
	currentBitmask[0] = eeprom_read_dword(&EEcurrentTelemetryBitmap[0]);
    421a:	85 e3       	ldi	r24, 0x35	; 53
    421c:	90 e0       	ldi	r25, 0x00	; 0
    421e:	0e 94 0e 3a 	call	0x741c	; 0x741c <__eerd_dword_m324p>
    4222:	6b 01       	movw	r12, r22
    4224:	7c 01       	movw	r14, r24
	currentBitmask[1] = eeprom_read_dword(&EEcurrentTelemetryBitmap[1]);
    4226:	89 e3       	ldi	r24, 0x39	; 57
    4228:	90 e0       	ldi	r25, 0x00	; 0
    422a:	0e 94 0e 3a 	call	0x741c	; 0x741c <__eerd_dword_m324p>
    422e:	69 83       	std	Y+1, r22	; 0x01
    4230:	7a 83       	std	Y+2, r23	; 0x02
    4232:	8b 83       	std	Y+3, r24	; 0x03
    4234:	9c 83       	std	Y+4, r25	; 0x04
	currentBitmask[2] = eeprom_read_dword(&EEcurrentTelemetryBitmap[2]);
    4236:	8d e3       	ldi	r24, 0x3D	; 61
    4238:	90 e0       	ldi	r25, 0x00	; 0
    423a:	0e 94 0e 3a 	call	0x741c	; 0x741c <__eerd_dword_m324p>
    423e:	2b 01       	movw	r4, r22
    4240:	3c 01       	movw	r6, r24

	getGPS(&currentPositionData);
    4242:	87 e3       	ldi	r24, 0x37	; 55
    4244:	94 e0       	ldi	r25, 0x04	; 4
    4246:	0e 94 7a 28 	call	0x50f4	; 0x50f4 <getGPS>
	if(currentPositionData.status == 0)
    424a:	80 91 37 04 	lds	r24, 0x0437
    424e:	88 23       	and	r24, r24
    4250:	19 f4       	brne	.+6      	; 0x4258 <processMonitor+0x6a>
	{
		gpsFailures = 0;
    4252:	10 92 2f 03 	sts	0x032F, r1
    4256:	1c c0       	rjmp	.+56     	; 0x4290 <processMonitor+0xa2>
		#ifdef FCPUDEBUG
			lprintf_P(PSTR("Bad GPS Data\n"));
		#endif
		#ifndef OSHITDISABLE
		//flush Vspeed
		numberOfVSpeedSamples=0;
    4258:	10 92 26 03 	sts	0x0326, r1
		gpsFailures++;
    425c:	80 91 2f 03 	lds	r24, 0x032F
    4260:	8f 5f       	subi	r24, 0xFF	; 255
    4262:	80 93 2f 03 	sts	0x032F, r24
		//turn on GPS status telemetry channel
		lprintf_P(PSTR("CBM1\n"));
    4266:	00 d0       	rcall	.+0      	; 0x4268 <processMonitor+0x7a>
    4268:	89 e2       	ldi	r24, 0x29	; 41
    426a:	91 e0       	ldi	r25, 0x01	; 1
    426c:	ad b7       	in	r26, 0x3d	; 61
    426e:	be b7       	in	r27, 0x3e	; 62
    4270:	12 96       	adiw	r26, 0x02	; 2
    4272:	9c 93       	st	X, r25
    4274:	8e 93       	st	-X, r24
    4276:	11 97       	sbiw	r26, 0x01	; 1
    4278:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>
		currentBitmask[0] |= _BV(7);
    427c:	80 e8       	ldi	r24, 0x80	; 128
    427e:	90 e0       	ldi	r25, 0x00	; 0
    4280:	a0 e0       	ldi	r26, 0x00	; 0
    4282:	b0 e0       	ldi	r27, 0x00	; 0
    4284:	c8 2a       	or	r12, r24
    4286:	d9 2a       	or	r13, r25
    4288:	ea 2a       	or	r14, r26
    428a:	fb 2a       	or	r15, r27
    428c:	0f 90       	pop	r0
    428e:	0f 90       	pop	r0
		#endif
	}

	if(gpsFailures >= CRITGPSFAIL)
    4290:	80 91 2f 03 	lds	r24, 0x032F
    4294:	84 31       	cpi	r24, 0x14	; 20
    4296:	80 f0       	brcs	.+32     	; 0x42b8 <processMonitor+0xca>
	{
		//Setting altitude to 0 will kick us into flight phase 3
		#ifdef FCPUDEBUG
			lprintf_P(PSTR("Critical GPS Failure\n"));
		#endif
		gpsFailures = CRITGPSFAIL + 1;
    4298:	85 e1       	ldi	r24, 0x15	; 21
    429a:	80 93 2f 03 	sts	0x032F, r24
		currentPositionData.altitude = 0;
    429e:	10 92 4b 04 	sts	0x044B, r1
    42a2:	10 92 4a 04 	sts	0x044A, r1
		vSpeedAvg = 0;
    42a6:	10 92 35 04 	sts	0x0435, r1
    42aa:	10 92 34 04 	sts	0x0434, r1
		eeprom_write_byte(&EEautoBallastDisable, 1);
    42ae:	81 e1       	ldi	r24, 0x11	; 17
    42b0:	90 e0       	ldi	r25, 0x00	; 0
    42b2:	61 e0       	ldi	r22, 0x01	; 1
    42b4:	0e 94 24 3a 	call	0x7448	; 0x7448 <__eewr_byte_m324p>
	}

	//get battetry temp
	uint16_t rawBattTemp = tmp100rawTemp(TMP101BH)>>4;
    42b8:	82 e9       	ldi	r24, 0x92	; 146
    42ba:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <tmp100rawTemp>
	int16_t btinm = get12bit2scomp(rawBattTemp);
    42be:	e4 e0       	ldi	r30, 0x04	; 4
    42c0:	96 95       	lsr	r25
    42c2:	87 95       	ror	r24
    42c4:	ea 95       	dec	r30
    42c6:	e1 f7       	brne	.-8      	; 0x42c0 <processMonitor+0xd2>
    42c8:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <get12bit2scomp>
    42cc:	8c 01       	movw	r16, r24
	int8_t batteryTemperature = (int8_t)(btinm/16);
	//conver to 8 bit

	//If battery temp is below setpoint, turn on telemetry channel
	int8_t batterySetpoint = eeprom_read_byte(&EEbatteryHeaterSetpoint);;
    42ce:	8a e1       	ldi	r24, 0x1A	; 26
    42d0:	90 e0       	ldi	r25, 0x00	; 0
    42d2:	0e 94 06 3a 	call	0x740c	; 0x740c <__eerd_byte_m324p>
    42d6:	28 2f       	mov	r18, r24
	if(batteryTemperature < batterySetpoint)
    42d8:	c8 01       	movw	r24, r16
    42da:	60 e1       	ldi	r22, 0x10	; 16
    42dc:	70 e0       	ldi	r23, 0x00	; 0
    42de:	0e 94 63 36 	call	0x6cc6	; 0x6cc6 <__divmodhi4>
    42e2:	62 17       	cp	r22, r18
    42e4:	6c f4       	brge	.+26     	; 0x4300 <processMonitor+0x112>
	{
	    lprintf_P(PSTR("CBM1\n"));
    42e6:	00 d0       	rcall	.+0      	; 0x42e8 <processMonitor+0xfa>
    42e8:	83 e2       	ldi	r24, 0x23	; 35
    42ea:	91 e0       	ldi	r25, 0x01	; 1
    42ec:	ad b7       	in	r26, 0x3d	; 61
    42ee:	be b7       	in	r27, 0x3e	; 62
    42f0:	12 96       	adiw	r26, 0x02	; 2
    42f2:	9c 93       	st	X, r25
    42f4:	8e 93       	st	-X, r24
    42f6:	11 97       	sbiw	r26, 0x01	; 1
    42f8:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>
    42fc:	0f 90       	pop	r0
    42fe:	0f 90       	pop	r0
	//if(batteryVoltage < NominalVoltage)
	//{
		//currentBitmask[0] |= _BV(1);
	//}

    eeprom_write_dword(&EEcurrentTelemetryBitmap[0], currentBitmask[0]);
    4300:	85 e3       	ldi	r24, 0x35	; 53
    4302:	90 e0       	ldi	r25, 0x00	; 0
    4304:	b7 01       	movw	r22, r14
    4306:	a6 01       	movw	r20, r12
    4308:	0e 94 32 3a 	call	0x7464	; 0x7464 <__eewr_dword_m324p>
    eeprom_write_dword(&EEcurrentTelemetryBitmap[1], currentBitmask[1]);
    430c:	89 e3       	ldi	r24, 0x39	; 57
    430e:	90 e0       	ldi	r25, 0x00	; 0
    4310:	49 81       	ldd	r20, Y+1	; 0x01
    4312:	5a 81       	ldd	r21, Y+2	; 0x02
    4314:	6b 81       	ldd	r22, Y+3	; 0x03
    4316:	7c 81       	ldd	r23, Y+4	; 0x04
    4318:	0e 94 32 3a 	call	0x7464	; 0x7464 <__eewr_dword_m324p>
    eeprom_write_dword(&EEcurrentTelemetryBitmap[2], currentBitmask[2]);
    431c:	8d e3       	ldi	r24, 0x3D	; 61
    431e:	90 e0       	ldi	r25, 0x00	; 0
    4320:	b3 01       	movw	r22, r6
    4322:	a2 01       	movw	r20, r4
    4324:	0e 94 32 3a 	call	0x7464	; 0x7464 <__eewr_dword_m324p>


	scheduleQueueAdd(&processMonitor, time+5);
    4328:	85 e0       	ldi	r24, 0x05	; 5
    432a:	90 e0       	ldi	r25, 0x00	; 0
    432c:	a0 e0       	ldi	r26, 0x00	; 0
    432e:	b0 e0       	ldi	r27, 0x00	; 0
    4330:	88 0e       	add	r8, r24
    4332:	99 1e       	adc	r9, r25
    4334:	aa 1e       	adc	r10, r26
    4336:	bb 1e       	adc	r11, r27
    4338:	87 ef       	ldi	r24, 0xF7	; 247
    433a:	90 e2       	ldi	r25, 0x20	; 32
    433c:	b5 01       	movw	r22, r10
    433e:	a4 01       	movw	r20, r8
    4340:	0e 94 47 2c 	call	0x588e	; 0x588e <scheduleQueueAdd>
}
    4344:	0f 90       	pop	r0
    4346:	0f 90       	pop	r0
    4348:	0f 90       	pop	r0
    434a:	0f 90       	pop	r0
    434c:	cf 91       	pop	r28
    434e:	df 91       	pop	r29
    4350:	1f 91       	pop	r17
    4352:	0f 91       	pop	r16
    4354:	ff 90       	pop	r15
    4356:	ef 90       	pop	r14
    4358:	df 90       	pop	r13
    435a:	cf 90       	pop	r12
    435c:	bf 90       	pop	r11
    435e:	af 90       	pop	r10
    4360:	9f 90       	pop	r9
    4362:	8f 90       	pop	r8
    4364:	7f 90       	pop	r7
    4366:	6f 90       	pop	r6
    4368:	5f 90       	pop	r5
    436a:	4f 90       	pop	r4
    436c:	08 95       	ret

0000436e <receiveCommandHandler>:
}

uint8_t cutdownStatus = 0;
uint8_t rapidHFEnable=0;
void receiveCommandHandler(uint8_t receiveDataLength, uint8_t* recieveData)
{
    436e:	0f 93       	push	r16
    4370:	1f 93       	push	r17
    4372:	fb 01       	movw	r30, r22
    uint8_t temp;
	switch(recieveData[0])
    4374:	20 81       	ld	r18, Z
    4376:	22 31       	cpi	r18, 0x12	; 18
    4378:	09 f4       	brne	.+2      	; 0x437c <receiveCommandHandler+0xe>
    437a:	53 c1       	rjmp	.+678    	; 0x4622 <receiveCommandHandler+0x2b4>
    437c:	23 31       	cpi	r18, 0x13	; 19
    437e:	c0 f5       	brcc	.+112    	; 0x43f0 <receiveCommandHandler+0x82>
    4380:	27 30       	cpi	r18, 0x07	; 7
    4382:	09 f4       	brne	.+2      	; 0x4386 <receiveCommandHandler+0x18>
    4384:	b4 c0       	rjmp	.+360    	; 0x44ee <receiveCommandHandler+0x180>
    4386:	28 30       	cpi	r18, 0x08	; 8
    4388:	a8 f4       	brcc	.+42     	; 0x43b4 <receiveCommandHandler+0x46>
    438a:	23 30       	cpi	r18, 0x03	; 3
    438c:	09 f4       	brne	.+2      	; 0x4390 <receiveCommandHandler+0x22>
    438e:	7c c0       	rjmp	.+248    	; 0x4488 <receiveCommandHandler+0x11a>
    4390:	24 30       	cpi	r18, 0x04	; 4
    4392:	38 f4       	brcc	.+14     	; 0x43a2 <receiveCommandHandler+0x34>
    4394:	21 30       	cpi	r18, 0x01	; 1
    4396:	09 f4       	brne	.+2      	; 0x439a <receiveCommandHandler+0x2c>
    4398:	65 c0       	rjmp	.+202    	; 0x4464 <receiveCommandHandler+0xf6>
    439a:	22 30       	cpi	r18, 0x02	; 2
    439c:	08 f0       	brcs	.+2      	; 0x43a0 <receiveCommandHandler+0x32>
    439e:	6a c0       	rjmp	.+212    	; 0x4474 <receiveCommandHandler+0x106>
    43a0:	5e c0       	rjmp	.+188    	; 0x445e <receiveCommandHandler+0xf0>
    43a2:	25 30       	cpi	r18, 0x05	; 5
    43a4:	09 f4       	brne	.+2      	; 0x43a8 <receiveCommandHandler+0x3a>
    43a6:	99 c0       	rjmp	.+306    	; 0x44da <receiveCommandHandler+0x16c>
    43a8:	81 81       	ldd	r24, Z+1	; 0x01
    43aa:	32 81       	ldd	r19, Z+2	; 0x02
    43ac:	26 30       	cpi	r18, 0x06	; 6
    43ae:	08 f0       	brcs	.+2      	; 0x43b2 <receiveCommandHandler+0x44>
    43b0:	97 c0       	rjmp	.+302    	; 0x44e0 <receiveCommandHandler+0x172>
    43b2:	70 c0       	rjmp	.+224    	; 0x4494 <receiveCommandHandler+0x126>
    43b4:	2b 30       	cpi	r18, 0x0B	; 11
    43b6:	09 f4       	brne	.+2      	; 0x43ba <receiveCommandHandler+0x4c>
    43b8:	b9 c0       	rjmp	.+370    	; 0x452c <receiveCommandHandler+0x1be>
    43ba:	2c 30       	cpi	r18, 0x0C	; 12
    43bc:	48 f4       	brcc	.+18     	; 0x43d0 <receiveCommandHandler+0x62>
    43be:	29 30       	cpi	r18, 0x09	; 9
    43c0:	09 f4       	brne	.+2      	; 0x43c4 <receiveCommandHandler+0x56>
    43c2:	a4 c0       	rjmp	.+328    	; 0x450c <receiveCommandHandler+0x19e>
    43c4:	81 81       	ldd	r24, Z+1	; 0x01
    43c6:	32 81       	ldd	r19, Z+2	; 0x02
    43c8:	2a 30       	cpi	r18, 0x0A	; 10
    43ca:	08 f0       	brcs	.+2      	; 0x43ce <receiveCommandHandler+0x60>
    43cc:	a8 c0       	rjmp	.+336    	; 0x451e <receiveCommandHandler+0x1b0>
    43ce:	97 c0       	rjmp	.+302    	; 0x44fe <receiveCommandHandler+0x190>
    43d0:	2e 30       	cpi	r18, 0x0E	; 14
    43d2:	09 f4       	brne	.+2      	; 0x43d6 <receiveCommandHandler+0x68>
    43d4:	ee c0       	rjmp	.+476    	; 0x45b2 <receiveCommandHandler+0x244>
    43d6:	2f 30       	cpi	r18, 0x0F	; 15
    43d8:	20 f4       	brcc	.+8      	; 0x43e2 <receiveCommandHandler+0x74>
    43da:	2d 30       	cpi	r18, 0x0D	; 13
    43dc:	09 f0       	breq	.+2      	; 0x43e0 <receiveCommandHandler+0x72>
    43de:	b6 c1       	rjmp	.+876    	; 0x474c <receiveCommandHandler+0x3de>
    43e0:	e0 c0       	rjmp	.+448    	; 0x45a2 <receiveCommandHandler+0x234>
    43e2:	2f 30       	cpi	r18, 0x0F	; 15
    43e4:	09 f4       	brne	.+2      	; 0x43e8 <receiveCommandHandler+0x7a>
    43e6:	ed c0       	rjmp	.+474    	; 0x45c2 <receiveCommandHandler+0x254>
    43e8:	20 31       	cpi	r18, 0x10	; 16
    43ea:	09 f0       	breq	.+2      	; 0x43ee <receiveCommandHandler+0x80>
    43ec:	af c1       	rjmp	.+862    	; 0x474c <receiveCommandHandler+0x3de>
    43ee:	f5 c0       	rjmp	.+490    	; 0x45da <receiveCommandHandler+0x26c>
    43f0:	2b 31       	cpi	r18, 0x1B	; 27
    43f2:	09 f4       	brne	.+2      	; 0x43f6 <receiveCommandHandler+0x88>
    43f4:	88 c1       	rjmp	.+784    	; 0x4706 <receiveCommandHandler+0x398>
    43f6:	2c 31       	cpi	r18, 0x1C	; 28
    43f8:	b0 f4       	brcc	.+44     	; 0x4426 <receiveCommandHandler+0xb8>
    43fa:	27 31       	cpi	r18, 0x17	; 23
    43fc:	09 f4       	brne	.+2      	; 0x4400 <receiveCommandHandler+0x92>
    43fe:	71 c1       	rjmp	.+738    	; 0x46e2 <receiveCommandHandler+0x374>
    4400:	28 31       	cpi	r18, 0x18	; 24
    4402:	50 f4       	brcc	.+20     	; 0x4418 <receiveCommandHandler+0xaa>
    4404:	24 31       	cpi	r18, 0x14	; 20
    4406:	09 f4       	brne	.+2      	; 0x440a <receiveCommandHandler+0x9c>
    4408:	5c c1       	rjmp	.+696    	; 0x46c2 <receiveCommandHandler+0x354>
    440a:	24 31       	cpi	r18, 0x14	; 20
    440c:	08 f4       	brcc	.+2      	; 0x4410 <receiveCommandHandler+0xa2>
    440e:	55 c1       	rjmp	.+682    	; 0x46ba <receiveCommandHandler+0x34c>
    4410:	25 31       	cpi	r18, 0x15	; 21
    4412:	09 f0       	breq	.+2      	; 0x4416 <receiveCommandHandler+0xa8>
    4414:	9b c1       	rjmp	.+822    	; 0x474c <receiveCommandHandler+0x3de>
    4416:	5d c1       	rjmp	.+698    	; 0x46d2 <receiveCommandHandler+0x364>
    4418:	29 31       	cpi	r18, 0x19	; 25
    441a:	09 f4       	brne	.+2      	; 0x441e <receiveCommandHandler+0xb0>
    441c:	6d c1       	rjmp	.+730    	; 0x46f8 <receiveCommandHandler+0x38a>
    441e:	2a 31       	cpi	r18, 0x1A	; 26
    4420:	08 f0       	brcs	.+2      	; 0x4424 <receiveCommandHandler+0xb6>
    4422:	6e c1       	rjmp	.+732    	; 0x4700 <receiveCommandHandler+0x392>
    4424:	61 c1       	rjmp	.+706    	; 0x46e8 <receiveCommandHandler+0x37a>
    4426:	2b 3f       	cpi	r18, 0xFB	; 251
    4428:	09 f4       	brne	.+2      	; 0x442c <receiveCommandHandler+0xbe>
    442a:	7e c1       	rjmp	.+764    	; 0x4728 <receiveCommandHandler+0x3ba>
    442c:	2c 3f       	cpi	r18, 0xFC	; 252
    442e:	50 f4       	brcc	.+20     	; 0x4444 <receiveCommandHandler+0xd6>
    4430:	29 3f       	cpi	r18, 0xF9	; 249
    4432:	09 f4       	brne	.+2      	; 0x4436 <receiveCommandHandler+0xc8>
    4434:	73 c1       	rjmp	.+742    	; 0x471c <receiveCommandHandler+0x3ae>
    4436:	2a 3f       	cpi	r18, 0xFA	; 250
    4438:	08 f0       	brcs	.+2      	; 0x443c <receiveCommandHandler+0xce>
    443a:	73 c1       	rjmp	.+742    	; 0x4722 <receiveCommandHandler+0x3b4>
    443c:	27 3f       	cpi	r18, 0xF7	; 247
    443e:	09 f0       	breq	.+2      	; 0x4442 <receiveCommandHandler+0xd4>
    4440:	85 c1       	rjmp	.+778    	; 0x474c <receiveCommandHandler+0x3de>
    4442:	69 c1       	rjmp	.+722    	; 0x4716 <receiveCommandHandler+0x3a8>
    4444:	2d 3f       	cpi	r18, 0xFD	; 253
    4446:	09 f4       	brne	.+2      	; 0x444a <receiveCommandHandler+0xdc>
    4448:	79 c1       	rjmp	.+754    	; 0x473c <receiveCommandHandler+0x3ce>
    444a:	2d 3f       	cpi	r18, 0xFD	; 253
    444c:	08 f4       	brcc	.+2      	; 0x4450 <receiveCommandHandler+0xe2>
    444e:	6f c1       	rjmp	.+734    	; 0x472e <receiveCommandHandler+0x3c0>
    4450:	2e 3f       	cpi	r18, 0xFE	; 254
    4452:	09 f4       	brne	.+2      	; 0x4456 <receiveCommandHandler+0xe8>
    4454:	76 c1       	rjmp	.+748    	; 0x4742 <receiveCommandHandler+0x3d4>
    4456:	2f 3f       	cpi	r18, 0xFF	; 255
    4458:	09 f0       	breq	.+2      	; 0x445c <receiveCommandHandler+0xee>
    445a:	78 c1       	rjmp	.+752    	; 0x474c <receiveCommandHandler+0x3de>
    445c:	75 c1       	rjmp	.+746    	; 0x4748 <receiveCommandHandler+0x3da>
	{
		case 0x00:
			//verify we have received the right data
			//if(receiveDataLength == 2)
			{
				eeprom_write_byte(&EEflightPhase, recieveData[1]);
    445e:	84 e3       	ldi	r24, 0x34	; 52
    4460:	90 e0       	ldi	r25, 0x00	; 0
    4462:	14 c0       	rjmp	.+40     	; 0x448c <receiveCommandHandler+0x11e>
		case 0x01:
			//ballast altitude target
			//if(receiveDataLength == 3)
			{
				uint16_t holder = ((uint16_t)recieveData[1]<<8) + recieveData[2];
				eeprom_write_word(&EEballastTargetAltitude, holder);
    4464:	71 81       	ldd	r23, Z+1	; 0x01
    4466:	60 e0       	ldi	r22, 0x00	; 0
    4468:	82 81       	ldd	r24, Z+2	; 0x02
    446a:	68 0f       	add	r22, r24
    446c:	71 1d       	adc	r23, r1
    446e:	85 e0       	ldi	r24, 0x05	; 5
    4470:	90 e0       	ldi	r25, 0x00	; 0
    4472:	07 c0       	rjmp	.+14     	; 0x4482 <receiveCommandHandler+0x114>
		case 0x02:
			//Ballast Positive Vertical Speed Target
			//if(receiveDataLength == 3)
			{
				int16_t holder = ((uint16_t)recieveData[1]<<8) + recieveData[2];
				eeprom_write_word(&EEballastTargetPositiveVSpeed, holder);
    4474:	71 81       	ldd	r23, Z+1	; 0x01
    4476:	60 e0       	ldi	r22, 0x00	; 0
    4478:	82 81       	ldd	r24, Z+2	; 0x02
    447a:	68 0f       	add	r22, r24
    447c:	71 1d       	adc	r23, r1
    447e:	87 e0       	ldi	r24, 0x07	; 7
    4480:	90 e0       	ldi	r25, 0x00	; 0
    4482:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__eewr_word_m324p>
    4486:	62 c1       	rjmp	.+708    	; 0x474c <receiveCommandHandler+0x3de>
			break;
		case 0x03:
			//set Over Ocean Flag
			//if(receiveDataLength == 2)
			{
				eeprom_write_byte(&EEoverOceanFlag, recieveData[1]);
    4488:	82 e1       	ldi	r24, 0x12	; 18
    448a:	90 e0       	ldi	r25, 0x00	; 0
    448c:	61 81       	ldd	r22, Z+1	; 0x01
    448e:	0e 94 24 3a 	call	0x7448	; 0x7448 <__eewr_byte_m324p>
    4492:	5c c1       	rjmp	.+696    	; 0x474c <receiveCommandHandler+0x3de>
		case 0x04:
			//set Sunrise Anticipation Time
			//if(receiveDataLength == 5)
			{
				uint32_t holder = ((uint32_t)recieveData[0] << 24) + ((uint32_t)recieveData[1] << 16) + ((uint32_t)recieveData[2] << 8) + recieveData[3];
				eeprom_write_dword(&EEsunriseAnticipation, holder);
    4494:	43 81       	ldd	r20, Z+3	; 0x03
    4496:	50 e0       	ldi	r21, 0x00	; 0
    4498:	60 e0       	ldi	r22, 0x00	; 0
    449a:	70 e0       	ldi	r23, 0x00	; 0
    449c:	40 50       	subi	r20, 0x00	; 0
    449e:	50 40       	sbci	r21, 0x00	; 0
    44a0:	60 40       	sbci	r22, 0x00	; 0
    44a2:	7c 4f       	sbci	r23, 0xFC	; 252
    44a4:	90 e0       	ldi	r25, 0x00	; 0
    44a6:	a0 e0       	ldi	r26, 0x00	; 0
    44a8:	b0 e0       	ldi	r27, 0x00	; 0
    44aa:	dc 01       	movw	r26, r24
    44ac:	99 27       	eor	r25, r25
    44ae:	88 27       	eor	r24, r24
    44b0:	48 0f       	add	r20, r24
    44b2:	59 1f       	adc	r21, r25
    44b4:	6a 1f       	adc	r22, r26
    44b6:	7b 1f       	adc	r23, r27
    44b8:	83 2f       	mov	r24, r19
    44ba:	90 e0       	ldi	r25, 0x00	; 0
    44bc:	a0 e0       	ldi	r26, 0x00	; 0
    44be:	b0 e0       	ldi	r27, 0x00	; 0
    44c0:	ba 2f       	mov	r27, r26
    44c2:	a9 2f       	mov	r26, r25
    44c4:	98 2f       	mov	r25, r24
    44c6:	88 27       	eor	r24, r24
    44c8:	48 0f       	add	r20, r24
    44ca:	59 1f       	adc	r21, r25
    44cc:	6a 1f       	adc	r22, r26
    44ce:	7b 1f       	adc	r23, r27
    44d0:	84 e1       	ldi	r24, 0x14	; 20
    44d2:	90 e0       	ldi	r25, 0x00	; 0
    44d4:	0e 94 32 3a 	call	0x7464	; 0x7464 <__eewr_dword_m324p>
    44d8:	39 c1       	rjmp	.+626    	; 0x474c <receiveCommandHandler+0x3de>
			break;
		case 0x05:
			//set Night Temperature Forecast
			//if(receiveDataLength == 2)
			{
				eeprom_write_byte(&EEnightTemperatureForecast, recieveData[1]);
    44da:	83 e1       	ldi	r24, 0x13	; 19
    44dc:	90 e0       	ldi	r25, 0x00	; 0
    44de:	d6 cf       	rjmp	.-84     	; 0x448c <receiveCommandHandler+0x11e>
		case 0x06:
			//set Data Sample Interval
			//if(receiveDataLength == 3)
			{
				uint16_t holder = ((uint16_t)recieveData[1]<<8) + recieveData[2];
				eeprom_write_word(&EEdataCollectionInterval, holder);
    44e0:	78 2f       	mov	r23, r24
    44e2:	60 e0       	ldi	r22, 0x00	; 0
    44e4:	63 0f       	add	r22, r19
    44e6:	71 1d       	adc	r23, r1
    44e8:	8b e1       	ldi	r24, 0x1B	; 27
    44ea:	90 e0       	ldi	r25, 0x00	; 0
    44ec:	ca cf       	rjmp	.-108    	; 0x4482 <receiveCommandHandler+0x114>
		case 0x07:
			//set Data Transmit Interval
			//if(receiveDataLength == 3)
			{
				uint16_t holder = ((uint16_t)recieveData[1]<<8) + recieveData[2];
				eeprom_write_word(&EEdataTransmitInterval, holder);
    44ee:	71 81       	ldd	r23, Z+1	; 0x01
    44f0:	60 e0       	ldi	r22, 0x00	; 0
    44f2:	82 81       	ldd	r24, Z+2	; 0x02
    44f4:	68 0f       	add	r22, r24
    44f6:	71 1d       	adc	r23, r1
    44f8:	8d e1       	ldi	r24, 0x1D	; 29
    44fa:	90 e0       	ldi	r25, 0x00	; 0
    44fc:	c2 cf       	rjmp	.-124    	; 0x4482 <receiveCommandHandler+0x114>
		case 0x08:
			//set Predefined Bitmask Select
			//if(receiveDataLength == 3)
			{
				uint16_t holder = ((uint16_t)recieveData[1]<<8) + recieveData[2];
				eeprom_write_word(&EEcurrentTelemetryVersion, holder);
    44fe:	78 2f       	mov	r23, r24
    4500:	60 e0       	ldi	r22, 0x00	; 0
    4502:	63 0f       	add	r22, r19
    4504:	71 1d       	adc	r23, r1
    4506:	81 e4       	ldi	r24, 0x41	; 65
    4508:	90 e0       	ldi	r25, 0x00	; 0
    450a:	bb cf       	rjmp	.-138    	; 0x4482 <receiveCommandHandler+0x114>
			break;
		case 0x09:
			//set Custom Bitmask Select
			//if(receiveDataLength == 13)
			{
				eeprom_write_block((uint16_t*)recieveData[1], &EEcurrentTelemetryBitmap, sizeof(uint32_t)*3);
    450c:	81 81       	ldd	r24, Z+1	; 0x01
    450e:	90 e0       	ldi	r25, 0x00	; 0
    4510:	65 e3       	ldi	r22, 0x35	; 53
    4512:	70 e0       	ldi	r23, 0x00	; 0
    4514:	4c e0       	ldi	r20, 0x0C	; 12
    4516:	50 e0       	ldi	r21, 0x00	; 0
    4518:	0e 94 1a 3a 	call	0x7434	; 0x7434 <__eewr_block_m324p>
    451c:	17 c1       	rjmp	.+558    	; 0x474c <receiveCommandHandler+0x3de>
		case 0x0A:
			//set Max Allowable TX Interval
			//if(receiveDataLength == 3)
			{
				uint16_t holder = ((uint16_t)recieveData[1] << 8) + recieveData[2];
				eeprom_write_word(&EEmaxAllowableTXInterval, holder);
    451e:	78 2f       	mov	r23, r24
    4520:	60 e0       	ldi	r22, 0x00	; 0
    4522:	63 0f       	add	r22, r19
    4524:	71 1d       	adc	r23, r1
    4526:	88 e1       	ldi	r24, 0x18	; 24
    4528:	90 e0       	ldi	r25, 0x00	; 0
    452a:	ab cf       	rjmp	.-170    	; 0x4482 <receiveCommandHandler+0x114>
		case 0x0B:
			//set Battery Heater Setpoint
			//if(receiveDataLength == 2)
			{
				uint8_t error;
				eeprom_write_byte(&EEbatteryHeaterSetpoint, recieveData[1]);
    452c:	8a e1       	ldi	r24, 0x1A	; 26
    452e:	90 e0       	ldi	r25, 0x00	; 0
    4530:	61 81       	ldd	r22, Z+1	; 0x01
    4532:	0e 94 24 3a 	call	0x7448	; 0x7448 <__eewr_byte_m324p>
				error |= setTMP101Thermo(TMP101BH, set12bit2scomp(eeprom_read_byte(&EEbatteryHeaterSetpoint))*16, 0);
    4536:	8a e1       	ldi	r24, 0x1A	; 26
    4538:	90 e0       	ldi	r25, 0x00	; 0
    453a:	0e 94 06 3a 	call	0x740c	; 0x740c <__eerd_byte_m324p>
    453e:	90 e0       	ldi	r25, 0x00	; 0
    4540:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <set12bit2scomp>
    4544:	bc 01       	movw	r22, r24
    4546:	84 e0       	ldi	r24, 0x04	; 4
    4548:	66 0f       	add	r22, r22
    454a:	77 1f       	adc	r23, r23
    454c:	8a 95       	dec	r24
    454e:	e1 f7       	brne	.-8      	; 0x4548 <receiveCommandHandler+0x1da>
    4550:	82 e9       	ldi	r24, 0x92	; 146
    4552:	40 e0       	ldi	r20, 0x00	; 0
    4554:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <setTMP101Thermo>
    4558:	18 2f       	mov	r17, r24
				error |= setTMP101Thermo(TMP101BH, set12bit2scomp(eeprom_read_byte(&EEbatteryHeaterSetpoint))*16+32, 1);
    455a:	8a e1       	ldi	r24, 0x1A	; 26
    455c:	90 e0       	ldi	r25, 0x00	; 0
    455e:	0e 94 06 3a 	call	0x740c	; 0x740c <__eerd_byte_m324p>
    4562:	90 e0       	ldi	r25, 0x00	; 0
    4564:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <set12bit2scomp>
    4568:	bc 01       	movw	r22, r24
    456a:	6e 5f       	subi	r22, 0xFE	; 254
    456c:	7f 4f       	sbci	r23, 0xFF	; 255
    456e:	04 e0       	ldi	r16, 0x04	; 4
    4570:	66 0f       	add	r22, r22
    4572:	77 1f       	adc	r23, r23
    4574:	0a 95       	dec	r16
    4576:	e1 f7       	brne	.-8      	; 0x4570 <receiveCommandHandler+0x202>
    4578:	82 e9       	ldi	r24, 0x92	; 146
    457a:	41 e0       	ldi	r20, 0x01	; 1
    457c:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <setTMP101Thermo>
				#ifdef GSPDEBUG
					if(error != 0)
    4580:	18 2b       	or	r17, r24
    4582:	09 f4       	brne	.+2      	; 0x4586 <receiveCommandHandler+0x218>
    4584:	e3 c0       	rjmp	.+454    	; 0x474c <receiveCommandHandler+0x3de>
					{
						lprintf_P(PSTR("Error Setting thermometer\n"));
    4586:	00 d0       	rcall	.+0      	; 0x4588 <receiveCommandHandler+0x21a>
    4588:	81 ee       	ldi	r24, 0xE1	; 225
    458a:	93 e0       	ldi	r25, 0x03	; 3
    458c:	ad b7       	in	r26, 0x3d	; 61
    458e:	be b7       	in	r27, 0x3e	; 62
    4590:	12 96       	adiw	r26, 0x02	; 2
    4592:	9c 93       	st	X, r25
    4594:	8e 93       	st	-X, r24
    4596:	11 97       	sbiw	r26, 0x01	; 1
    4598:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>
    459c:	0f 90       	pop	r0
    459e:	0f 90       	pop	r0
    45a0:	d5 c0       	rjmp	.+426    	; 0x474c <receiveCommandHandler+0x3de>
			break;
		case 0x0D:
			//if(receiveDataLength == 3)
			{
				uint16_t holder = ((uint16_t)recieveData[1] << 8) + recieveData[2];
				eeprom_write_word(&EEballastSafetyAltThresh, holder);
    45a2:	71 81       	ldd	r23, Z+1	; 0x01
    45a4:	60 e0       	ldi	r22, 0x00	; 0
    45a6:	82 81       	ldd	r24, Z+2	; 0x02
    45a8:	68 0f       	add	r22, r24
    45aa:	71 1d       	adc	r23, r1
    45ac:	8f e0       	ldi	r24, 0x0F	; 15
    45ae:	90 e0       	ldi	r25, 0x00	; 0
    45b0:	68 cf       	rjmp	.-304    	; 0x4482 <receiveCommandHandler+0x114>
		case 0x0E:
			//set HF Transmit Interval
			//if(receiveDataLength == 3)
			{
				uint16_t holder = ((uint16_t)recieveData[1] << 8) + recieveData[2];
				eeprom_write_word(&EEhfDataTransmitInterval, holder);
    45b2:	71 81       	ldd	r23, Z+1	; 0x01
    45b4:	60 e0       	ldi	r22, 0x00	; 0
    45b6:	82 81       	ldd	r24, Z+2	; 0x02
    45b8:	68 0f       	add	r22, r24
    45ba:	71 1d       	adc	r23, r1
    45bc:	81 e2       	ldi	r24, 0x21	; 33
    45be:	90 e0       	ldi	r25, 0x00	; 0
    45c0:	60 cf       	rjmp	.-320    	; 0x4482 <receiveCommandHandler+0x114>
			}
			break;
		case 0x0F:
			//if(receiveDataLength == 1)
			{
				cutdownStatus= 1;
    45c2:	81 e0       	ldi	r24, 0x01	; 1
    45c4:	80 93 2d 03 	sts	0x032D, r24
				//enable rapid hf xmit
				rapidHFEnable = 1;
    45c8:	80 93 2e 03 	sts	0x032E, r24
				//schedule rapid hf xmit
				scheduleQueueAdd(&rapidHFXmit, now());
    45cc:	0e 94 16 13 	call	0x262c	; 0x262c <now>
    45d0:	ab 01       	movw	r20, r22
    45d2:	bc 01       	movw	r22, r24
    45d4:	85 ef       	ldi	r24, 0xF5	; 245
    45d6:	93 e1       	ldi	r25, 0x13	; 19
    45d8:	21 c0       	rjmp	.+66     	; 0x461c <receiveCommandHandler+0x2ae>
		case 0x10:
			//if(receiveDataLength == 5)
			{
				//It Looks Like You're trying to Schedule a cutdown!
				uint32_t time = ((uint32_t)recieveData[0] << 24) + ((uint32_t)recieveData[1] << 16) + ((uint32_t)recieveData[2] << 8) + recieveData[3];
				scheduleQueueAdd(&timedCutdown, time);
    45da:	43 81       	ldd	r20, Z+3	; 0x03
    45dc:	50 e0       	ldi	r21, 0x00	; 0
    45de:	60 e0       	ldi	r22, 0x00	; 0
    45e0:	70 e0       	ldi	r23, 0x00	; 0
    45e2:	40 50       	subi	r20, 0x00	; 0
    45e4:	50 40       	sbci	r21, 0x00	; 0
    45e6:	60 40       	sbci	r22, 0x00	; 0
    45e8:	70 4f       	sbci	r23, 0xF0	; 240
    45ea:	81 81       	ldd	r24, Z+1	; 0x01
    45ec:	90 e0       	ldi	r25, 0x00	; 0
    45ee:	a0 e0       	ldi	r26, 0x00	; 0
    45f0:	b0 e0       	ldi	r27, 0x00	; 0
    45f2:	dc 01       	movw	r26, r24
    45f4:	99 27       	eor	r25, r25
    45f6:	88 27       	eor	r24, r24
    45f8:	48 0f       	add	r20, r24
    45fa:	59 1f       	adc	r21, r25
    45fc:	6a 1f       	adc	r22, r26
    45fe:	7b 1f       	adc	r23, r27
    4600:	82 81       	ldd	r24, Z+2	; 0x02
    4602:	90 e0       	ldi	r25, 0x00	; 0
    4604:	a0 e0       	ldi	r26, 0x00	; 0
    4606:	b0 e0       	ldi	r27, 0x00	; 0
    4608:	ba 2f       	mov	r27, r26
    460a:	a9 2f       	mov	r26, r25
    460c:	98 2f       	mov	r25, r24
    460e:	88 27       	eor	r24, r24
    4610:	48 0f       	add	r20, r24
    4612:	59 1f       	adc	r21, r25
    4614:	6a 1f       	adc	r22, r26
    4616:	7b 1f       	adc	r23, r27
    4618:	8d eb       	ldi	r24, 0xBD	; 189
    461a:	91 e1       	ldi	r25, 0x11	; 17
    461c:	0e 94 47 2c 	call	0x588e	; 0x588e <scheduleQueueAdd>
    4620:	95 c0       	rjmp	.+298    	; 0x474c <receiveCommandHandler+0x3de>
				//Send Ballast Controller the ballast command
			}
			break;
		case 0x12:
			//set Disarm Auto Ballast
			lprintf_P(PSTR("bdis\n"));
    4622:	00 d0       	rcall	.+0      	; 0x4624 <receiveCommandHandler+0x2b6>
    4624:	8b ed       	ldi	r24, 0xDB	; 219
    4626:	93 e0       	ldi	r25, 0x03	; 3
    4628:	ed b7       	in	r30, 0x3d	; 61
    462a:	fe b7       	in	r31, 0x3e	; 62
    462c:	92 83       	std	Z+2, r25	; 0x02
    462e:	81 83       	std	Z+1, r24	; 0x01
    4630:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>
			temp = eeprom_read_byte(&EEautoBallastDisable);
    4634:	0f 90       	pop	r0
    4636:	0f 90       	pop	r0
    4638:	01 e1       	ldi	r16, 0x11	; 17
    463a:	10 e0       	ldi	r17, 0x00	; 0
    463c:	c8 01       	movw	r24, r16
    463e:	0e 94 06 3a 	call	0x740c	; 0x740c <__eerd_byte_m324p>
            lprintf("Vb: %d\n", temp);
    4642:	00 d0       	rcall	.+0      	; 0x4644 <receiveCommandHandler+0x2d6>
    4644:	00 d0       	rcall	.+0      	; 0x4646 <receiveCommandHandler+0x2d8>
    4646:	ed b7       	in	r30, 0x3d	; 61
    4648:	fe b7       	in	r31, 0x3e	; 62
    464a:	31 96       	adiw	r30, 0x01	; 1
    464c:	20 ef       	ldi	r18, 0xF0	; 240
    464e:	31 e0       	ldi	r19, 0x01	; 1
    4650:	ad b7       	in	r26, 0x3d	; 61
    4652:	be b7       	in	r27, 0x3e	; 62
    4654:	12 96       	adiw	r26, 0x02	; 2
    4656:	3c 93       	st	X, r19
    4658:	2e 93       	st	-X, r18
    465a:	11 97       	sbiw	r26, 0x01	; 1
    465c:	82 83       	std	Z+2, r24	; 0x02
    465e:	13 82       	std	Z+3, r1	; 0x03
    4660:	0e 94 30 12 	call	0x2460	; 0x2460 <lprintf>
			lprintf_P(PSTR("bptr %p\n"), &EEautoBallastDisable);
    4664:	82 ed       	ldi	r24, 0xD2	; 210
    4666:	93 e0       	ldi	r25, 0x03	; 3
    4668:	ed b7       	in	r30, 0x3d	; 61
    466a:	fe b7       	in	r31, 0x3e	; 62
    466c:	92 83       	std	Z+2, r25	; 0x02
    466e:	81 83       	std	Z+1, r24	; 0x01
    4670:	14 83       	std	Z+4, r17	; 0x04
    4672:	03 83       	std	Z+3, r16	; 0x03
    4674:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>
            eeprom_write_byte(&EEautoBallastDisable, 1);
    4678:	0f 90       	pop	r0
    467a:	0f 90       	pop	r0
    467c:	0f 90       	pop	r0
    467e:	0f 90       	pop	r0
    4680:	c8 01       	movw	r24, r16
    4682:	61 e0       	ldi	r22, 0x01	; 1
    4684:	0e 94 24 3a 	call	0x7448	; 0x7448 <__eewr_byte_m324p>
            temp = eeprom_read_byte(&EEautoBallastDisable);
    4688:	c8 01       	movw	r24, r16
    468a:	0e 94 06 3a 	call	0x740c	; 0x740c <__eerd_byte_m324p>
            lprintf("V: %d\n", temp);
    468e:	00 d0       	rcall	.+0      	; 0x4690 <receiveCommandHandler+0x322>
    4690:	00 d0       	rcall	.+0      	; 0x4692 <receiveCommandHandler+0x324>
    4692:	ed b7       	in	r30, 0x3d	; 61
    4694:	fe b7       	in	r31, 0x3e	; 62
    4696:	31 96       	adiw	r30, 0x01	; 1
    4698:	28 ef       	ldi	r18, 0xF8	; 248
    469a:	31 e0       	ldi	r19, 0x01	; 1
    469c:	ad b7       	in	r26, 0x3d	; 61
    469e:	be b7       	in	r27, 0x3e	; 62
    46a0:	12 96       	adiw	r26, 0x02	; 2
    46a2:	3c 93       	st	X, r19
    46a4:	2e 93       	st	-X, r18
    46a6:	11 97       	sbiw	r26, 0x01	; 1
    46a8:	82 83       	std	Z+2, r24	; 0x02
    46aa:	13 82       	std	Z+3, r1	; 0x03
    46ac:	0e 94 30 12 	call	0x2460	; 0x2460 <lprintf>
    46b0:	0f 90       	pop	r0
    46b2:	0f 90       	pop	r0
    46b4:	0f 90       	pop	r0
    46b6:	0f 90       	pop	r0
    46b8:	49 c0       	rjmp	.+146    	; 0x474c <receiveCommandHandler+0x3de>
			break;
		case 0x13:
			//if(receiveDataLength == 1)
			{
				eeprom_write_byte(&EEautoBallastDisable, 0);
    46ba:	81 e1       	ldi	r24, 0x11	; 17
    46bc:	90 e0       	ldi	r25, 0x00	; 0
    46be:	60 e0       	ldi	r22, 0x00	; 0
    46c0:	e6 ce       	rjmp	.-564    	; 0x448e <receiveCommandHandler+0x120>
		case 0x14:
			//set mayday vspeed threshold
			//if(receiveDataLength == 3)
			{
				uint16_t holder = ((uint16_t)recieveData[1] << 8) + recieveData[2];
				eeprom_write_word(&EEmaydayVSpeed, holder);
    46c2:	71 81       	ldd	r23, Z+1	; 0x01
    46c4:	60 e0       	ldi	r22, 0x00	; 0
    46c6:	82 81       	ldd	r24, Z+2	; 0x02
    46c8:	68 0f       	add	r22, r24
    46ca:	71 1d       	adc	r23, r1
    46cc:	8d e0       	ldi	r24, 0x0D	; 13
    46ce:	90 e0       	ldi	r25, 0x00	; 0
    46d0:	d8 ce       	rjmp	.-592    	; 0x4482 <receiveCommandHandler+0x114>
		case 0x15:
			//set mayday altitude Thresh
			//if(receiveDataLength == 3)
			{
				uint16_t holder = ((uint16_t)recieveData[1] << 8) + recieveData[2];
				eeprom_write_word(&EEmaydayAltitude, holder);
    46d2:	71 81       	ldd	r23, Z+1	; 0x01
    46d4:	60 e0       	ldi	r22, 0x00	; 0
    46d6:	82 81       	ldd	r24, Z+2	; 0x02
    46d8:	68 0f       	add	r22, r24
    46da:	71 1d       	adc	r23, r1
    46dc:	8b e0       	ldi	r24, 0x0B	; 11
    46de:	90 e0       	ldi	r25, 0x00	; 0
    46e0:	d0 ce       	rjmp	.-608    	; 0x4482 <receiveCommandHandler+0x114>
			break;
		case 0x17:
			//set Set Rapid HF Transmit Period
			//if(receiveDataLength == 2)
			{
				eeprom_write_byte(&EEhfRapidTransmit, recieveData[1]);
    46e2:	83 e2       	ldi	r24, 0x23	; 35
    46e4:	90 e0       	ldi	r25, 0x00	; 0
    46e6:	d2 ce       	rjmp	.-604    	; 0x448c <receiveCommandHandler+0x11e>
			break;
		case 0x18:
			//if(receiveDataLength == 3)
			{
				int16_t holder = ((uint16_t)recieveData[1]<<8) + recieveData[2];
				eeprom_write_word(&EEballastTargetNegativeVSpeed, holder);
    46e8:	71 81       	ldd	r23, Z+1	; 0x01
    46ea:	60 e0       	ldi	r22, 0x00	; 0
    46ec:	82 81       	ldd	r24, Z+2	; 0x02
    46ee:	68 0f       	add	r22, r24
    46f0:	71 1d       	adc	r23, r1
    46f2:	89 e0       	ldi	r24, 0x09	; 9
    46f4:	90 e0       	ldi	r25, 0x00	; 0
    46f6:	c5 ce       	rjmp	.-630    	; 0x4482 <receiveCommandHandler+0x114>
			}
			break;
		case 0x19:
			enableReports = 1;
    46f8:	81 e0       	ldi	r24, 0x01	; 1
    46fa:	80 93 4e 02 	sts	0x024E, r24
    46fe:	26 c0       	rjmp	.+76     	; 0x474c <receiveCommandHandler+0x3de>
			break;
		case 0x1A:
			enableReports = 0;
    4700:	10 92 4e 02 	sts	0x024E, r1
    4704:	23 c0       	rjmp	.+70     	; 0x474c <receiveCommandHandler+0x3de>
			break;
        case 0x1B:
            {
                int16_t holder = ((uint16_t)recieveData[1]<<8) + recieveData[2];
                eeprom_write_word(&EEshortDataTransmitInterval, holder);
    4706:	71 81       	ldd	r23, Z+1	; 0x01
    4708:	60 e0       	ldi	r22, 0x00	; 0
    470a:	82 81       	ldd	r24, Z+2	; 0x02
    470c:	68 0f       	add	r22, r24
    470e:	71 1d       	adc	r23, r1
    4710:	8f e1       	ldi	r24, 0x1F	; 31
    4712:	90 e0       	ldi	r25, 0x00	; 0
    4714:	b6 ce       	rjmp	.-660    	; 0x4482 <receiveCommandHandler+0x114>
            }
        break;
		case 0xF7:
			eeprom_write_byte(&EEEpochLock, recieveData[1]);
    4716:	80 e0       	ldi	r24, 0x00	; 0
    4718:	90 e0       	ldi	r25, 0x00	; 0
    471a:	b8 ce       	rjmp	.-656    	; 0x448c <receiveCommandHandler+0x11e>
			break;
		case 0xF8:
			dumpGPS();
			break;
		case 0xF9:
			debugBallast();
    471c:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <debugBallast>
    4720:	15 c0       	rjmp	.+42     	; 0x474c <receiveCommandHandler+0x3de>
			break;
		case 0xFA:
			debugPrintRawStrings();
    4722:	0e 94 38 26 	call	0x4c70	; 0x4c70 <debugPrintRawStrings>
    4726:	12 c0       	rjmp	.+36     	; 0x474c <receiveCommandHandler+0x3de>
			break;
		case 0xFB:
			//lprintf_P(PSTR("Defaulting the EEPROM...\n"));
			defaultEEPROM();
    4728:	0e 94 84 25 	call	0x4b08	; 0x4b08 <defaultEEPROM>
    472c:	0f c0       	rjmp	.+30     	; 0x474c <receiveCommandHandler+0x3de>
			break;
		case 0xFC:
			collectData(0xFFFFFFFF);
    472e:	6f ef       	ldi	r22, 0xFF	; 255
    4730:	7f ef       	ldi	r23, 0xFF	; 255
    4732:	8f ef       	ldi	r24, 0xFF	; 255
    4734:	9f ef       	ldi	r25, 0xFF	; 255
    4736:	0e 94 df 18 	call	0x31be	; 0x31be <collectData>
    473a:	08 c0       	rjmp	.+16     	; 0x474c <receiveCommandHandler+0x3de>
			break;
		case 0xFD:
			dumpTemps();
    473c:	0e 94 04 18 	call	0x3008	; 0x3008 <dumpTemps>
    4740:	05 c0       	rjmp	.+10     	; 0x474c <receiveCommandHandler+0x3de>
			break;
		case 0xFE:
			bmpTest();
    4742:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <bmpTest>
    4746:	02 c0       	rjmp	.+4      	; 0x474c <receiveCommandHandler+0x3de>
			break;
		case 0xFF:
			dumpVarsToGSP();
    4748:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <dumpVarsToGSP>
			break;
	}
}
    474c:	1f 91       	pop	r17
    474e:	0f 91       	pop	r16
    4750:	08 95       	ret

00004752 <main>:
//======================



int main (void)
{
    4752:	cf 92       	push	r12
    4754:	df 92       	push	r13
    4756:	ef 92       	push	r14
    4758:	ff 92       	push	r15
    475a:	0f 93       	push	r16
    475c:	1f 93       	push	r17
    475e:	df 93       	push	r29
    4760:	cf 93       	push	r28
    4762:	cd b7       	in	r28, 0x3d	; 61
    4764:	de b7       	in	r29, 0x3e	; 62
    4766:	2f 97       	sbiw	r28, 0x0f	; 15
    4768:	0f b6       	in	r0, 0x3f	; 63
    476a:	f8 94       	cli
    476c:	de bf       	out	0x3e, r29	; 62
    476e:	0f be       	out	0x3f, r0	; 63
    4770:	cd bf       	out	0x3d, r28	; 61
	uint8_t seconds,  minutes, hours, days;
	uint8_t error;

	ioinit(); //Setup IO pins and defaults
    4772:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <ioinit>
	i2cSetTheDamnTWBRMyself(10);
    4776:	8a e0       	ldi	r24, 0x0A	; 10
    4778:	0e 94 00 0c 	call	0x1800	; 0x1800 <i2cSetTheDamnTWBRMyself>

	i2cSetLocalDeviceAddr(0b00001010, 0x00, 0, 0, 0);
    477c:	8a e0       	ldi	r24, 0x0A	; 10
    477e:	60 e0       	ldi	r22, 0x00	; 0
    4780:	40 e0       	ldi	r20, 0x00	; 0
    4782:	20 e0       	ldi	r18, 0x00	; 0
    4784:	00 e0       	ldi	r16, 0x00	; 0
    4786:	0e 94 3b 0c 	call	0x1876	; 0x1876 <i2cSetLocalDeviceAddr>
	i2cSetSlaveReceiveHandler(receiveCommandHandler);
    478a:	87 eb       	ldi	r24, 0xB7	; 183
    478c:	91 e2       	ldi	r25, 0x21	; 33
    478e:	0e 94 4c 0c 	call	0x1898	; 0x1898 <i2cSetSlaveReceiveHandler>
	i2cEnableInt();
    4792:	0e 94 65 0c 	call	0x18ca	; 0x18ca <i2cEnableInt>
	sei();
    4796:	78 94       	sei
    4798:	88 e8       	ldi	r24, 0x88	; 136
    479a:	93 e1       	ldi	r25, 0x13	; 19
    479c:	2c e2       	ldi	r18, 0x2C	; 44
    479e:	31 e0       	ldi	r19, 0x01	; 1
    47a0:	f9 01       	movw	r30, r18
    47a2:	31 97       	sbiw	r30, 0x01	; 1
    47a4:	f1 f7       	brne	.-4      	; 0x47a2 <main+0x50>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47a8:	d9 f7       	brne	.-10     	; 0x47a0 <main+0x4e>

	_delay_ms(500);

	lprintf("WSB CPU Alive\n");
    47aa:	00 d0       	rcall	.+0      	; 0x47ac <main+0x5a>
    47ac:	8f ef       	ldi	r24, 0xFF	; 255
    47ae:	91 e0       	ldi	r25, 0x01	; 1
    47b0:	ad b7       	in	r26, 0x3d	; 61
    47b2:	be b7       	in	r27, 0x3e	; 62
    47b4:	12 96       	adiw	r26, 0x02	; 2
    47b6:	9c 93       	st	X, r25
    47b8:	8e 93       	st	-X, r24
    47ba:	11 97       	sbiw	r26, 0x01	; 1
    47bc:	0e 94 30 12 	call	0x2460	; 0x2460 <lprintf>

	error = getTime(&seconds, &minutes, &hours, &days);
    47c0:	0f 90       	pop	r0
    47c2:	0f 90       	pop	r0
    47c4:	ce 01       	movw	r24, r28
    47c6:	01 96       	adiw	r24, 0x01	; 1
    47c8:	be 01       	movw	r22, r28
    47ca:	6e 5f       	subi	r22, 0xFE	; 254
    47cc:	7f 4f       	sbci	r23, 0xFF	; 255
    47ce:	ae 01       	movw	r20, r28
    47d0:	4d 5f       	subi	r20, 0xFD	; 253
    47d2:	5f 4f       	sbci	r21, 0xFF	; 255
    47d4:	9e 01       	movw	r18, r28
    47d6:	2c 5f       	subi	r18, 0xFC	; 252
    47d8:	3f 4f       	sbci	r19, 0xFF	; 255
    47da:	0e 94 15 0b 	call	0x162a	; 0x162a <getTime>
	lprintf("E: %d\n", error);
    47de:	00 d0       	rcall	.+0      	; 0x47e0 <main+0x8e>
    47e0:	00 d0       	rcall	.+0      	; 0x47e2 <main+0x90>
    47e2:	ed b7       	in	r30, 0x3d	; 61
    47e4:	fe b7       	in	r31, 0x3e	; 62
    47e6:	31 96       	adiw	r30, 0x01	; 1
    47e8:	2e e0       	ldi	r18, 0x0E	; 14
    47ea:	32 e0       	ldi	r19, 0x02	; 2
    47ec:	ad b7       	in	r26, 0x3d	; 61
    47ee:	be b7       	in	r27, 0x3e	; 62
    47f0:	12 96       	adiw	r26, 0x02	; 2
    47f2:	3c 93       	st	X, r19
    47f4:	2e 93       	st	-X, r18
    47f6:	11 97       	sbiw	r26, 0x01	; 1
    47f8:	82 83       	std	Z+2, r24	; 0x02
    47fa:	13 82       	std	Z+3, r1	; 0x03
    47fc:	0e 94 30 12 	call	0x2460	; 0x2460 <lprintf>
	lprintf("S: %d M: %d H: %d D: %d\n", seconds, minutes, hours, days);
    4800:	00 d0       	rcall	.+0      	; 0x4802 <main+0xb0>
    4802:	00 d0       	rcall	.+0      	; 0x4804 <main+0xb2>
    4804:	00 d0       	rcall	.+0      	; 0x4806 <main+0xb4>
    4806:	ed b7       	in	r30, 0x3d	; 61
    4808:	fe b7       	in	r31, 0x3e	; 62
    480a:	31 96       	adiw	r30, 0x01	; 1
    480c:	85 e1       	ldi	r24, 0x15	; 21
    480e:	92 e0       	ldi	r25, 0x02	; 2
    4810:	ad b7       	in	r26, 0x3d	; 61
    4812:	be b7       	in	r27, 0x3e	; 62
    4814:	12 96       	adiw	r26, 0x02	; 2
    4816:	9c 93       	st	X, r25
    4818:	8e 93       	st	-X, r24
    481a:	11 97       	sbiw	r26, 0x01	; 1
    481c:	89 81       	ldd	r24, Y+1	; 0x01
    481e:	82 83       	std	Z+2, r24	; 0x02
    4820:	13 82       	std	Z+3, r1	; 0x03
    4822:	8a 81       	ldd	r24, Y+2	; 0x02
    4824:	84 83       	std	Z+4, r24	; 0x04
    4826:	15 82       	std	Z+5, r1	; 0x05
    4828:	8b 81       	ldd	r24, Y+3	; 0x03
    482a:	86 83       	std	Z+6, r24	; 0x06
    482c:	17 82       	std	Z+7, r1	; 0x07
    482e:	8c 81       	ldd	r24, Y+4	; 0x04
    4830:	80 87       	std	Z+8, r24	; 0x08
    4832:	11 86       	std	Z+9, r1	; 0x09
    4834:	0e 94 30 12 	call	0x2460	; 0x2460 <lprintf>

	if(eeprom_read_byte(&EEEpochLock) == 0)
    4838:	ed b7       	in	r30, 0x3d	; 61
    483a:	fe b7       	in	r31, 0x3e	; 62
    483c:	3a 96       	adiw	r30, 0x0a	; 10
    483e:	0f b6       	in	r0, 0x3f	; 63
    4840:	f8 94       	cli
    4842:	fe bf       	out	0x3e, r31	; 62
    4844:	0f be       	out	0x3f, r0	; 63
    4846:	ed bf       	out	0x3d, r30	; 61
    4848:	80 e0       	ldi	r24, 0x00	; 0
    484a:	90 e0       	ldi	r25, 0x00	; 0
    484c:	0e 94 06 3a 	call	0x740c	; 0x740c <__eerd_byte_m324p>
    4850:	88 23       	and	r24, r24
    4852:	31 f4       	brne	.+12     	; 0x4860 <main+0x10e>
	{
		#ifdef FCPUDEBUG
			lprintf_P(PSTR("Setting Epoch Start\n"));
		#endif
		writeEpochStart(seconds, minutes, hours, days);
    4854:	89 81       	ldd	r24, Y+1	; 0x01
    4856:	6a 81       	ldd	r22, Y+2	; 0x02
    4858:	4b 81       	ldd	r20, Y+3	; 0x03
    485a:	2c 81       	ldd	r18, Y+4	; 0x04
    485c:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <writeEpochStart>
	}

	lprintf("Still Alive\n");
    4860:	00 d0       	rcall	.+0      	; 0x4862 <main+0x110>
    4862:	8e e2       	ldi	r24, 0x2E	; 46
    4864:	92 e0       	ldi	r25, 0x02	; 2
    4866:	ad b7       	in	r26, 0x3d	; 61
    4868:	be b7       	in	r27, 0x3e	; 62
    486a:	12 96       	adiw	r26, 0x02	; 2
    486c:	9c 93       	st	X, r25
    486e:	8e 93       	st	-X, r24
    4870:	11 97       	sbiw	r26, 0x01	; 1
    4872:	0e 94 30 12 	call	0x2460	; 0x2460 <lprintf>

	// TMP100
	setTMP100config(TMP100FC, 0xE0);
    4876:	0f 90       	pop	r0
    4878:	0f 90       	pop	r0
    487a:	8e e9       	ldi	r24, 0x9E	; 158
    487c:	60 ee       	ldi	r22, 0xE0	; 224
    487e:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <setTMP100config>
	// TMP101 END

	// BMP085
	//long temperature = 0;
	//long pressure = 0;
	BMP085_Calibration();
    4882:	0e 94 1b 0a 	call	0x1436	; 0x1436 <BMP085_Calibration>
	// BMP085 END
	//defaultEEPROM();
	if(eeprom_read_byte(&EEEpochLock) == 0)
    4886:	80 e0       	ldi	r24, 0x00	; 0
    4888:	90 e0       	ldi	r25, 0x00	; 0
    488a:	0e 94 06 3a 	call	0x740c	; 0x740c <__eerd_byte_m324p>
    488e:	88 23       	and	r24, r24
    4890:	29 f4       	brne	.+10     	; 0x489c <main+0x14a>
	{
		defaultEEPROM();
    4892:	0e 94 84 25 	call	0x4b08	; 0x4b08 <defaultEEPROM>
        initOpenLogTest();
    4896:	0e 94 41 11 	call	0x2282	; 0x2282 <initOpenLogTest>
    489a:	02 c0       	rjmp	.+4      	; 0x48a0 <main+0x14e>
	} else {
		initOpenLogFlight();
    489c:	0e 94 85 10 	call	0x210a	; 0x210a <initOpenLogFlight>
	}


	lprintf("Still Still Alive\n");
    48a0:	00 d0       	rcall	.+0      	; 0x48a2 <main+0x150>
    48a2:	8b e3       	ldi	r24, 0x3B	; 59
    48a4:	92 e0       	ldi	r25, 0x02	; 2
    48a6:	ed b7       	in	r30, 0x3d	; 61
    48a8:	fe b7       	in	r31, 0x3e	; 62
    48aa:	92 83       	std	Z+2, r25	; 0x02
    48ac:	81 83       	std	Z+1, r24	; 0x01
    48ae:	0e 94 30 12 	call	0x2460	; 0x2460 <lprintf>
		lprintf("lat: %f lon: %f\n", testStruct.latitude, testStruct.longitude);
		lprintf("now: %ld\n", now());

	}*/

	uint32_t rnow = now();
    48b2:	0f 90       	pop	r0
    48b4:	0f 90       	pop	r0
    48b6:	0e 94 16 13 	call	0x262c	; 0x262c <now>
    48ba:	7b 01       	movw	r14, r22
    48bc:	8c 01       	movw	r16, r24
	scheduleQueueAdd(&processMonitor, rnow);
    48be:	87 ef       	ldi	r24, 0xF7	; 247
    48c0:	90 e2       	ldi	r25, 0x20	; 32
    48c2:	b8 01       	movw	r22, r16
    48c4:	a7 01       	movw	r20, r14
    48c6:	0e 94 47 2c 	call	0x588e	; 0x588e <scheduleQueueAdd>
	scheduleQueueAdd(&calculateVspeed, rnow);
    48ca:	8f ea       	ldi	r24, 0xAF	; 175
    48cc:	9d e1       	ldi	r25, 0x1D	; 29
    48ce:	b8 01       	movw	r22, r16
    48d0:	a7 01       	movw	r20, r14
    48d2:	0e 94 47 2c 	call	0x588e	; 0x588e <scheduleQueueAdd>
	scheduleQueueAdd(&collectData, rnow);
    48d6:	8f ed       	ldi	r24, 0xDF	; 223
    48d8:	98 e1       	ldi	r25, 0x18	; 24
    48da:	b8 01       	movw	r22, r16
    48dc:	a7 01       	movw	r20, r14
    48de:	0e 94 47 2c 	call	0x588e	; 0x588e <scheduleQueueAdd>
	scheduleQueueAdd(&transmitSamples, rnow);
    48e2:	8f e5       	ldi	r24, 0x5F	; 95
    48e4:	96 e1       	ldi	r25, 0x16	; 22
    48e6:	b8 01       	movw	r22, r16
    48e8:	a7 01       	movw	r20, r14
    48ea:	0e 94 47 2c 	call	0x588e	; 0x588e <scheduleQueueAdd>
	scheduleQueueAdd(&transmitShortReport, rnow);
    48ee:	8b e8       	ldi	r24, 0x8B	; 139
    48f0:	96 e1       	ldi	r25, 0x16	; 22
    48f2:	b8 01       	movw	r22, r16
    48f4:	a7 01       	movw	r20, r14
    48f6:	0e 94 47 2c 	call	0x588e	; 0x588e <scheduleQueueAdd>
	scheduleQueueAdd(&updateCommHFTelemetry, rnow);
    48fa:	82 e1       	ldi	r24, 0x12	; 18
    48fc:	94 e1       	ldi	r25, 0x14	; 20
    48fe:	b8 01       	movw	r22, r16
    4900:	a7 01       	movw	r20, r14
    4902:	0e 94 47 2c 	call	0x588e	; 0x588e <scheduleQueueAdd>
	scheduleQueueAdd(&ballastStaticTickle, rnow);
    4906:	8a e7       	ldi	r24, 0x7A	; 122
    4908:	93 e1       	ldi	r25, 0x13	; 19
    490a:	b8 01       	movw	r22, r16
    490c:	a7 01       	movw	r20, r14
    490e:	0e 94 47 2c 	call	0x588e	; 0x588e <scheduleQueueAdd>
	scheduleQueueAdd(&autoBallast, rnow);
    4912:	8d e1       	ldi	r24, 0x1D	; 29
    4914:	94 e1       	ldi	r25, 0x14	; 20
    4916:	b8 01       	movw	r22, r16
    4918:	a7 01       	movw	r20, r14
    491a:	0e 94 47 2c 	call	0x588e	; 0x588e <scheduleQueueAdd>
	scheduleQueueAdd(&flightPhaseLogic, rnow);
    491e:	8a e7       	ldi	r24, 0x7A	; 122
    4920:	95 e1       	ldi	r25, 0x15	; 21
    4922:	b8 01       	movw	r22, r16
    4924:	a7 01       	movw	r20, r14
    4926:	0e 94 47 2c 	call	0x588e	; 0x588e <scheduleQueueAdd>
		uint32_t scheduleTime;
		scheduledFunction thisFunction;
		volatile int8_t error;
		volatile uint32_t rightNow = now();

		error = scheduleQueueGetTop(&thisFunction, &scheduleTime);
    492a:	a6 e0       	ldi	r26, 0x06	; 6
    492c:	ca 2e       	mov	r12, r26
    492e:	d1 2c       	mov	r13, r1
    4930:	cc 0e       	add	r12, r28
    4932:	dd 1e       	adc	r13, r29
    4934:	f8 e0       	ldi	r31, 0x08	; 8
    4936:	ef 2e       	mov	r14, r31
    4938:	f1 2c       	mov	r15, r1
    493a:	ec 0e       	add	r14, r28
    493c:	fd 1e       	adc	r15, r29
    493e:	0c e2       	ldi	r16, 0x2C	; 44
    4940:	11 e0       	ldi	r17, 0x01	; 1
	while(1)
	{
		uint32_t scheduleTime;
		scheduledFunction thisFunction;
		volatile int8_t error;
		volatile uint32_t rightNow = now();
    4942:	0e 94 16 13 	call	0x262c	; 0x262c <now>
    4946:	6c 87       	std	Y+12, r22	; 0x0c
    4948:	7d 87       	std	Y+13, r23	; 0x0d
    494a:	8e 87       	std	Y+14, r24	; 0x0e
    494c:	9f 87       	std	Y+15, r25	; 0x0f

		error = scheduleQueueGetTop(&thisFunction, &scheduleTime);
    494e:	c6 01       	movw	r24, r12
    4950:	b7 01       	movw	r22, r14
    4952:	0e 94 09 2c 	call	0x5812	; 0x5812 <scheduleQueueGetTop>
    4956:	8d 83       	std	Y+5, r24	; 0x05
		//lprintf("PTR: %p time: %lud now: %lud\n", ptrToFunction, scheduleTime, rightNow);

		if(error == 0 && scheduleTime <= rightNow)
    4958:	8d 81       	ldd	r24, Y+5	; 0x05
    495a:	88 23       	and	r24, r24
    495c:	a9 f4       	brne	.+42     	; 0x4988 <main+0x236>
    495e:	2c 85       	ldd	r18, Y+12	; 0x0c
    4960:	3d 85       	ldd	r19, Y+13	; 0x0d
    4962:	4e 85       	ldd	r20, Y+14	; 0x0e
    4964:	5f 85       	ldd	r21, Y+15	; 0x0f
    4966:	88 85       	ldd	r24, Y+8	; 0x08
    4968:	99 85       	ldd	r25, Y+9	; 0x09
    496a:	aa 85       	ldd	r26, Y+10	; 0x0a
    496c:	bb 85       	ldd	r27, Y+11	; 0x0b
    496e:	28 17       	cp	r18, r24
    4970:	39 07       	cpc	r19, r25
    4972:	4a 07       	cpc	r20, r26
    4974:	5b 07       	cpc	r21, r27
    4976:	40 f0       	brcs	.+16     	; 0x4988 <main+0x236>
		{
			/*#ifdef FCPUDEBUG
				lprintf_P(PSTR("Running some function\n"));
			#endif*/
			thisFunction(rightNow);
    4978:	6c 85       	ldd	r22, Y+12	; 0x0c
    497a:	7d 85       	ldd	r23, Y+13	; 0x0d
    497c:	8e 85       	ldd	r24, Y+14	; 0x0e
    497e:	9f 85       	ldd	r25, Y+15	; 0x0f
    4980:	ee 81       	ldd	r30, Y+6	; 0x06
    4982:	ff 81       	ldd	r31, Y+7	; 0x07
    4984:	09 95       	icall
    4986:	14 c0       	rjmp	.+40     	; 0x49b0 <main+0x25e>
		} else if (error == 0 && scheduleTime > rightNow)
    4988:	8d 81       	ldd	r24, Y+5	; 0x05
    498a:	88 23       	and	r24, r24
    498c:	89 f4       	brne	.+34     	; 0x49b0 <main+0x25e>
    498e:	48 85       	ldd	r20, Y+8	; 0x08
    4990:	59 85       	ldd	r21, Y+9	; 0x09
    4992:	6a 85       	ldd	r22, Y+10	; 0x0a
    4994:	7b 85       	ldd	r23, Y+11	; 0x0b
    4996:	8c 85       	ldd	r24, Y+12	; 0x0c
    4998:	9d 85       	ldd	r25, Y+13	; 0x0d
    499a:	ae 85       	ldd	r26, Y+14	; 0x0e
    499c:	bf 85       	ldd	r27, Y+15	; 0x0f
    499e:	84 17       	cp	r24, r20
    49a0:	95 07       	cpc	r25, r21
    49a2:	a6 07       	cpc	r26, r22
    49a4:	b7 07       	cpc	r27, r23
    49a6:	20 f4       	brcc	.+8      	; 0x49b0 <main+0x25e>
		{
			/*#ifdef FCPUDEBUG
				lprintf_P(PSTR("ReScheduling some function\n"));
			#endif*/
			scheduleQueueAdd(thisFunction, scheduleTime);
    49a8:	8e 81       	ldd	r24, Y+6	; 0x06
    49aa:	9f 81       	ldd	r25, Y+7	; 0x07
    49ac:	0e 94 47 2c 	call	0x588e	; 0x588e <scheduleQueueAdd>
    49b0:	84 ef       	ldi	r24, 0xF4	; 244
    49b2:	91 e0       	ldi	r25, 0x01	; 1
    49b4:	f8 01       	movw	r30, r16
    49b6:	31 97       	sbiw	r30, 0x01	; 1
    49b8:	f1 f7       	brne	.-4      	; 0x49b6 <main+0x264>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49ba:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49bc:	09 f4       	brne	.+2      	; 0x49c0 <main+0x26e>
    49be:	c1 cf       	rjmp	.-126    	; 0x4942 <main+0x1f0>
    49c0:	f9 cf       	rjmp	.-14     	; 0x49b4 <main+0x262>

000049c2 <writeEpochStart>:
	return (((long int)days - (long int)eeDays) * 86400) + (((long int)hours - (long int)eeHours) * 3600)
			+ (((long int)minutes - (long int)eeMinutes) * 60) + ((long int)seconds - (long int)eeSeconds);
}

void writeEpochStart(uint8_t seconds, uint8_t minutes, uint8_t hours, uint8_t days)
{
    49c2:	ff 92       	push	r15
    49c4:	0f 93       	push	r16
    49c6:	1f 93       	push	r17
    49c8:	38 2f       	mov	r19, r24
    49ca:	16 2f       	mov	r17, r22
    49cc:	04 2f       	mov	r16, r20
    49ce:	f2 2e       	mov	r15, r18
	 eeprom_write_byte(&EEepochStartSeconds, seconds);
    49d0:	81 e0       	ldi	r24, 0x01	; 1
    49d2:	90 e0       	ldi	r25, 0x00	; 0
    49d4:	63 2f       	mov	r22, r19
    49d6:	0e 94 24 3a 	call	0x7448	; 0x7448 <__eewr_byte_m324p>
	 eeprom_write_byte(&EEepochStartMinutes, minutes);
    49da:	82 e0       	ldi	r24, 0x02	; 2
    49dc:	90 e0       	ldi	r25, 0x00	; 0
    49de:	61 2f       	mov	r22, r17
    49e0:	0e 94 24 3a 	call	0x7448	; 0x7448 <__eewr_byte_m324p>
	 eeprom_write_byte(&EEepochStartHours, hours);
    49e4:	83 e0       	ldi	r24, 0x03	; 3
    49e6:	90 e0       	ldi	r25, 0x00	; 0
    49e8:	60 2f       	mov	r22, r16
    49ea:	0e 94 24 3a 	call	0x7448	; 0x7448 <__eewr_byte_m324p>
	 eeprom_write_byte(&EEepochStartDays, days);
    49ee:	84 e0       	ldi	r24, 0x04	; 4
    49f0:	90 e0       	ldi	r25, 0x00	; 0
    49f2:	6f 2d       	mov	r22, r15
    49f4:	0e 94 24 3a 	call	0x7448	; 0x7448 <__eewr_byte_m324p>
}
    49f8:	1f 91       	pop	r17
    49fa:	0f 91       	pop	r16
    49fc:	ff 90       	pop	r15
    49fe:	08 95       	ret

00004a00 <getEpochSeconds>:
eeprom_write_byte(&EEEpochLock, 0);

}

uint32_t getEpochSeconds(uint8_t seconds, uint8_t minutes, uint8_t hours, uint8_t days)
{
    4a00:	2f 92       	push	r2
    4a02:	3f 92       	push	r3
    4a04:	4f 92       	push	r4
    4a06:	5f 92       	push	r5
    4a08:	6f 92       	push	r6
    4a0a:	7f 92       	push	r7
    4a0c:	8f 92       	push	r8
    4a0e:	9f 92       	push	r9
    4a10:	af 92       	push	r10
    4a12:	bf 92       	push	r11
    4a14:	cf 92       	push	r12
    4a16:	df 92       	push	r13
    4a18:	ef 92       	push	r14
    4a1a:	ff 92       	push	r15
    4a1c:	0f 93       	push	r16
    4a1e:	1f 93       	push	r17
    4a20:	df 93       	push	r29
    4a22:	cf 93       	push	r28
    4a24:	0f 92       	push	r0
    4a26:	cd b7       	in	r28, 0x3d	; 61
    4a28:	de b7       	in	r29, 0x3e	; 62
    4a2a:	e8 2e       	mov	r14, r24
    4a2c:	a6 2e       	mov	r10, r22
    4a2e:	64 2e       	mov	r6, r20
    4a30:	22 2e       	mov	r2, r18
	uint8_t eeSeconds = eeprom_read_byte(&EEepochStartSeconds);
    4a32:	81 e0       	ldi	r24, 0x01	; 1
    4a34:	90 e0       	ldi	r25, 0x00	; 0
    4a36:	0e 94 06 3a 	call	0x740c	; 0x740c <__eerd_byte_m324p>
    4a3a:	d8 2e       	mov	r13, r24
	uint8_t eeMinutes = eeprom_read_byte(&EEepochStartMinutes);
    4a3c:	82 e0       	ldi	r24, 0x02	; 2
    4a3e:	90 e0       	ldi	r25, 0x00	; 0
    4a40:	0e 94 06 3a 	call	0x740c	; 0x740c <__eerd_byte_m324p>
    4a44:	98 2e       	mov	r9, r24
	uint8_t eeHours = eeprom_read_byte(&EEepochStartHours);
    4a46:	83 e0       	ldi	r24, 0x03	; 3
    4a48:	90 e0       	ldi	r25, 0x00	; 0
    4a4a:	0e 94 06 3a 	call	0x740c	; 0x740c <__eerd_byte_m324p>
    4a4e:	58 2e       	mov	r5, r24
	uint8_t eeDays = eeprom_read_byte(&EEepochStartDays);
    4a50:	84 e0       	ldi	r24, 0x04	; 4
    4a52:	90 e0       	ldi	r25, 0x00	; 0
    4a54:	0e 94 06 3a 	call	0x740c	; 0x740c <__eerd_byte_m324p>
    4a58:	89 83       	std	Y+1, r24	; 0x01
    4a5a:	ff 24       	eor	r15, r15
    4a5c:	00 e0       	ldi	r16, 0x00	; 0
    4a5e:	10 e0       	ldi	r17, 0x00	; 0
    4a60:	ed 18       	sub	r14, r13
    4a62:	f1 08       	sbc	r15, r1
    4a64:	01 09       	sbc	r16, r1
    4a66:	11 09       	sbc	r17, r1
    4a68:	bb 24       	eor	r11, r11
    4a6a:	cc 24       	eor	r12, r12
    4a6c:	dd 24       	eor	r13, r13
    4a6e:	a9 18       	sub	r10, r9
    4a70:	b1 08       	sbc	r11, r1
    4a72:	c1 08       	sbc	r12, r1
    4a74:	d1 08       	sbc	r13, r1
    4a76:	c6 01       	movw	r24, r12
    4a78:	b5 01       	movw	r22, r10
    4a7a:	2c e3       	ldi	r18, 0x3C	; 60
    4a7c:	30 e0       	ldi	r19, 0x00	; 0
    4a7e:	40 e0       	ldi	r20, 0x00	; 0
    4a80:	50 e0       	ldi	r21, 0x00	; 0
    4a82:	0e 94 38 36 	call	0x6c70	; 0x6c70 <__mulsi3>
    4a86:	e6 0e       	add	r14, r22
    4a88:	f7 1e       	adc	r15, r23
    4a8a:	08 1f       	adc	r16, r24
    4a8c:	19 1f       	adc	r17, r25
    4a8e:	77 24       	eor	r7, r7
    4a90:	88 24       	eor	r8, r8
    4a92:	99 24       	eor	r9, r9
    4a94:	65 18       	sub	r6, r5
    4a96:	71 08       	sbc	r7, r1
    4a98:	81 08       	sbc	r8, r1
    4a9a:	91 08       	sbc	r9, r1
    4a9c:	c4 01       	movw	r24, r8
    4a9e:	b3 01       	movw	r22, r6
    4aa0:	20 e1       	ldi	r18, 0x10	; 16
    4aa2:	3e e0       	ldi	r19, 0x0E	; 14
    4aa4:	40 e0       	ldi	r20, 0x00	; 0
    4aa6:	50 e0       	ldi	r21, 0x00	; 0
    4aa8:	0e 94 38 36 	call	0x6c70	; 0x6c70 <__mulsi3>
    4aac:	e6 0e       	add	r14, r22
    4aae:	f7 1e       	adc	r15, r23
    4ab0:	08 1f       	adc	r16, r24
    4ab2:	19 1f       	adc	r17, r25
    4ab4:	33 24       	eor	r3, r3
    4ab6:	44 24       	eor	r4, r4
    4ab8:	55 24       	eor	r5, r5
    4aba:	89 81       	ldd	r24, Y+1	; 0x01
    4abc:	28 1a       	sub	r2, r24
    4abe:	31 08       	sbc	r3, r1
    4ac0:	41 08       	sbc	r4, r1
    4ac2:	51 08       	sbc	r5, r1
    4ac4:	c2 01       	movw	r24, r4
    4ac6:	b1 01       	movw	r22, r2
    4ac8:	20 e8       	ldi	r18, 0x80	; 128
    4aca:	31 e5       	ldi	r19, 0x51	; 81
    4acc:	41 e0       	ldi	r20, 0x01	; 1
    4ace:	50 e0       	ldi	r21, 0x00	; 0
    4ad0:	0e 94 38 36 	call	0x6c70	; 0x6c70 <__mulsi3>
    4ad4:	e6 0e       	add	r14, r22
    4ad6:	f7 1e       	adc	r15, r23
    4ad8:	08 1f       	adc	r16, r24
    4ada:	19 1f       	adc	r17, r25

	return (((long int)days - (long int)eeDays) * 86400) + (((long int)hours - (long int)eeHours) * 3600)
			+ (((long int)minutes - (long int)eeMinutes) * 60) + ((long int)seconds - (long int)eeSeconds);
}
    4adc:	b7 01       	movw	r22, r14
    4ade:	c8 01       	movw	r24, r16
    4ae0:	0f 90       	pop	r0
    4ae2:	cf 91       	pop	r28
    4ae4:	df 91       	pop	r29
    4ae6:	1f 91       	pop	r17
    4ae8:	0f 91       	pop	r16
    4aea:	ff 90       	pop	r15
    4aec:	ef 90       	pop	r14
    4aee:	df 90       	pop	r13
    4af0:	cf 90       	pop	r12
    4af2:	bf 90       	pop	r11
    4af4:	af 90       	pop	r10
    4af6:	9f 90       	pop	r9
    4af8:	8f 90       	pop	r8
    4afa:	7f 90       	pop	r7
    4afc:	6f 90       	pop	r6
    4afe:	5f 90       	pop	r5
    4b00:	4f 90       	pop	r4
    4b02:	3f 90       	pop	r3
    4b04:	2f 90       	pop	r2
    4b06:	08 95       	ret

00004b08 <defaultEEPROM>:
#ifndef EEPROMVARS_H
#include "../eepromVars.h"
#endif

void defaultEEPROM(void)
{
    4b08:	0f 93       	push	r16
    4b0a:	1f 93       	push	r17

//eeprom_write_byte(&EEcruiseVrecovSpeedThresh, 15);
//eeprom_write_word(&EEcruiseMinAltThresh, 7000);

eeprom_write_word(&EEballastSafetyAltThresh, 1500);
    4b0c:	8f e0       	ldi	r24, 0x0F	; 15
    4b0e:	90 e0       	ldi	r25, 0x00	; 0
    4b10:	6c ed       	ldi	r22, 0xDC	; 220
    4b12:	75 e0       	ldi	r23, 0x05	; 5
    4b14:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__eewr_word_m324p>

eeprom_write_byte(&EEoverOceanFlag, 0);
    4b18:	82 e1       	ldi	r24, 0x12	; 18
    4b1a:	90 e0       	ldi	r25, 0x00	; 0
    4b1c:	60 e0       	ldi	r22, 0x00	; 0
    4b1e:	0e 94 24 3a 	call	0x7448	; 0x7448 <__eewr_byte_m324p>

eeprom_write_word(&EEmaxAllowableTXInterval, 3600);
    4b22:	88 e1       	ldi	r24, 0x18	; 24
    4b24:	90 e0       	ldi	r25, 0x00	; 0
    4b26:	60 e1       	ldi	r22, 0x10	; 16
    4b28:	7e e0       	ldi	r23, 0x0E	; 14
    4b2a:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__eewr_word_m324p>

eeprom_write_byte(&EEbatteryHeaterSetpoint, -20);
    4b2e:	8a e1       	ldi	r24, 0x1A	; 26
    4b30:	90 e0       	ldi	r25, 0x00	; 0
    4b32:	6c ee       	ldi	r22, 0xEC	; 236
    4b34:	0e 94 24 3a 	call	0x7448	; 0x7448 <__eewr_byte_m324p>

eeprom_write_word(&EEdataCollectionInterval, 60);
    4b38:	8b e1       	ldi	r24, 0x1B	; 27
    4b3a:	90 e0       	ldi	r25, 0x00	; 0
    4b3c:	6c e3       	ldi	r22, 0x3C	; 60
    4b3e:	70 e0       	ldi	r23, 0x00	; 0
    4b40:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__eewr_word_m324p>
eeprom_write_word(&EEdataTransmitInterval, 60);
    4b44:	8d e1       	ldi	r24, 0x1D	; 29
    4b46:	90 e0       	ldi	r25, 0x00	; 0
    4b48:	6c e3       	ldi	r22, 0x3C	; 60
    4b4a:	70 e0       	ldi	r23, 0x00	; 0
    4b4c:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__eewr_word_m324p>
eeprom_write_word(&EEshortDataTransmitInterval, 900);
    4b50:	8f e1       	ldi	r24, 0x1F	; 31
    4b52:	90 e0       	ldi	r25, 0x00	; 0
    4b54:	64 e8       	ldi	r22, 0x84	; 132
    4b56:	73 e0       	ldi	r23, 0x03	; 3
    4b58:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__eewr_word_m324p>

eeprom_write_dword(&EEepochOfLastBatchTransmit, 0);
    4b5c:	84 e2       	ldi	r24, 0x24	; 36
    4b5e:	90 e0       	ldi	r25, 0x00	; 0
    4b60:	40 e0       	ldi	r20, 0x00	; 0
    4b62:	50 e0       	ldi	r21, 0x00	; 0
    4b64:	60 e0       	ldi	r22, 0x00	; 0
    4b66:	70 e0       	ldi	r23, 0x00	; 0
    4b68:	0e 94 32 3a 	call	0x7464	; 0x7464 <__eewr_dword_m324p>

eeprom_write_word(&EEcurrentBatchNumber, 0);
    4b6c:	88 e2       	ldi	r24, 0x28	; 40
    4b6e:	90 e0       	ldi	r25, 0x00	; 0
    4b70:	60 e0       	ldi	r22, 0x00	; 0
    4b72:	70 e0       	ldi	r23, 0x00	; 0
    4b74:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__eewr_word_m324p>
eeprom_write_word(&EEbatchSampleStart, 0);
    4b78:	8a e2       	ldi	r24, 0x2A	; 42
    4b7a:	90 e0       	ldi	r25, 0x00	; 0
    4b7c:	60 e0       	ldi	r22, 0x00	; 0
    4b7e:	70 e0       	ldi	r23, 0x00	; 0
    4b80:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__eewr_word_m324p>
eeprom_write_word(&EEbatchSampleEnd, 0);
    4b84:	8c e2       	ldi	r24, 0x2C	; 44
    4b86:	90 e0       	ldi	r25, 0x00	; 0
    4b88:	60 e0       	ldi	r22, 0x00	; 0
    4b8a:	70 e0       	ldi	r23, 0x00	; 0
    4b8c:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__eewr_word_m324p>

eeprom_write_word(&EEcommPromStart, 0);
    4b90:	8e e2       	ldi	r24, 0x2E	; 46
    4b92:	90 e0       	ldi	r25, 0x00	; 0
    4b94:	60 e0       	ldi	r22, 0x00	; 0
    4b96:	70 e0       	ldi	r23, 0x00	; 0
    4b98:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__eewr_word_m324p>
eeprom_write_word(&EEcommPromEnd, 0);
    4b9c:	80 e3       	ldi	r24, 0x30	; 48
    4b9e:	90 e0       	ldi	r25, 0x00	; 0
    4ba0:	60 e0       	ldi	r22, 0x00	; 0
    4ba2:	70 e0       	ldi	r23, 0x00	; 0
    4ba4:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__eewr_word_m324p>

eeprom_write_byte(&EEflightComputerResetCount, 0);
    4ba8:	82 e3       	ldi	r24, 0x32	; 50
    4baa:	90 e0       	ldi	r25, 0x00	; 0
    4bac:	60 e0       	ldi	r22, 0x00	; 0
    4bae:	0e 94 24 3a 	call	0x7448	; 0x7448 <__eewr_byte_m324p>
eeprom_write_byte(&EEcommModuleResetCount, 0);
    4bb2:	83 e3       	ldi	r24, 0x33	; 51
    4bb4:	90 e0       	ldi	r25, 0x00	; 0
    4bb6:	60 e0       	ldi	r22, 0x00	; 0
    4bb8:	0e 94 24 3a 	call	0x7448	; 0x7448 <__eewr_byte_m324p>

eeprom_write_byte(&EEflightPhase, 0x10);
    4bbc:	84 e3       	ldi	r24, 0x34	; 52
    4bbe:	90 e0       	ldi	r25, 0x00	; 0
    4bc0:	60 e1       	ldi	r22, 0x10	; 16
    4bc2:	0e 94 24 3a 	call	0x7448	; 0x7448 <__eewr_byte_m324p>

eeprom_write_dword(&EEcurrentTelemetryBitmap[0], 0b01010100011010101010100001011001);
    4bc6:	05 e3       	ldi	r16, 0x35	; 53
    4bc8:	10 e0       	ldi	r17, 0x00	; 0
    4bca:	c8 01       	movw	r24, r16
    4bcc:	49 e5       	ldi	r20, 0x59	; 89
    4bce:	58 ea       	ldi	r21, 0xA8	; 168
    4bd0:	6a e6       	ldi	r22, 0x6A	; 106
    4bd2:	74 e5       	ldi	r23, 0x54	; 84
    4bd4:	0e 94 32 3a 	call	0x7464	; 0x7464 <__eewr_dword_m324p>
eeprom_write_dword(&EEcurrentTelemetryBitmap[1], 0b10100000000000000000000000000000);
    4bd8:	c8 01       	movw	r24, r16
    4bda:	04 96       	adiw	r24, 0x04	; 4
    4bdc:	40 e0       	ldi	r20, 0x00	; 0
    4bde:	50 e0       	ldi	r21, 0x00	; 0
    4be0:	60 e0       	ldi	r22, 0x00	; 0
    4be2:	70 ea       	ldi	r23, 0xA0	; 160
    4be4:	0e 94 32 3a 	call	0x7464	; 0x7464 <__eewr_dword_m324p>
eeprom_write_dword(&EEcurrentTelemetryBitmap[2], 0);
    4be8:	c8 01       	movw	r24, r16
    4bea:	08 96       	adiw	r24, 0x08	; 8
    4bec:	40 e0       	ldi	r20, 0x00	; 0
    4bee:	50 e0       	ldi	r21, 0x00	; 0
    4bf0:	60 e0       	ldi	r22, 0x00	; 0
    4bf2:	70 e0       	ldi	r23, 0x00	; 0
    4bf4:	0e 94 32 3a 	call	0x7464	; 0x7464 <__eewr_dword_m324p>

eeprom_write_word(&EEcurrentTelemetryVersion, 0);
    4bf8:	81 e4       	ldi	r24, 0x41	; 65
    4bfa:	90 e0       	ldi	r25, 0x00	; 0
    4bfc:	60 e0       	ldi	r22, 0x00	; 0
    4bfe:	70 e0       	ldi	r23, 0x00	; 0
    4c00:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__eewr_word_m324p>

eeprom_write_word(&EEballastTargetAltitude, 10000);
    4c04:	85 e0       	ldi	r24, 0x05	; 5
    4c06:	90 e0       	ldi	r25, 0x00	; 0
    4c08:	60 e1       	ldi	r22, 0x10	; 16
    4c0a:	77 e2       	ldi	r23, 0x27	; 39
    4c0c:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__eewr_word_m324p>
eeprom_write_word(&EEballastTargetPositiveVSpeed, 5);
    4c10:	87 e0       	ldi	r24, 0x07	; 7
    4c12:	90 e0       	ldi	r25, 0x00	; 0
    4c14:	65 e0       	ldi	r22, 0x05	; 5
    4c16:	70 e0       	ldi	r23, 0x00	; 0
    4c18:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__eewr_word_m324p>
eeprom_write_word(&EEballastTargetNegativeVSpeed, -5);
    4c1c:	89 e0       	ldi	r24, 0x09	; 9
    4c1e:	90 e0       	ldi	r25, 0x00	; 0
    4c20:	6b ef       	ldi	r22, 0xFB	; 251
    4c22:	7f ef       	ldi	r23, 0xFF	; 255
    4c24:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__eewr_word_m324p>

eeprom_write_word(&EEmaydayAltitude, 1000);
    4c28:	8b e0       	ldi	r24, 0x0B	; 11
    4c2a:	90 e0       	ldi	r25, 0x00	; 0
    4c2c:	68 ee       	ldi	r22, 0xE8	; 232
    4c2e:	73 e0       	ldi	r23, 0x03	; 3
    4c30:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__eewr_word_m324p>
eeprom_write_word(&EEmaydayVSpeed, -100);
    4c34:	8d e0       	ldi	r24, 0x0D	; 13
    4c36:	90 e0       	ldi	r25, 0x00	; 0
    4c38:	6c e9       	ldi	r22, 0x9C	; 156
    4c3a:	7f ef       	ldi	r23, 0xFF	; 255
    4c3c:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__eewr_word_m324p>

eeprom_write_byte(&EEautoBallastDisable, 1);
    4c40:	81 e1       	ldi	r24, 0x11	; 17
    4c42:	90 e0       	ldi	r25, 0x00	; 0
    4c44:	61 e0       	ldi	r22, 0x01	; 1
    4c46:	0e 94 24 3a 	call	0x7448	; 0x7448 <__eewr_byte_m324p>

eeprom_write_word(&EEhfDataTransmitInterval, 3600);
    4c4a:	81 e2       	ldi	r24, 0x21	; 33
    4c4c:	90 e0       	ldi	r25, 0x00	; 0
    4c4e:	60 e1       	ldi	r22, 0x10	; 16
    4c50:	7e e0       	ldi	r23, 0x0E	; 14
    4c52:	0e 94 3a 3a 	call	0x7474	; 0x7474 <__eewr_word_m324p>
eeprom_write_byte(&EEhfRapidTransmit, 30);
    4c56:	83 e2       	ldi	r24, 0x23	; 35
    4c58:	90 e0       	ldi	r25, 0x00	; 0
    4c5a:	6e e1       	ldi	r22, 0x1E	; 30
    4c5c:	0e 94 24 3a 	call	0x7448	; 0x7448 <__eewr_byte_m324p>

eeprom_write_byte(&EEEpochLock, 0);
    4c60:	80 e0       	ldi	r24, 0x00	; 0
    4c62:	90 e0       	ldi	r25, 0x00	; 0
    4c64:	60 e0       	ldi	r22, 0x00	; 0
    4c66:	0e 94 24 3a 	call	0x7448	; 0x7448 <__eewr_byte_m324p>

}
    4c6a:	1f 91       	pop	r17
    4c6c:	0f 91       	pop	r16
    4c6e:	08 95       	ret

00004c70 <debugPrintRawStrings>:

}

//REMOVE BEFORE FLIGHT
void debugPrintRawStrings(void)
{
    4c70:	8f 92       	push	r8
    4c72:	9f 92       	push	r9
    4c74:	af 92       	push	r10
    4c76:	bf 92       	push	r11
    4c78:	cf 92       	push	r12
    4c7a:	df 92       	push	r13
    4c7c:	ef 92       	push	r14
    4c7e:	ff 92       	push	r15
    4c80:	0f 93       	push	r16
    4c82:	1f 93       	push	r17
    4c84:	df 93       	push	r29
    4c86:	cf 93       	push	r28
    4c88:	00 d0       	rcall	.+0      	; 0x4c8a <debugPrintRawStrings+0x1a>
    4c8a:	00 d0       	rcall	.+0      	; 0x4c8c <debugPrintRawStrings+0x1c>
    4c8c:	cd b7       	in	r28, 0x3d	; 61
    4c8e:	de b7       	in	r29, 0x3e	; 62
	static char lineBuff[100];
	char tempChar;
	uint8_t i;
	uint8_t errorTracker;
	//Needed so the first comparison works out correctly
	memset(lineBuff, 0x00, 100);
    4c90:	84 e6       	ldi	r24, 0x64	; 100
    4c92:	e0 e3       	ldi	r30, 0x30	; 48
    4c94:	f3 e0       	ldi	r31, 0x03	; 3
    4c96:	df 01       	movw	r26, r30
    4c98:	1d 92       	st	X+, r1
    4c9a:	8a 95       	dec	r24
    4c9c:	e9 f7       	brne	.-6      	; 0x4c98 <debugPrintRawStrings+0x28>

	lprintf_P(PSTR("In Ur GPS Debug\n"));
    4c9e:	00 d0       	rcall	.+0      	; 0x4ca0 <debugPrintRawStrings+0x30>
    4ca0:	8c e5       	ldi	r24, 0x5C	; 92
    4ca2:	94 e0       	ldi	r25, 0x04	; 4
    4ca4:	ed b7       	in	r30, 0x3d	; 61
    4ca6:	fe b7       	in	r31, 0x3e	; 62
    4ca8:	92 83       	std	Z+2, r25	; 0x02
    4caa:	81 83       	std	Z+1, r24	; 0x01
    4cac:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>
    4cb0:	dd 24       	eor	r13, r13
    4cb2:	0f 90       	pop	r0
    4cb4:	0f 90       	pop	r0
    4cb6:	06 c0       	rjmp	.+12     	; 0x4cc4 <debugPrintRawStrings+0x54>
	{
		i=0;
		//i < 99 to leave room for the null terminator
		while(((tempChar = (char)uart_getchar()) != '\n') && (i < 99) && tempChar!= 0xff)
		{
			lineBuff[i] = tempChar;
    4cb8:	ed 2d       	mov	r30, r13
    4cba:	f0 e0       	ldi	r31, 0x00	; 0
    4cbc:	e0 5d       	subi	r30, 0xD0	; 208
    4cbe:	fc 4f       	sbci	r31, 0xFC	; 252
    4cc0:	80 83       	st	Z, r24
			i++;
    4cc2:	d3 94       	inc	r13

	do
	{
		i=0;
		//i < 99 to leave room for the null terminator
		while(((tempChar = (char)uart_getchar()) != '\n') && (i < 99) && tempChar!= 0xff)
    4cc4:	0e 94 cf 11 	call	0x239e	; 0x239e <uart_getchar>
    4cc8:	8a 30       	cpi	r24, 0x0A	; 10
    4cca:	29 f0       	breq	.+10     	; 0x4cd6 <debugPrintRawStrings+0x66>
    4ccc:	f2 e6       	ldi	r31, 0x62	; 98
    4cce:	fd 15       	cp	r31, r13
    4cd0:	10 f0       	brcs	.+4      	; 0x4cd6 <debugPrintRawStrings+0x66>
    4cd2:	8f 3f       	cpi	r24, 0xFF	; 255
    4cd4:	89 f7       	brne	.-30     	; 0x4cb8 <debugPrintRawStrings+0x48>
		{
			lineBuff[i] = tempChar;
			i++;
		}
		lineBuff[i] = '\0';
    4cd6:	ed 2c       	mov	r14, r13
    4cd8:	ff 24       	eor	r15, r15
    4cda:	87 01       	movw	r16, r14
    4cdc:	00 5d       	subi	r16, 0xD0	; 208
    4cde:	1c 4f       	sbci	r17, 0xFC	; 252
    4ce0:	d8 01       	movw	r26, r16
    4ce2:	1c 92       	st	X, r1
		errorTracker++;
	} while((strncmp("$GPRMC", lineBuff, 6) != 0));
    4ce4:	80 e6       	ldi	r24, 0x60	; 96
    4ce6:	92 e0       	ldi	r25, 0x02	; 2
    4ce8:	60 e3       	ldi	r22, 0x30	; 48
    4cea:	73 e0       	ldi	r23, 0x03	; 3
    4cec:	46 e0       	ldi	r20, 0x06	; 6
    4cee:	50 e0       	ldi	r21, 0x00	; 0
    4cf0:	0e 94 01 38 	call	0x7002	; 0x7002 <strncmp>
    4cf4:	00 97       	sbiw	r24, 0x00	; 0
    4cf6:	11 f0       	breq	.+4      	; 0x4cfc <debugPrintRawStrings+0x8c>
    4cf8:	dd 24       	eor	r13, r13
    4cfa:	e4 cf       	rjmp	.-56     	; 0x4cc4 <debugPrintRawStrings+0x54>


	char targetChecksum[3];
	uint8_t  tSum;
	uint8_t checksum = 0;
	targetChecksum[0] = lineBuff[i-3];
    4cfc:	f8 01       	movw	r30, r16
    4cfe:	33 97       	sbiw	r30, 0x03	; 3
    4d00:	80 81       	ld	r24, Z
    4d02:	8a 83       	std	Y+2, r24	; 0x02
	targetChecksum[1] = lineBuff[i-2];
    4d04:	f8 01       	movw	r30, r16
    4d06:	32 97       	sbiw	r30, 0x02	; 2
    4d08:	80 81       	ld	r24, Z
    4d0a:	8b 83       	std	Y+3, r24	; 0x03
	targetChecksum[2] = '\0';
    4d0c:	1c 82       	std	Y+4, r1	; 0x04
	sscanf(targetChecksum, "%x", &tSum);
    4d0e:	00 d0       	rcall	.+0      	; 0x4d10 <debugPrintRawStrings+0xa0>
    4d10:	00 d0       	rcall	.+0      	; 0x4d12 <debugPrintRawStrings+0xa2>
    4d12:	00 d0       	rcall	.+0      	; 0x4d14 <debugPrintRawStrings+0xa4>
    4d14:	ed b7       	in	r30, 0x3d	; 61
    4d16:	fe b7       	in	r31, 0x3e	; 62
    4d18:	31 96       	adiw	r30, 0x01	; 1
    4d1a:	ce 01       	movw	r24, r28
    4d1c:	02 96       	adiw	r24, 0x02	; 2
    4d1e:	ad b7       	in	r26, 0x3d	; 61
    4d20:	be b7       	in	r27, 0x3e	; 62
    4d22:	12 96       	adiw	r26, 0x02	; 2
    4d24:	9c 93       	st	X, r25
    4d26:	8e 93       	st	-X, r24
    4d28:	11 97       	sbiw	r26, 0x01	; 1
    4d2a:	87 e6       	ldi	r24, 0x67	; 103
    4d2c:	92 e0       	ldi	r25, 0x02	; 2
    4d2e:	93 83       	std	Z+3, r25	; 0x03
    4d30:	82 83       	std	Z+2, r24	; 0x02
    4d32:	ce 01       	movw	r24, r28
    4d34:	01 96       	adiw	r24, 0x01	; 1
    4d36:	95 83       	std	Z+5, r25	; 0x05
    4d38:	84 83       	std	Z+4, r24	; 0x04
    4d3a:	0e 94 10 39 	call	0x7220	; 0x7220 <sscanf>
    4d3e:	cc 24       	eor	r12, r12
    4d40:	91 e0       	ldi	r25, 0x01	; 1
    4d42:	ed b7       	in	r30, 0x3d	; 61
    4d44:	fe b7       	in	r31, 0x3e	; 62
    4d46:	36 96       	adiw	r30, 0x06	; 6
    4d48:	0f b6       	in	r0, 0x3f	; 63
    4d4a:	f8 94       	cli
    4d4c:	fe bf       	out	0x3e, r31	; 62
    4d4e:	0f be       	out	0x3f, r0	; 63
    4d50:	ed bf       	out	0x3d, r30	; 61
	for(uint8_t j = 1; j < i-4; j++)
    4d52:	97 01       	movw	r18, r14
    4d54:	24 50       	subi	r18, 0x04	; 4
    4d56:	30 40       	sbci	r19, 0x00	; 0
    4d58:	05 c0       	rjmp	.+10     	; 0x4d64 <debugPrintRawStrings+0xf4>
	{
		 checksum = checksum ^ lineBuff[j];
    4d5a:	e0 5d       	subi	r30, 0xD0	; 208
    4d5c:	fc 4f       	sbci	r31, 0xFC	; 252
    4d5e:	80 81       	ld	r24, Z
    4d60:	c8 26       	eor	r12, r24
	uint8_t checksum = 0;
	targetChecksum[0] = lineBuff[i-3];
	targetChecksum[1] = lineBuff[i-2];
	targetChecksum[2] = '\0';
	sscanf(targetChecksum, "%x", &tSum);
	for(uint8_t j = 1; j < i-4; j++)
    4d62:	9f 5f       	subi	r25, 0xFF	; 255
    4d64:	e9 2f       	mov	r30, r25
    4d66:	f0 e0       	ldi	r31, 0x00	; 0
    4d68:	e2 17       	cp	r30, r18
    4d6a:	f3 07       	cpc	r31, r19
    4d6c:	b4 f3       	brlt	.-20     	; 0x4d5a <debugPrintRawStrings+0xea>
	{
		 checksum = checksum ^ lineBuff[j];
	}

	lprintf_P(PSTR("CS: %x TCS: %x\n"), checksum, tSum);
    4d6e:	00 d0       	rcall	.+0      	; 0x4d70 <debugPrintRawStrings+0x100>
    4d70:	00 d0       	rcall	.+0      	; 0x4d72 <debugPrintRawStrings+0x102>
    4d72:	00 d0       	rcall	.+0      	; 0x4d74 <debugPrintRawStrings+0x104>
    4d74:	ed b7       	in	r30, 0x3d	; 61
    4d76:	fe b7       	in	r31, 0x3e	; 62
    4d78:	31 96       	adiw	r30, 0x01	; 1
    4d7a:	8c e4       	ldi	r24, 0x4C	; 76
    4d7c:	94 e0       	ldi	r25, 0x04	; 4
    4d7e:	ad b7       	in	r26, 0x3d	; 61
    4d80:	be b7       	in	r27, 0x3e	; 62
    4d82:	12 96       	adiw	r26, 0x02	; 2
    4d84:	9c 93       	st	X, r25
    4d86:	8e 93       	st	-X, r24
    4d88:	11 97       	sbiw	r26, 0x01	; 1
    4d8a:	c2 82       	std	Z+2, r12	; 0x02
    4d8c:	13 82       	std	Z+3, r1	; 0x03
    4d8e:	89 81       	ldd	r24, Y+1	; 0x01
    4d90:	84 83       	std	Z+4, r24	; 0x04
    4d92:	15 82       	std	Z+5, r1	; 0x05
    4d94:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>
    4d98:	40 e3       	ldi	r20, 0x30	; 48
    4d9a:	84 2e       	mov	r8, r20
    4d9c:	43 e0       	ldi	r20, 0x03	; 3
    4d9e:	94 2e       	mov	r9, r20
    4da0:	74 01       	movw	r14, r8
    4da2:	ed b7       	in	r30, 0x3d	; 61
    4da4:	fe b7       	in	r31, 0x3e	; 62
    4da6:	36 96       	adiw	r30, 0x06	; 6
    4da8:	0f b6       	in	r0, 0x3f	; 63
    4daa:	f8 94       	cli
    4dac:	fe bf       	out	0x3e, r31	; 62
    4dae:	0f be       	out	0x3f, r0	; 63
    4db0:	ed bf       	out	0x3d, r30	; 61

	for(uint8_t j = 0; j < i; j++)
    4db2:	0d 2d       	mov	r16, r13
    4db4:	10 e0       	ldi	r17, 0x00	; 0
    4db6:	08 0d       	add	r16, r8
    4db8:	19 1d       	adc	r17, r9
	{
		lprintf("%c", lineBuff[j]);
    4dba:	3a e6       	ldi	r19, 0x6A	; 106
    4dbc:	a3 2e       	mov	r10, r19
    4dbe:	32 e0       	ldi	r19, 0x02	; 2
    4dc0:	b3 2e       	mov	r11, r19
    4dc2:	16 c0       	rjmp	.+44     	; 0x4df0 <debugPrintRawStrings+0x180>
    4dc4:	00 d0       	rcall	.+0      	; 0x4dc6 <debugPrintRawStrings+0x156>
    4dc6:	00 d0       	rcall	.+0      	; 0x4dc8 <debugPrintRawStrings+0x158>
    4dc8:	ed b7       	in	r30, 0x3d	; 61
    4dca:	fe b7       	in	r31, 0x3e	; 62
    4dcc:	31 96       	adiw	r30, 0x01	; 1
    4dce:	ad b7       	in	r26, 0x3d	; 61
    4dd0:	be b7       	in	r27, 0x3e	; 62
    4dd2:	12 96       	adiw	r26, 0x02	; 2
    4dd4:	bc 92       	st	X, r11
    4dd6:	ae 92       	st	-X, r10
    4dd8:	11 97       	sbiw	r26, 0x01	; 1
    4dda:	d7 01       	movw	r26, r14
    4ddc:	8d 91       	ld	r24, X+
    4dde:	7d 01       	movw	r14, r26
    4de0:	82 83       	std	Z+2, r24	; 0x02
    4de2:	13 82       	std	Z+3, r1	; 0x03
    4de4:	0e 94 30 12 	call	0x2460	; 0x2460 <lprintf>
    4de8:	0f 90       	pop	r0
    4dea:	0f 90       	pop	r0
    4dec:	0f 90       	pop	r0
    4dee:	0f 90       	pop	r0
		 checksum = checksum ^ lineBuff[j];
	}

	lprintf_P(PSTR("CS: %x TCS: %x\n"), checksum, tSum);

	for(uint8_t j = 0; j < i; j++)
    4df0:	e0 16       	cp	r14, r16
    4df2:	f1 06       	cpc	r15, r17
    4df4:	39 f7       	brne	.-50     	; 0x4dc4 <debugPrintRawStrings+0x154>
	{
		lprintf("%c", lineBuff[j]);
	}
	if(tSum == checksum)
    4df6:	89 81       	ldd	r24, Y+1	; 0x01
    4df8:	8c 15       	cp	r24, r12
    4dfa:	59 f4       	brne	.+22     	; 0x4e12 <debugPrintRawStrings+0x1a2>
	{
		lprintf_P(PSTR("Checksum Valid\n"));
    4dfc:	00 d0       	rcall	.+0      	; 0x4dfe <debugPrintRawStrings+0x18e>
    4dfe:	8c e3       	ldi	r24, 0x3C	; 60
    4e00:	94 e0       	ldi	r25, 0x04	; 4
    4e02:	ed b7       	in	r30, 0x3d	; 61
    4e04:	fe b7       	in	r31, 0x3e	; 62
    4e06:	92 83       	std	Z+2, r25	; 0x02
    4e08:	81 83       	std	Z+1, r24	; 0x01
    4e0a:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>
    4e0e:	0f 90       	pop	r0
    4e10:	0f 90       	pop	r0
	}

	memset(lineBuff, 0x00, 100);
    4e12:	84 e6       	ldi	r24, 0x64	; 100
    4e14:	e0 e3       	ldi	r30, 0x30	; 48
    4e16:	f3 e0       	ldi	r31, 0x03	; 3
    4e18:	df 01       	movw	r26, r30
    4e1a:	1d 92       	st	X+, r1
    4e1c:	8a 95       	dec	r24
    4e1e:	e9 f7       	brne	.-6      	; 0x4e1a <debugPrintRawStrings+0x1aa>
    4e20:	1e c0       	rjmp	.+60     	; 0x4e5e <debugPrintRawStrings+0x1ee>
	{
		i=0;
		//i < 99 to leave room for the null terminator
		while(((tempChar = (char)uart_getchar()) != '\n') && i < 99)
		{
			lineBuff[i] = tempChar;
    4e22:	ed 2d       	mov	r30, r13
    4e24:	f0 e0       	ldi	r31, 0x00	; 0
    4e26:	e0 5d       	subi	r30, 0xD0	; 208
    4e28:	fc 4f       	sbci	r31, 0xFC	; 252
    4e2a:	80 83       	st	Z, r24
			i++;
    4e2c:	d3 94       	inc	r13

	do
	{
		i=0;
		//i < 99 to leave room for the null terminator
		while(((tempChar = (char)uart_getchar()) != '\n') && i < 99)
    4e2e:	0e 94 cf 11 	call	0x239e	; 0x239e <uart_getchar>
    4e32:	8a 30       	cpi	r24, 0x0A	; 10
    4e34:	19 f0       	breq	.+6      	; 0x4e3c <debugPrintRawStrings+0x1cc>
    4e36:	b2 e6       	ldi	r27, 0x62	; 98
    4e38:	bd 15       	cp	r27, r13
    4e3a:	98 f7       	brcc	.-26     	; 0x4e22 <debugPrintRawStrings+0x1b2>
		{
			lineBuff[i] = tempChar;
			i++;
		}
		lineBuff[i] = '\0';
    4e3c:	ed 2c       	mov	r14, r13
    4e3e:	ff 24       	eor	r15, r15
    4e40:	87 01       	movw	r16, r14
    4e42:	00 5d       	subi	r16, 0xD0	; 208
    4e44:	1c 4f       	sbci	r17, 0xFC	; 252
    4e46:	f8 01       	movw	r30, r16
    4e48:	10 82       	st	Z, r1
	} while((strncmp("$GPGSA", lineBuff, 6) != 0));
    4e4a:	8d e6       	ldi	r24, 0x6D	; 109
    4e4c:	92 e0       	ldi	r25, 0x02	; 2
    4e4e:	60 e3       	ldi	r22, 0x30	; 48
    4e50:	73 e0       	ldi	r23, 0x03	; 3
    4e52:	46 e0       	ldi	r20, 0x06	; 6
    4e54:	50 e0       	ldi	r21, 0x00	; 0
    4e56:	0e 94 01 38 	call	0x7002	; 0x7002 <strncmp>
    4e5a:	00 97       	sbiw	r24, 0x00	; 0
    4e5c:	11 f0       	breq	.+4      	; 0x4e62 <debugPrintRawStrings+0x1f2>
    4e5e:	dd 24       	eor	r13, r13
    4e60:	e6 cf       	rjmp	.-52     	; 0x4e2e <debugPrintRawStrings+0x1be>
	// End GPGSA Acquisition Section

	checksum = 0;
	targetChecksum[0] = lineBuff[i-3];
    4e62:	f8 01       	movw	r30, r16
    4e64:	33 97       	sbiw	r30, 0x03	; 3
    4e66:	80 81       	ld	r24, Z
    4e68:	8a 83       	std	Y+2, r24	; 0x02
	targetChecksum[1] = lineBuff[i-2];
    4e6a:	f8 01       	movw	r30, r16
    4e6c:	32 97       	sbiw	r30, 0x02	; 2
    4e6e:	80 81       	ld	r24, Z
    4e70:	8b 83       	std	Y+3, r24	; 0x03
	targetChecksum[2] = '\0';
    4e72:	1c 82       	std	Y+4, r1	; 0x04
	sscanf(targetChecksum, "%x", &tSum);
    4e74:	00 d0       	rcall	.+0      	; 0x4e76 <debugPrintRawStrings+0x206>
    4e76:	00 d0       	rcall	.+0      	; 0x4e78 <debugPrintRawStrings+0x208>
    4e78:	00 d0       	rcall	.+0      	; 0x4e7a <debugPrintRawStrings+0x20a>
    4e7a:	ed b7       	in	r30, 0x3d	; 61
    4e7c:	fe b7       	in	r31, 0x3e	; 62
    4e7e:	31 96       	adiw	r30, 0x01	; 1
    4e80:	ce 01       	movw	r24, r28
    4e82:	02 96       	adiw	r24, 0x02	; 2
    4e84:	ad b7       	in	r26, 0x3d	; 61
    4e86:	be b7       	in	r27, 0x3e	; 62
    4e88:	12 96       	adiw	r26, 0x02	; 2
    4e8a:	9c 93       	st	X, r25
    4e8c:	8e 93       	st	-X, r24
    4e8e:	11 97       	sbiw	r26, 0x01	; 1
    4e90:	87 e6       	ldi	r24, 0x67	; 103
    4e92:	92 e0       	ldi	r25, 0x02	; 2
    4e94:	93 83       	std	Z+3, r25	; 0x03
    4e96:	82 83       	std	Z+2, r24	; 0x02
    4e98:	ce 01       	movw	r24, r28
    4e9a:	01 96       	adiw	r24, 0x01	; 1
    4e9c:	95 83       	std	Z+5, r25	; 0x05
    4e9e:	84 83       	std	Z+4, r24	; 0x04
    4ea0:	0e 94 10 39 	call	0x7220	; 0x7220 <sscanf>
    4ea4:	cc 24       	eor	r12, r12
    4ea6:	91 e0       	ldi	r25, 0x01	; 1
    4ea8:	ed b7       	in	r30, 0x3d	; 61
    4eaa:	fe b7       	in	r31, 0x3e	; 62
    4eac:	36 96       	adiw	r30, 0x06	; 6
    4eae:	0f b6       	in	r0, 0x3f	; 63
    4eb0:	f8 94       	cli
    4eb2:	fe bf       	out	0x3e, r31	; 62
    4eb4:	0f be       	out	0x3f, r0	; 63
    4eb6:	ed bf       	out	0x3d, r30	; 61
	for(uint8_t j = 1; j < i-4; j++)
    4eb8:	97 01       	movw	r18, r14
    4eba:	24 50       	subi	r18, 0x04	; 4
    4ebc:	30 40       	sbci	r19, 0x00	; 0
    4ebe:	05 c0       	rjmp	.+10     	; 0x4eca <debugPrintRawStrings+0x25a>
	{
		 checksum = checksum ^ lineBuff[j];
    4ec0:	e0 5d       	subi	r30, 0xD0	; 208
    4ec2:	fc 4f       	sbci	r31, 0xFC	; 252
    4ec4:	80 81       	ld	r24, Z
    4ec6:	c8 26       	eor	r12, r24
	checksum = 0;
	targetChecksum[0] = lineBuff[i-3];
	targetChecksum[1] = lineBuff[i-2];
	targetChecksum[2] = '\0';
	sscanf(targetChecksum, "%x", &tSum);
	for(uint8_t j = 1; j < i-4; j++)
    4ec8:	9f 5f       	subi	r25, 0xFF	; 255
    4eca:	e9 2f       	mov	r30, r25
    4ecc:	f0 e0       	ldi	r31, 0x00	; 0
    4ece:	e2 17       	cp	r30, r18
    4ed0:	f3 07       	cpc	r31, r19
    4ed2:	b4 f3       	brlt	.-20     	; 0x4ec0 <debugPrintRawStrings+0x250>
	{
		 checksum = checksum ^ lineBuff[j];
	}

	lprintf_P(PSTR("CS: %x TCS: %x\n"), checksum, tSum);
    4ed4:	00 d0       	rcall	.+0      	; 0x4ed6 <debugPrintRawStrings+0x266>
    4ed6:	00 d0       	rcall	.+0      	; 0x4ed8 <debugPrintRawStrings+0x268>
    4ed8:	00 d0       	rcall	.+0      	; 0x4eda <debugPrintRawStrings+0x26a>
    4eda:	ed b7       	in	r30, 0x3d	; 61
    4edc:	fe b7       	in	r31, 0x3e	; 62
    4ede:	31 96       	adiw	r30, 0x01	; 1
    4ee0:	8c e2       	ldi	r24, 0x2C	; 44
    4ee2:	94 e0       	ldi	r25, 0x04	; 4
    4ee4:	ad b7       	in	r26, 0x3d	; 61
    4ee6:	be b7       	in	r27, 0x3e	; 62
    4ee8:	12 96       	adiw	r26, 0x02	; 2
    4eea:	9c 93       	st	X, r25
    4eec:	8e 93       	st	-X, r24
    4eee:	11 97       	sbiw	r26, 0x01	; 1
    4ef0:	c2 82       	std	Z+2, r12	; 0x02
    4ef2:	13 82       	std	Z+3, r1	; 0x03
    4ef4:	89 81       	ldd	r24, Y+1	; 0x01
    4ef6:	84 83       	std	Z+4, r24	; 0x04
    4ef8:	15 82       	std	Z+5, r1	; 0x05
    4efa:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>
    4efe:	20 e3       	ldi	r18, 0x30	; 48
    4f00:	e2 2e       	mov	r14, r18
    4f02:	23 e0       	ldi	r18, 0x03	; 3
    4f04:	f2 2e       	mov	r15, r18
    4f06:	ed b7       	in	r30, 0x3d	; 61
    4f08:	fe b7       	in	r31, 0x3e	; 62
    4f0a:	36 96       	adiw	r30, 0x06	; 6
    4f0c:	0f b6       	in	r0, 0x3f	; 63
    4f0e:	f8 94       	cli
    4f10:	fe bf       	out	0x3e, r31	; 62
    4f12:	0f be       	out	0x3f, r0	; 63
    4f14:	ed bf       	out	0x3d, r30	; 61

	for(uint8_t j = 0; j < i; j++)
    4f16:	0d 2d       	mov	r16, r13
    4f18:	10 e0       	ldi	r17, 0x00	; 0
    4f1a:	0e 0d       	add	r16, r14
    4f1c:	1f 1d       	adc	r17, r15
	{
		lprintf("%c", lineBuff[j]);
    4f1e:	9a e6       	ldi	r25, 0x6A	; 106
    4f20:	a9 2e       	mov	r10, r25
    4f22:	92 e0       	ldi	r25, 0x02	; 2
    4f24:	b9 2e       	mov	r11, r25
    4f26:	16 c0       	rjmp	.+44     	; 0x4f54 <debugPrintRawStrings+0x2e4>
    4f28:	00 d0       	rcall	.+0      	; 0x4f2a <debugPrintRawStrings+0x2ba>
    4f2a:	00 d0       	rcall	.+0      	; 0x4f2c <debugPrintRawStrings+0x2bc>
    4f2c:	ed b7       	in	r30, 0x3d	; 61
    4f2e:	fe b7       	in	r31, 0x3e	; 62
    4f30:	31 96       	adiw	r30, 0x01	; 1
    4f32:	ad b7       	in	r26, 0x3d	; 61
    4f34:	be b7       	in	r27, 0x3e	; 62
    4f36:	12 96       	adiw	r26, 0x02	; 2
    4f38:	bc 92       	st	X, r11
    4f3a:	ae 92       	st	-X, r10
    4f3c:	11 97       	sbiw	r26, 0x01	; 1
    4f3e:	d7 01       	movw	r26, r14
    4f40:	8d 91       	ld	r24, X+
    4f42:	7d 01       	movw	r14, r26
    4f44:	82 83       	std	Z+2, r24	; 0x02
    4f46:	13 82       	std	Z+3, r1	; 0x03
    4f48:	0e 94 30 12 	call	0x2460	; 0x2460 <lprintf>
    4f4c:	0f 90       	pop	r0
    4f4e:	0f 90       	pop	r0
    4f50:	0f 90       	pop	r0
    4f52:	0f 90       	pop	r0
		 checksum = checksum ^ lineBuff[j];
	}

	lprintf_P(PSTR("CS: %x TCS: %x\n"), checksum, tSum);

	for(uint8_t j = 0; j < i; j++)
    4f54:	e0 16       	cp	r14, r16
    4f56:	f1 06       	cpc	r15, r17
    4f58:	39 f7       	brne	.-50     	; 0x4f28 <debugPrintRawStrings+0x2b8>
	{
		lprintf("%c", lineBuff[j]);
	}
	if(tSum == checksum)
    4f5a:	89 81       	ldd	r24, Y+1	; 0x01
    4f5c:	8c 15       	cp	r24, r12
    4f5e:	59 f4       	brne	.+22     	; 0x4f76 <debugPrintRawStrings+0x306>
	{
		lprintf_P(PSTR("Checksum Valid\n"));
    4f60:	00 d0       	rcall	.+0      	; 0x4f62 <debugPrintRawStrings+0x2f2>
    4f62:	8c e1       	ldi	r24, 0x1C	; 28
    4f64:	94 e0       	ldi	r25, 0x04	; 4
    4f66:	ed b7       	in	r30, 0x3d	; 61
    4f68:	fe b7       	in	r31, 0x3e	; 62
    4f6a:	92 83       	std	Z+2, r25	; 0x02
    4f6c:	81 83       	std	Z+1, r24	; 0x01
    4f6e:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>
    4f72:	0f 90       	pop	r0
    4f74:	0f 90       	pop	r0
	}

	memset(lineBuff, 0x00, 100);
    4f76:	84 e6       	ldi	r24, 0x64	; 100
    4f78:	e0 e3       	ldi	r30, 0x30	; 48
    4f7a:	f3 e0       	ldi	r31, 0x03	; 3
    4f7c:	df 01       	movw	r26, r30
    4f7e:	1d 92       	st	X+, r1
    4f80:	8a 95       	dec	r24
    4f82:	e9 f7       	brne	.-6      	; 0x4f7e <debugPrintRawStrings+0x30e>
    4f84:	1e c0       	rjmp	.+60     	; 0x4fc2 <debugPrintRawStrings+0x352>
	{
		i=0;
		//i < 99 to leave room for the null terminator
		while(((tempChar = (char)uart_getchar()) != '\n') && i < 99)
		{
			lineBuff[i] = tempChar;
    4f86:	ef 2d       	mov	r30, r15
    4f88:	f0 e0       	ldi	r31, 0x00	; 0
    4f8a:	e0 5d       	subi	r30, 0xD0	; 208
    4f8c:	fc 4f       	sbci	r31, 0xFC	; 252
    4f8e:	80 83       	st	Z, r24
			i++;
    4f90:	f3 94       	inc	r15
	memset(lineBuff, 0x00, 100);
	do
	{
		i=0;
		//i < 99 to leave room for the null terminator
		while(((tempChar = (char)uart_getchar()) != '\n') && i < 99)
    4f92:	0e 94 cf 11 	call	0x239e	; 0x239e <uart_getchar>
    4f96:	8a 30       	cpi	r24, 0x0A	; 10
    4f98:	19 f0       	breq	.+6      	; 0x4fa0 <debugPrintRawStrings+0x330>
    4f9a:	b2 e6       	ldi	r27, 0x62	; 98
    4f9c:	bf 15       	cp	r27, r15
    4f9e:	98 f7       	brcc	.-26     	; 0x4f86 <debugPrintRawStrings+0x316>
		{
			lineBuff[i] = tempChar;
			i++;
		}
		lineBuff[i] = '\0';
    4fa0:	cf 2c       	mov	r12, r15
    4fa2:	dd 24       	eor	r13, r13
    4fa4:	86 01       	movw	r16, r12
    4fa6:	00 5d       	subi	r16, 0xD0	; 208
    4fa8:	1c 4f       	sbci	r17, 0xFC	; 252
    4faa:	f8 01       	movw	r30, r16
    4fac:	10 82       	st	Z, r1
	} while((strncmp("$GPGGA", lineBuff, 6) != 0));
    4fae:	84 e7       	ldi	r24, 0x74	; 116
    4fb0:	92 e0       	ldi	r25, 0x02	; 2
    4fb2:	60 e3       	ldi	r22, 0x30	; 48
    4fb4:	73 e0       	ldi	r23, 0x03	; 3
    4fb6:	46 e0       	ldi	r20, 0x06	; 6
    4fb8:	50 e0       	ldi	r21, 0x00	; 0
    4fba:	0e 94 01 38 	call	0x7002	; 0x7002 <strncmp>
    4fbe:	00 97       	sbiw	r24, 0x00	; 0
    4fc0:	11 f0       	breq	.+4      	; 0x4fc6 <debugPrintRawStrings+0x356>
    4fc2:	ff 24       	eor	r15, r15
    4fc4:	e6 cf       	rjmp	.-52     	; 0x4f92 <debugPrintRawStrings+0x322>
	// End GPGGA Acquisition Section

	checksum = 0;
	targetChecksum[0] = lineBuff[i-3];
    4fc6:	f8 01       	movw	r30, r16
    4fc8:	33 97       	sbiw	r30, 0x03	; 3
    4fca:	80 81       	ld	r24, Z
    4fcc:	8a 83       	std	Y+2, r24	; 0x02
	targetChecksum[1] = lineBuff[i-2];
    4fce:	f8 01       	movw	r30, r16
    4fd0:	32 97       	sbiw	r30, 0x02	; 2
    4fd2:	80 81       	ld	r24, Z
    4fd4:	8b 83       	std	Y+3, r24	; 0x03
	targetChecksum[2] = '\0';
    4fd6:	1c 82       	std	Y+4, r1	; 0x04
	sscanf(targetChecksum, "%x", &tSum);
    4fd8:	00 d0       	rcall	.+0      	; 0x4fda <debugPrintRawStrings+0x36a>
    4fda:	00 d0       	rcall	.+0      	; 0x4fdc <debugPrintRawStrings+0x36c>
    4fdc:	00 d0       	rcall	.+0      	; 0x4fde <debugPrintRawStrings+0x36e>
    4fde:	ed b7       	in	r30, 0x3d	; 61
    4fe0:	fe b7       	in	r31, 0x3e	; 62
    4fe2:	31 96       	adiw	r30, 0x01	; 1
    4fe4:	ce 01       	movw	r24, r28
    4fe6:	02 96       	adiw	r24, 0x02	; 2
    4fe8:	ad b7       	in	r26, 0x3d	; 61
    4fea:	be b7       	in	r27, 0x3e	; 62
    4fec:	12 96       	adiw	r26, 0x02	; 2
    4fee:	9c 93       	st	X, r25
    4ff0:	8e 93       	st	-X, r24
    4ff2:	11 97       	sbiw	r26, 0x01	; 1
    4ff4:	87 e6       	ldi	r24, 0x67	; 103
    4ff6:	92 e0       	ldi	r25, 0x02	; 2
    4ff8:	93 83       	std	Z+3, r25	; 0x03
    4ffa:	82 83       	std	Z+2, r24	; 0x02
    4ffc:	ce 01       	movw	r24, r28
    4ffe:	01 96       	adiw	r24, 0x01	; 1
    5000:	95 83       	std	Z+5, r25	; 0x05
    5002:	84 83       	std	Z+4, r24	; 0x04
    5004:	0e 94 10 39 	call	0x7220	; 0x7220 <sscanf>
    5008:	ee 24       	eor	r14, r14
    500a:	91 e0       	ldi	r25, 0x01	; 1
    500c:	ed b7       	in	r30, 0x3d	; 61
    500e:	fe b7       	in	r31, 0x3e	; 62
    5010:	36 96       	adiw	r30, 0x06	; 6
    5012:	0f b6       	in	r0, 0x3f	; 63
    5014:	f8 94       	cli
    5016:	fe bf       	out	0x3e, r31	; 62
    5018:	0f be       	out	0x3f, r0	; 63
    501a:	ed bf       	out	0x3d, r30	; 61
	for(uint8_t j = 1; j < i-4; j++)
    501c:	96 01       	movw	r18, r12
    501e:	24 50       	subi	r18, 0x04	; 4
    5020:	30 40       	sbci	r19, 0x00	; 0
    5022:	05 c0       	rjmp	.+10     	; 0x502e <debugPrintRawStrings+0x3be>
	{
		 checksum = checksum ^ lineBuff[j];
    5024:	e0 5d       	subi	r30, 0xD0	; 208
    5026:	fc 4f       	sbci	r31, 0xFC	; 252
    5028:	80 81       	ld	r24, Z
    502a:	e8 26       	eor	r14, r24
	checksum = 0;
	targetChecksum[0] = lineBuff[i-3];
	targetChecksum[1] = lineBuff[i-2];
	targetChecksum[2] = '\0';
	sscanf(targetChecksum, "%x", &tSum);
	for(uint8_t j = 1; j < i-4; j++)
    502c:	9f 5f       	subi	r25, 0xFF	; 255
    502e:	e9 2f       	mov	r30, r25
    5030:	f0 e0       	ldi	r31, 0x00	; 0
    5032:	e2 17       	cp	r30, r18
    5034:	f3 07       	cpc	r31, r19
    5036:	b4 f3       	brlt	.-20     	; 0x5024 <debugPrintRawStrings+0x3b4>
	{
		 checksum = checksum ^ lineBuff[j];
	}

	lprintf_P(PSTR("CS: %x TCS: %x\n"), checksum, tSum);
    5038:	00 d0       	rcall	.+0      	; 0x503a <debugPrintRawStrings+0x3ca>
    503a:	00 d0       	rcall	.+0      	; 0x503c <debugPrintRawStrings+0x3cc>
    503c:	00 d0       	rcall	.+0      	; 0x503e <debugPrintRawStrings+0x3ce>
    503e:	ed b7       	in	r30, 0x3d	; 61
    5040:	fe b7       	in	r31, 0x3e	; 62
    5042:	31 96       	adiw	r30, 0x01	; 1
    5044:	8c e0       	ldi	r24, 0x0C	; 12
    5046:	94 e0       	ldi	r25, 0x04	; 4
    5048:	ad b7       	in	r26, 0x3d	; 61
    504a:	be b7       	in	r27, 0x3e	; 62
    504c:	12 96       	adiw	r26, 0x02	; 2
    504e:	9c 93       	st	X, r25
    5050:	8e 93       	st	-X, r24
    5052:	11 97       	sbiw	r26, 0x01	; 1
    5054:	e2 82       	std	Z+2, r14	; 0x02
    5056:	13 82       	std	Z+3, r1	; 0x03
    5058:	89 81       	ldd	r24, Y+1	; 0x01
    505a:	84 83       	std	Z+4, r24	; 0x04
    505c:	15 82       	std	Z+5, r1	; 0x05
    505e:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>
    5062:	ed b7       	in	r30, 0x3d	; 61
    5064:	fe b7       	in	r31, 0x3e	; 62
    5066:	36 96       	adiw	r30, 0x06	; 6
    5068:	0f b6       	in	r0, 0x3f	; 63
    506a:	f8 94       	cli
    506c:	fe bf       	out	0x3e, r31	; 62
    506e:	0f be       	out	0x3f, r0	; 63
    5070:	ed bf       	out	0x3d, r30	; 61

	for(uint8_t j = 0; j < i; j++)
    5072:	0f 2d       	mov	r16, r15
    5074:	10 e0       	ldi	r17, 0x00	; 0
    5076:	00 5d       	subi	r16, 0xD0	; 208
    5078:	1c 4f       	sbci	r17, 0xFC	; 252
	{
		lprintf("%c", lineBuff[j]);
    507a:	8a e6       	ldi	r24, 0x6A	; 106
    507c:	c8 2e       	mov	r12, r24
    507e:	82 e0       	ldi	r24, 0x02	; 2
    5080:	d8 2e       	mov	r13, r24
    5082:	16 c0       	rjmp	.+44     	; 0x50b0 <debugPrintRawStrings+0x440>
    5084:	00 d0       	rcall	.+0      	; 0x5086 <debugPrintRawStrings+0x416>
    5086:	00 d0       	rcall	.+0      	; 0x5088 <debugPrintRawStrings+0x418>
    5088:	ed b7       	in	r30, 0x3d	; 61
    508a:	fe b7       	in	r31, 0x3e	; 62
    508c:	31 96       	adiw	r30, 0x01	; 1
    508e:	ad b7       	in	r26, 0x3d	; 61
    5090:	be b7       	in	r27, 0x3e	; 62
    5092:	12 96       	adiw	r26, 0x02	; 2
    5094:	dc 92       	st	X, r13
    5096:	ce 92       	st	-X, r12
    5098:	11 97       	sbiw	r26, 0x01	; 1
    509a:	d4 01       	movw	r26, r8
    509c:	8d 91       	ld	r24, X+
    509e:	4d 01       	movw	r8, r26
    50a0:	82 83       	std	Z+2, r24	; 0x02
    50a2:	13 82       	std	Z+3, r1	; 0x03
    50a4:	0e 94 30 12 	call	0x2460	; 0x2460 <lprintf>
    50a8:	0f 90       	pop	r0
    50aa:	0f 90       	pop	r0
    50ac:	0f 90       	pop	r0
    50ae:	0f 90       	pop	r0
		 checksum = checksum ^ lineBuff[j];
	}

	lprintf_P(PSTR("CS: %x TCS: %x\n"), checksum, tSum);

	for(uint8_t j = 0; j < i; j++)
    50b0:	80 16       	cp	r8, r16
    50b2:	91 06       	cpc	r9, r17
    50b4:	39 f7       	brne	.-50     	; 0x5084 <debugPrintRawStrings+0x414>
	{
		lprintf("%c", lineBuff[j]);
	}
	if(tSum == checksum)
    50b6:	89 81       	ldd	r24, Y+1	; 0x01
    50b8:	8e 15       	cp	r24, r14
    50ba:	59 f4       	brne	.+22     	; 0x50d2 <debugPrintRawStrings+0x462>
	{
		lprintf_P(PSTR("Checksum Valid\n"));
    50bc:	00 d0       	rcall	.+0      	; 0x50be <debugPrintRawStrings+0x44e>
    50be:	8c ef       	ldi	r24, 0xFC	; 252
    50c0:	93 e0       	ldi	r25, 0x03	; 3
    50c2:	ed b7       	in	r30, 0x3d	; 61
    50c4:	fe b7       	in	r31, 0x3e	; 62
    50c6:	92 83       	std	Z+2, r25	; 0x02
    50c8:	81 83       	std	Z+1, r24	; 0x01
    50ca:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>
    50ce:	0f 90       	pop	r0
    50d0:	0f 90       	pop	r0
	}

}
    50d2:	0f 90       	pop	r0
    50d4:	0f 90       	pop	r0
    50d6:	0f 90       	pop	r0
    50d8:	0f 90       	pop	r0
    50da:	cf 91       	pop	r28
    50dc:	df 91       	pop	r29
    50de:	1f 91       	pop	r17
    50e0:	0f 91       	pop	r16
    50e2:	ff 90       	pop	r15
    50e4:	ef 90       	pop	r14
    50e6:	df 90       	pop	r13
    50e8:	cf 90       	pop	r12
    50ea:	bf 90       	pop	r11
    50ec:	af 90       	pop	r10
    50ee:	9f 90       	pop	r9
    50f0:	8f 90       	pop	r8
    50f2:	08 95       	ret

000050f4 <getGPS>:
//$GPRMC,040302.663,A,3939.7,N,10506.6,W,0.27,358.86,200804,,*1A
//^Sentence             ^Lat(HHMM.M)      ^Speed (Knots)
//         ^HHMMSS.XXX          ^Lon(HHHMM.M)   ^Bearing
//                  ^GPS Fix (A=active, V=invalid)     ^UTC Date
void getGPS(struct gpsData *outputData)
{
    50f4:	2f 92       	push	r2
    50f6:	3f 92       	push	r3
    50f8:	4f 92       	push	r4
    50fa:	5f 92       	push	r5
    50fc:	6f 92       	push	r6
    50fe:	7f 92       	push	r7
    5100:	8f 92       	push	r8
    5102:	9f 92       	push	r9
    5104:	af 92       	push	r10
    5106:	bf 92       	push	r11
    5108:	cf 92       	push	r12
    510a:	df 92       	push	r13
    510c:	ef 92       	push	r14
    510e:	ff 92       	push	r15
    5110:	0f 93       	push	r16
    5112:	1f 93       	push	r17
    5114:	df 93       	push	r29
    5116:	cf 93       	push	r28
    5118:	cd b7       	in	r28, 0x3d	; 61
    511a:	de b7       	in	r29, 0x3e	; 62
    511c:	6f 97       	sbiw	r28, 0x1f	; 31
    511e:	0f b6       	in	r0, 0x3f	; 63
    5120:	f8 94       	cli
    5122:	de bf       	out	0x3e, r29	; 62
    5124:	0f be       	out	0x3f, r0	; 63
    5126:	cd bf       	out	0x3d, r28	; 61
    5128:	1c 01       	movw	r2, r24
	char tempChar;
	uint8_t i;
	uint8_t errorTracker;

	//Needed so the first comparison works out correctly
	memset(lineBuff, 0x00, 100);
    512a:	84 e6       	ldi	r24, 0x64	; 100
    512c:	e4 e9       	ldi	r30, 0x94	; 148
    512e:	f3 e0       	ldi	r31, 0x03	; 3
    5130:	df 01       	movw	r26, r30
    5132:	1d 92       	st	X+, r1
    5134:	8a 95       	dec	r24
    5136:	e9 f7       	brne	.-6      	; 0x5132 <getGPS+0x3e>
    5138:	aa 24       	eor	r10, r10
    513a:	e4 e9       	ldi	r30, 0x94	; 148
    513c:	ee 2e       	mov	r14, r30
    513e:	e3 e0       	ldi	r30, 0x03	; 3
    5140:	fe 2e       	mov	r15, r30
    5142:	10 e0       	ldi	r17, 0x00	; 0
    5144:	04 c0       	rjmp	.+8      	; 0x514e <getGPS+0x5a>
	{
		i=0;
		//i < 99 to leave room for the null terminator
		while(((tempChar = (char)uart_getchar()) != '\n') && (i < 99) && tempChar!= 0xff)
		{
			lineBuff[i] = tempChar;
    5146:	f7 01       	movw	r30, r14
    5148:	81 93       	st	Z+, r24
    514a:	7f 01       	movw	r14, r30
			i++;
    514c:	1f 5f       	subi	r17, 0xFF	; 255
	//something is wrong.
	do
	{
		i=0;
		//i < 99 to leave room for the null terminator
		while(((tempChar = (char)uart_getchar()) != '\n') && (i < 99) && tempChar!= 0xff)
    514e:	0e 94 cf 11 	call	0x239e	; 0x239e <uart_getchar>
    5152:	8a 30       	cpi	r24, 0x0A	; 10
    5154:	21 f0       	breq	.+8      	; 0x515e <getGPS+0x6a>
    5156:	13 36       	cpi	r17, 0x63	; 99
    5158:	11 f0       	breq	.+4      	; 0x515e <getGPS+0x6a>
    515a:	8f 3f       	cpi	r24, 0xFF	; 255
    515c:	a1 f7       	brne	.-24     	; 0x5146 <getGPS+0x52>
		{
			lineBuff[i] = tempChar;
			i++;
		}
		lineBuff[i] = '\0';
    515e:	e1 2e       	mov	r14, r17
    5160:	ff 24       	eor	r15, r15
    5162:	87 01       	movw	r16, r14
    5164:	0c 56       	subi	r16, 0x6C	; 108
    5166:	1c 4f       	sbci	r17, 0xFC	; 252
    5168:	d8 01       	movw	r26, r16
    516a:	1c 92       	st	X, r1
		errorTracker++;
    516c:	a3 94       	inc	r10
	} while((strncmp("$GPRMC", lineBuff, 6) != 0) && errorTracker < 100);
    516e:	80 e6       	ldi	r24, 0x60	; 96
    5170:	92 e0       	ldi	r25, 0x02	; 2
    5172:	64 e9       	ldi	r22, 0x94	; 148
    5174:	73 e0       	ldi	r23, 0x03	; 3
    5176:	46 e0       	ldi	r20, 0x06	; 6
    5178:	50 e0       	ldi	r21, 0x00	; 0
    517a:	0e 94 01 38 	call	0x7002	; 0x7002 <strncmp>
    517e:	00 97       	sbiw	r24, 0x00	; 0
    5180:	21 f0       	breq	.+8      	; 0x518a <getGPS+0x96>
    5182:	b4 e6       	ldi	r27, 0x64	; 100
    5184:	ab 16       	cp	r10, r27
    5186:	c9 f6       	brne	.-78     	; 0x513a <getGPS+0x46>
    5188:	03 c0       	rjmp	.+6      	; 0x5190 <getGPS+0x9c>

	//lprintf("et: %d\n", errorTracker);

	//If something is wrong, return before we try to parse the data.
	//Set the output status to "Loco".
	if(errorTracker >= 100)
    518a:	e3 e6       	ldi	r30, 0x63	; 99
    518c:	ea 15       	cp	r30, r10
    518e:	88 f4       	brcc	.+34     	; 0x51b2 <getGPS+0xbe>
	{
	    lprintf_P(PSTR("ERR\n"));
    5190:	00 d0       	rcall	.+0      	; 0x5192 <getGPS+0x9e>
    5192:	8d e6       	ldi	r24, 0x6D	; 109
    5194:	94 e0       	ldi	r25, 0x04	; 4
    5196:	ad b7       	in	r26, 0x3d	; 61
    5198:	be b7       	in	r27, 0x3e	; 62
    519a:	12 96       	adiw	r26, 0x02	; 2
    519c:	9c 93       	st	X, r25
    519e:	8e 93       	st	-X, r24
    51a0:	11 97       	sbiw	r26, 0x01	; 1
    51a2:	0e 94 e5 11 	call	0x23ca	; 0x23ca <lprintf_P>
		outputData->status  = 3;
    51a6:	83 e0       	ldi	r24, 0x03	; 3
    51a8:	f1 01       	movw	r30, r2
    51aa:	80 83       	st	Z, r24
    51ac:	0f 90       	pop	r0
    51ae:	0f 90       	pop	r0
    51b0:	17 c3       	rjmp	.+1582   	; 0x57e0 <getGPS+0x6ec>
	}

	char targetChecksum[3];
	uint8_t  tSum;
	uint8_t checksum = 0;
	targetChecksum[0] = lineBuff[i-3];
    51b2:	f8 01       	movw	r30, r16
    51b4:	33 97       	sbiw	r30, 0x03	; 3
    51b6:	80 81       	ld	r24, Z
    51b8:	8d 83       	std	Y+5, r24	; 0x05
	targetChecksum[1] = lineBuff[i-2];
    51ba:	f8 01       	movw	r30, r16
    51bc:	32 97       	sbiw	r30, 0x02	; 2
    51be:	80 81       	ld	r24, Z
    51c0:	8e 83       	std	Y+6, r24	; 0x06
	targetChecksum[2] = '\0';
    51c2:	1f 82       	std	Y+7, r1	; 0x07
	sscanf(targetChecksum, "%x", &tSum);
    51c4:	00 d0       	rcall	.+0      	; 0x51c6 <getGPS+0xd2>
    51c6:	00 d0       	rcall	.+0      	; 0x51c8 <getGPS+0xd4>
    51c8:	00 d0       	rcall	.+0      	; 0x51ca <getGPS+0xd6>
    51ca:	ed b7       	in	r30, 0x3d	; 61
    51cc:	fe b7       	in	r31, 0x3e	; 62
    51ce:	31 96       	adiw	r30, 0x01	; 1
    51d0:	ce 01       	movw	r24, r28
    51d2:	05 96       	adiw	r24, 0x05	; 5
    51d4:	ad b7       	in	r26, 0x3d	; 61
    51d6:	be b7       	in	r27, 0x3e	; 62
    51d8:	12 96       	adiw	r26, 0x02	; 2
    51da:	9c 93       	st	X, r25
    51dc:	8e 93       	st	-X, r24
    51de:	11 97       	sbiw	r26, 0x01	; 1
    51e0:	87 e6       	ldi	r24, 0x67	; 103
    51e2:	92 e0       	ldi	r25, 0x02	; 2
    51e4:	93 83       	std	Z+3, r25	; 0x03
    51e6:	82 83       	std	Z+2, r24	; 0x02
    51e8:	ce 01       	movw	r24, r28
    51ea:	01 96       	adiw	r24, 0x01	; 1
    51ec:	95 83       	std	Z+5, r25	; 0x05
    51ee:	84 83       	std	Z+4, r24	; 0x04
    51f0:	0e 94 10 39 	call	0x7220	; 0x7220 <sscanf>
    51f4:	20 e0       	ldi	r18, 0x00	; 0
    51f6:	91 e0       	ldi	r25, 0x01	; 1
    51f8:	ed b7       	in	r30, 0x3d	; 61
    51fa:	fe b7       	in	r31, 0x3e	; 62
    51fc:	36 96       	adiw	r30, 0x06	; 6
    51fe:	0f b6       	in	r0, 0x3f	; 63
    5200:	f8 94       	cli
    5202:	fe bf       	out	0x3e, r31	; 62
    5204:	0f be       	out	0x3f, r0	; 63
    5206:	ed bf       	out	0x3d, r30	; 61
	for(uint8_t j = 1; j < i-4; j++)
    5208:	a7 01       	movw	r20, r14
    520a:	44 50       	subi	r20, 0x04	; 4
    520c:	50 40       	sbci	r21, 0x00	; 0
    520e:	05 c0       	rjmp	.+10     	; 0x521a <getGPS+0x126>
	{
		 checksum = checksum ^ lineBuff[j];
    5210:	ec 56       	subi	r30, 0x6C	; 108
    5212:	fc 4f       	sbci	r31, 0xFC	; 252
    5214:	80 81       	ld	r24, Z
    5216:	28 27       	eor	r18, r24
	uint8_t checksum = 0;
	targetChecksum[0] = lineBuff[i-3];
	targetChecksum[1] = lineBuff[i-2];
	targetChecksum[2] = '\0';
	sscanf(targetChecksum, "%x", &tSum);
	for(uint8_t j = 1; j < i-4; j++)
    5218:	9f 5f       	subi	r25, 0xFF	; 255
    521a:	e9 2f       	mov	r30, r25
    521c:	f0 e0       	ldi	r31, 0x00	; 0
    521e:	e4 17       	cp	r30, r20
    5220:	f5 07       	cpc	r31, r21
    5222:	b4 f3       	brlt	.-20     	; 0x5210 <getGPS+0x11c>
	{
		 checksum = checksum ^ lineBuff[j];
	}

	if(checksum != tSum)
    5224:	89 81       	ldd	r24, Y+1	; 0x01
    5226:	28 17       	cp	r18, r24
    5228:	09 f0       	breq	.+2      	; 0x522c <getGPS+0x138>
    522a:	92 c2       	rjmp	.+1316   	; 0x5750 <getGPS+0x65c>

	char localStatus;

	int error;

	error = sscanf( lineBuff,
    522c:	ed b7       	in	r30, 0x3d	; 61
    522e:	fe b7       	in	r31, 0x3e	; 62
    5230:	74 97       	sbiw	r30, 0x14	; 20
    5232:	0f b6       	in	r0, 0x3f	; 63
    5234:	f8 94       	cli
    5236:	fe bf       	out	0x3e, r31	; 62
    5238:	0f be       	out	0x3f, r0	; 63
    523a:	ed bf       	out	0x3d, r30	; 61
    523c:	31 96       	adiw	r30, 0x01	; 1
    523e:	84 e9       	ldi	r24, 0x94	; 148
    5240:	93 e0       	ldi	r25, 0x03	; 3
    5242:	ad b7       	in	r26, 0x3d	; 61
    5244:	be b7       	in	r27, 0x3e	; 62
    5246:	12 96       	adiw	r26, 0x02	; 2
    5248:	9c 93       	st	X, r25
    524a:	8e 93       	st	-X, r24
    524c:	11 97       	sbiw	r26, 0x01	; 1
    524e:	8b e7       	ldi	r24, 0x7B	; 123
    5250:	92 e0       	ldi	r25, 0x02	; 2
    5252:	93 83       	std	Z+3, r25	; 0x03
    5254:	82 83       	std	Z+2, r24	; 0x02
    5256:	ce 01       	movw	r24, r28
    5258:	40 96       	adiw	r24, 0x10	; 16
    525a:	95 83       	std	Z+5, r25	; 0x05
    525c:	84 83       	std	Z+4, r24	; 0x04
    525e:	ce 01       	movw	r24, r28
    5260:	04 96       	adiw	r24, 0x04	; 4
    5262:	97 83       	std	Z+7, r25	; 0x07
    5264:	86 83       	std	Z+6, r24	; 0x06
    5266:	08 94       	sec
    5268:	21 1c       	adc	r2, r1
    526a:	31 1c       	adc	r3, r1
    526c:	31 86       	std	Z+9, r3	; 0x09
    526e:	20 86       	std	Z+8, r2	; 0x08
    5270:	ce 01       	movw	r24, r28
    5272:	02 96       	adiw	r24, 0x02	; 2
    5274:	93 87       	std	Z+11, r25	; 0x0b
    5276:	82 87       	std	Z+10, r24	; 0x0a
    5278:	44 e0       	ldi	r20, 0x04	; 4
    527a:	50 e0       	ldi	r21, 0x00	; 0
    527c:	24 0e       	add	r2, r20
    527e:	35 1e       	adc	r3, r21
    5280:	35 86       	std	Z+13, r3	; 0x0d
    5282:	24 86       	std	Z+12, r2	; 0x0c
    5284:	8b ef       	ldi	r24, 0xFB	; 251
    5286:	9f ef       	ldi	r25, 0xFF	; 255
    5288:	28 0e       	add	r2, r24
    528a:	39 1e       	adc	r3, r25
    528c:	ce 01       	movw	r24, r28
    528e:	03 96       	adiw	r24, 0x03	; 3
    5290:	97 87       	std	Z+15, r25	; 0x0f
    5292:	86 87       	std	Z+14, r24	; 0x0e
    5294:	ce 01       	movw	r24, r28
    5296:	08 96       	adiw	r24, 0x08	; 8
    5298:	91 8b       	std	Z+17, r25	; 0x11
    529a:	80 8b       	std	Z+16, r24	; 0x10
    529c:	ce 01       	movw	r24, r28
    529e:	0c 96       	adiw	r24, 0x0c	; 12
    52a0:	93 8b       	std	Z+19, r25	; 0x13
    52a2:	82 8b       	std	Z+18, r24	; 0x12
    52a4:	0e 94 10 39 	call	0x7220	; 0x7220 <sscanf>
			"$GPRMC,%f,%c,%f,%c,%f,%c,%f,%f",
			&time, &tempStatus, &outputData->latitude, &latdir,
			&outputData->longitude, &londir, &speed, &bearing);


	outputData->hours = (uint8_t)(time/10000);
    52a8:	e8 88       	ldd	r14, Y+16	; 0x10
    52aa:	f9 88       	ldd	r15, Y+17	; 0x11
    52ac:	0a 89       	ldd	r16, Y+18	; 0x12
    52ae:	1b 89       	ldd	r17, Y+19	; 0x13
    52b0:	c8 01       	movw	r24, r16
    52b2:	b7 01       	movw	r22, r14
    52b4:	20 e0       	ldi	r18, 0x00	; 0
    52b6:	30 e4       	ldi	r19, 0x40	; 64
    52b8:	4c e1       	ldi	r20, 0x1C	; 28
    52ba:	56 e4       	ldi	r21, 0x46	; 70
    52bc:	0e 94 8a 34 	call	0x6914	; 0x6914 <__divsf3>
    52c0:	0e 94 f7 34 	call	0x69ee	; 0x69ee <__fixunssfsi>
    52c4:	d1 01       	movw	r26, r2
    52c6:	50 96       	adiw	r26, 0x10	; 16
    52c8:	6c 93       	st	X, r22
	outputData->minutes = (uint8_t)(time - (outputData->hours)*10000)/100;
    52ca:	70 e0       	ldi	r23, 0x00	; 0
    52cc:	20 e1       	ldi	r18, 0x10	; 16
    52ce:	37 e2       	ldi	r19, 0x27	; 39
    52d0:	fb 01       	movw	r30, r22
    52d2:	e2 9f       	mul	r30, r18
    52d4:	b0 01       	movw	r22, r0
    52d6:	e3 9f       	mul	r30, r19
    52d8:	70 0d       	add	r23, r0
    52da:	f2 9f       	mul	r31, r18
    52dc:	70 0d       	add	r23, r0
    52de:	11 24       	eor	r1, r1
    52e0:	88 27       	eor	r24, r24
    52e2:	77 fd       	sbrc	r23, 7
    52e4:	80 95       	com	r24
    52e6:	98 2f       	mov	r25, r24
    52e8:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <__floatsisf>
    52ec:	9b 01       	movw	r18, r22
    52ee:	ac 01       	movw	r20, r24
    52f0:	c8 01       	movw	r24, r16
    52f2:	b7 01       	movw	r22, r14
    52f4:	0e 94 21 34 	call	0x6842	; 0x6842 <__subsf3>
    52f8:	7b 01       	movw	r14, r22
    52fa:	8c 01       	movw	r16, r24
    52fc:	0e 94 f7 34 	call	0x69ee	; 0x69ee <__fixunssfsi>
    5300:	dc 01       	movw	r26, r24
    5302:	cb 01       	movw	r24, r22
    5304:	64 e6       	ldi	r22, 0x64	; 100
    5306:	0e 94 57 36 	call	0x6cae	; 0x6cae <__udivmodqi4>
    530a:	d1 01       	movw	r26, r2
    530c:	51 96       	adiw	r26, 0x11	; 17
    530e:	8c 93       	st	X, r24
    5310:	51 97       	sbiw	r26, 0x11	; 17
	outputData->seconds = (uint8_t)(time - (outputData->hours)*10000 - (outputData->seconds)*100);
    5312:	52 96       	adiw	r26, 0x12	; 18
    5314:	6c 91       	ld	r22, X
    5316:	24 e6       	ldi	r18, 0x64	; 100
    5318:	62 9f       	mul	r22, r18
    531a:	b0 01       	movw	r22, r0
    531c:	11 24       	eor	r1, r1
    531e:	88 27       	eor	r24, r24
    5320:	77 fd       	sbrc	r23, 7
    5322:	80 95       	com	r24
    5324:	98 2f       	mov	r25, r24
    5326:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <__floatsisf>
    532a:	9b 01       	movw	r18, r22
    532c:	ac 01       	movw	r20, r24
    532e:	c8 01       	movw	r24, r16
    5330:	b7 01       	movw	r22, r14
    5332:	0e 94 21 34 	call	0x6842	; 0x6842 <__subsf3>
    5336:	0e 94 f7 34 	call	0x69ee	; 0x69ee <__fixunssfsi>
    533a:	f1 01       	movw	r30, r2
    533c:	62 8b       	std	Z+18, r22	; 0x12

	if(latdir == 'S')
    533e:	4d b7       	in	r20, 0x3d	; 61
    5340:	5e b7       	in	r21, 0x3e	; 62
    5342:	4c 5e       	subi	r20, 0xEC	; 236
    5344:	5f 4f       	sbci	r21, 0xFF	; 255
    5346:	0f b6       	in	r0, 0x3f	; 63
    5348:	f8 94       	cli
    534a:	5e bf       	out	0x3e, r21	; 62
    534c:	0f be       	out	0x3f, r0	; 63
    534e:	4d bf       	out	0x3d, r20	; 61
    5350:	8a 81       	ldd	r24, Y+2	; 0x02
    5352:	83 35       	cpi	r24, 0x53	; 83
    5354:	89 f4       	brne	.+34     	; 0x5378 <getGPS+0x284>
				outputData->latitude = 0-(outputData->latitude);
    5356:	60 e0       	ldi	r22, 0x00	; 0
    5358:	70 e0       	ldi	r23, 0x00	; 0
    535a:	80 e0       	ldi	r24, 0x00	; 0
    535c:	90 e0       	ldi	r25, 0x00	; 0
    535e:	21 81       	ldd	r18, Z+1	; 0x01
    5360:	32 81       	ldd	r19, Z+2	; 0x02
    5362:	43 81       	ldd	r20, Z+3	; 0x03
    5364:	54 81       	ldd	r21, Z+4	; 0x04
    5366:	0e 94 21 34 	call	0x6842	; 0x6842 <__subsf3>
    536a:	d1 01       	movw	r26, r2
    536c:	11 96       	adiw	r26, 0x01	; 1
    536e:	6d 93       	st	X+, r22
    5370:	7d 93       	st	X+, r23
    5372:	8d 93       	st	X+, r24
    5374:	9c 93       	st	X, r25
    5376:	14 97       	sbiw	r26, 0x04	; 4
	if(londir == 'W')
    5378:	8b 81       	ldd	r24, Y+3	; 0x03
    537a:	87 35       	cpi	r24, 0x57	; 87
    537c:	91 f4       	brne	.+36     	; 0x53a2 <getGPS+0x2ae>
				outputData->longitude = 0-(outputData->longitude);
    537e:	60 e0       	ldi	r22, 0x00	; 0
    5380:	70 e0       	ldi	r23, 0x00	; 0
    5382:	80 e0       	ldi	r24, 0x00	; 0
    5384:	90 e0       	ldi	r25, 0x00	; 0
    5386:	f1 01       	movw	r30, r2
    5388:	25 81       	ldd	r18, Z+5	; 0x05
    538a:	36 81       	ldd	r19, Z+6	; 0x06
    538c:	47 81       	ldd	r20, Z+7	; 0x07
    538e:	50 85       	ldd	r21, Z+8	; 0x08
    5390:	0e 94 21 34 	call	0x6842	; 0x6842 <__subsf3>
    5394:	d1 01       	movw	r26, r2
    5396:	15 96       	adiw	r26, 0x05	; 5
    5398:	6d 93       	st	X+, r22
    539a:	7d 93       	st	X+, r23
    539c:	8d 93       	st	X+, r24
    539e:	9c 93       	st	X, r25
    53a0:	18 97       	sbiw	r26, 0x08	; 8

	latDegrees = (int)(outputData->latitude/100);
    53a2:	f1 01       	movw	r30, r2
    53a4:	a1 80       	ldd	r10, Z+1	; 0x01
    53a6:	b2 80       	ldd	r11, Z+2	; 0x02
    53a8:	c3 80       	ldd	r12, Z+3	; 0x03
    53aa:	d4 80       	ldd	r13, Z+4	; 0x04
    53ac:	c6 01       	movw	r24, r12
    53ae:	b5 01       	movw	r22, r10
    53b0:	20 e0       	ldi	r18, 0x00	; 0
    53b2:	30 e0       	ldi	r19, 0x00	; 0
    53b4:	48 ec       	ldi	r20, 0xC8	; 200
    53b6:	52 e4       	ldi	r21, 0x42	; 66
    53b8:	0e 94 8a 34 	call	0x6914	; 0x6914 <__divsf3>
    53bc:	0e 94 f2 34 	call	0x69e4	; 0x69e4 <__fixsfsi>
    53c0:	7b 01       	movw	r14, r22
    53c2:	8c 01       	movw	r16, r24
	latMinutes = (float)(outputData->latitude - latDegrees*100);
	outputData->latitude = latDegrees + (latMinutes/60); //Conversion into decimal degrees
    53c4:	b7 01       	movw	r22, r14
    53c6:	88 27       	eor	r24, r24
    53c8:	77 fd       	sbrc	r23, 7
    53ca:	80 95       	com	r24
    53cc:	98 2f       	mov	r25, r24
    53ce:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <__floatsisf>
    53d2:	3b 01       	movw	r6, r22
    53d4:	4c 01       	movw	r8, r24
    53d6:	74 e6       	ldi	r23, 0x64	; 100
    53d8:	47 2e       	mov	r4, r23
    53da:	51 2c       	mov	r5, r1
    53dc:	e4 9c       	mul	r14, r4
    53de:	b0 01       	movw	r22, r0
    53e0:	e5 9c       	mul	r14, r5
    53e2:	70 0d       	add	r23, r0
    53e4:	f4 9c       	mul	r15, r4
    53e6:	70 0d       	add	r23, r0
    53e8:	11 24       	eor	r1, r1
    53ea:	88 27       	eor	r24, r24
    53ec:	77 fd       	sbrc	r23, 7
    53ee:	80 95       	com	r24
    53f0:	98 2f       	mov	r25, r24
    53f2:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <__floatsisf>
    53f6:	9b 01       	movw	r18, r22
    53f8:	ac 01       	movw	r20, r24
    53fa:	c6 01       	movw	r24, r12
    53fc:	b5 01       	movw	r22, r10
    53fe:	0e 94 21 34 	call	0x6842	; 0x6842 <__subsf3>
    5402:	20 e0       	ldi	r18, 0x00	; 0
    5404:	30 e0       	ldi	r19, 0x00	; 0
    5406:	40 e7       	ldi	r20, 0x70	; 112
    5408:	52 e4       	ldi	r21, 0x42	; 66
    540a:	0e 94 8a 34 	call	0x6914	; 0x6914 <__divsf3>
    540e:	9b 01       	movw	r18, r22
    5410:	ac 01       	movw	r20, r24
    5412:	c4 01       	movw	r24, r8
    5414:	b3 01       	movw	r22, r6
    5416:	0e 94 22 34 	call	0x6844	; 0x6844 <__addsf3>
    541a:	d1 01       	movw	r26, r2
    541c:	11 96       	adiw	r26, 0x01	; 1
    541e:	6d 93       	st	X+, r22
    5420:	7d 93       	st	X+, r23
    5422:	8d 93       	st	X+, r24
    5424:	9c 93       	st	X, r25
    5426:	14 97       	sbiw	r26, 0x04	; 4

	lonDegrees = (int)(outputData->longitude/100);
    5428:	15 96       	adiw	r26, 0x05	; 5
    542a:	ad 90       	ld	r10, X+
    542c:	bd 90       	ld	r11, X+
    542e:	cd 90       	ld	r12, X+
    5430:	dc 90       	ld	r13, X
    5432:	18 97       	sbiw	r26, 0x08	; 8
    5434:	c6 01       	movw	r24, r12
    5436:	b5 01       	movw	r22, r10
    5438:	20 e0       	ldi	r18, 0x00	; 0
    543a:	30 e0       	ldi	r19, 0x00	; 0
    543c:	48 ec       	ldi	r20, 0xC8	; 200
    543e:	52 e4       	ldi	r21, 0x42	; 66
    5440:	0e 94 8a 34 	call	0x6914	; 0x6914 <__divsf3>
    5444:	0e 94 f2 34 	call	0x69e4	; 0x69e4 <__fixsfsi>
    5448:	7b 01       	movw	r14, r22
    544a:	8c 01       	movw	r16, r24
	lonMinutes = (float)(outputData->longitude - lonDegrees*100);
	outputData->longitude = lonDegrees + (lonMinutes/60); //Conversion into decimal degrees
    544c:	b7 01       	movw	r22, r14
    544e:	88 27       	eor	r24, r24
    5450:	77 fd       	sbrc	r23, 7
    5452:	80 95       	com	r24
    5454:	98 2f       	mov	r25, r24
    5456:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <__floatsisf>
    545a:	3b 01       	movw	r6, r22
    545c:	4c 01       	movw	r8, r24
    545e:	e4 9c       	mul	r14, r4
    5460:	b0 01       	movw	r22, r0
    5462:	e5 9c       	mul	r14, r5
    5464:	70 0d       	add	r23, r0
    5466:	f4 9c       	mul	r15, r4
    5468:	70 0d       	add	r23, r0
    546a:	11 24       	eor	r1, r1
    546c:	88 27       	eor	r24, r24
    546e:	77 fd       	sbrc	r23, 7
    5470:	80 95       	com	r24
    5472:	98 2f       	mov	r25, r24
    5474:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <__floatsisf>
    5478:	9b 01       	movw	r18, r22
    547a:	ac 01       	movw	r20, r24
    547c:	c6 01       	movw	r24, r12
    547e:	b5 01       	movw	r22, r10
    5480:	0e 94 21 34 	call	0x6842	; 0x6842 <__subsf3>
    5484:	20 e0       	ldi	r18, 0x00	; 0
    5486:	30 e0       	ldi	r19, 0x00	; 0
    5488:	40 e7       	ldi	r20, 0x70	; 112
    548a:	52 e4       	ldi	r21, 0x42	; 66
    548c:	0e 94 8a 34 	call	0x6914	; 0x6914 <__divsf3>
    5490:	9b 01       	movw	r18, r22
    5492:	ac 01       	movw	r20, r24
    5494:	c4 01       	movw	r24, r8
    5496:	b3 01       	movw	r22, r6
    5498:	0e 94 22 34 	call	0x6844	; 0x6844 <__addsf3>
    549c:	f1 01       	movw	r30, r2
    549e:	65 83       	std	Z+5, r22	; 0x05
    54a0:	76 83       	std	Z+6, r23	; 0x06
    54a2:	87 83       	std	Z+7, r24	; 0x07
    54a4:	90 87       	std	Z+8, r25	; 0x08

	outputData->speed = (uint8_t)speed;
    54a6:	68 85       	ldd	r22, Y+8	; 0x08
    54a8:	79 85       	ldd	r23, Y+9	; 0x09
    54aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    54ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    54ae:	0e 94 f7 34 	call	0x69ee	; 0x69ee <__fixunssfsi>
    54b2:	d1 01       	movw	r26, r2
    54b4:	19 96       	adiw	r26, 0x09	; 9
    54b6:	6c 93       	st	X, r22
	outputData->bearing = (uint16_t)bearing;
    54b8:	6c 85       	ldd	r22, Y+12	; 0x0c
    54ba:	7d 85       	ldd	r23, Y+13	; 0x0d
    54bc:	8e 85       	ldd	r24, Y+14	; 0x0e
    54be:	9f 85       	ldd	r25, Y+15	; 0x0f
    54c0:	0e 94 f7 34 	call	0x69ee	; 0x69ee <__fixunssfsi>
    54c4:	f1 01       	movw	r30, r2
    54c6:	73 87       	std	Z+11, r23	; 0x0b
    54c8:	62 87       	std	Z+10, r22	; 0x0a


	// Begin GPGSA Acquisition Section

	//Needed so the first comparison works out correctly
	memset(lineBuff, 0x00, 100);
    54ca:	84 e6       	ldi	r24, 0x64	; 100
    54cc:	e4 e9       	ldi	r30, 0x94	; 148
    54ce:	f3 e0       	ldi	r31, 0x03	; 3
    54d0:	df 01       	movw	r26, r30
    54d2:	1d 92       	st	X+, r1
    54d4:	8a 95       	dec	r24
    54d6:	e9 f7       	brne	.-6      	; 0x54d2 <getGPS+0x3de>
    54d8:	aa 24       	eor	r10, r10
    54da:	64 e9       	ldi	r22, 0x94	; 148
    54dc:	e6 2e       	mov	r14, r22
    54de:	63 e0       	ldi	r22, 0x03	; 3
    54e0:	f6 2e       	mov	r15, r22
    54e2:	10 e0       	ldi	r17, 0x00	; 0
    54e4:	04 c0       	rjmp	.+8      	; 0x54ee <getGPS+0x3fa>
	{
		i=0;
		//i < 99 to leave room for the null terminator
		while(((tempChar = (char)uart_getchar()) != '\n') && i < 99)
		{
			lineBuff[i] = tempChar;
    54e6:	f7 01       	movw	r30, r14
    54e8:	81 93       	st	Z+, r24
    54ea:	7f 01       	movw	r14, r30
			i++;
    54ec:	1f 5f       	subi	r17, 0xFF	; 255
	errorTracker = 0;
	do
	{
		i=0;
		//i < 99 to leave room for the null terminator
		while(((tempChar = (char)uart_getchar()) != '\n') && i < 99)
    54ee:	0e 94 cf 11 	call	0x239e	; 0x239e <uart_getchar>
    54f2:	8a 30       	cpi	r24, 0x0A	; 10
    54f4:	11 f0       	breq	.+4      	; 0x54fa <getGPS+0x406>
    54f6:	13 36       	cpi	r17, 0x63	; 99
    54f8:	b1 f7       	brne	.-20     	; 0x54e6 <getGPS+0x3f2>
		{
			lineBuff[i] = tempChar;
			i++;
		}
		errorTracker++;
    54fa:	a3 94       	inc	r10
		lineBuff[i] = '\0';
    54fc:	e1 2e       	mov	r14, r17
    54fe:	ff 24       	eor	r15, r15
    5500:	87 01       	movw	r16, r14
    5502:	0c 56       	subi	r16, 0x6C	; 108
    5504:	1c 4f       	sbci	r17, 0xFC	; 252
    5506:	d8 01       	movw	r26, r16
    5508:	1c 92       	st	X, r1
	} while((strncmp("$GPGSA", lineBuff, 6) != 0) && errorTracker < 100);
    550a:	8d e6       	ldi	r24, 0x6D	; 109
    550c:	92 e0       	ldi	r25, 0x02	; 2
    550e:	64 e9       	ldi	r22, 0x94	; 148
    5510:	73 e0       	ldi	r23, 0x03	; 3
    5512:	46 e0       	ldi	r20, 0x06	; 6
    5514:	50 e0       	ldi	r21, 0x00	; 0
    5516:	0e 94 01 38 	call	0x7002	; 0x7002 <strncmp>
    551a:	00 97       	sbiw	r24, 0x00	; 0
    551c:	21 f0       	breq	.+8      	; 0x5526 <getGPS+0x432>
    551e:	b4 e6       	ldi	r27, 0x64	; 100
    5520:	ab 16       	cp	r10, r27
    5522:	d9 f6       	brne	.-74     	; 0x54da <getGPS+0x3e6>
    5524:	d7 c0       	rjmp	.+430    	; 0x56d4 <getGPS+0x5e0>
	// End GPGSA Acquisition Section

	if(errorTracker >= 100)
    5526:	e3 e6       	ldi	r30, 0x63	; 99
    5528:	ea 15       	cp	r30, r10
    552a:	08 f4       	brcc	.+2      	; 0x552e <getGPS+0x43a>
    552c:	d3 c0       	rjmp	.+422    	; 0x56d4 <getGPS+0x5e0>
		outputData->status  = 3;
		return;
	}

	checksum = 0;
	targetChecksum[0] = lineBuff[i-3];
    552e:	f8 01       	movw	r30, r16
    5530:	33 97       	sbiw	r30, 0x03	; 3
    5532:	80 81       	ld	r24, Z
    5534:	8d 83       	std	Y+5, r24	; 0x05
	targetChecksum[1] = lineBuff[i-2];
    5536:	f8 01       	movw	r30, r16
    5538:	32 97       	sbiw	r30, 0x02	; 2
    553a:	80 81       	ld	r24, Z
    553c:	8e 83       	std	Y+6, r24	; 0x06
	targetChecksum[2] = '\0';
    553e:	1f 82       	std	Y+7, r1	; 0x07
	sscanf(targetChecksum, "%x", &tSum);
    5540:	00 d0       	rcall	.+0      	; 0x5542 <getGPS+0x44e>
    5542:	00 d0       	rcall	.+0      	; 0x5544 <getGPS+0x450>
    5544:	00 d0       	rcall	.+0      	; 0x5546 <getGPS+0x452>
    5546:	ed b7       	in	r30, 0x3d	; 61
    5548:	fe b7       	in	r31, 0x3e	; 62
    554a:	31 96       	adiw	r30, 0x01	; 1
    554c:	ce 01       	movw	r24, r28
    554e:	05 96       	adiw	r24, 0x05	; 5
    5550:	ad b7       	in	r26, 0x3d	; 61
    5552:	be b7       	in	r27, 0x3e	; 62
    5554:	12 96       	adiw	r26, 0x02	; 2
    5556:	9c 93       	st	X, r25
    5558:	8e 93       	st	-X, r24
    555a:	11 97       	sbiw	r26, 0x01	; 1
    555c:	87 e6       	ldi	r24, 0x67	; 103
    555e:	92 e0       	ldi	r25, 0x02	; 2
    5560:	93 83       	std	Z+3, r25	; 0x03
    5562:	82 83       	std	Z+2, r24	; 0x02
    5564:	ce 01       	movw	r24, r28
    5566:	01 96       	adiw	r24, 0x01	; 1
    5568:	95 83       	std	Z+5, r25	; 0x05
    556a:	84 83       	std	Z+4, r24	; 0x04
    556c:	0e 94 10 39 	call	0x7220	; 0x7220 <sscanf>
    5570:	20 e0       	ldi	r18, 0x00	; 0
    5572:	91 e0       	ldi	r25, 0x01	; 1
    5574:	ed b7       	in	r30, 0x3d	; 61
    5576:	fe b7       	in	r31, 0x3e	; 62
    5578:	36 96       	adiw	r30, 0x06	; 6
    557a:	0f b6       	in	r0, 0x3f	; 63
    557c:	f8 94       	cli
    557e:	fe bf       	out	0x3e, r31	; 62
    5580:	0f be       	out	0x3f, r0	; 63
    5582:	ed bf       	out	0x3d, r30	; 61
	for(uint8_t j = 1; j < i-4; j++)
    5584:	a7 01       	movw	r20, r14
    5586:	44 50       	subi	r20, 0x04	; 4
    5588:	50 40       	sbci	r21, 0x00	; 0
    558a:	05 c0       	rjmp	.+10     	; 0x5596 <getGPS+0x4a2>
	{
		 checksum = checksum ^ lineBuff[j];
    558c:	ec 56       	subi	r30, 0x6C	; 108
    558e:	fc 4f       	sbci	r31, 0xFC	; 252
    5590:	80 81       	ld	r24, Z
    5592:	28 27       	eor	r18, r24
	checksum = 0;
	targetChecksum[0] = lineBuff[i-3];
	targetChecksum[1] = lineBuff[i-2];
	targetChecksum[2] = '\0';
	sscanf(targetChecksum, "%x", &tSum);
	for(uint8_t j = 1; j < i-4; j++)
    5594:	9f 5f       	subi	r25, 0xFF	; 255
    5596:	e9 2f       	mov	r30, r25
    5598:	f0 e0       	ldi	r31, 0x00	; 0
    559a:	e4 17       	cp	r30, r20
    559c:	f5 07       	cpc	r31, r21
    559e:	b4 f3       	brlt	.-20     	; 0x558c <getGPS+0x498>
	{
		 checksum = checksum ^ lineBuff[j];
	}

	if(checksum != tSum)
    55a0:	89 81       	ldd	r24, Y+1	; 0x01
    55a2:	28 17       	cp	r18, r24
    55a4:	09 f0       	breq	.+2      	; 0x55a8 <getGPS+0x4b4>
    55a6:	d4 c0       	rjmp	.+424    	; 0x5750 <getGPS+0x65c>

	float tempVdop, tempHdop;
	// Start GPGSA Parse Section

	char *token, *lastToken, *beforeThat;
	token = strtok(lineBuff, ",");
    55a8:	84 e9       	ldi	r24, 0x94	; 148
    55aa:	93 e0       	ldi	r25, 0x03	; 3
    55ac:	6a e9       	ldi	r22, 0x9A	; 154
    55ae:	72 e0       	ldi	r23, 0x02	; 2
    55b0:	0e 94 fc 37 	call	0x6ff8	; 0x6ff8 <strtok>
    55b4:	0a c0       	rjmp	.+20     	; 0x55ca <getGPS+0x4d6>
	while(token != NULL)
	{
		beforeThat = lastToken;
		lastToken = token;
		token = strtok(NULL,",");
    55b6:	80 e0       	ldi	r24, 0x00	; 0
    55b8:	90 e0       	ldi	r25, 0x00	; 0
    55ba:	6a e9       	ldi	r22, 0x9A	; 154
    55bc:	72 e0       	ldi	r23, 0x02	; 2
    55be:	0e 94 fc 37 	call	0x6ff8	; 0x6ff8 <strtok>
    55c2:	4f 2d       	mov	r20, r15
    55c4:	5e 2d       	mov	r21, r14
    55c6:	f0 2e       	mov	r15, r16
    55c8:	e1 2e       	mov	r14, r17
    55ca:	8c 01       	movw	r16, r24
	float tempVdop, tempHdop;
	// Start GPGSA Parse Section

	char *token, *lastToken, *beforeThat;
	token = strtok(lineBuff, ",");
	while(token != NULL)
    55cc:	00 97       	sbiw	r24, 0x00	; 0
    55ce:	99 f7       	brne	.-26     	; 0x55b6 <getGPS+0x4c2>
	{
		beforeThat = lastToken;
		lastToken = token;
		token = strtok(NULL,",");
	}
	sscanf(beforeThat, "%f", &tempHdop);
    55d0:	00 d0       	rcall	.+0      	; 0x55d2 <getGPS+0x4de>
    55d2:	00 d0       	rcall	.+0      	; 0x55d4 <getGPS+0x4e0>
    55d4:	00 d0       	rcall	.+0      	; 0x55d6 <getGPS+0x4e2>
    55d6:	ed b7       	in	r30, 0x3d	; 61
    55d8:	fe b7       	in	r31, 0x3e	; 62
    55da:	31 96       	adiw	r30, 0x01	; 1
    55dc:	ad b7       	in	r26, 0x3d	; 61
    55de:	be b7       	in	r27, 0x3e	; 62
    55e0:	11 96       	adiw	r26, 0x01	; 1
    55e2:	4c 93       	st	X, r20
    55e4:	51 83       	std	Z+1, r21	; 0x01
    55e6:	8c e9       	ldi	r24, 0x9C	; 156
    55e8:	92 e0       	ldi	r25, 0x02	; 2
    55ea:	93 83       	std	Z+3, r25	; 0x03
    55ec:	82 83       	std	Z+2, r24	; 0x02
    55ee:	ce 01       	movw	r24, r28
    55f0:	4c 96       	adiw	r24, 0x1c	; 28
    55f2:	95 83       	std	Z+5, r25	; 0x05
    55f4:	84 83       	std	Z+4, r24	; 0x04
    55f6:	0e 94 10 39 	call	0x7220	; 0x7220 <sscanf>
	sscanf(lastToken, "%f*", &tempVdop);
    55fa:	ed b7       	in	r30, 0x3d	; 61
    55fc:	fe b7       	in	r31, 0x3e	; 62
    55fe:	31 96       	adiw	r30, 0x01	; 1
    5600:	ad b7       	in	r26, 0x3d	; 61
    5602:	be b7       	in	r27, 0x3e	; 62
    5604:	11 96       	adiw	r26, 0x01	; 1
    5606:	fc 92       	st	X, r15
    5608:	e1 82       	std	Z+1, r14	; 0x01
    560a:	8f e9       	ldi	r24, 0x9F	; 159
    560c:	92 e0       	ldi	r25, 0x02	; 2
    560e:	93 83       	std	Z+3, r25	; 0x03
    5610:	82 83       	std	Z+2, r24	; 0x02
    5612:	ce 01       	movw	r24, r28
    5614:	48 96       	adiw	r24, 0x18	; 24
    5616:	95 83       	std	Z+5, r25	; 0x05
    5618:	84 83       	std	Z+4, r24	; 0x04
    561a:	0e 94 10 39 	call	0x7220	; 0x7220 <sscanf>

	outputData->hdop = (uint16_t)(tempHdop*10);
    561e:	6c 8d       	ldd	r22, Y+28	; 0x1c
    5620:	7d 8d       	ldd	r23, Y+29	; 0x1d
    5622:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5624:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5626:	20 e0       	ldi	r18, 0x00	; 0
    5628:	30 e0       	ldi	r19, 0x00	; 0
    562a:	40 e2       	ldi	r20, 0x20	; 32
    562c:	51 e4       	ldi	r21, 0x41	; 65
    562e:	0e 94 d5 35 	call	0x6baa	; 0x6baa <__mulsf3>
    5632:	0e 94 f7 34 	call	0x69ee	; 0x69ee <__fixunssfsi>
    5636:	f1 01       	movw	r30, r2
    5638:	75 87       	std	Z+13, r23	; 0x0d
    563a:	64 87       	std	Z+12, r22	; 0x0c
	outputData->vdop = (uint16_t)(tempVdop*10);
    563c:	68 8d       	ldd	r22, Y+24	; 0x18
    563e:	79 8d       	ldd	r23, Y+25	; 0x19
    5640:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5642:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5644:	20 e0       	ldi	r18, 0x00	; 0
    5646:	30 e0       	ldi	r19, 0x00	; 0
    5648:	40 e2       	ldi	r20, 0x20	; 32
    564a:	51 e4       	ldi	r21, 0x41	; 65
    564c:	0e 94 d5 35 	call	0x6baa	; 0x6baa <__mulsf3>
    5650:	0e 94 f7 34 	call	0x69ee	; 0x69ee <__fixunssfsi>
    5654:	d1 01       	movw	r26, r2
    5656:	1f 96       	adiw	r26, 0x0f	; 15
    5658:	7c 93       	st	X, r23
    565a:	6e 93       	st	-X, r22
    565c:	1e 97       	sbiw	r26, 0x0e	; 14
	// End GPGSA Parse Section

	// Begin GPGGA Acquisition Section

	//Needed so the first comparison works out correctly
	memset(lineBuff, 0x00, 100);
    565e:	84 e6       	ldi	r24, 0x64	; 100
    5660:	e4 e9       	ldi	r30, 0x94	; 148
    5662:	f3 e0       	ldi	r31, 0x03	; 3
    5664:	df 01       	movw	r26, r30
    5666:	1d 92       	st	X+, r1
    5668:	8a 95       	dec	r24
    566a:	e9 f7       	brne	.-6      	; 0x5666 <getGPS+0x572>
    566c:	aa 24       	eor	r10, r10
    566e:	ed b7       	in	r30, 0x3d	; 61
    5670:	fe b7       	in	r31, 0x3e	; 62
    5672:	36 96       	adiw	r30, 0x06	; 6
    5674:	0f b6       	in	r0, 0x3f	; 63
    5676:	f8 94       	cli
    5678:	fe bf       	out	0x3e, r31	; 62
    567a:	0f be       	out	0x3f, r0	; 63
    567c:	ed bf       	out	0x3d, r30	; 61
    567e:	54 e9       	ldi	r21, 0x94	; 148
    5680:	e5 2e       	mov	r14, r21
    5682:	53 e0       	ldi	r21, 0x03	; 3
    5684:	f5 2e       	mov	r15, r21
    5686:	10 e0       	ldi	r17, 0x00	; 0
    5688:	04 c0       	rjmp	.+8      	; 0x5692 <getGPS+0x59e>
	{
		i=0;
		//i < 99 to leave room for the null terminator
		while(((tempChar = (char)uart_getchar()) != '\n') && (i < 99) && tempChar!= 0xff)
		{
			lineBuff[i] = tempChar;
    568a:	d7 01       	movw	r26, r14
    568c:	8d 93       	st	X+, r24
    568e:	7d 01       	movw	r14, r26
			i++;
    5690:	1f 5f       	subi	r17, 0xFF	; 255
	errorTracker = 0;
	do
	{
		i=0;
		//i < 99 to leave room for the null terminator
		while(((tempChar = (char)uart_getchar()) != '\n') && (i < 99) && tempChar!= 0xff)
    5692:	0e 94 cf 11 	call	0x239e	; 0x239e <uart_getchar>
    5696:	8a 30       	cpi	r24, 0x0A	; 10
    5698:	21 f0       	breq	.+8      	; 0x56a2 <getGPS+0x5ae>
    569a:	13 36       	cpi	r17, 0x63	; 99
    569c:	11 f0       	breq	.+4      	; 0x56a2 <getGPS+0x5ae>
    569e:	8f 3f       	cpi	r24, 0xFF	; 255
    56a0:	a1 f7       	brne	.-24     	; 0x568a <getGPS+0x596>
		{
			lineBuff[i] = tempChar;
			i++;
		}
		lineBuff[i] = '\0';
    56a2:	e1 2e       	mov	r14, r17
    56a4:	ff 24       	eor	r15, r15
    56a6:	87 01       	movw	r16, r14
    56a8:	0c 56       	subi	r16, 0x6C	; 108
    56aa:	1c 4f       	sbci	r17, 0xFC	; 252
    56ac:	f8 01       	movw	r30, r16
    56ae:	10 82       	st	Z, r1
		errorTracker++;
    56b0:	a3 94       	inc	r10
	} while((strncmp("$GPGGA", lineBuff, 6) != 0) && errorTracker < 100);
    56b2:	84 e7       	ldi	r24, 0x74	; 116
    56b4:	92 e0       	ldi	r25, 0x02	; 2
    56b6:	64 e9       	ldi	r22, 0x94	; 148
    56b8:	73 e0       	ldi	r23, 0x03	; 3
    56ba:	46 e0       	ldi	r20, 0x06	; 6
    56bc:	50 e0       	ldi	r21, 0x00	; 0
    56be:	0e 94 01 38 	call	0x7002	; 0x7002 <strncmp>
    56c2:	00 97       	sbiw	r24, 0x00	; 0
    56c4:	21 f0       	breq	.+8      	; 0x56ce <getGPS+0x5da>
    56c6:	f4 e6       	ldi	r31, 0x64	; 100
    56c8:	af 16       	cp	r10, r31
    56ca:	c9 f6       	brne	.-78     	; 0x567e <getGPS+0x58a>
    56cc:	03 c0       	rjmp	.+6      	; 0x56d4 <getGPS+0x5e0>
	// End GPGGA Acquisition Section

	if(errorTracker >= 100)
    56ce:	43 e6       	ldi	r20, 0x63	; 99
    56d0:	4a 15       	cp	r20, r10
    56d2:	10 f4       	brcc	.+4      	; 0x56d8 <getGPS+0x5e4>
	{
		outputData->status  = 3;
    56d4:	83 e0       	ldi	r24, 0x03	; 3
    56d6:	3d c0       	rjmp	.+122    	; 0x5752 <getGPS+0x65e>
		return;
	}

	checksum = 0;
	targetChecksum[0] = lineBuff[i-3];
    56d8:	f8 01       	movw	r30, r16
    56da:	33 97       	sbiw	r30, 0x03	; 3
    56dc:	80 81       	ld	r24, Z
    56de:	8d 83       	std	Y+5, r24	; 0x05
	targetChecksum[1] = lineBuff[i-2];
    56e0:	f8 01       	movw	r30, r16
    56e2:	32 97       	sbiw	r30, 0x02	; 2
    56e4:	80 81       	ld	r24, Z
    56e6:	8e 83       	std	Y+6, r24	; 0x06
	targetChecksum[2] = '\0';
    56e8:	1f 82       	std	Y+7, r1	; 0x07
	sscanf(targetChecksum, "%x", &tSum);
    56ea:	00 d0       	rcall	.+0      	; 0x56ec <getGPS+0x5f8>
    56ec:	00 d0       	rcall	.+0      	; 0x56ee <getGPS+0x5fa>
    56ee:	00 d0       	rcall	.+0      	; 0x56f0 <getGPS+0x5fc>
    56f0:	ed b7       	in	r30, 0x3d	; 61
    56f2:	fe b7       	in	r31, 0x3e	; 62
    56f4:	31 96       	adiw	r30, 0x01	; 1
    56f6:	ce 01       	movw	r24, r28
    56f8:	05 96       	adiw	r24, 0x05	; 5
    56fa:	ad b7       	in	r26, 0x3d	; 61
    56fc:	be b7       	in	r27, 0x3e	; 62
    56fe:	12 96       	adiw	r26, 0x02	; 2
    5700:	9c 93       	st	X, r25
    5702:	8e 93       	st	-X, r24
    5704:	11 97       	sbiw	r26, 0x01	; 1
    5706:	87 e6       	ldi	r24, 0x67	; 103
    5708:	92 e0       	ldi	r25, 0x02	; 2
    570a:	93 83       	std	Z+3, r25	; 0x03
    570c:	82 83       	std	Z+2, r24	; 0x02
    570e:	ce 01       	movw	r24, r28
    5710:	01 96       	adiw	r24, 0x01	; 1
    5712:	95 83       	std	Z+5, r25	; 0x05
    5714:	84 83       	std	Z+4, r24	; 0x04
    5716:	0e 94 10 39 	call	0x7220	; 0x7220 <sscanf>
    571a:	20 e0       	ldi	r18, 0x00	; 0
    571c:	91 e0       	ldi	r25, 0x01	; 1
    571e:	ed b7       	in	r30, 0x3d	; 61
    5720:	fe b7       	in	r31, 0x3e	; 62
    5722:	36 96       	adiw	r30, 0x06	; 6
    5724:	0f b6       	in	r0, 0x3f	; 63
    5726:	f8 94       	cli
    5728:	fe bf       	out	0x3e, r31	; 62
    572a:	0f be       	out	0x3f, r0	; 63
    572c:	ed bf       	out	0x3d, r30	; 61
	for(uint8_t j = 1; j < i-4; j++)
    572e:	a7 01       	movw	r20, r14
    5730:	44 50       	subi	r20, 0x04	; 4
    5732:	50 40       	sbci	r21, 0x00	; 0
    5734:	05 c0       	rjmp	.+10     	; 0x5740 <getGPS+0x64c>
	{
		 checksum = checksum ^ lineBuff[j];
    5736:	ec 56       	subi	r30, 0x6C	; 108
    5738:	fc 4f       	sbci	r31, 0xFC	; 252
    573a:	80 81       	ld	r24, Z
    573c:	28 27       	eor	r18, r24
	checksum = 0;
	targetChecksum[0] = lineBuff[i-3];
	targetChecksum[1] = lineBuff[i-2];
	targetChecksum[2] = '\0';
	sscanf(targetChecksum, "%x", &tSum);
	for(uint8_t j = 1; j < i-4; j++)
    573e:	9f 5f       	subi	r25, 0xFF	; 255
    5740:	e9 2f       	mov	r30, r25
    5742:	f0 e0       	ldi	r31, 0x00	; 0
    5744:	e4 17       	cp	r30, r20
    5746:	f5 07       	cpc	r31, r21
    5748:	b4 f3       	brlt	.-20     	; 0x5736 <getGPS+0x642>
	{
		 checksum = checksum ^ lineBuff[j];
	}

	if(checksum != tSum)
    574a:	89 81       	ldd	r24, Y+1	; 0x01
    574c:	28 17       	cp	r18, r24
    574e:	21 f0       	breq	.+8      	; 0x5758 <getGPS+0x664>
	{
		outputData->status = 2;
    5750:	82 e0       	ldi	r24, 0x02	; 2
    5752:	d1 01       	movw	r26, r2
    5754:	8c 93       	st	X, r24
    5756:	44 c0       	rjmp	.+136    	; 0x57e0 <getGPS+0x6ec>

	// Start GPGGA Parse Section



	sscanf( lineBuff,
    5758:	ed b7       	in	r30, 0x3d	; 61
    575a:	fe b7       	in	r31, 0x3e	; 62
    575c:	38 97       	sbiw	r30, 0x08	; 8
    575e:	0f b6       	in	r0, 0x3f	; 63
    5760:	f8 94       	cli
    5762:	fe bf       	out	0x3e, r31	; 62
    5764:	0f be       	out	0x3f, r0	; 63
    5766:	ed bf       	out	0x3d, r30	; 61
    5768:	31 96       	adiw	r30, 0x01	; 1
    576a:	84 e9       	ldi	r24, 0x94	; 148
    576c:	93 e0       	ldi	r25, 0x03	; 3
    576e:	ad b7       	in	r26, 0x3d	; 61
    5770:	be b7       	in	r27, 0x3e	; 62
    5772:	12 96       	adiw	r26, 0x02	; 2
    5774:	9c 93       	st	X, r25
    5776:	8e 93       	st	-X, r24
    5778:	11 97       	sbiw	r26, 0x01	; 1
    577a:	83 ea       	ldi	r24, 0xA3	; 163
    577c:	92 e0       	ldi	r25, 0x02	; 2
    577e:	93 83       	std	Z+3, r25	; 0x03
    5780:	82 83       	std	Z+2, r24	; 0x02
    5782:	45 e1       	ldi	r20, 0x15	; 21
    5784:	50 e0       	ldi	r21, 0x00	; 0
    5786:	24 0e       	add	r2, r20
    5788:	35 1e       	adc	r3, r21
    578a:	35 82       	std	Z+5, r3	; 0x05
    578c:	24 82       	std	Z+4, r2	; 0x04
    578e:	8b ee       	ldi	r24, 0xEB	; 235
    5790:	9f ef       	ldi	r25, 0xFF	; 255
    5792:	28 0e       	add	r2, r24
    5794:	39 1e       	adc	r3, r25
    5796:	ce 01       	movw	r24, r28
    5798:	44 96       	adiw	r24, 0x14	; 20
    579a:	97 83       	std	Z+7, r25	; 0x07
    579c:	86 83       	std	Z+6, r24	; 0x06
    579e:	0e 94 10 39 	call	0x7220	; 0x7220 <sscanf>
			"$GPGGA,%*f,%*f,%*c,%*f,%*c,%*d,%d,%*f,%f",
			&outputData->numberOfSats, &altitude );

	outputData->altitude = (uint16_t)altitude;
    57a2:	6c 89       	ldd	r22, Y+20	; 0x14
    57a4:	7d 89       	ldd	r23, Y+21	; 0x15
    57a6:	8e 89       	ldd	r24, Y+22	; 0x16
    57a8:	9f 89       	ldd	r25, Y+23	; 0x17
    57aa:	0e 94 f7 34 	call	0x69ee	; 0x69ee <__fixunssfsi>
    57ae:	d1 01       	movw	r26, r2
    57b0:	54 96       	adiw	r26, 0x14	; 20
    57b2:	7c 93       	st	X, r23
    57b4:	6e 93       	st	-X, r22
    57b6:	53 97       	sbiw	r26, 0x13	; 19
	// End GPGGA Parse Section

	switch(tempStatus)
    57b8:	ed b7       	in	r30, 0x3d	; 61
    57ba:	fe b7       	in	r31, 0x3e	; 62
    57bc:	38 96       	adiw	r30, 0x08	; 8
    57be:	0f b6       	in	r0, 0x3f	; 63
    57c0:	f8 94       	cli
    57c2:	fe bf       	out	0x3e, r31	; 62
    57c4:	0f be       	out	0x3f, r0	; 63
    57c6:	ed bf       	out	0x3d, r30	; 61
    57c8:	8c 81       	ldd	r24, Y+4	; 0x04
    57ca:	81 34       	cpi	r24, 0x41	; 65
    57cc:	19 f0       	breq	.+6      	; 0x57d4 <getGPS+0x6e0>
    57ce:	86 35       	cpi	r24, 0x56	; 86
    57d0:	39 f4       	brne	.+14     	; 0x57e0 <getGPS+0x6ec>
    57d2:	03 c0       	rjmp	.+6      	; 0x57da <getGPS+0x6e6>
	{
		case 'A':
			outputData->status = 0;
    57d4:	d1 01       	movw	r26, r2
    57d6:	1c 92       	st	X, r1
    57d8:	03 c0       	rjmp	.+6      	; 0x57e0 <getGPS+0x6ec>
			break;
		case 'V':
			outputData->status = 1;
    57da:	81 e0       	ldi	r24, 0x01	; 1
    57dc:	f1 01       	movw	r30, r2
    57de:	80 83       	st	Z, r24
			break;
	}

}
    57e0:	6f 96       	adiw	r28, 0x1f	; 31
    57e2:	0f b6       	in	r0, 0x3f	; 63
    57e4:	f8 94       	cli
    57e6:	de bf       	out	0x3e, r29	; 62
    57e8:	0f be       	out	0x3f, r0	; 63
    57ea:	cd bf       	out	0x3d, r28	; 61
    57ec:	cf 91       	pop	r28
    57ee:	df 91       	pop	r29
    57f0:	1f 91       	pop	r17
    57f2:	0f 91       	pop	r16
    57f4:	ff 90       	pop	r15
    57f6:	ef 90       	pop	r14
    57f8:	df 90       	pop	r13
    57fa:	cf 90       	pop	r12
    57fc:	bf 90       	pop	r11
    57fe:	af 90       	pop	r10
    5800:	9f 90       	pop	r9
    5802:	8f 90       	pop	r8
    5804:	7f 90       	pop	r7
    5806:	6f 90       	pop	r6
    5808:	5f 90       	pop	r5
    580a:	4f 90       	pop	r4
    580c:	3f 90       	pop	r3
    580e:	2f 90       	pop	r2
    5810:	08 95       	ret

00005812 <scheduleQueueGetTop>:
	}
	
}

int8_t scheduleQueueGetTop(scheduledFunction *returnFunction, uint32_t *returnTime)
{
    5812:	cf 92       	push	r12
    5814:	df 92       	push	r13
    5816:	ef 92       	push	r14
    5818:	ff 92       	push	r15
    581a:	0f 93       	push	r16
    581c:	1f 93       	push	r17
    581e:	cf 93       	push	r28
    5820:	df 93       	push	r29
    5822:	ec 01       	movw	r28, r24
    5824:	6b 01       	movw	r12, r22
        if (queueEnd != queueStart) {
    5826:	90 91 10 04 	lds	r25, 0x0410
    582a:	80 91 11 04 	lds	r24, 0x0411
    582e:	89 17       	cp	r24, r25
    5830:	11 f4       	brne	.+4      	; 0x5836 <scheduleQueueGetTop+0x24>
    5832:	81 e0       	ldi	r24, 0x01	; 1
    5834:	23 c0       	rjmp	.+70     	; 0x587c <scheduleQueueGetTop+0x6a>
				
                scheduledFunction tempF = scheduledFunctionArray[queueStart];
    5836:	89 2f       	mov	r24, r25
    5838:	90 e0       	ldi	r25, 0x00	; 0
    583a:	fc 01       	movw	r30, r24
    583c:	ee 0f       	add	r30, r30
    583e:	ff 1f       	adc	r31, r31
    5840:	e8 50       	subi	r30, 0x08	; 8
    5842:	fc 4f       	sbci	r31, 0xFC	; 252
    5844:	e0 80       	ld	r14, Z
    5846:	f1 80       	ldd	r15, Z+1	; 0x01
                uint32_t tempT = scheduledFunctionTimes[queueStart];
    5848:	fc 01       	movw	r30, r24
    584a:	ee 0f       	add	r30, r30
    584c:	ff 1f       	adc	r31, r31
    584e:	ee 0f       	add	r30, r30
    5850:	ff 1f       	adc	r31, r31
    5852:	ea 5a       	subi	r30, 0xAA	; 170
    5854:	fb 4f       	sbci	r31, 0xFB	; 251
    5856:	00 81       	ld	r16, Z
    5858:	11 81       	ldd	r17, Z+1	; 0x01
    585a:	22 81       	ldd	r18, Z+2	; 0x02
    585c:	33 81       	ldd	r19, Z+3	; 0x03
                //This Algorithm too.
                queueStart = (queueStart + 1) % QUEUEDEPTH;
    585e:	01 96       	adiw	r24, 0x01	; 1
    5860:	6c e0       	ldi	r22, 0x0C	; 12
    5862:	70 e0       	ldi	r23, 0x00	; 0
    5864:	0e 94 63 36 	call	0x6cc6	; 0x6cc6 <__divmodhi4>
    5868:	80 93 10 04 	sts	0x0410, r24
                *returnFunction = tempF;
    586c:	f9 82       	std	Y+1, r15	; 0x01
    586e:	e8 82       	st	Y, r14
                *returnTime = tempT;
    5870:	f6 01       	movw	r30, r12
    5872:	00 83       	st	Z, r16
    5874:	11 83       	std	Z+1, r17	; 0x01
    5876:	22 83       	std	Z+2, r18	; 0x02
    5878:	33 83       	std	Z+3, r19	; 0x03
    587a:	80 e0       	ldi	r24, 0x00	; 0
                return 0;
        }
        //otherwise, the buffer is empty; return an error code
        return 1;
}
    587c:	df 91       	pop	r29
    587e:	cf 91       	pop	r28
    5880:	1f 91       	pop	r17
    5882:	0f 91       	pop	r16
    5884:	ff 90       	pop	r15
    5886:	ef 90       	pop	r14
    5888:	df 90       	pop	r13
    588a:	cf 90       	pop	r12
    588c:	08 95       	ret

0000588e <scheduleQueueAdd>:
uint8_t queueStart=0;
uint8_t queueEnd=0;


void scheduleQueueAdd(scheduledFunction thisFunction, uint32_t epochTime)
{
    588e:	cf 92       	push	r12
    5890:	df 92       	push	r13
    5892:	ef 92       	push	r14
    5894:	ff 92       	push	r15
    5896:	0f 93       	push	r16
    5898:	1f 93       	push	r17
    589a:	cf 93       	push	r28
    589c:	df 93       	push	r29
    589e:	6c 01       	movw	r12, r24
    58a0:	7a 01       	movw	r14, r20
    58a2:	8b 01       	movw	r16, r22
	//Honestly, this algorithm is straight from wikipedia.
	if ((queueEnd + 1) % QUEUEDEPTH != queueStart) {
    58a4:	80 91 11 04 	lds	r24, 0x0411
    58a8:	c8 2f       	mov	r28, r24
    58aa:	d0 e0       	ldi	r29, 0x00	; 0
    58ac:	ce 01       	movw	r24, r28
    58ae:	01 96       	adiw	r24, 0x01	; 1
    58b0:	6c e0       	ldi	r22, 0x0C	; 12
    58b2:	70 e0       	ldi	r23, 0x00	; 0
    58b4:	0e 94 63 36 	call	0x6cc6	; 0x6cc6 <__divmodhi4>
    58b8:	9c 01       	movw	r18, r24
    58ba:	80 91 10 04 	lds	r24, 0x0410
    58be:	90 e0       	ldi	r25, 0x00	; 0
    58c0:	28 17       	cp	r18, r24
    58c2:	39 07       	cpc	r19, r25
    58c4:	91 f0       	breq	.+36     	; 0x58ea <scheduleQueueAdd+0x5c>
                scheduledFunctionArray[queueEnd] = thisFunction;
    58c6:	cc 0f       	add	r28, r28
    58c8:	dd 1f       	adc	r29, r29
    58ca:	fe 01       	movw	r30, r28
    58cc:	e8 50       	subi	r30, 0x08	; 8
    58ce:	fc 4f       	sbci	r31, 0xFC	; 252
    58d0:	d1 82       	std	Z+1, r13	; 0x01
    58d2:	c0 82       	st	Z, r12
                scheduledFunctionTimes[queueEnd] = epochTime;
    58d4:	cc 0f       	add	r28, r28
    58d6:	dd 1f       	adc	r29, r29
    58d8:	ca 5a       	subi	r28, 0xAA	; 170
    58da:	db 4f       	sbci	r29, 0xFB	; 251
    58dc:	e8 82       	st	Y, r14
    58de:	f9 82       	std	Y+1, r15	; 0x01
    58e0:	0a 83       	std	Y+2, r16	; 0x02
    58e2:	1b 83       	std	Y+3, r17	; 0x03
                queueEnd = (queueEnd + 1) % QUEUEDEPTH;
    58e4:	20 93 11 04 	sts	0x0411, r18
    58e8:	0b c0       	rjmp	.+22     	; 0x5900 <scheduleQueueAdd+0x72>
    } else {
		lprintf("Q BUF FULL\n");
    58ea:	00 d0       	rcall	.+0      	; 0x58ec <scheduleQueueAdd+0x5e>
    58ec:	8c ec       	ldi	r24, 0xCC	; 204
    58ee:	92 e0       	ldi	r25, 0x02	; 2
    58f0:	ed b7       	in	r30, 0x3d	; 61
    58f2:	fe b7       	in	r31, 0x3e	; 62
    58f4:	92 83       	std	Z+2, r25	; 0x02
    58f6:	81 83       	std	Z+1, r24	; 0x01
    58f8:	0e 94 30 12 	call	0x2460	; 0x2460 <lprintf>
    58fc:	0f 90       	pop	r0
    58fe:	0f 90       	pop	r0
	}
	
}
    5900:	df 91       	pop	r29
    5902:	cf 91       	pop	r28
    5904:	1f 91       	pop	r17
    5906:	0f 91       	pop	r16
    5908:	ff 90       	pop	r15
    590a:	ef 90       	pop	r14
    590c:	df 90       	pop	r13
    590e:	cf 90       	pop	r12
    5910:	08 95       	ret

00005912 <vfprintf>:
    5912:	a1 e1       	ldi	r26, 0x11	; 17
    5914:	b0 e0       	ldi	r27, 0x00	; 0
    5916:	ef e8       	ldi	r30, 0x8F	; 143
    5918:	fc e2       	ldi	r31, 0x2C	; 44
    591a:	0c 94 b3 36 	jmp	0x6d66	; 0x6d66 <__prologue_saves__>
    591e:	3c 01       	movw	r6, r24
    5920:	7f 87       	std	Y+15, r23	; 0x0f
    5922:	6e 87       	std	Y+14, r22	; 0x0e
    5924:	6a 01       	movw	r12, r20
    5926:	fc 01       	movw	r30, r24
    5928:	17 82       	std	Z+7, r1	; 0x07
    592a:	16 82       	std	Z+6, r1	; 0x06
    592c:	83 81       	ldd	r24, Z+3	; 0x03
    592e:	81 fd       	sbrc	r24, 1
    5930:	03 c0       	rjmp	.+6      	; 0x5938 <vfprintf+0x26>
    5932:	6f ef       	ldi	r22, 0xFF	; 255
    5934:	7f ef       	ldi	r23, 0xFF	; 255
    5936:	6f c3       	rjmp	.+1758   	; 0x6016 <vfprintf+0x704>
    5938:	9e 01       	movw	r18, r28
    593a:	2f 5f       	subi	r18, 0xFF	; 255
    593c:	3f 4f       	sbci	r19, 0xFF	; 255
    593e:	39 8b       	std	Y+17, r19	; 0x11
    5940:	28 8b       	std	Y+16, r18	; 0x10
    5942:	f3 01       	movw	r30, r6
    5944:	23 81       	ldd	r18, Z+3	; 0x03
    5946:	ee 85       	ldd	r30, Y+14	; 0x0e
    5948:	ff 85       	ldd	r31, Y+15	; 0x0f
    594a:	23 fd       	sbrc	r18, 3
    594c:	85 91       	lpm	r24, Z+
    594e:	23 ff       	sbrs	r18, 3
    5950:	81 91       	ld	r24, Z+
    5952:	ff 87       	std	Y+15, r31	; 0x0f
    5954:	ee 87       	std	Y+14, r30	; 0x0e
    5956:	88 23       	and	r24, r24
    5958:	09 f4       	brne	.+2      	; 0x595c <vfprintf+0x4a>
    595a:	5a c3       	rjmp	.+1716   	; 0x6010 <vfprintf+0x6fe>
    595c:	85 32       	cpi	r24, 0x25	; 37
    595e:	51 f4       	brne	.+20     	; 0x5974 <vfprintf+0x62>
    5960:	ee 85       	ldd	r30, Y+14	; 0x0e
    5962:	ff 85       	ldd	r31, Y+15	; 0x0f
    5964:	23 fd       	sbrc	r18, 3
    5966:	85 91       	lpm	r24, Z+
    5968:	23 ff       	sbrs	r18, 3
    596a:	81 91       	ld	r24, Z+
    596c:	ff 87       	std	Y+15, r31	; 0x0f
    596e:	ee 87       	std	Y+14, r30	; 0x0e
    5970:	85 32       	cpi	r24, 0x25	; 37
    5972:	29 f4       	brne	.+10     	; 0x597e <vfprintf+0x6c>
    5974:	90 e0       	ldi	r25, 0x00	; 0
    5976:	b3 01       	movw	r22, r6
    5978:	0e 94 97 38 	call	0x712e	; 0x712e <fputc>
    597c:	e2 cf       	rjmp	.-60     	; 0x5942 <vfprintf+0x30>
    597e:	98 2f       	mov	r25, r24
    5980:	10 e0       	ldi	r17, 0x00	; 0
    5982:	88 24       	eor	r8, r8
    5984:	99 24       	eor	r9, r9
    5986:	10 32       	cpi	r17, 0x20	; 32
    5988:	b0 f4       	brcc	.+44     	; 0x59b6 <vfprintf+0xa4>
    598a:	9b 32       	cpi	r25, 0x2B	; 43
    598c:	69 f0       	breq	.+26     	; 0x59a8 <vfprintf+0x96>
    598e:	9c 32       	cpi	r25, 0x2C	; 44
    5990:	28 f4       	brcc	.+10     	; 0x599c <vfprintf+0x8a>
    5992:	90 32       	cpi	r25, 0x20	; 32
    5994:	51 f0       	breq	.+20     	; 0x59aa <vfprintf+0x98>
    5996:	93 32       	cpi	r25, 0x23	; 35
    5998:	71 f4       	brne	.+28     	; 0x59b6 <vfprintf+0xa4>
    599a:	0b c0       	rjmp	.+22     	; 0x59b2 <vfprintf+0xa0>
    599c:	9d 32       	cpi	r25, 0x2D	; 45
    599e:	39 f0       	breq	.+14     	; 0x59ae <vfprintf+0x9c>
    59a0:	90 33       	cpi	r25, 0x30	; 48
    59a2:	49 f4       	brne	.+18     	; 0x59b6 <vfprintf+0xa4>
    59a4:	11 60       	ori	r17, 0x01	; 1
    59a6:	28 c0       	rjmp	.+80     	; 0x59f8 <vfprintf+0xe6>
    59a8:	12 60       	ori	r17, 0x02	; 2
    59aa:	14 60       	ori	r17, 0x04	; 4
    59ac:	25 c0       	rjmp	.+74     	; 0x59f8 <vfprintf+0xe6>
    59ae:	18 60       	ori	r17, 0x08	; 8
    59b0:	23 c0       	rjmp	.+70     	; 0x59f8 <vfprintf+0xe6>
    59b2:	10 61       	ori	r17, 0x10	; 16
    59b4:	21 c0       	rjmp	.+66     	; 0x59f8 <vfprintf+0xe6>
    59b6:	17 fd       	sbrc	r17, 7
    59b8:	2a c0       	rjmp	.+84     	; 0x5a0e <vfprintf+0xfc>
    59ba:	89 2f       	mov	r24, r25
    59bc:	80 53       	subi	r24, 0x30	; 48
    59be:	8a 30       	cpi	r24, 0x0A	; 10
    59c0:	78 f4       	brcc	.+30     	; 0x59e0 <vfprintf+0xce>
    59c2:	16 ff       	sbrs	r17, 6
    59c4:	06 c0       	rjmp	.+12     	; 0x59d2 <vfprintf+0xc0>
    59c6:	fa e0       	ldi	r31, 0x0A	; 10
    59c8:	9f 9e       	mul	r9, r31
    59ca:	90 2c       	mov	r9, r0
    59cc:	11 24       	eor	r1, r1
    59ce:	98 0e       	add	r9, r24
    59d0:	13 c0       	rjmp	.+38     	; 0x59f8 <vfprintf+0xe6>
    59d2:	3a e0       	ldi	r19, 0x0A	; 10
    59d4:	83 9e       	mul	r8, r19
    59d6:	80 2c       	mov	r8, r0
    59d8:	11 24       	eor	r1, r1
    59da:	88 0e       	add	r8, r24
    59dc:	10 62       	ori	r17, 0x20	; 32
    59de:	0c c0       	rjmp	.+24     	; 0x59f8 <vfprintf+0xe6>
    59e0:	9e 32       	cpi	r25, 0x2E	; 46
    59e2:	21 f4       	brne	.+8      	; 0x59ec <vfprintf+0xda>
    59e4:	16 fd       	sbrc	r17, 6
    59e6:	14 c3       	rjmp	.+1576   	; 0x6010 <vfprintf+0x6fe>
    59e8:	10 64       	ori	r17, 0x40	; 64
    59ea:	06 c0       	rjmp	.+12     	; 0x59f8 <vfprintf+0xe6>
    59ec:	9c 36       	cpi	r25, 0x6C	; 108
    59ee:	11 f4       	brne	.+4      	; 0x59f4 <vfprintf+0xe2>
    59f0:	10 68       	ori	r17, 0x80	; 128
    59f2:	02 c0       	rjmp	.+4      	; 0x59f8 <vfprintf+0xe6>
    59f4:	98 36       	cpi	r25, 0x68	; 104
    59f6:	59 f4       	brne	.+22     	; 0x5a0e <vfprintf+0xfc>
    59f8:	ee 85       	ldd	r30, Y+14	; 0x0e
    59fa:	ff 85       	ldd	r31, Y+15	; 0x0f
    59fc:	23 fd       	sbrc	r18, 3
    59fe:	95 91       	lpm	r25, Z+
    5a00:	23 ff       	sbrs	r18, 3
    5a02:	91 91       	ld	r25, Z+
    5a04:	ff 87       	std	Y+15, r31	; 0x0f
    5a06:	ee 87       	std	Y+14, r30	; 0x0e
    5a08:	99 23       	and	r25, r25
    5a0a:	09 f0       	breq	.+2      	; 0x5a0e <vfprintf+0xfc>
    5a0c:	bc cf       	rjmp	.-136    	; 0x5986 <vfprintf+0x74>
    5a0e:	89 2f       	mov	r24, r25
    5a10:	85 54       	subi	r24, 0x45	; 69
    5a12:	83 30       	cpi	r24, 0x03	; 3
    5a14:	20 f4       	brcc	.+8      	; 0x5a1e <vfprintf+0x10c>
    5a16:	81 2f       	mov	r24, r17
    5a18:	80 61       	ori	r24, 0x10	; 16
    5a1a:	90 5e       	subi	r25, 0xE0	; 224
    5a1c:	07 c0       	rjmp	.+14     	; 0x5a2c <vfprintf+0x11a>
    5a1e:	89 2f       	mov	r24, r25
    5a20:	85 56       	subi	r24, 0x65	; 101
    5a22:	83 30       	cpi	r24, 0x03	; 3
    5a24:	08 f0       	brcs	.+2      	; 0x5a28 <vfprintf+0x116>
    5a26:	9f c1       	rjmp	.+830    	; 0x5d66 <vfprintf+0x454>
    5a28:	81 2f       	mov	r24, r17
    5a2a:	8f 7e       	andi	r24, 0xEF	; 239
    5a2c:	86 fd       	sbrc	r24, 6
    5a2e:	02 c0       	rjmp	.+4      	; 0x5a34 <vfprintf+0x122>
    5a30:	76 e0       	ldi	r23, 0x06	; 6
    5a32:	97 2e       	mov	r9, r23
    5a34:	6f e3       	ldi	r22, 0x3F	; 63
    5a36:	f6 2e       	mov	r15, r22
    5a38:	f8 22       	and	r15, r24
    5a3a:	95 36       	cpi	r25, 0x65	; 101
    5a3c:	19 f4       	brne	.+6      	; 0x5a44 <vfprintf+0x132>
    5a3e:	f0 e4       	ldi	r31, 0x40	; 64
    5a40:	ff 2a       	or	r15, r31
    5a42:	07 c0       	rjmp	.+14     	; 0x5a52 <vfprintf+0x140>
    5a44:	96 36       	cpi	r25, 0x66	; 102
    5a46:	19 f4       	brne	.+6      	; 0x5a4e <vfprintf+0x13c>
    5a48:	20 e8       	ldi	r18, 0x80	; 128
    5a4a:	f2 2a       	or	r15, r18
    5a4c:	02 c0       	rjmp	.+4      	; 0x5a52 <vfprintf+0x140>
    5a4e:	91 10       	cpse	r9, r1
    5a50:	9a 94       	dec	r9
    5a52:	f7 fe       	sbrs	r15, 7
    5a54:	0a c0       	rjmp	.+20     	; 0x5a6a <vfprintf+0x158>
    5a56:	3b e3       	ldi	r19, 0x3B	; 59
    5a58:	39 15       	cp	r19, r9
    5a5a:	18 f4       	brcc	.+6      	; 0x5a62 <vfprintf+0x150>
    5a5c:	5c e3       	ldi	r21, 0x3C	; 60
    5a5e:	b5 2e       	mov	r11, r21
    5a60:	02 c0       	rjmp	.+4      	; 0x5a66 <vfprintf+0x154>
    5a62:	b9 2c       	mov	r11, r9
    5a64:	b3 94       	inc	r11
    5a66:	27 e0       	ldi	r18, 0x07	; 7
    5a68:	09 c0       	rjmp	.+18     	; 0x5a7c <vfprintf+0x16a>
    5a6a:	47 e0       	ldi	r20, 0x07	; 7
    5a6c:	49 15       	cp	r20, r9
    5a6e:	20 f4       	brcc	.+8      	; 0x5a78 <vfprintf+0x166>
    5a70:	bb 24       	eor	r11, r11
    5a72:	47 e0       	ldi	r20, 0x07	; 7
    5a74:	94 2e       	mov	r9, r20
    5a76:	f7 cf       	rjmp	.-18     	; 0x5a66 <vfprintf+0x154>
    5a78:	29 2d       	mov	r18, r9
    5a7a:	bb 24       	eor	r11, r11
    5a7c:	c6 01       	movw	r24, r12
    5a7e:	04 96       	adiw	r24, 0x04	; 4
    5a80:	9d 87       	std	Y+13, r25	; 0x0d
    5a82:	8c 87       	std	Y+12, r24	; 0x0c
    5a84:	f6 01       	movw	r30, r12
    5a86:	60 81       	ld	r22, Z
    5a88:	71 81       	ldd	r23, Z+1	; 0x01
    5a8a:	82 81       	ldd	r24, Z+2	; 0x02
    5a8c:	93 81       	ldd	r25, Z+3	; 0x03
    5a8e:	ae 01       	movw	r20, r28
    5a90:	4f 5f       	subi	r20, 0xFF	; 255
    5a92:	5f 4f       	sbci	r21, 0xFF	; 255
    5a94:	0b 2d       	mov	r16, r11
    5a96:	0e 94 fe 36 	call	0x6dfc	; 0x6dfc <__ftoa_engine>
    5a9a:	6c 01       	movw	r12, r24
    5a9c:	09 81       	ldd	r16, Y+1	; 0x01
    5a9e:	20 2e       	mov	r2, r16
    5aa0:	33 24       	eor	r3, r3
    5aa2:	00 ff       	sbrs	r16, 0
    5aa4:	04 c0       	rjmp	.+8      	; 0x5aae <vfprintf+0x19c>
    5aa6:	03 fd       	sbrc	r16, 3
    5aa8:	02 c0       	rjmp	.+4      	; 0x5aae <vfprintf+0x19c>
    5aaa:	1d e2       	ldi	r17, 0x2D	; 45
    5aac:	09 c0       	rjmp	.+18     	; 0x5ac0 <vfprintf+0x1ae>
    5aae:	f1 fe       	sbrs	r15, 1
    5ab0:	02 c0       	rjmp	.+4      	; 0x5ab6 <vfprintf+0x1a4>
    5ab2:	1b e2       	ldi	r17, 0x2B	; 43
    5ab4:	05 c0       	rjmp	.+10     	; 0x5ac0 <vfprintf+0x1ae>
    5ab6:	f2 fc       	sbrc	r15, 2
    5ab8:	02 c0       	rjmp	.+4      	; 0x5abe <vfprintf+0x1ac>
    5aba:	10 e0       	ldi	r17, 0x00	; 0
    5abc:	01 c0       	rjmp	.+2      	; 0x5ac0 <vfprintf+0x1ae>
    5abe:	10 e2       	ldi	r17, 0x20	; 32
    5ac0:	c1 01       	movw	r24, r2
    5ac2:	8c 70       	andi	r24, 0x0C	; 12
    5ac4:	90 70       	andi	r25, 0x00	; 0
    5ac6:	89 2b       	or	r24, r25
    5ac8:	b9 f1       	breq	.+110    	; 0x5b38 <vfprintf+0x226>
    5aca:	11 23       	and	r17, r17
    5acc:	11 f4       	brne	.+4      	; 0x5ad2 <vfprintf+0x1c0>
    5ace:	83 e0       	ldi	r24, 0x03	; 3
    5ad0:	01 c0       	rjmp	.+2      	; 0x5ad4 <vfprintf+0x1c2>
    5ad2:	84 e0       	ldi	r24, 0x04	; 4
    5ad4:	88 15       	cp	r24, r8
    5ad6:	10 f0       	brcs	.+4      	; 0x5adc <vfprintf+0x1ca>
    5ad8:	88 24       	eor	r8, r8
    5ada:	0a c0       	rjmp	.+20     	; 0x5af0 <vfprintf+0x1de>
    5adc:	88 1a       	sub	r8, r24
    5ade:	f3 fc       	sbrc	r15, 3
    5ae0:	07 c0       	rjmp	.+14     	; 0x5af0 <vfprintf+0x1de>
    5ae2:	80 e2       	ldi	r24, 0x20	; 32
    5ae4:	90 e0       	ldi	r25, 0x00	; 0
    5ae6:	b3 01       	movw	r22, r6
    5ae8:	0e 94 97 38 	call	0x712e	; 0x712e <fputc>
    5aec:	8a 94       	dec	r8
    5aee:	c9 f7       	brne	.-14     	; 0x5ae2 <vfprintf+0x1d0>
    5af0:	11 23       	and	r17, r17
    5af2:	29 f0       	breq	.+10     	; 0x5afe <vfprintf+0x1ec>
    5af4:	81 2f       	mov	r24, r17
    5af6:	90 e0       	ldi	r25, 0x00	; 0
    5af8:	b3 01       	movw	r22, r6
    5afa:	0e 94 97 38 	call	0x712e	; 0x712e <fputc>
    5afe:	23 fe       	sbrs	r2, 3
    5b00:	03 c0       	rjmp	.+6      	; 0x5b08 <vfprintf+0x1f6>
    5b02:	02 e7       	ldi	r16, 0x72	; 114
    5b04:	14 e0       	ldi	r17, 0x04	; 4
    5b06:	0e c0       	rjmp	.+28     	; 0x5b24 <vfprintf+0x212>
    5b08:	06 e7       	ldi	r16, 0x76	; 118
    5b0a:	14 e0       	ldi	r17, 0x04	; 4
    5b0c:	0b c0       	rjmp	.+22     	; 0x5b24 <vfprintf+0x212>
    5b0e:	e1 14       	cp	r14, r1
    5b10:	f1 04       	cpc	r15, r1
    5b12:	09 f0       	breq	.+2      	; 0x5b16 <vfprintf+0x204>
    5b14:	80 52       	subi	r24, 0x20	; 32
    5b16:	90 e0       	ldi	r25, 0x00	; 0
    5b18:	b3 01       	movw	r22, r6
    5b1a:	0e 94 97 38 	call	0x712e	; 0x712e <fputc>
    5b1e:	0f 5f       	subi	r16, 0xFF	; 255
    5b20:	1f 4f       	sbci	r17, 0xFF	; 255
    5b22:	05 c0       	rjmp	.+10     	; 0x5b2e <vfprintf+0x21c>
    5b24:	ef 2c       	mov	r14, r15
    5b26:	ff 24       	eor	r15, r15
    5b28:	f0 e1       	ldi	r31, 0x10	; 16
    5b2a:	ef 22       	and	r14, r31
    5b2c:	ff 24       	eor	r15, r15
    5b2e:	f8 01       	movw	r30, r16
    5b30:	84 91       	lpm	r24, Z+
    5b32:	88 23       	and	r24, r24
    5b34:	61 f7       	brne	.-40     	; 0x5b0e <vfprintf+0x1fc>
    5b36:	14 c1       	rjmp	.+552    	; 0x5d60 <vfprintf+0x44e>
    5b38:	f7 fe       	sbrs	r15, 7
    5b3a:	12 c0       	rjmp	.+36     	; 0x5b60 <vfprintf+0x24e>
    5b3c:	bc 0c       	add	r11, r12
    5b3e:	24 fe       	sbrs	r2, 4
    5b40:	04 c0       	rjmp	.+8      	; 0x5b4a <vfprintf+0x238>
    5b42:	8a 81       	ldd	r24, Y+2	; 0x02
    5b44:	81 33       	cpi	r24, 0x31	; 49
    5b46:	09 f4       	brne	.+2      	; 0x5b4a <vfprintf+0x238>
    5b48:	ba 94       	dec	r11
    5b4a:	1b 14       	cp	r1, r11
    5b4c:	1c f0       	brlt	.+6      	; 0x5b54 <vfprintf+0x242>
    5b4e:	bb 24       	eor	r11, r11
    5b50:	b3 94       	inc	r11
    5b52:	2d c0       	rjmp	.+90     	; 0x5bae <vfprintf+0x29c>
    5b54:	f8 e0       	ldi	r31, 0x08	; 8
    5b56:	fb 15       	cp	r31, r11
    5b58:	50 f5       	brcc	.+84     	; 0x5bae <vfprintf+0x29c>
    5b5a:	38 e0       	ldi	r19, 0x08	; 8
    5b5c:	b3 2e       	mov	r11, r19
    5b5e:	27 c0       	rjmp	.+78     	; 0x5bae <vfprintf+0x29c>
    5b60:	f6 fc       	sbrc	r15, 6
    5b62:	25 c0       	rjmp	.+74     	; 0x5bae <vfprintf+0x29c>
    5b64:	89 2d       	mov	r24, r9
    5b66:	90 e0       	ldi	r25, 0x00	; 0
    5b68:	8c 15       	cp	r24, r12
    5b6a:	9d 05       	cpc	r25, r13
    5b6c:	4c f0       	brlt	.+18     	; 0x5b80 <vfprintf+0x26e>
    5b6e:	2c ef       	ldi	r18, 0xFC	; 252
    5b70:	c2 16       	cp	r12, r18
    5b72:	2f ef       	ldi	r18, 0xFF	; 255
    5b74:	d2 06       	cpc	r13, r18
    5b76:	24 f0       	brlt	.+8      	; 0x5b80 <vfprintf+0x26e>
    5b78:	30 e8       	ldi	r19, 0x80	; 128
    5b7a:	f3 2a       	or	r15, r19
    5b7c:	01 c0       	rjmp	.+2      	; 0x5b80 <vfprintf+0x26e>
    5b7e:	9a 94       	dec	r9
    5b80:	99 20       	and	r9, r9
    5b82:	49 f0       	breq	.+18     	; 0x5b96 <vfprintf+0x284>
    5b84:	e2 e0       	ldi	r30, 0x02	; 2
    5b86:	f0 e0       	ldi	r31, 0x00	; 0
    5b88:	ec 0f       	add	r30, r28
    5b8a:	fd 1f       	adc	r31, r29
    5b8c:	e9 0d       	add	r30, r9
    5b8e:	f1 1d       	adc	r31, r1
    5b90:	80 81       	ld	r24, Z
    5b92:	80 33       	cpi	r24, 0x30	; 48
    5b94:	a1 f3       	breq	.-24     	; 0x5b7e <vfprintf+0x26c>
    5b96:	f7 fe       	sbrs	r15, 7
    5b98:	0a c0       	rjmp	.+20     	; 0x5bae <vfprintf+0x29c>
    5b9a:	b9 2c       	mov	r11, r9
    5b9c:	b3 94       	inc	r11
    5b9e:	89 2d       	mov	r24, r9
    5ba0:	90 e0       	ldi	r25, 0x00	; 0
    5ba2:	c8 16       	cp	r12, r24
    5ba4:	d9 06       	cpc	r13, r25
    5ba6:	14 f0       	brlt	.+4      	; 0x5bac <vfprintf+0x29a>
    5ba8:	99 24       	eor	r9, r9
    5baa:	01 c0       	rjmp	.+2      	; 0x5bae <vfprintf+0x29c>
    5bac:	9c 18       	sub	r9, r12
    5bae:	f7 fc       	sbrc	r15, 7
    5bb0:	03 c0       	rjmp	.+6      	; 0x5bb8 <vfprintf+0x2a6>
    5bb2:	25 e0       	ldi	r18, 0x05	; 5
    5bb4:	30 e0       	ldi	r19, 0x00	; 0
    5bb6:	09 c0       	rjmp	.+18     	; 0x5bca <vfprintf+0x2b8>
    5bb8:	1c 14       	cp	r1, r12
    5bba:	1d 04       	cpc	r1, r13
    5bbc:	1c f0       	brlt	.+6      	; 0x5bc4 <vfprintf+0x2b2>
    5bbe:	21 e0       	ldi	r18, 0x01	; 1
    5bc0:	30 e0       	ldi	r19, 0x00	; 0
    5bc2:	03 c0       	rjmp	.+6      	; 0x5bca <vfprintf+0x2b8>
    5bc4:	96 01       	movw	r18, r12
    5bc6:	2f 5f       	subi	r18, 0xFF	; 255
    5bc8:	3f 4f       	sbci	r19, 0xFF	; 255
    5bca:	11 23       	and	r17, r17
    5bcc:	11 f0       	breq	.+4      	; 0x5bd2 <vfprintf+0x2c0>
    5bce:	2f 5f       	subi	r18, 0xFF	; 255
    5bd0:	3f 4f       	sbci	r19, 0xFF	; 255
    5bd2:	99 20       	and	r9, r9
    5bd4:	29 f0       	breq	.+10     	; 0x5be0 <vfprintf+0x2ce>
    5bd6:	89 2d       	mov	r24, r9
    5bd8:	90 e0       	ldi	r25, 0x00	; 0
    5bda:	01 96       	adiw	r24, 0x01	; 1
    5bdc:	28 0f       	add	r18, r24
    5bde:	39 1f       	adc	r19, r25
    5be0:	88 2d       	mov	r24, r8
    5be2:	90 e0       	ldi	r25, 0x00	; 0
    5be4:	28 17       	cp	r18, r24
    5be6:	39 07       	cpc	r19, r25
    5be8:	14 f0       	brlt	.+4      	; 0x5bee <vfprintf+0x2dc>
    5bea:	88 24       	eor	r8, r8
    5bec:	01 c0       	rjmp	.+2      	; 0x5bf0 <vfprintf+0x2de>
    5bee:	82 1a       	sub	r8, r18
    5bf0:	4f 2c       	mov	r4, r15
    5bf2:	55 24       	eor	r5, r5
    5bf4:	c2 01       	movw	r24, r4
    5bf6:	89 70       	andi	r24, 0x09	; 9
    5bf8:	90 70       	andi	r25, 0x00	; 0
    5bfa:	89 2b       	or	r24, r25
    5bfc:	39 f0       	breq	.+14     	; 0x5c0c <vfprintf+0x2fa>
    5bfe:	08 c0       	rjmp	.+16     	; 0x5c10 <vfprintf+0x2fe>
    5c00:	80 e2       	ldi	r24, 0x20	; 32
    5c02:	90 e0       	ldi	r25, 0x00	; 0
    5c04:	b3 01       	movw	r22, r6
    5c06:	0e 94 97 38 	call	0x712e	; 0x712e <fputc>
    5c0a:	8a 94       	dec	r8
    5c0c:	88 20       	and	r8, r8
    5c0e:	c1 f7       	brne	.-16     	; 0x5c00 <vfprintf+0x2ee>
    5c10:	11 23       	and	r17, r17
    5c12:	29 f0       	breq	.+10     	; 0x5c1e <vfprintf+0x30c>
    5c14:	81 2f       	mov	r24, r17
    5c16:	90 e0       	ldi	r25, 0x00	; 0
    5c18:	b3 01       	movw	r22, r6
    5c1a:	0e 94 97 38 	call	0x712e	; 0x712e <fputc>
    5c1e:	43 fe       	sbrs	r4, 3
    5c20:	07 c0       	rjmp	.+14     	; 0x5c30 <vfprintf+0x31e>
    5c22:	08 c0       	rjmp	.+16     	; 0x5c34 <vfprintf+0x322>
    5c24:	80 e3       	ldi	r24, 0x30	; 48
    5c26:	90 e0       	ldi	r25, 0x00	; 0
    5c28:	b3 01       	movw	r22, r6
    5c2a:	0e 94 97 38 	call	0x712e	; 0x712e <fputc>
    5c2e:	8a 94       	dec	r8
    5c30:	88 20       	and	r8, r8
    5c32:	c1 f7       	brne	.-16     	; 0x5c24 <vfprintf+0x312>
    5c34:	f7 fe       	sbrs	r15, 7
    5c36:	46 c0       	rjmp	.+140    	; 0x5cc4 <vfprintf+0x3b2>
    5c38:	86 01       	movw	r16, r12
    5c3a:	d7 fe       	sbrs	r13, 7
    5c3c:	02 c0       	rjmp	.+4      	; 0x5c42 <vfprintf+0x330>
    5c3e:	00 e0       	ldi	r16, 0x00	; 0
    5c40:	10 e0       	ldi	r17, 0x00	; 0
    5c42:	76 01       	movw	r14, r12
    5c44:	08 94       	sec
    5c46:	e1 1c       	adc	r14, r1
    5c48:	f1 1c       	adc	r15, r1
    5c4a:	e0 1a       	sub	r14, r16
    5c4c:	f1 0a       	sbc	r15, r17
    5c4e:	41 e0       	ldi	r20, 0x01	; 1
    5c50:	50 e0       	ldi	r21, 0x00	; 0
    5c52:	4c 0f       	add	r20, r28
    5c54:	5d 1f       	adc	r21, r29
    5c56:	e4 0e       	add	r14, r20
    5c58:	f5 1e       	adc	r15, r21
    5c5a:	26 01       	movw	r4, r12
    5c5c:	4b 18       	sub	r4, r11
    5c5e:	51 08       	sbc	r5, r1
    5c60:	89 2d       	mov	r24, r9
    5c62:	90 e0       	ldi	r25, 0x00	; 0
    5c64:	aa 24       	eor	r10, r10
    5c66:	bb 24       	eor	r11, r11
    5c68:	a8 1a       	sub	r10, r24
    5c6a:	b9 0a       	sbc	r11, r25
    5c6c:	5f ef       	ldi	r21, 0xFF	; 255
    5c6e:	0f 3f       	cpi	r16, 0xFF	; 255
    5c70:	15 07       	cpc	r17, r21
    5c72:	29 f4       	brne	.+10     	; 0x5c7e <vfprintf+0x36c>
    5c74:	8e e2       	ldi	r24, 0x2E	; 46
    5c76:	90 e0       	ldi	r25, 0x00	; 0
    5c78:	b3 01       	movw	r22, r6
    5c7a:	0e 94 97 38 	call	0x712e	; 0x712e <fputc>
    5c7e:	c0 16       	cp	r12, r16
    5c80:	d1 06       	cpc	r13, r17
    5c82:	34 f0       	brlt	.+12     	; 0x5c90 <vfprintf+0x37e>
    5c84:	40 16       	cp	r4, r16
    5c86:	51 06       	cpc	r5, r17
    5c88:	1c f4       	brge	.+6      	; 0x5c90 <vfprintf+0x37e>
    5c8a:	f7 01       	movw	r30, r14
    5c8c:	80 81       	ld	r24, Z
    5c8e:	01 c0       	rjmp	.+2      	; 0x5c92 <vfprintf+0x380>
    5c90:	80 e3       	ldi	r24, 0x30	; 48
    5c92:	01 50       	subi	r16, 0x01	; 1
    5c94:	10 40       	sbci	r17, 0x00	; 0
    5c96:	08 94       	sec
    5c98:	e1 1c       	adc	r14, r1
    5c9a:	f1 1c       	adc	r15, r1
    5c9c:	0a 15       	cp	r16, r10
    5c9e:	1b 05       	cpc	r17, r11
    5ca0:	2c f0       	brlt	.+10     	; 0x5cac <vfprintf+0x39a>
    5ca2:	90 e0       	ldi	r25, 0x00	; 0
    5ca4:	b3 01       	movw	r22, r6
    5ca6:	0e 94 97 38 	call	0x712e	; 0x712e <fputc>
    5caa:	e0 cf       	rjmp	.-64     	; 0x5c6c <vfprintf+0x35a>
    5cac:	0c 15       	cp	r16, r12
    5cae:	1d 05       	cpc	r17, r13
    5cb0:	39 f4       	brne	.+14     	; 0x5cc0 <vfprintf+0x3ae>
    5cb2:	9a 81       	ldd	r25, Y+2	; 0x02
    5cb4:	96 33       	cpi	r25, 0x36	; 54
    5cb6:	18 f4       	brcc	.+6      	; 0x5cbe <vfprintf+0x3ac>
    5cb8:	95 33       	cpi	r25, 0x35	; 53
    5cba:	11 f4       	brne	.+4      	; 0x5cc0 <vfprintf+0x3ae>
    5cbc:	24 fe       	sbrs	r2, 4
    5cbe:	81 e3       	ldi	r24, 0x31	; 49
    5cc0:	90 e0       	ldi	r25, 0x00	; 0
    5cc2:	4b c0       	rjmp	.+150    	; 0x5d5a <vfprintf+0x448>
    5cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    5cc6:	81 33       	cpi	r24, 0x31	; 49
    5cc8:	09 f0       	breq	.+2      	; 0x5ccc <vfprintf+0x3ba>
    5cca:	0f 7e       	andi	r16, 0xEF	; 239
    5ccc:	90 e0       	ldi	r25, 0x00	; 0
    5cce:	b3 01       	movw	r22, r6
    5cd0:	0e 94 97 38 	call	0x712e	; 0x712e <fputc>
    5cd4:	99 20       	and	r9, r9
    5cd6:	a1 f0       	breq	.+40     	; 0x5d00 <vfprintf+0x3ee>
    5cd8:	8e e2       	ldi	r24, 0x2E	; 46
    5cda:	90 e0       	ldi	r25, 0x00	; 0
    5cdc:	b3 01       	movw	r22, r6
    5cde:	0e 94 97 38 	call	0x712e	; 0x712e <fputc>
    5ce2:	12 e0       	ldi	r17, 0x02	; 2
    5ce4:	e1 e0       	ldi	r30, 0x01	; 1
    5ce6:	f0 e0       	ldi	r31, 0x00	; 0
    5ce8:	ec 0f       	add	r30, r28
    5cea:	fd 1f       	adc	r31, r29
    5cec:	e1 0f       	add	r30, r17
    5cee:	f1 1d       	adc	r31, r1
    5cf0:	1f 5f       	subi	r17, 0xFF	; 255
    5cf2:	80 81       	ld	r24, Z
    5cf4:	90 e0       	ldi	r25, 0x00	; 0
    5cf6:	b3 01       	movw	r22, r6
    5cf8:	0e 94 97 38 	call	0x712e	; 0x712e <fputc>
    5cfc:	9a 94       	dec	r9
    5cfe:	91 f7       	brne	.-28     	; 0x5ce4 <vfprintf+0x3d2>
    5d00:	44 fc       	sbrc	r4, 4
    5d02:	03 c0       	rjmp	.+6      	; 0x5d0a <vfprintf+0x3f8>
    5d04:	85 e6       	ldi	r24, 0x65	; 101
    5d06:	90 e0       	ldi	r25, 0x00	; 0
    5d08:	02 c0       	rjmp	.+4      	; 0x5d0e <vfprintf+0x3fc>
    5d0a:	85 e4       	ldi	r24, 0x45	; 69
    5d0c:	90 e0       	ldi	r25, 0x00	; 0
    5d0e:	b3 01       	movw	r22, r6
    5d10:	0e 94 97 38 	call	0x712e	; 0x712e <fputc>
    5d14:	d7 fc       	sbrc	r13, 7
    5d16:	05 c0       	rjmp	.+10     	; 0x5d22 <vfprintf+0x410>
    5d18:	c1 14       	cp	r12, r1
    5d1a:	d1 04       	cpc	r13, r1
    5d1c:	41 f4       	brne	.+16     	; 0x5d2e <vfprintf+0x41c>
    5d1e:	04 ff       	sbrs	r16, 4
    5d20:	06 c0       	rjmp	.+12     	; 0x5d2e <vfprintf+0x41c>
    5d22:	d0 94       	com	r13
    5d24:	c1 94       	neg	r12
    5d26:	d1 08       	sbc	r13, r1
    5d28:	d3 94       	inc	r13
    5d2a:	8d e2       	ldi	r24, 0x2D	; 45
    5d2c:	01 c0       	rjmp	.+2      	; 0x5d30 <vfprintf+0x41e>
    5d2e:	8b e2       	ldi	r24, 0x2B	; 43
    5d30:	90 e0       	ldi	r25, 0x00	; 0
    5d32:	b3 01       	movw	r22, r6
    5d34:	0e 94 97 38 	call	0x712e	; 0x712e <fputc>
    5d38:	80 e3       	ldi	r24, 0x30	; 48
    5d3a:	05 c0       	rjmp	.+10     	; 0x5d46 <vfprintf+0x434>
    5d3c:	8f 5f       	subi	r24, 0xFF	; 255
    5d3e:	26 ef       	ldi	r18, 0xF6	; 246
    5d40:	3f ef       	ldi	r19, 0xFF	; 255
    5d42:	c2 0e       	add	r12, r18
    5d44:	d3 1e       	adc	r13, r19
    5d46:	3a e0       	ldi	r19, 0x0A	; 10
    5d48:	c3 16       	cp	r12, r19
    5d4a:	d1 04       	cpc	r13, r1
    5d4c:	bc f7       	brge	.-18     	; 0x5d3c <vfprintf+0x42a>
    5d4e:	90 e0       	ldi	r25, 0x00	; 0
    5d50:	b3 01       	movw	r22, r6
    5d52:	0e 94 97 38 	call	0x712e	; 0x712e <fputc>
    5d56:	c6 01       	movw	r24, r12
    5d58:	c0 96       	adiw	r24, 0x30	; 48
    5d5a:	b3 01       	movw	r22, r6
    5d5c:	0e 94 97 38 	call	0x712e	; 0x712e <fputc>
    5d60:	cc 84       	ldd	r12, Y+12	; 0x0c
    5d62:	dd 84       	ldd	r13, Y+13	; 0x0d
    5d64:	52 c1       	rjmp	.+676    	; 0x600a <vfprintf+0x6f8>
    5d66:	93 36       	cpi	r25, 0x63	; 99
    5d68:	31 f0       	breq	.+12     	; 0x5d76 <vfprintf+0x464>
    5d6a:	93 37       	cpi	r25, 0x73	; 115
    5d6c:	99 f0       	breq	.+38     	; 0x5d94 <vfprintf+0x482>
    5d6e:	93 35       	cpi	r25, 0x53	; 83
    5d70:	09 f0       	breq	.+2      	; 0x5d74 <vfprintf+0x462>
    5d72:	59 c0       	rjmp	.+178    	; 0x5e26 <vfprintf+0x514>
    5d74:	23 c0       	rjmp	.+70     	; 0x5dbc <vfprintf+0x4aa>
    5d76:	f6 01       	movw	r30, r12
    5d78:	80 81       	ld	r24, Z
    5d7a:	89 83       	std	Y+1, r24	; 0x01
    5d7c:	5e 01       	movw	r10, r28
    5d7e:	08 94       	sec
    5d80:	a1 1c       	adc	r10, r1
    5d82:	b1 1c       	adc	r11, r1
    5d84:	22 e0       	ldi	r18, 0x02	; 2
    5d86:	30 e0       	ldi	r19, 0x00	; 0
    5d88:	c2 0e       	add	r12, r18
    5d8a:	d3 1e       	adc	r13, r19
    5d8c:	21 e0       	ldi	r18, 0x01	; 1
    5d8e:	e2 2e       	mov	r14, r18
    5d90:	f1 2c       	mov	r15, r1
    5d92:	12 c0       	rjmp	.+36     	; 0x5db8 <vfprintf+0x4a6>
    5d94:	f6 01       	movw	r30, r12
    5d96:	a0 80       	ld	r10, Z
    5d98:	b1 80       	ldd	r11, Z+1	; 0x01
    5d9a:	16 fd       	sbrc	r17, 6
    5d9c:	03 c0       	rjmp	.+6      	; 0x5da4 <vfprintf+0x492>
    5d9e:	6f ef       	ldi	r22, 0xFF	; 255
    5da0:	7f ef       	ldi	r23, 0xFF	; 255
    5da2:	02 c0       	rjmp	.+4      	; 0x5da8 <vfprintf+0x496>
    5da4:	69 2d       	mov	r22, r9
    5da6:	70 e0       	ldi	r23, 0x00	; 0
    5da8:	22 e0       	ldi	r18, 0x02	; 2
    5daa:	30 e0       	ldi	r19, 0x00	; 0
    5dac:	c2 0e       	add	r12, r18
    5dae:	d3 1e       	adc	r13, r19
    5db0:	c5 01       	movw	r24, r10
    5db2:	0e 94 0f 38 	call	0x701e	; 0x701e <strnlen>
    5db6:	7c 01       	movw	r14, r24
    5db8:	1f 77       	andi	r17, 0x7F	; 127
    5dba:	13 c0       	rjmp	.+38     	; 0x5de2 <vfprintf+0x4d0>
    5dbc:	f6 01       	movw	r30, r12
    5dbe:	a0 80       	ld	r10, Z
    5dc0:	b1 80       	ldd	r11, Z+1	; 0x01
    5dc2:	16 fd       	sbrc	r17, 6
    5dc4:	03 c0       	rjmp	.+6      	; 0x5dcc <vfprintf+0x4ba>
    5dc6:	6f ef       	ldi	r22, 0xFF	; 255
    5dc8:	7f ef       	ldi	r23, 0xFF	; 255
    5dca:	02 c0       	rjmp	.+4      	; 0x5dd0 <vfprintf+0x4be>
    5dcc:	69 2d       	mov	r22, r9
    5dce:	70 e0       	ldi	r23, 0x00	; 0
    5dd0:	22 e0       	ldi	r18, 0x02	; 2
    5dd2:	30 e0       	ldi	r19, 0x00	; 0
    5dd4:	c2 0e       	add	r12, r18
    5dd6:	d3 1e       	adc	r13, r19
    5dd8:	c5 01       	movw	r24, r10
    5dda:	0e 94 f1 37 	call	0x6fe2	; 0x6fe2 <strnlen_P>
    5dde:	7c 01       	movw	r14, r24
    5de0:	10 68       	ori	r17, 0x80	; 128
    5de2:	13 ff       	sbrs	r17, 3
    5de4:	07 c0       	rjmp	.+14     	; 0x5df4 <vfprintf+0x4e2>
    5de6:	1b c0       	rjmp	.+54     	; 0x5e1e <vfprintf+0x50c>
    5de8:	80 e2       	ldi	r24, 0x20	; 32
    5dea:	90 e0       	ldi	r25, 0x00	; 0
    5dec:	b3 01       	movw	r22, r6
    5dee:	0e 94 97 38 	call	0x712e	; 0x712e <fputc>
    5df2:	8a 94       	dec	r8
    5df4:	88 2d       	mov	r24, r8
    5df6:	90 e0       	ldi	r25, 0x00	; 0
    5df8:	e8 16       	cp	r14, r24
    5dfa:	f9 06       	cpc	r15, r25
    5dfc:	a8 f3       	brcs	.-22     	; 0x5de8 <vfprintf+0x4d6>
    5dfe:	0f c0       	rjmp	.+30     	; 0x5e1e <vfprintf+0x50c>
    5e00:	f5 01       	movw	r30, r10
    5e02:	17 fd       	sbrc	r17, 7
    5e04:	85 91       	lpm	r24, Z+
    5e06:	17 ff       	sbrs	r17, 7
    5e08:	81 91       	ld	r24, Z+
    5e0a:	5f 01       	movw	r10, r30
    5e0c:	90 e0       	ldi	r25, 0x00	; 0
    5e0e:	b3 01       	movw	r22, r6
    5e10:	0e 94 97 38 	call	0x712e	; 0x712e <fputc>
    5e14:	81 10       	cpse	r8, r1
    5e16:	8a 94       	dec	r8
    5e18:	08 94       	sec
    5e1a:	e1 08       	sbc	r14, r1
    5e1c:	f1 08       	sbc	r15, r1
    5e1e:	e1 14       	cp	r14, r1
    5e20:	f1 04       	cpc	r15, r1
    5e22:	71 f7       	brne	.-36     	; 0x5e00 <vfprintf+0x4ee>
    5e24:	f2 c0       	rjmp	.+484    	; 0x600a <vfprintf+0x6f8>
    5e26:	94 36       	cpi	r25, 0x64	; 100
    5e28:	11 f0       	breq	.+4      	; 0x5e2e <vfprintf+0x51c>
    5e2a:	99 36       	cpi	r25, 0x69	; 105
    5e2c:	89 f5       	brne	.+98     	; 0x5e90 <vfprintf+0x57e>
    5e2e:	17 ff       	sbrs	r17, 7
    5e30:	08 c0       	rjmp	.+16     	; 0x5e42 <vfprintf+0x530>
    5e32:	f6 01       	movw	r30, r12
    5e34:	20 81       	ld	r18, Z
    5e36:	31 81       	ldd	r19, Z+1	; 0x01
    5e38:	42 81       	ldd	r20, Z+2	; 0x02
    5e3a:	53 81       	ldd	r21, Z+3	; 0x03
    5e3c:	84 e0       	ldi	r24, 0x04	; 4
    5e3e:	90 e0       	ldi	r25, 0x00	; 0
    5e40:	0a c0       	rjmp	.+20     	; 0x5e56 <vfprintf+0x544>
    5e42:	f6 01       	movw	r30, r12
    5e44:	80 81       	ld	r24, Z
    5e46:	91 81       	ldd	r25, Z+1	; 0x01
    5e48:	9c 01       	movw	r18, r24
    5e4a:	44 27       	eor	r20, r20
    5e4c:	37 fd       	sbrc	r19, 7
    5e4e:	40 95       	com	r20
    5e50:	54 2f       	mov	r21, r20
    5e52:	82 e0       	ldi	r24, 0x02	; 2
    5e54:	90 e0       	ldi	r25, 0x00	; 0
    5e56:	c8 0e       	add	r12, r24
    5e58:	d9 1e       	adc	r13, r25
    5e5a:	9f e6       	ldi	r25, 0x6F	; 111
    5e5c:	f9 2e       	mov	r15, r25
    5e5e:	f1 22       	and	r15, r17
    5e60:	57 ff       	sbrs	r21, 7
    5e62:	09 c0       	rjmp	.+18     	; 0x5e76 <vfprintf+0x564>
    5e64:	50 95       	com	r21
    5e66:	40 95       	com	r20
    5e68:	30 95       	com	r19
    5e6a:	21 95       	neg	r18
    5e6c:	3f 4f       	sbci	r19, 0xFF	; 255
    5e6e:	4f 4f       	sbci	r20, 0xFF	; 255
    5e70:	5f 4f       	sbci	r21, 0xFF	; 255
    5e72:	90 e8       	ldi	r25, 0x80	; 128
    5e74:	f9 2a       	or	r15, r25
    5e76:	ca 01       	movw	r24, r20
    5e78:	b9 01       	movw	r22, r18
    5e7a:	ae 01       	movw	r20, r28
    5e7c:	4f 5f       	subi	r20, 0xFF	; 255
    5e7e:	5f 4f       	sbci	r21, 0xFF	; 255
    5e80:	2a e0       	ldi	r18, 0x0A	; 10
    5e82:	30 e0       	ldi	r19, 0x00	; 0
    5e84:	0e 94 98 39 	call	0x7330	; 0x7330 <__ultoa_invert>
    5e88:	e8 2e       	mov	r14, r24
    5e8a:	e8 89       	ldd	r30, Y+16	; 0x10
    5e8c:	ee 1a       	sub	r14, r30
    5e8e:	41 c0       	rjmp	.+130    	; 0x5f12 <vfprintf+0x600>
    5e90:	95 37       	cpi	r25, 0x75	; 117
    5e92:	21 f4       	brne	.+8      	; 0x5e9c <vfprintf+0x58a>
    5e94:	1f 7e       	andi	r17, 0xEF	; 239
    5e96:	2a e0       	ldi	r18, 0x0A	; 10
    5e98:	30 e0       	ldi	r19, 0x00	; 0
    5e9a:	1c c0       	rjmp	.+56     	; 0x5ed4 <vfprintf+0x5c2>
    5e9c:	19 7f       	andi	r17, 0xF9	; 249
    5e9e:	9f 36       	cpi	r25, 0x6F	; 111
    5ea0:	61 f0       	breq	.+24     	; 0x5eba <vfprintf+0x5a8>
    5ea2:	90 37       	cpi	r25, 0x70	; 112
    5ea4:	20 f4       	brcc	.+8      	; 0x5eae <vfprintf+0x59c>
    5ea6:	98 35       	cpi	r25, 0x58	; 88
    5ea8:	09 f0       	breq	.+2      	; 0x5eac <vfprintf+0x59a>
    5eaa:	b2 c0       	rjmp	.+356    	; 0x6010 <vfprintf+0x6fe>
    5eac:	0f c0       	rjmp	.+30     	; 0x5ecc <vfprintf+0x5ba>
    5eae:	90 37       	cpi	r25, 0x70	; 112
    5eb0:	39 f0       	breq	.+14     	; 0x5ec0 <vfprintf+0x5ae>
    5eb2:	98 37       	cpi	r25, 0x78	; 120
    5eb4:	09 f0       	breq	.+2      	; 0x5eb8 <vfprintf+0x5a6>
    5eb6:	ac c0       	rjmp	.+344    	; 0x6010 <vfprintf+0x6fe>
    5eb8:	04 c0       	rjmp	.+8      	; 0x5ec2 <vfprintf+0x5b0>
    5eba:	28 e0       	ldi	r18, 0x08	; 8
    5ebc:	30 e0       	ldi	r19, 0x00	; 0
    5ebe:	0a c0       	rjmp	.+20     	; 0x5ed4 <vfprintf+0x5c2>
    5ec0:	10 61       	ori	r17, 0x10	; 16
    5ec2:	14 fd       	sbrc	r17, 4
    5ec4:	14 60       	ori	r17, 0x04	; 4
    5ec6:	20 e1       	ldi	r18, 0x10	; 16
    5ec8:	30 e0       	ldi	r19, 0x00	; 0
    5eca:	04 c0       	rjmp	.+8      	; 0x5ed4 <vfprintf+0x5c2>
    5ecc:	14 fd       	sbrc	r17, 4
    5ece:	16 60       	ori	r17, 0x06	; 6
    5ed0:	20 e1       	ldi	r18, 0x10	; 16
    5ed2:	32 e0       	ldi	r19, 0x02	; 2
    5ed4:	17 ff       	sbrs	r17, 7
    5ed6:	08 c0       	rjmp	.+16     	; 0x5ee8 <vfprintf+0x5d6>
    5ed8:	f6 01       	movw	r30, r12
    5eda:	60 81       	ld	r22, Z
    5edc:	71 81       	ldd	r23, Z+1	; 0x01
    5ede:	82 81       	ldd	r24, Z+2	; 0x02
    5ee0:	93 81       	ldd	r25, Z+3	; 0x03
    5ee2:	44 e0       	ldi	r20, 0x04	; 4
    5ee4:	50 e0       	ldi	r21, 0x00	; 0
    5ee6:	08 c0       	rjmp	.+16     	; 0x5ef8 <vfprintf+0x5e6>
    5ee8:	f6 01       	movw	r30, r12
    5eea:	80 81       	ld	r24, Z
    5eec:	91 81       	ldd	r25, Z+1	; 0x01
    5eee:	bc 01       	movw	r22, r24
    5ef0:	80 e0       	ldi	r24, 0x00	; 0
    5ef2:	90 e0       	ldi	r25, 0x00	; 0
    5ef4:	42 e0       	ldi	r20, 0x02	; 2
    5ef6:	50 e0       	ldi	r21, 0x00	; 0
    5ef8:	c4 0e       	add	r12, r20
    5efa:	d5 1e       	adc	r13, r21
    5efc:	ae 01       	movw	r20, r28
    5efe:	4f 5f       	subi	r20, 0xFF	; 255
    5f00:	5f 4f       	sbci	r21, 0xFF	; 255
    5f02:	0e 94 98 39 	call	0x7330	; 0x7330 <__ultoa_invert>
    5f06:	e8 2e       	mov	r14, r24
    5f08:	58 89       	ldd	r21, Y+16	; 0x10
    5f0a:	e5 1a       	sub	r14, r21
    5f0c:	8f e7       	ldi	r24, 0x7F	; 127
    5f0e:	f8 2e       	mov	r15, r24
    5f10:	f1 22       	and	r15, r17
    5f12:	f6 fe       	sbrs	r15, 6
    5f14:	0b c0       	rjmp	.+22     	; 0x5f2c <vfprintf+0x61a>
    5f16:	8e ef       	ldi	r24, 0xFE	; 254
    5f18:	f8 22       	and	r15, r24
    5f1a:	e9 14       	cp	r14, r9
    5f1c:	38 f4       	brcc	.+14     	; 0x5f2c <vfprintf+0x61a>
    5f1e:	f4 fe       	sbrs	r15, 4
    5f20:	07 c0       	rjmp	.+14     	; 0x5f30 <vfprintf+0x61e>
    5f22:	f2 fc       	sbrc	r15, 2
    5f24:	05 c0       	rjmp	.+10     	; 0x5f30 <vfprintf+0x61e>
    5f26:	9f ee       	ldi	r25, 0xEF	; 239
    5f28:	f9 22       	and	r15, r25
    5f2a:	02 c0       	rjmp	.+4      	; 0x5f30 <vfprintf+0x61e>
    5f2c:	1e 2d       	mov	r17, r14
    5f2e:	01 c0       	rjmp	.+2      	; 0x5f32 <vfprintf+0x620>
    5f30:	19 2d       	mov	r17, r9
    5f32:	f4 fe       	sbrs	r15, 4
    5f34:	0d c0       	rjmp	.+26     	; 0x5f50 <vfprintf+0x63e>
    5f36:	fe 01       	movw	r30, r28
    5f38:	ee 0d       	add	r30, r14
    5f3a:	f1 1d       	adc	r31, r1
    5f3c:	80 81       	ld	r24, Z
    5f3e:	80 33       	cpi	r24, 0x30	; 48
    5f40:	19 f4       	brne	.+6      	; 0x5f48 <vfprintf+0x636>
    5f42:	e9 ee       	ldi	r30, 0xE9	; 233
    5f44:	fe 22       	and	r15, r30
    5f46:	08 c0       	rjmp	.+16     	; 0x5f58 <vfprintf+0x646>
    5f48:	1f 5f       	subi	r17, 0xFF	; 255
    5f4a:	f2 fe       	sbrs	r15, 2
    5f4c:	05 c0       	rjmp	.+10     	; 0x5f58 <vfprintf+0x646>
    5f4e:	03 c0       	rjmp	.+6      	; 0x5f56 <vfprintf+0x644>
    5f50:	8f 2d       	mov	r24, r15
    5f52:	86 78       	andi	r24, 0x86	; 134
    5f54:	09 f0       	breq	.+2      	; 0x5f58 <vfprintf+0x646>
    5f56:	1f 5f       	subi	r17, 0xFF	; 255
    5f58:	0f 2d       	mov	r16, r15
    5f5a:	f3 fc       	sbrc	r15, 3
    5f5c:	14 c0       	rjmp	.+40     	; 0x5f86 <vfprintf+0x674>
    5f5e:	f0 fe       	sbrs	r15, 0
    5f60:	0f c0       	rjmp	.+30     	; 0x5f80 <vfprintf+0x66e>
    5f62:	18 15       	cp	r17, r8
    5f64:	10 f0       	brcs	.+4      	; 0x5f6a <vfprintf+0x658>
    5f66:	9e 2c       	mov	r9, r14
    5f68:	0b c0       	rjmp	.+22     	; 0x5f80 <vfprintf+0x66e>
    5f6a:	9e 2c       	mov	r9, r14
    5f6c:	98 0c       	add	r9, r8
    5f6e:	91 1a       	sub	r9, r17
    5f70:	18 2d       	mov	r17, r8
    5f72:	06 c0       	rjmp	.+12     	; 0x5f80 <vfprintf+0x66e>
    5f74:	80 e2       	ldi	r24, 0x20	; 32
    5f76:	90 e0       	ldi	r25, 0x00	; 0
    5f78:	b3 01       	movw	r22, r6
    5f7a:	0e 94 97 38 	call	0x712e	; 0x712e <fputc>
    5f7e:	1f 5f       	subi	r17, 0xFF	; 255
    5f80:	18 15       	cp	r17, r8
    5f82:	c0 f3       	brcs	.-16     	; 0x5f74 <vfprintf+0x662>
    5f84:	04 c0       	rjmp	.+8      	; 0x5f8e <vfprintf+0x67c>
    5f86:	18 15       	cp	r17, r8
    5f88:	10 f4       	brcc	.+4      	; 0x5f8e <vfprintf+0x67c>
    5f8a:	81 1a       	sub	r8, r17
    5f8c:	01 c0       	rjmp	.+2      	; 0x5f90 <vfprintf+0x67e>
    5f8e:	88 24       	eor	r8, r8
    5f90:	04 ff       	sbrs	r16, 4
    5f92:	0f c0       	rjmp	.+30     	; 0x5fb2 <vfprintf+0x6a0>
    5f94:	80 e3       	ldi	r24, 0x30	; 48
    5f96:	90 e0       	ldi	r25, 0x00	; 0
    5f98:	b3 01       	movw	r22, r6
    5f9a:	0e 94 97 38 	call	0x712e	; 0x712e <fputc>
    5f9e:	02 ff       	sbrs	r16, 2
    5fa0:	1d c0       	rjmp	.+58     	; 0x5fdc <vfprintf+0x6ca>
    5fa2:	01 fd       	sbrc	r16, 1
    5fa4:	03 c0       	rjmp	.+6      	; 0x5fac <vfprintf+0x69a>
    5fa6:	88 e7       	ldi	r24, 0x78	; 120
    5fa8:	90 e0       	ldi	r25, 0x00	; 0
    5faa:	0e c0       	rjmp	.+28     	; 0x5fc8 <vfprintf+0x6b6>
    5fac:	88 e5       	ldi	r24, 0x58	; 88
    5fae:	90 e0       	ldi	r25, 0x00	; 0
    5fb0:	0b c0       	rjmp	.+22     	; 0x5fc8 <vfprintf+0x6b6>
    5fb2:	80 2f       	mov	r24, r16
    5fb4:	86 78       	andi	r24, 0x86	; 134
    5fb6:	91 f0       	breq	.+36     	; 0x5fdc <vfprintf+0x6ca>
    5fb8:	01 ff       	sbrs	r16, 1
    5fba:	02 c0       	rjmp	.+4      	; 0x5fc0 <vfprintf+0x6ae>
    5fbc:	8b e2       	ldi	r24, 0x2B	; 43
    5fbe:	01 c0       	rjmp	.+2      	; 0x5fc2 <vfprintf+0x6b0>
    5fc0:	80 e2       	ldi	r24, 0x20	; 32
    5fc2:	f7 fc       	sbrc	r15, 7
    5fc4:	8d e2       	ldi	r24, 0x2D	; 45
    5fc6:	90 e0       	ldi	r25, 0x00	; 0
    5fc8:	b3 01       	movw	r22, r6
    5fca:	0e 94 97 38 	call	0x712e	; 0x712e <fputc>
    5fce:	06 c0       	rjmp	.+12     	; 0x5fdc <vfprintf+0x6ca>
    5fd0:	80 e3       	ldi	r24, 0x30	; 48
    5fd2:	90 e0       	ldi	r25, 0x00	; 0
    5fd4:	b3 01       	movw	r22, r6
    5fd6:	0e 94 97 38 	call	0x712e	; 0x712e <fputc>
    5fda:	9a 94       	dec	r9
    5fdc:	e9 14       	cp	r14, r9
    5fde:	c0 f3       	brcs	.-16     	; 0x5fd0 <vfprintf+0x6be>
    5fe0:	ea 94       	dec	r14
    5fe2:	e1 e0       	ldi	r30, 0x01	; 1
    5fe4:	f0 e0       	ldi	r31, 0x00	; 0
    5fe6:	ec 0f       	add	r30, r28
    5fe8:	fd 1f       	adc	r31, r29
    5fea:	ee 0d       	add	r30, r14
    5fec:	f1 1d       	adc	r31, r1
    5fee:	80 81       	ld	r24, Z
    5ff0:	90 e0       	ldi	r25, 0x00	; 0
    5ff2:	b3 01       	movw	r22, r6
    5ff4:	0e 94 97 38 	call	0x712e	; 0x712e <fputc>
    5ff8:	ee 20       	and	r14, r14
    5ffa:	91 f7       	brne	.-28     	; 0x5fe0 <vfprintf+0x6ce>
    5ffc:	06 c0       	rjmp	.+12     	; 0x600a <vfprintf+0x6f8>
    5ffe:	80 e2       	ldi	r24, 0x20	; 32
    6000:	90 e0       	ldi	r25, 0x00	; 0
    6002:	b3 01       	movw	r22, r6
    6004:	0e 94 97 38 	call	0x712e	; 0x712e <fputc>
    6008:	8a 94       	dec	r8
    600a:	88 20       	and	r8, r8
    600c:	c1 f7       	brne	.-16     	; 0x5ffe <vfprintf+0x6ec>
    600e:	99 cc       	rjmp	.-1742   	; 0x5942 <vfprintf+0x30>
    6010:	f3 01       	movw	r30, r6
    6012:	66 81       	ldd	r22, Z+6	; 0x06
    6014:	77 81       	ldd	r23, Z+7	; 0x07
    6016:	cb 01       	movw	r24, r22
    6018:	61 96       	adiw	r28, 0x11	; 17
    601a:	e2 e1       	ldi	r30, 0x12	; 18
    601c:	0c 94 cf 36 	jmp	0x6d9e	; 0x6d9e <__epilogue_restores__>

00006020 <putval>:
    6020:	fc 01       	movw	r30, r24
    6022:	20 fd       	sbrc	r18, 0
    6024:	08 c0       	rjmp	.+16     	; 0x6036 <putval+0x16>
    6026:	23 fd       	sbrc	r18, 3
    6028:	05 c0       	rjmp	.+10     	; 0x6034 <putval+0x14>
    602a:	22 ff       	sbrs	r18, 2
    602c:	02 c0       	rjmp	.+4      	; 0x6032 <putval+0x12>
    602e:	73 83       	std	Z+3, r23	; 0x03
    6030:	62 83       	std	Z+2, r22	; 0x02
    6032:	51 83       	std	Z+1, r21	; 0x01
    6034:	40 83       	st	Z, r20
    6036:	08 95       	ret

00006038 <mulacc>:
    6038:	ef 92       	push	r14
    603a:	ff 92       	push	r15
    603c:	0f 93       	push	r16
    603e:	1f 93       	push	r17
    6040:	44 ff       	sbrs	r20, 4
    6042:	02 c0       	rjmp	.+4      	; 0x6048 <mulacc+0x10>
    6044:	33 e0       	ldi	r19, 0x03	; 3
    6046:	11 c0       	rjmp	.+34     	; 0x606a <mulacc+0x32>
    6048:	46 ff       	sbrs	r20, 6
    604a:	02 c0       	rjmp	.+4      	; 0x6050 <mulacc+0x18>
    604c:	34 e0       	ldi	r19, 0x04	; 4
    604e:	0d c0       	rjmp	.+26     	; 0x606a <mulacc+0x32>
    6050:	db 01       	movw	r26, r22
    6052:	fc 01       	movw	r30, r24
    6054:	aa 0f       	add	r26, r26
    6056:	bb 1f       	adc	r27, r27
    6058:	ee 1f       	adc	r30, r30
    605a:	ff 1f       	adc	r31, r31
    605c:	10 94       	com	r1
    605e:	d1 f7       	brne	.-12     	; 0x6054 <mulacc+0x1c>
    6060:	6a 0f       	add	r22, r26
    6062:	7b 1f       	adc	r23, r27
    6064:	8e 1f       	adc	r24, r30
    6066:	9f 1f       	adc	r25, r31
    6068:	31 e0       	ldi	r19, 0x01	; 1
    606a:	66 0f       	add	r22, r22
    606c:	77 1f       	adc	r23, r23
    606e:	88 1f       	adc	r24, r24
    6070:	99 1f       	adc	r25, r25
    6072:	31 50       	subi	r19, 0x01	; 1
    6074:	d1 f7       	brne	.-12     	; 0x606a <mulacc+0x32>
    6076:	7b 01       	movw	r14, r22
    6078:	8c 01       	movw	r16, r24
    607a:	e2 0e       	add	r14, r18
    607c:	f1 1c       	adc	r15, r1
    607e:	01 1d       	adc	r16, r1
    6080:	11 1d       	adc	r17, r1
    6082:	a8 01       	movw	r20, r16
    6084:	97 01       	movw	r18, r14
    6086:	b7 01       	movw	r22, r14
    6088:	ca 01       	movw	r24, r20
    608a:	1f 91       	pop	r17
    608c:	0f 91       	pop	r16
    608e:	ff 90       	pop	r15
    6090:	ef 90       	pop	r14
    6092:	08 95       	ret

00006094 <skip_spaces>:
    6094:	0f 93       	push	r16
    6096:	1f 93       	push	r17
    6098:	cf 93       	push	r28
    609a:	df 93       	push	r29
    609c:	8c 01       	movw	r16, r24
    609e:	c8 01       	movw	r24, r16
    60a0:	0e 94 41 38 	call	0x7082	; 0x7082 <fgetc>
    60a4:	ec 01       	movw	r28, r24
    60a6:	97 fd       	sbrc	r25, 7
    60a8:	08 c0       	rjmp	.+16     	; 0x60ba <skip_spaces+0x26>
    60aa:	0e 94 d6 37 	call	0x6fac	; 0x6fac <isspace>
    60ae:	89 2b       	or	r24, r25
    60b0:	b1 f7       	brne	.-20     	; 0x609e <skip_spaces+0xa>
    60b2:	ce 01       	movw	r24, r28
    60b4:	b8 01       	movw	r22, r16
    60b6:	0e 94 7e 39 	call	0x72fc	; 0x72fc <ungetc>
    60ba:	ce 01       	movw	r24, r28
    60bc:	df 91       	pop	r29
    60be:	cf 91       	pop	r28
    60c0:	1f 91       	pop	r17
    60c2:	0f 91       	pop	r16
    60c4:	08 95       	ret

000060c6 <conv_int>:
    60c6:	8f 92       	push	r8
    60c8:	9f 92       	push	r9
    60ca:	af 92       	push	r10
    60cc:	bf 92       	push	r11
    60ce:	df 92       	push	r13
    60d0:	ef 92       	push	r14
    60d2:	ff 92       	push	r15
    60d4:	0f 93       	push	r16
    60d6:	1f 93       	push	r17
    60d8:	cf 93       	push	r28
    60da:	df 93       	push	r29
    60dc:	5c 01       	movw	r10, r24
    60de:	eb 01       	movw	r28, r22
    60e0:	4a 01       	movw	r8, r20
    60e2:	12 2f       	mov	r17, r18
    60e4:	0e 94 41 38 	call	0x7082	; 0x7082 <fgetc>
    60e8:	ac 01       	movw	r20, r24
    60ea:	8b 32       	cpi	r24, 0x2B	; 43
    60ec:	19 f0       	breq	.+6      	; 0x60f4 <conv_int+0x2e>
    60ee:	8d 32       	cpi	r24, 0x2D	; 45
    60f0:	51 f4       	brne	.+20     	; 0x6106 <conv_int+0x40>
    60f2:	10 68       	ori	r17, 0x80	; 128
    60f4:	21 97       	sbiw	r28, 0x01	; 1
    60f6:	09 f4       	brne	.+2      	; 0x60fa <conv_int+0x34>
    60f8:	6d c0       	rjmp	.+218    	; 0x61d4 <conv_int+0x10e>
    60fa:	c5 01       	movw	r24, r10
    60fc:	0e 94 41 38 	call	0x7082	; 0x7082 <fgetc>
    6100:	ac 01       	movw	r20, r24
    6102:	97 fd       	sbrc	r25, 7
    6104:	67 c0       	rjmp	.+206    	; 0x61d4 <conv_int+0x10e>
    6106:	6d ef       	ldi	r22, 0xFD	; 253
    6108:	d6 2e       	mov	r13, r22
    610a:	d1 22       	and	r13, r17
    610c:	8d 2d       	mov	r24, r13
    610e:	80 73       	andi	r24, 0x30	; 48
    6110:	01 f5       	brne	.+64     	; 0x6152 <conv_int+0x8c>
    6112:	40 33       	cpi	r20, 0x30	; 48
    6114:	f1 f4       	brne	.+60     	; 0x6152 <conv_int+0x8c>
    6116:	21 97       	sbiw	r28, 0x01	; 1
    6118:	09 f4       	brne	.+2      	; 0x611c <conv_int+0x56>
    611a:	47 c0       	rjmp	.+142    	; 0x61aa <conv_int+0xe4>
    611c:	c5 01       	movw	r24, r10
    611e:	0e 94 41 38 	call	0x7082	; 0x7082 <fgetc>
    6122:	ac 01       	movw	r20, r24
    6124:	97 fd       	sbrc	r25, 7
    6126:	41 c0       	rjmp	.+130    	; 0x61aa <conv_int+0xe4>
    6128:	82 e0       	ldi	r24, 0x02	; 2
    612a:	d8 2a       	or	r13, r24
    612c:	48 37       	cpi	r20, 0x78	; 120
    612e:	11 f0       	breq	.+4      	; 0x6134 <conv_int+0x6e>
    6130:	48 35       	cpi	r20, 0x58	; 88
    6132:	59 f4       	brne	.+22     	; 0x614a <conv_int+0x84>
    6134:	80 e4       	ldi	r24, 0x40	; 64
    6136:	d8 2a       	or	r13, r24
    6138:	21 97       	sbiw	r28, 0x01	; 1
    613a:	b9 f1       	breq	.+110    	; 0x61aa <conv_int+0xe4>
    613c:	c5 01       	movw	r24, r10
    613e:	0e 94 41 38 	call	0x7082	; 0x7082 <fgetc>
    6142:	ac 01       	movw	r20, r24
    6144:	99 23       	and	r25, r25
    6146:	2c f4       	brge	.+10     	; 0x6152 <conv_int+0x8c>
    6148:	30 c0       	rjmp	.+96     	; 0x61aa <conv_int+0xe4>
    614a:	d6 fc       	sbrc	r13, 6
    614c:	02 c0       	rjmp	.+4      	; 0x6152 <conv_int+0x8c>
    614e:	80 e1       	ldi	r24, 0x10	; 16
    6150:	d8 2a       	or	r13, r24
    6152:	ee 24       	eor	r14, r14
    6154:	ff 24       	eor	r15, r15
    6156:	87 01       	movw	r16, r14
    6158:	24 2f       	mov	r18, r20
    615a:	20 53       	subi	r18, 0x30	; 48
    615c:	28 30       	cpi	r18, 0x08	; 8
    615e:	88 f0       	brcs	.+34     	; 0x6182 <conv_int+0xbc>
    6160:	d4 fc       	sbrc	r13, 4
    6162:	09 c0       	rjmp	.+18     	; 0x6176 <conv_int+0xb0>
    6164:	2a 30       	cpi	r18, 0x0A	; 10
    6166:	68 f0       	brcs	.+26     	; 0x6182 <conv_int+0xbc>
    6168:	d6 fe       	sbrs	r13, 6
    616a:	05 c0       	rjmp	.+10     	; 0x6176 <conv_int+0xb0>
    616c:	2f 7d       	andi	r18, 0xDF	; 223
    616e:	82 2f       	mov	r24, r18
    6170:	81 51       	subi	r24, 0x11	; 17
    6172:	86 30       	cpi	r24, 0x06	; 6
    6174:	28 f0       	brcs	.+10     	; 0x6180 <conv_int+0xba>
    6176:	ca 01       	movw	r24, r20
    6178:	b5 01       	movw	r22, r10
    617a:	0e 94 7e 39 	call	0x72fc	; 0x72fc <ungetc>
    617e:	12 c0       	rjmp	.+36     	; 0x61a4 <conv_int+0xde>
    6180:	27 50       	subi	r18, 0x07	; 7
    6182:	c8 01       	movw	r24, r16
    6184:	b7 01       	movw	r22, r14
    6186:	4d 2d       	mov	r20, r13
    6188:	0e 94 1c 30 	call	0x6038	; 0x6038 <mulacc>
    618c:	7b 01       	movw	r14, r22
    618e:	8c 01       	movw	r16, r24
    6190:	82 e0       	ldi	r24, 0x02	; 2
    6192:	d8 2a       	or	r13, r24
    6194:	21 97       	sbiw	r28, 0x01	; 1
    6196:	61 f0       	breq	.+24     	; 0x61b0 <conv_int+0xea>
    6198:	c5 01       	movw	r24, r10
    619a:	0e 94 41 38 	call	0x7082	; 0x7082 <fgetc>
    619e:	ac 01       	movw	r20, r24
    61a0:	97 ff       	sbrs	r25, 7
    61a2:	da cf       	rjmp	.-76     	; 0x6158 <conv_int+0x92>
    61a4:	d1 fc       	sbrc	r13, 1
    61a6:	04 c0       	rjmp	.+8      	; 0x61b0 <conv_int+0xea>
    61a8:	15 c0       	rjmp	.+42     	; 0x61d4 <conv_int+0x10e>
    61aa:	ee 24       	eor	r14, r14
    61ac:	ff 24       	eor	r15, r15
    61ae:	87 01       	movw	r16, r14
    61b0:	d7 fe       	sbrs	r13, 7
    61b2:	08 c0       	rjmp	.+16     	; 0x61c4 <conv_int+0xfe>
    61b4:	10 95       	com	r17
    61b6:	00 95       	com	r16
    61b8:	f0 94       	com	r15
    61ba:	e0 94       	com	r14
    61bc:	e1 1c       	adc	r14, r1
    61be:	f1 1c       	adc	r15, r1
    61c0:	01 1d       	adc	r16, r1
    61c2:	11 1d       	adc	r17, r1
    61c4:	c4 01       	movw	r24, r8
    61c6:	b8 01       	movw	r22, r16
    61c8:	a7 01       	movw	r20, r14
    61ca:	2d 2d       	mov	r18, r13
    61cc:	0e 94 10 30 	call	0x6020	; 0x6020 <putval>
    61d0:	81 e0       	ldi	r24, 0x01	; 1
    61d2:	01 c0       	rjmp	.+2      	; 0x61d6 <conv_int+0x110>
    61d4:	80 e0       	ldi	r24, 0x00	; 0
    61d6:	df 91       	pop	r29
    61d8:	cf 91       	pop	r28
    61da:	1f 91       	pop	r17
    61dc:	0f 91       	pop	r16
    61de:	ff 90       	pop	r15
    61e0:	ef 90       	pop	r14
    61e2:	df 90       	pop	r13
    61e4:	bf 90       	pop	r11
    61e6:	af 90       	pop	r10
    61e8:	9f 90       	pop	r9
    61ea:	8f 90       	pop	r8
    61ec:	08 95       	ret

000061ee <conv_brk>:
    61ee:	a0 e2       	ldi	r26, 0x20	; 32
    61f0:	b0 e0       	ldi	r27, 0x00	; 0
    61f2:	ed ef       	ldi	r30, 0xFD	; 253
    61f4:	f0 e3       	ldi	r31, 0x30	; 48
    61f6:	0c 94 b7 36 	jmp	0x6d6e	; 0x6d6e <__prologue_saves__+0x8>
    61fa:	5c 01       	movw	r10, r24
    61fc:	6b 01       	movw	r12, r22
    61fe:	8a 01       	movw	r16, r20
    6200:	79 01       	movw	r14, r18
    6202:	fe 01       	movw	r30, r28
    6204:	31 96       	adiw	r30, 0x01	; 1
    6206:	80 e2       	ldi	r24, 0x20	; 32
    6208:	df 01       	movw	r26, r30
    620a:	1d 92       	st	X+, r1
    620c:	8a 95       	dec	r24
    620e:	e9 f7       	brne	.-6      	; 0x620a <conv_brk+0x1c>
    6210:	70 e0       	ldi	r23, 0x00	; 0
    6212:	30 e0       	ldi	r19, 0x00	; 0
    6214:	60 e0       	ldi	r22, 0x00	; 0
    6216:	40 e0       	ldi	r20, 0x00	; 0
    6218:	50 e0       	ldi	r21, 0x00	; 0
    621a:	3f 01       	movw	r6, r30
    621c:	a1 e0       	ldi	r26, 0x01	; 1
    621e:	b0 e0       	ldi	r27, 0x00	; 0
    6220:	f5 01       	movw	r30, r10
    6222:	83 81       	ldd	r24, Z+3	; 0x03
    6224:	f7 01       	movw	r30, r14
    6226:	83 fd       	sbrc	r24, 3
    6228:	25 91       	lpm	r18, Z+
    622a:	83 ff       	sbrs	r24, 3
    622c:	21 91       	ld	r18, Z+
    622e:	7f 01       	movw	r14, r30
    6230:	22 23       	and	r18, r18
    6232:	09 f4       	brne	.+2      	; 0x6236 <conv_brk+0x48>
    6234:	81 c0       	rjmp	.+258    	; 0x6338 <conv_brk+0x14a>
    6236:	2e 35       	cpi	r18, 0x5E	; 94
    6238:	19 f4       	brne	.+6      	; 0x6240 <conv_brk+0x52>
    623a:	41 15       	cp	r20, r1
    623c:	51 05       	cpc	r21, r1
    623e:	69 f1       	breq	.+90     	; 0x629a <conv_brk+0xac>
    6240:	87 2f       	mov	r24, r23
    6242:	90 e0       	ldi	r25, 0x00	; 0
    6244:	84 17       	cp	r24, r20
    6246:	95 07       	cpc	r25, r21
    6248:	44 f4       	brge	.+16     	; 0x625a <conv_brk+0x6c>
    624a:	2d 35       	cpi	r18, 0x5D	; 93
    624c:	51 f1       	breq	.+84     	; 0x62a2 <conv_brk+0xb4>
    624e:	2d 32       	cpi	r18, 0x2D	; 45
    6250:	21 f4       	brne	.+8      	; 0x625a <conv_brk+0x6c>
    6252:	33 23       	and	r19, r19
    6254:	29 f4       	brne	.+10     	; 0x6260 <conv_brk+0x72>
    6256:	31 e0       	ldi	r19, 0x01	; 1
    6258:	21 c0       	rjmp	.+66     	; 0x629c <conv_brk+0xae>
    625a:	33 23       	and	r19, r19
    625c:	09 f4       	brne	.+2      	; 0x6260 <conv_brk+0x72>
    625e:	62 2f       	mov	r22, r18
    6260:	32 2f       	mov	r19, r18
    6262:	83 2f       	mov	r24, r19
    6264:	86 95       	lsr	r24
    6266:	86 95       	lsr	r24
    6268:	86 95       	lsr	r24
    626a:	f3 01       	movw	r30, r6
    626c:	e8 0f       	add	r30, r24
    626e:	f1 1d       	adc	r31, r1
    6270:	83 2f       	mov	r24, r19
    6272:	87 70       	andi	r24, 0x07	; 7
    6274:	4d 01       	movw	r8, r26
    6276:	02 c0       	rjmp	.+4      	; 0x627c <conv_brk+0x8e>
    6278:	88 0c       	add	r8, r8
    627a:	99 1c       	adc	r9, r9
    627c:	8a 95       	dec	r24
    627e:	e2 f7       	brpl	.-8      	; 0x6278 <conv_brk+0x8a>
    6280:	20 81       	ld	r18, Z
    6282:	28 29       	or	r18, r8
    6284:	20 83       	st	Z, r18
    6286:	36 17       	cp	r19, r22
    6288:	11 f4       	brne	.+4      	; 0x628e <conv_brk+0xa0>
    628a:	30 e0       	ldi	r19, 0x00	; 0
    628c:	07 c0       	rjmp	.+14     	; 0x629c <conv_brk+0xae>
    628e:	36 17       	cp	r19, r22
    6290:	10 f4       	brcc	.+4      	; 0x6296 <conv_brk+0xa8>
    6292:	3f 5f       	subi	r19, 0xFF	; 255
    6294:	e6 cf       	rjmp	.-52     	; 0x6262 <conv_brk+0x74>
    6296:	31 50       	subi	r19, 0x01	; 1
    6298:	e4 cf       	rjmp	.-56     	; 0x6262 <conv_brk+0x74>
    629a:	71 e0       	ldi	r23, 0x01	; 1
    629c:	4f 5f       	subi	r20, 0xFF	; 255
    629e:	5f 4f       	sbci	r21, 0xFF	; 255
    62a0:	bf cf       	rjmp	.-130    	; 0x6220 <conv_brk+0x32>
    62a2:	33 23       	and	r19, r19
    62a4:	19 f0       	breq	.+6      	; 0x62ac <conv_brk+0xbe>
    62a6:	8e 81       	ldd	r24, Y+6	; 0x06
    62a8:	80 62       	ori	r24, 0x20	; 32
    62aa:	8e 83       	std	Y+6, r24	; 0x06
    62ac:	77 23       	and	r23, r23
    62ae:	59 f0       	breq	.+22     	; 0x62c6 <conv_brk+0xd8>
    62b0:	fe 01       	movw	r30, r28
    62b2:	31 96       	adiw	r30, 0x01	; 1
    62b4:	9e 01       	movw	r18, r28
    62b6:	2f 5d       	subi	r18, 0xDF	; 223
    62b8:	3f 4f       	sbci	r19, 0xFF	; 255
    62ba:	80 81       	ld	r24, Z
    62bc:	80 95       	com	r24
    62be:	81 93       	st	Z+, r24
    62c0:	e2 17       	cp	r30, r18
    62c2:	f3 07       	cpc	r31, r19
    62c4:	d1 f7       	brne	.-12     	; 0x62ba <conv_brk+0xcc>
    62c6:	99 24       	eor	r9, r9
    62c8:	93 94       	inc	r9
    62ca:	3e 01       	movw	r6, r28
    62cc:	08 94       	sec
    62ce:	61 1c       	adc	r6, r1
    62d0:	71 1c       	adc	r7, r1
    62d2:	c5 01       	movw	r24, r10
    62d4:	0e 94 41 38 	call	0x7082	; 0x7082 <fgetc>
    62d8:	ac 01       	movw	r20, r24
    62da:	97 fd       	sbrc	r25, 7
    62dc:	25 c0       	rjmp	.+74     	; 0x6328 <conv_brk+0x13a>
    62de:	86 95       	lsr	r24
    62e0:	86 95       	lsr	r24
    62e2:	86 95       	lsr	r24
    62e4:	f3 01       	movw	r30, r6
    62e6:	e8 0f       	add	r30, r24
    62e8:	f1 1d       	adc	r31, r1
    62ea:	80 81       	ld	r24, Z
    62ec:	90 e0       	ldi	r25, 0x00	; 0
    62ee:	9a 01       	movw	r18, r20
    62f0:	27 70       	andi	r18, 0x07	; 7
    62f2:	30 70       	andi	r19, 0x00	; 0
    62f4:	02 c0       	rjmp	.+4      	; 0x62fa <conv_brk+0x10c>
    62f6:	95 95       	asr	r25
    62f8:	87 95       	ror	r24
    62fa:	2a 95       	dec	r18
    62fc:	e2 f7       	brpl	.-8      	; 0x62f6 <conv_brk+0x108>
    62fe:	80 fd       	sbrc	r24, 0
    6300:	05 c0       	rjmp	.+10     	; 0x630c <conv_brk+0x11e>
    6302:	ca 01       	movw	r24, r20
    6304:	b5 01       	movw	r22, r10
    6306:	0e 94 7e 39 	call	0x72fc	; 0x72fc <ungetc>
    630a:	0e c0       	rjmp	.+28     	; 0x6328 <conv_brk+0x13a>
    630c:	01 15       	cp	r16, r1
    630e:	11 05       	cpc	r17, r1
    6310:	19 f0       	breq	.+6      	; 0x6318 <conv_brk+0x12a>
    6312:	d8 01       	movw	r26, r16
    6314:	4d 93       	st	X+, r20
    6316:	8d 01       	movw	r16, r26
    6318:	08 94       	sec
    631a:	c1 08       	sbc	r12, r1
    631c:	d1 08       	sbc	r13, r1
    631e:	99 24       	eor	r9, r9
    6320:	c1 14       	cp	r12, r1
    6322:	d1 04       	cpc	r13, r1
    6324:	b1 f6       	brne	.-84     	; 0x62d2 <conv_brk+0xe4>
    6326:	02 c0       	rjmp	.+4      	; 0x632c <conv_brk+0x13e>
    6328:	99 20       	and	r9, r9
    632a:	31 f4       	brne	.+12     	; 0x6338 <conv_brk+0x14a>
    632c:	01 15       	cp	r16, r1
    632e:	11 05       	cpc	r17, r1
    6330:	29 f0       	breq	.+10     	; 0x633c <conv_brk+0x14e>
    6332:	f8 01       	movw	r30, r16
    6334:	10 82       	st	Z, r1
    6336:	02 c0       	rjmp	.+4      	; 0x633c <conv_brk+0x14e>
    6338:	ee 24       	eor	r14, r14
    633a:	ff 24       	eor	r15, r15
    633c:	c7 01       	movw	r24, r14
    633e:	a0 96       	adiw	r28, 0x20	; 32
    6340:	ee e0       	ldi	r30, 0x0E	; 14
    6342:	0c 94 d3 36 	jmp	0x6da6	; 0x6da6 <__epilogue_restores__+0x8>

00006346 <conv_flt>:
    6346:	2f 92       	push	r2
    6348:	3f 92       	push	r3
    634a:	5f 92       	push	r5
    634c:	6f 92       	push	r6
    634e:	7f 92       	push	r7
    6350:	8f 92       	push	r8
    6352:	9f 92       	push	r9
    6354:	af 92       	push	r10
    6356:	bf 92       	push	r11
    6358:	cf 92       	push	r12
    635a:	df 92       	push	r13
    635c:	ef 92       	push	r14
    635e:	ff 92       	push	r15
    6360:	0f 93       	push	r16
    6362:	1f 93       	push	r17
    6364:	cf 93       	push	r28
    6366:	df 93       	push	r29
    6368:	3c 01       	movw	r6, r24
    636a:	7b 01       	movw	r14, r22
    636c:	1a 01       	movw	r2, r20
    636e:	0e 94 41 38 	call	0x7082	; 0x7082 <fgetc>
    6372:	ec 01       	movw	r28, r24
    6374:	8b 32       	cpi	r24, 0x2B	; 43
    6376:	39 f0       	breq	.+14     	; 0x6386 <conv_flt+0x40>
    6378:	8d 32       	cpi	r24, 0x2D	; 45
    637a:	11 f0       	breq	.+4      	; 0x6380 <conv_flt+0x3a>
    637c:	55 24       	eor	r5, r5
    637e:	11 c0       	rjmp	.+34     	; 0x63a2 <conv_flt+0x5c>
    6380:	b0 e8       	ldi	r27, 0x80	; 128
    6382:	5b 2e       	mov	r5, r27
    6384:	01 c0       	rjmp	.+2      	; 0x6388 <conv_flt+0x42>
    6386:	55 24       	eor	r5, r5
    6388:	08 94       	sec
    638a:	e1 08       	sbc	r14, r1
    638c:	f1 08       	sbc	r15, r1
    638e:	e1 14       	cp	r14, r1
    6390:	f1 04       	cpc	r15, r1
    6392:	09 f4       	brne	.+2      	; 0x6396 <conv_flt+0x50>
    6394:	18 c1       	rjmp	.+560    	; 0x65c6 <conv_flt+0x280>
    6396:	c3 01       	movw	r24, r6
    6398:	0e 94 41 38 	call	0x7082	; 0x7082 <fgetc>
    639c:	ec 01       	movw	r28, r24
    639e:	97 fd       	sbrc	r25, 7
    63a0:	12 c1       	rjmp	.+548    	; 0x65c6 <conv_flt+0x280>
    63a2:	ce 01       	movw	r24, r28
    63a4:	0e 94 de 37 	call	0x6fbc	; 0x6fbc <tolower>
    63a8:	89 36       	cpi	r24, 0x69	; 105
    63aa:	91 05       	cpc	r25, r1
    63ac:	21 f0       	breq	.+8      	; 0x63b6 <conv_flt+0x70>
    63ae:	8e 36       	cpi	r24, 0x6E	; 110
    63b0:	91 05       	cpc	r25, r1
    63b2:	99 f5       	brne	.+102    	; 0x641a <conv_flt+0xd4>
    63b4:	1d c0       	rjmp	.+58     	; 0x63f0 <conv_flt+0xaa>
    63b6:	0f e8       	ldi	r16, 0x8F	; 143
    63b8:	14 e0       	ldi	r17, 0x04	; 4
    63ba:	1c c0       	rjmp	.+56     	; 0x63f4 <conv_flt+0xae>
    63bc:	08 94       	sec
    63be:	e1 08       	sbc	r14, r1
    63c0:	f1 08       	sbc	r15, r1
    63c2:	e1 14       	cp	r14, r1
    63c4:	f1 04       	cpc	r15, r1
    63c6:	71 f0       	breq	.+28     	; 0x63e4 <conv_flt+0x9e>
    63c8:	c3 01       	movw	r24, r6
    63ca:	0e 94 41 38 	call	0x7082	; 0x7082 <fgetc>
    63ce:	ec 01       	movw	r28, r24
    63d0:	97 fd       	sbrc	r25, 7
    63d2:	08 c0       	rjmp	.+16     	; 0x63e4 <conv_flt+0x9e>
    63d4:	0e 94 de 37 	call	0x6fbc	; 0x6fbc <tolower>
    63d8:	d8 16       	cp	r13, r24
    63da:	61 f0       	breq	.+24     	; 0x63f4 <conv_flt+0xae>
    63dc:	ce 01       	movw	r24, r28
    63de:	b3 01       	movw	r22, r6
    63e0:	0e 94 7e 39 	call	0x72fc	; 0x72fc <ungetc>
    63e4:	24 e0       	ldi	r18, 0x04	; 4
    63e6:	02 39       	cpi	r16, 0x92	; 146
    63e8:	12 07       	cpc	r17, r18
    63ea:	09 f0       	breq	.+2      	; 0x63ee <conv_flt+0xa8>
    63ec:	ec c0       	rjmp	.+472    	; 0x65c6 <conv_flt+0x280>
    63ee:	08 c0       	rjmp	.+16     	; 0x6400 <conv_flt+0xba>
    63f0:	0c e8       	ldi	r16, 0x8C	; 140
    63f2:	14 e0       	ldi	r17, 0x04	; 4
    63f4:	f8 01       	movw	r30, r16
    63f6:	0f 5f       	subi	r16, 0xFF	; 255
    63f8:	1f 4f       	sbci	r17, 0xFF	; 255
    63fa:	d4 90       	lpm	r13, Z+
    63fc:	dd 20       	and	r13, r13
    63fe:	f1 f6       	brne	.-68     	; 0x63bc <conv_flt+0x76>
    6400:	0f 58       	subi	r16, 0x8F	; 143
    6402:	14 40       	sbci	r17, 0x04	; 4
    6404:	29 f0       	breq	.+10     	; 0x6410 <conv_flt+0xca>
    6406:	80 e0       	ldi	r24, 0x00	; 0
    6408:	90 e0       	ldi	r25, 0x00	; 0
    640a:	a0 e8       	ldi	r26, 0x80	; 128
    640c:	bf e7       	ldi	r27, 0x7F	; 127
    640e:	cf c0       	rjmp	.+414    	; 0x65ae <conv_flt+0x268>
    6410:	80 e0       	ldi	r24, 0x00	; 0
    6412:	90 e0       	ldi	r25, 0x00	; 0
    6414:	a0 ec       	ldi	r26, 0xC0	; 192
    6416:	bf e7       	ldi	r27, 0x7F	; 127
    6418:	ca c0       	rjmp	.+404    	; 0x65ae <conv_flt+0x268>
    641a:	cc 24       	eor	r12, r12
    641c:	dd 24       	eor	r13, r13
    641e:	88 24       	eor	r8, r8
    6420:	99 24       	eor	r9, r9
    6422:	54 01       	movw	r10, r8
    6424:	ae 01       	movw	r20, r28
    6426:	40 53       	subi	r20, 0x30	; 48
    6428:	24 2f       	mov	r18, r20
    642a:	4a 30       	cpi	r20, 0x0A	; 10
    642c:	38 f5       	brcc	.+78     	; 0x647c <conv_flt+0x136>
    642e:	52 e0       	ldi	r21, 0x02	; 2
    6430:	55 2a       	or	r5, r21
    6432:	85 2d       	mov	r24, r5
    6434:	90 e0       	ldi	r25, 0x00	; 0
    6436:	ac 01       	movw	r20, r24
    6438:	48 70       	andi	r20, 0x08	; 8
    643a:	50 70       	andi	r21, 0x00	; 0
    643c:	52 fe       	sbrs	r5, 2
    643e:	06 c0       	rjmp	.+12     	; 0x644c <conv_flt+0x106>
    6440:	45 2b       	or	r20, r21
    6442:	11 f5       	brne	.+68     	; 0x6488 <conv_flt+0x142>
    6444:	08 94       	sec
    6446:	c1 1c       	adc	r12, r1
    6448:	d1 1c       	adc	r13, r1
    644a:	1e c0       	rjmp	.+60     	; 0x6488 <conv_flt+0x142>
    644c:	45 2b       	or	r20, r21
    644e:	19 f0       	breq	.+6      	; 0x6456 <conv_flt+0x110>
    6450:	08 94       	sec
    6452:	c1 08       	sbc	r12, r1
    6454:	d1 08       	sbc	r13, r1
    6456:	c5 01       	movw	r24, r10
    6458:	b4 01       	movw	r22, r8
    645a:	40 e2       	ldi	r20, 0x20	; 32
    645c:	0e 94 1c 30 	call	0x6038	; 0x6038 <mulacc>
    6460:	4b 01       	movw	r8, r22
    6462:	5c 01       	movw	r10, r24
    6464:	88 e9       	ldi	r24, 0x98	; 152
    6466:	88 16       	cp	r8, r24
    6468:	89 e9       	ldi	r24, 0x99	; 153
    646a:	98 06       	cpc	r9, r24
    646c:	89 e9       	ldi	r24, 0x99	; 153
    646e:	a8 06       	cpc	r10, r24
    6470:	89 e1       	ldi	r24, 0x19	; 25
    6472:	b8 06       	cpc	r11, r24
    6474:	48 f0       	brcs	.+18     	; 0x6488 <conv_flt+0x142>
    6476:	94 e0       	ldi	r25, 0x04	; 4
    6478:	59 2a       	or	r5, r25
    647a:	06 c0       	rjmp	.+12     	; 0x6488 <conv_flt+0x142>
    647c:	4e 3f       	cpi	r20, 0xFE	; 254
    647e:	81 f4       	brne	.+32     	; 0x64a0 <conv_flt+0x15a>
    6480:	53 fc       	sbrc	r5, 3
    6482:	0e c0       	rjmp	.+28     	; 0x64a0 <conv_flt+0x15a>
    6484:	e8 e0       	ldi	r30, 0x08	; 8
    6486:	5e 2a       	or	r5, r30
    6488:	08 94       	sec
    648a:	e1 08       	sbc	r14, r1
    648c:	f1 08       	sbc	r15, r1
    648e:	e1 14       	cp	r14, r1
    6490:	f1 04       	cpc	r15, r1
    6492:	31 f0       	breq	.+12     	; 0x64a0 <conv_flt+0x15a>
    6494:	c3 01       	movw	r24, r6
    6496:	0e 94 41 38 	call	0x7082	; 0x7082 <fgetc>
    649a:	ec 01       	movw	r28, r24
    649c:	97 ff       	sbrs	r25, 7
    649e:	c2 cf       	rjmp	.-124    	; 0x6424 <conv_flt+0xde>
    64a0:	51 fe       	sbrs	r5, 1
    64a2:	91 c0       	rjmp	.+290    	; 0x65c6 <conv_flt+0x280>
    64a4:	c5 36       	cpi	r28, 0x65	; 101
    64a6:	19 f0       	breq	.+6      	; 0x64ae <conv_flt+0x168>
    64a8:	c5 34       	cpi	r28, 0x45	; 69
    64aa:	09 f0       	breq	.+2      	; 0x64ae <conv_flt+0x168>
    64ac:	46 c0       	rjmp	.+140    	; 0x653a <conv_flt+0x1f4>
    64ae:	08 94       	sec
    64b0:	e1 08       	sbc	r14, r1
    64b2:	f1 08       	sbc	r15, r1
    64b4:	e1 14       	cp	r14, r1
    64b6:	f1 04       	cpc	r15, r1
    64b8:	09 f4       	brne	.+2      	; 0x64bc <conv_flt+0x176>
    64ba:	85 c0       	rjmp	.+266    	; 0x65c6 <conv_flt+0x280>
    64bc:	c3 01       	movw	r24, r6
    64be:	0e 94 41 38 	call	0x7082	; 0x7082 <fgetc>
    64c2:	ec 01       	movw	r28, r24
    64c4:	97 fd       	sbrc	r25, 7
    64c6:	7f c0       	rjmp	.+254    	; 0x65c6 <conv_flt+0x280>
    64c8:	8b 32       	cpi	r24, 0x2B	; 43
    64ca:	21 f0       	breq	.+8      	; 0x64d4 <conv_flt+0x18e>
    64cc:	8d 32       	cpi	r24, 0x2D	; 45
    64ce:	69 f4       	brne	.+26     	; 0x64ea <conv_flt+0x1a4>
    64d0:	f0 e1       	ldi	r31, 0x10	; 16
    64d2:	5f 2a       	or	r5, r31
    64d4:	08 94       	sec
    64d6:	e1 08       	sbc	r14, r1
    64d8:	f1 08       	sbc	r15, r1
    64da:	e1 14       	cp	r14, r1
    64dc:	f1 04       	cpc	r15, r1
    64de:	09 f4       	brne	.+2      	; 0x64e2 <conv_flt+0x19c>
    64e0:	72 c0       	rjmp	.+228    	; 0x65c6 <conv_flt+0x280>
    64e2:	c3 01       	movw	r24, r6
    64e4:	0e 94 41 38 	call	0x7082	; 0x7082 <fgetc>
    64e8:	ec 01       	movw	r28, r24
    64ea:	ce 01       	movw	r24, r28
    64ec:	c0 97       	sbiw	r24, 0x30	; 48
    64ee:	0a 97       	sbiw	r24, 0x0a	; 10
    64f0:	08 f0       	brcs	.+2      	; 0x64f4 <conv_flt+0x1ae>
    64f2:	69 c0       	rjmp	.+210    	; 0x65c6 <conv_flt+0x280>
    64f4:	00 e0       	ldi	r16, 0x00	; 0
    64f6:	10 e0       	ldi	r17, 0x00	; 0
    64f8:	b8 01       	movw	r22, r16
    64fa:	88 27       	eor	r24, r24
    64fc:	77 fd       	sbrc	r23, 7
    64fe:	80 95       	com	r24
    6500:	98 2f       	mov	r25, r24
    6502:	ae 01       	movw	r20, r28
    6504:	40 53       	subi	r20, 0x30	; 48
    6506:	24 2f       	mov	r18, r20
    6508:	40 e2       	ldi	r20, 0x20	; 32
    650a:	0e 94 1c 30 	call	0x6038	; 0x6038 <mulacc>
    650e:	8b 01       	movw	r16, r22
    6510:	08 94       	sec
    6512:	e1 08       	sbc	r14, r1
    6514:	f1 08       	sbc	r15, r1
    6516:	e1 14       	cp	r14, r1
    6518:	f1 04       	cpc	r15, r1
    651a:	39 f0       	breq	.+14     	; 0x652a <conv_flt+0x1e4>
    651c:	c3 01       	movw	r24, r6
    651e:	0e 94 41 38 	call	0x7082	; 0x7082 <fgetc>
    6522:	ec 01       	movw	r28, r24
    6524:	c0 97       	sbiw	r24, 0x30	; 48
    6526:	0a 97       	sbiw	r24, 0x0a	; 10
    6528:	38 f3       	brcs	.-50     	; 0x64f8 <conv_flt+0x1b2>
    652a:	b8 01       	movw	r22, r16
    652c:	54 fe       	sbrs	r5, 4
    652e:	03 c0       	rjmp	.+6      	; 0x6536 <conv_flt+0x1f0>
    6530:	70 95       	com	r23
    6532:	61 95       	neg	r22
    6534:	7f 4f       	sbci	r23, 0xFF	; 255
    6536:	c6 0e       	add	r12, r22
    6538:	d7 1e       	adc	r13, r23
    653a:	ef 28       	or	r14, r15
    653c:	31 f0       	breq	.+12     	; 0x654a <conv_flt+0x204>
    653e:	d7 fd       	sbrc	r29, 7
    6540:	04 c0       	rjmp	.+8      	; 0x654a <conv_flt+0x204>
    6542:	ce 01       	movw	r24, r28
    6544:	b3 01       	movw	r22, r6
    6546:	0e 94 7e 39 	call	0x72fc	; 0x72fc <ungetc>
    654a:	c5 01       	movw	r24, r10
    654c:	b4 01       	movw	r22, r8
    654e:	0e 94 23 35 	call	0x6a46	; 0x6a46 <__floatunsisf>
    6552:	d7 fe       	sbrs	r13, 7
    6554:	0d c0       	rjmp	.+26     	; 0x6570 <conv_flt+0x22a>
    6556:	ab ea       	ldi	r26, 0xAB	; 171
    6558:	ea 2e       	mov	r14, r26
    655a:	a4 e0       	ldi	r26, 0x04	; 4
    655c:	fa 2e       	mov	r15, r26
    655e:	d0 94       	com	r13
    6560:	c1 94       	neg	r12
    6562:	d1 08       	sbc	r13, r1
    6564:	d3 94       	inc	r13
    6566:	c0 e2       	ldi	r28, 0x20	; 32
    6568:	d0 e0       	ldi	r29, 0x00	; 0
    656a:	00 e0       	ldi	r16, 0x00	; 0
    656c:	10 e0       	ldi	r17, 0x00	; 0
    656e:	0e c0       	rjmp	.+28     	; 0x658c <conv_flt+0x246>
    6570:	f3 ec       	ldi	r31, 0xC3	; 195
    6572:	ef 2e       	mov	r14, r31
    6574:	f4 e0       	ldi	r31, 0x04	; 4
    6576:	ff 2e       	mov	r15, r31
    6578:	f6 cf       	rjmp	.-20     	; 0x6566 <conv_flt+0x220>
    657a:	f7 01       	movw	r30, r14
    657c:	25 91       	lpm	r18, Z+
    657e:	35 91       	lpm	r19, Z+
    6580:	45 91       	lpm	r20, Z+
    6582:	54 91       	lpm	r21, Z+
    6584:	0e 94 d5 35 	call	0x6baa	; 0x6baa <__mulsf3>
    6588:	cc 1a       	sub	r12, r28
    658a:	dd 0a       	sbc	r13, r29
    658c:	cc 16       	cp	r12, r28
    658e:	dd 06       	cpc	r13, r29
    6590:	a0 f7       	brcc	.-24     	; 0x657a <conv_flt+0x234>
    6592:	d6 95       	lsr	r29
    6594:	c7 95       	ror	r28
    6596:	0f 5f       	subi	r16, 0xFF	; 255
    6598:	1f 4f       	sbci	r17, 0xFF	; 255
    659a:	06 30       	cpi	r16, 0x06	; 6
    659c:	11 05       	cpc	r17, r1
    659e:	29 f0       	breq	.+10     	; 0x65aa <conv_flt+0x264>
    65a0:	ec ef       	ldi	r30, 0xFC	; 252
    65a2:	ff ef       	ldi	r31, 0xFF	; 255
    65a4:	ee 0e       	add	r14, r30
    65a6:	ff 1e       	adc	r15, r31
    65a8:	f1 cf       	rjmp	.-30     	; 0x658c <conv_flt+0x246>
    65aa:	dc 01       	movw	r26, r24
    65ac:	cb 01       	movw	r24, r22
    65ae:	57 fc       	sbrc	r5, 7
    65b0:	b0 58       	subi	r27, 0x80	; 128
    65b2:	21 14       	cp	r2, r1
    65b4:	31 04       	cpc	r3, r1
    65b6:	29 f0       	breq	.+10     	; 0x65c2 <conv_flt+0x27c>
    65b8:	f1 01       	movw	r30, r2
    65ba:	80 83       	st	Z, r24
    65bc:	91 83       	std	Z+1, r25	; 0x01
    65be:	a2 83       	std	Z+2, r26	; 0x02
    65c0:	b3 83       	std	Z+3, r27	; 0x03
    65c2:	81 e0       	ldi	r24, 0x01	; 1
    65c4:	01 c0       	rjmp	.+2      	; 0x65c8 <conv_flt+0x282>
    65c6:	80 e0       	ldi	r24, 0x00	; 0
    65c8:	df 91       	pop	r29
    65ca:	cf 91       	pop	r28
    65cc:	1f 91       	pop	r17
    65ce:	0f 91       	pop	r16
    65d0:	ff 90       	pop	r15
    65d2:	ef 90       	pop	r14
    65d4:	df 90       	pop	r13
    65d6:	cf 90       	pop	r12
    65d8:	bf 90       	pop	r11
    65da:	af 90       	pop	r10
    65dc:	9f 90       	pop	r9
    65de:	8f 90       	pop	r8
    65e0:	7f 90       	pop	r7
    65e2:	6f 90       	pop	r6
    65e4:	5f 90       	pop	r5
    65e6:	3f 90       	pop	r3
    65e8:	2f 90       	pop	r2
    65ea:	08 95       	ret

000065ec <vfscanf>:
    65ec:	a0 e0       	ldi	r26, 0x00	; 0
    65ee:	b0 e0       	ldi	r27, 0x00	; 0
    65f0:	ec ef       	ldi	r30, 0xFC	; 252
    65f2:	f2 e3       	ldi	r31, 0x32	; 50
    65f4:	0c 94 b6 36 	jmp	0x6d6c	; 0x6d6c <__prologue_saves__+0x6>
    65f8:	4c 01       	movw	r8, r24
    65fa:	5b 01       	movw	r10, r22
    65fc:	3a 01       	movw	r6, r20
    65fe:	fc 01       	movw	r30, r24
    6600:	17 82       	std	Z+7, r1	; 0x07
    6602:	16 82       	std	Z+6, r1	; 0x06
    6604:	55 24       	eor	r5, r5
    6606:	04 c1       	rjmp	.+520    	; 0x6810 <vfscanf+0x224>
    6608:	81 2f       	mov	r24, r17
    660a:	90 e0       	ldi	r25, 0x00	; 0
    660c:	0e 94 d6 37 	call	0x6fac	; 0x6fac <isspace>
    6610:	89 2b       	or	r24, r25
    6612:	21 f0       	breq	.+8      	; 0x661c <vfscanf+0x30>
    6614:	c4 01       	movw	r24, r8
    6616:	0e 94 4a 30 	call	0x6094	; 0x6094 <skip_spaces>
    661a:	fa c0       	rjmp	.+500    	; 0x6810 <vfscanf+0x224>
    661c:	15 32       	cpi	r17, 0x25	; 37
    661e:	49 f4       	brne	.+18     	; 0x6632 <vfscanf+0x46>
    6620:	f5 01       	movw	r30, r10
    6622:	f3 fc       	sbrc	r15, 3
    6624:	65 91       	lpm	r22, Z+
    6626:	f3 fe       	sbrs	r15, 3
    6628:	61 91       	ld	r22, Z+
    662a:	5f 01       	movw	r10, r30
    662c:	65 32       	cpi	r22, 0x25	; 37
    662e:	69 f4       	brne	.+26     	; 0x664a <vfscanf+0x5e>
    6630:	15 e2       	ldi	r17, 0x25	; 37
    6632:	c4 01       	movw	r24, r8
    6634:	0e 94 41 38 	call	0x7082	; 0x7082 <fgetc>
    6638:	97 fd       	sbrc	r25, 7
    663a:	f6 c0       	rjmp	.+492    	; 0x6828 <vfscanf+0x23c>
    663c:	18 17       	cp	r17, r24
    663e:	09 f4       	brne	.+2      	; 0x6642 <vfscanf+0x56>
    6640:	e7 c0       	rjmp	.+462    	; 0x6810 <vfscanf+0x224>
    6642:	b4 01       	movw	r22, r8
    6644:	0e 94 7e 39 	call	0x72fc	; 0x72fc <ungetc>
    6648:	f4 c0       	rjmp	.+488    	; 0x6832 <vfscanf+0x246>
    664a:	6a 32       	cpi	r22, 0x2A	; 42
    664c:	19 f0       	breq	.+6      	; 0x6654 <vfscanf+0x68>
    664e:	16 2f       	mov	r17, r22
    6650:	00 e0       	ldi	r16, 0x00	; 0
    6652:	06 c0       	rjmp	.+12     	; 0x6660 <vfscanf+0x74>
    6654:	f3 fc       	sbrc	r15, 3
    6656:	15 91       	lpm	r17, Z+
    6658:	f3 fe       	sbrs	r15, 3
    665a:	11 91       	ld	r17, Z+
    665c:	5f 01       	movw	r10, r30
    665e:	01 e0       	ldi	r16, 0x01	; 1
    6660:	cc 24       	eor	r12, r12
    6662:	dd 24       	eor	r13, r13
    6664:	0e c0       	rjmp	.+28     	; 0x6682 <vfscanf+0x96>
    6666:	02 60       	ori	r16, 0x02	; 2
    6668:	b6 01       	movw	r22, r12
    666a:	80 e0       	ldi	r24, 0x00	; 0
    666c:	90 e0       	ldi	r25, 0x00	; 0
    666e:	40 e2       	ldi	r20, 0x20	; 32
    6670:	0e 94 1c 30 	call	0x6038	; 0x6038 <mulacc>
    6674:	6b 01       	movw	r12, r22
    6676:	f5 01       	movw	r30, r10
    6678:	f3 fc       	sbrc	r15, 3
    667a:	15 91       	lpm	r17, Z+
    667c:	f3 fe       	sbrs	r15, 3
    667e:	11 91       	ld	r17, Z+
    6680:	5f 01       	movw	r10, r30
    6682:	21 2f       	mov	r18, r17
    6684:	20 53       	subi	r18, 0x30	; 48
    6686:	2a 30       	cpi	r18, 0x0A	; 10
    6688:	70 f3       	brcs	.-36     	; 0x6666 <vfscanf+0x7a>
    668a:	01 fd       	sbrc	r16, 1
    668c:	04 c0       	rjmp	.+8      	; 0x6696 <vfscanf+0xaa>
    668e:	cc 24       	eor	r12, r12
    6690:	ca 94       	dec	r12
    6692:	dc 2c       	mov	r13, r12
    6694:	04 c0       	rjmp	.+8      	; 0x669e <vfscanf+0xb2>
    6696:	c1 14       	cp	r12, r1
    6698:	d1 04       	cpc	r13, r1
    669a:	09 f4       	brne	.+2      	; 0x669e <vfscanf+0xb2>
    669c:	ca c0       	rjmp	.+404    	; 0x6832 <vfscanf+0x246>
    669e:	18 36       	cpi	r17, 0x68	; 104
    66a0:	21 f0       	breq	.+8      	; 0x66aa <vfscanf+0xbe>
    66a2:	1c 36       	cpi	r17, 0x6C	; 108
    66a4:	99 f4       	brne	.+38     	; 0x66cc <vfscanf+0xe0>
    66a6:	f5 01       	movw	r30, r10
    66a8:	0b c0       	rjmp	.+22     	; 0x66c0 <vfscanf+0xd4>
    66aa:	f5 01       	movw	r30, r10
    66ac:	f3 fc       	sbrc	r15, 3
    66ae:	65 91       	lpm	r22, Z+
    66b0:	f3 fe       	sbrs	r15, 3
    66b2:	61 91       	ld	r22, Z+
    66b4:	68 36       	cpi	r22, 0x68	; 104
    66b6:	19 f0       	breq	.+6      	; 0x66be <vfscanf+0xd2>
    66b8:	5f 01       	movw	r10, r30
    66ba:	16 2f       	mov	r17, r22
    66bc:	07 c0       	rjmp	.+14     	; 0x66cc <vfscanf+0xe0>
    66be:	08 60       	ori	r16, 0x08	; 8
    66c0:	04 60       	ori	r16, 0x04	; 4
    66c2:	f3 fc       	sbrc	r15, 3
    66c4:	15 91       	lpm	r17, Z+
    66c6:	f3 fe       	sbrs	r15, 3
    66c8:	11 91       	ld	r17, Z+
    66ca:	5f 01       	movw	r10, r30
    66cc:	11 23       	and	r17, r17
    66ce:	09 f4       	brne	.+2      	; 0x66d2 <vfscanf+0xe6>
    66d0:	b0 c0       	rjmp	.+352    	; 0x6832 <vfscanf+0x246>
    66d2:	8a e7       	ldi	r24, 0x7A	; 122
    66d4:	94 e0       	ldi	r25, 0x04	; 4
    66d6:	61 2f       	mov	r22, r17
    66d8:	70 e0       	ldi	r23, 0x00	; 0
    66da:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <strchr_P>
    66de:	89 2b       	or	r24, r25
    66e0:	09 f4       	brne	.+2      	; 0x66e4 <vfscanf+0xf8>
    66e2:	a7 c0       	rjmp	.+334    	; 0x6832 <vfscanf+0x246>
    66e4:	80 2f       	mov	r24, r16
    66e6:	00 ff       	sbrs	r16, 0
    66e8:	03 c0       	rjmp	.+6      	; 0x66f0 <vfscanf+0x104>
    66ea:	ee 24       	eor	r14, r14
    66ec:	ff 24       	eor	r15, r15
    66ee:	07 c0       	rjmp	.+14     	; 0x66fe <vfscanf+0x112>
    66f0:	f3 01       	movw	r30, r6
    66f2:	e0 80       	ld	r14, Z
    66f4:	f1 80       	ldd	r15, Z+1	; 0x01
    66f6:	22 e0       	ldi	r18, 0x02	; 2
    66f8:	30 e0       	ldi	r19, 0x00	; 0
    66fa:	62 0e       	add	r6, r18
    66fc:	73 1e       	adc	r7, r19
    66fe:	1e 36       	cpi	r17, 0x6E	; 110
    6700:	51 f4       	brne	.+20     	; 0x6716 <vfscanf+0x12a>
    6702:	f4 01       	movw	r30, r8
    6704:	46 81       	ldd	r20, Z+6	; 0x06
    6706:	57 81       	ldd	r21, Z+7	; 0x07
    6708:	60 e0       	ldi	r22, 0x00	; 0
    670a:	70 e0       	ldi	r23, 0x00	; 0
    670c:	c7 01       	movw	r24, r14
    670e:	20 2f       	mov	r18, r16
    6710:	0e 94 10 30 	call	0x6020	; 0x6020 <putval>
    6714:	7d c0       	rjmp	.+250    	; 0x6810 <vfscanf+0x224>
    6716:	13 36       	cpi	r17, 0x63	; 99
    6718:	b9 f4       	brne	.+46     	; 0x6748 <vfscanf+0x15c>
    671a:	81 fd       	sbrc	r24, 1
    671c:	03 c0       	rjmp	.+6      	; 0x6724 <vfscanf+0x138>
    671e:	81 e0       	ldi	r24, 0x01	; 1
    6720:	c8 2e       	mov	r12, r24
    6722:	d1 2c       	mov	r13, r1
    6724:	c4 01       	movw	r24, r8
    6726:	0e 94 41 38 	call	0x7082	; 0x7082 <fgetc>
    672a:	97 fd       	sbrc	r25, 7
    672c:	7d c0       	rjmp	.+250    	; 0x6828 <vfscanf+0x23c>
    672e:	e1 14       	cp	r14, r1
    6730:	f1 04       	cpc	r15, r1
    6732:	19 f0       	breq	.+6      	; 0x673a <vfscanf+0x14e>
    6734:	f7 01       	movw	r30, r14
    6736:	81 93       	st	Z+, r24
    6738:	7f 01       	movw	r14, r30
    673a:	08 94       	sec
    673c:	c1 08       	sbc	r12, r1
    673e:	d1 08       	sbc	r13, r1
    6740:	c1 14       	cp	r12, r1
    6742:	d1 04       	cpc	r13, r1
    6744:	79 f7       	brne	.-34     	; 0x6724 <vfscanf+0x138>
    6746:	62 c0       	rjmp	.+196    	; 0x680c <vfscanf+0x220>
    6748:	1b 35       	cpi	r17, 0x5B	; 91
    674a:	59 f4       	brne	.+22     	; 0x6762 <vfscanf+0x176>
    674c:	c4 01       	movw	r24, r8
    674e:	b6 01       	movw	r22, r12
    6750:	a7 01       	movw	r20, r14
    6752:	95 01       	movw	r18, r10
    6754:	0e 94 f7 30 	call	0x61ee	; 0x61ee <conv_brk>
    6758:	5c 01       	movw	r10, r24
    675a:	00 97       	sbiw	r24, 0x00	; 0
    675c:	09 f0       	breq	.+2      	; 0x6760 <vfscanf+0x174>
    675e:	56 c0       	rjmp	.+172    	; 0x680c <vfscanf+0x220>
    6760:	50 c0       	rjmp	.+160    	; 0x6802 <vfscanf+0x216>
    6762:	c4 01       	movw	r24, r8
    6764:	0e 94 4a 30 	call	0x6094	; 0x6094 <skip_spaces>
    6768:	97 fd       	sbrc	r25, 7
    676a:	5e c0       	rjmp	.+188    	; 0x6828 <vfscanf+0x23c>
    676c:	1f 36       	cpi	r17, 0x6F	; 111
    676e:	d1 f1       	breq	.+116    	; 0x67e4 <vfscanf+0x1f8>
    6770:	10 37       	cpi	r17, 0x70	; 112
    6772:	38 f4       	brcc	.+14     	; 0x6782 <vfscanf+0x196>
    6774:	14 36       	cpi	r17, 0x64	; 100
    6776:	a1 f1       	breq	.+104    	; 0x67e0 <vfscanf+0x1f4>
    6778:	19 36       	cpi	r17, 0x69	; 105
    677a:	a9 f1       	breq	.+106    	; 0x67e6 <vfscanf+0x1fa>
    677c:	18 35       	cpi	r17, 0x58	; 88
    677e:	d1 f5       	brne	.+116    	; 0x67f4 <vfscanf+0x208>
    6780:	2d c0       	rjmp	.+90     	; 0x67dc <vfscanf+0x1f0>
    6782:	13 37       	cpi	r17, 0x73	; 115
    6784:	51 f0       	breq	.+20     	; 0x679a <vfscanf+0x1ae>
    6786:	14 37       	cpi	r17, 0x74	; 116
    6788:	18 f4       	brcc	.+6      	; 0x6790 <vfscanf+0x1a4>
    678a:	10 37       	cpi	r17, 0x70	; 112
    678c:	99 f5       	brne	.+102    	; 0x67f4 <vfscanf+0x208>
    678e:	26 c0       	rjmp	.+76     	; 0x67dc <vfscanf+0x1f0>
    6790:	15 37       	cpi	r17, 0x75	; 117
    6792:	31 f1       	breq	.+76     	; 0x67e0 <vfscanf+0x1f4>
    6794:	18 37       	cpi	r17, 0x78	; 120
    6796:	71 f5       	brne	.+92     	; 0x67f4 <vfscanf+0x208>
    6798:	21 c0       	rjmp	.+66     	; 0x67dc <vfscanf+0x1f0>
    679a:	c4 01       	movw	r24, r8
    679c:	0e 94 41 38 	call	0x7082	; 0x7082 <fgetc>
    67a0:	ec 01       	movw	r28, r24
    67a2:	97 fd       	sbrc	r25, 7
    67a4:	15 c0       	rjmp	.+42     	; 0x67d0 <vfscanf+0x1e4>
    67a6:	0e 94 d6 37 	call	0x6fac	; 0x6fac <isspace>
    67aa:	89 2b       	or	r24, r25
    67ac:	29 f0       	breq	.+10     	; 0x67b8 <vfscanf+0x1cc>
    67ae:	ce 01       	movw	r24, r28
    67b0:	b4 01       	movw	r22, r8
    67b2:	0e 94 7e 39 	call	0x72fc	; 0x72fc <ungetc>
    67b6:	0c c0       	rjmp	.+24     	; 0x67d0 <vfscanf+0x1e4>
    67b8:	e1 14       	cp	r14, r1
    67ba:	f1 04       	cpc	r15, r1
    67bc:	19 f0       	breq	.+6      	; 0x67c4 <vfscanf+0x1d8>
    67be:	f7 01       	movw	r30, r14
    67c0:	c1 93       	st	Z+, r28
    67c2:	7f 01       	movw	r14, r30
    67c4:	08 94       	sec
    67c6:	c1 08       	sbc	r12, r1
    67c8:	d1 08       	sbc	r13, r1
    67ca:	c1 14       	cp	r12, r1
    67cc:	d1 04       	cpc	r13, r1
    67ce:	29 f7       	brne	.-54     	; 0x679a <vfscanf+0x1ae>
    67d0:	e1 14       	cp	r14, r1
    67d2:	f1 04       	cpc	r15, r1
    67d4:	d9 f0       	breq	.+54     	; 0x680c <vfscanf+0x220>
    67d6:	f7 01       	movw	r30, r14
    67d8:	10 82       	st	Z, r1
    67da:	18 c0       	rjmp	.+48     	; 0x680c <vfscanf+0x220>
    67dc:	00 64       	ori	r16, 0x40	; 64
    67de:	03 c0       	rjmp	.+6      	; 0x67e6 <vfscanf+0x1fa>
    67e0:	00 62       	ori	r16, 0x20	; 32
    67e2:	01 c0       	rjmp	.+2      	; 0x67e6 <vfscanf+0x1fa>
    67e4:	00 61       	ori	r16, 0x10	; 16
    67e6:	c4 01       	movw	r24, r8
    67e8:	b6 01       	movw	r22, r12
    67ea:	a7 01       	movw	r20, r14
    67ec:	20 2f       	mov	r18, r16
    67ee:	0e 94 63 30 	call	0x60c6	; 0x60c6 <conv_int>
    67f2:	05 c0       	rjmp	.+10     	; 0x67fe <vfscanf+0x212>
    67f4:	c4 01       	movw	r24, r8
    67f6:	b6 01       	movw	r22, r12
    67f8:	a7 01       	movw	r20, r14
    67fa:	0e 94 a3 31 	call	0x6346	; 0x6346 <conv_flt>
    67fe:	88 23       	and	r24, r24
    6800:	29 f4       	brne	.+10     	; 0x680c <vfscanf+0x220>
    6802:	f4 01       	movw	r30, r8
    6804:	83 81       	ldd	r24, Z+3	; 0x03
    6806:	80 73       	andi	r24, 0x30	; 48
    6808:	79 f4       	brne	.+30     	; 0x6828 <vfscanf+0x23c>
    680a:	13 c0       	rjmp	.+38     	; 0x6832 <vfscanf+0x246>
    680c:	00 ff       	sbrs	r16, 0
    680e:	53 94       	inc	r5
    6810:	f4 01       	movw	r30, r8
    6812:	f3 80       	ldd	r15, Z+3	; 0x03
    6814:	f5 01       	movw	r30, r10
    6816:	f3 fc       	sbrc	r15, 3
    6818:	15 91       	lpm	r17, Z+
    681a:	f3 fe       	sbrs	r15, 3
    681c:	11 91       	ld	r17, Z+
    681e:	5f 01       	movw	r10, r30
    6820:	11 23       	and	r17, r17
    6822:	09 f0       	breq	.+2      	; 0x6826 <vfscanf+0x23a>
    6824:	f1 ce       	rjmp	.-542    	; 0x6608 <vfscanf+0x1c>
    6826:	05 c0       	rjmp	.+10     	; 0x6832 <vfscanf+0x246>
    6828:	55 20       	and	r5, r5
    682a:	19 f4       	brne	.+6      	; 0x6832 <vfscanf+0x246>
    682c:	2f ef       	ldi	r18, 0xFF	; 255
    682e:	3f ef       	ldi	r19, 0xFF	; 255
    6830:	02 c0       	rjmp	.+4      	; 0x6836 <vfscanf+0x24a>
    6832:	25 2d       	mov	r18, r5
    6834:	30 e0       	ldi	r19, 0x00	; 0
    6836:	c9 01       	movw	r24, r18
    6838:	cd b7       	in	r28, 0x3d	; 61
    683a:	de b7       	in	r29, 0x3e	; 62
    683c:	ef e0       	ldi	r30, 0x0F	; 15
    683e:	0c 94 d2 36 	jmp	0x6da4	; 0x6da4 <__epilogue_restores__+0x6>

00006842 <__subsf3>:
    6842:	50 58       	subi	r21, 0x80	; 128

00006844 <__addsf3>:
    6844:	bb 27       	eor	r27, r27
    6846:	aa 27       	eor	r26, r26
    6848:	0e d0       	rcall	.+28     	; 0x6866 <__addsf3x>
    684a:	75 c1       	rjmp	.+746    	; 0x6b36 <__fp_round>
    684c:	66 d1       	rcall	.+716    	; 0x6b1a <__fp_pscA>
    684e:	30 f0       	brcs	.+12     	; 0x685c <__addsf3+0x18>
    6850:	6b d1       	rcall	.+726    	; 0x6b28 <__fp_pscB>
    6852:	20 f0       	brcs	.+8      	; 0x685c <__addsf3+0x18>
    6854:	31 f4       	brne	.+12     	; 0x6862 <__addsf3+0x1e>
    6856:	9f 3f       	cpi	r25, 0xFF	; 255
    6858:	11 f4       	brne	.+4      	; 0x685e <__addsf3+0x1a>
    685a:	1e f4       	brtc	.+6      	; 0x6862 <__addsf3+0x1e>
    685c:	5b c1       	rjmp	.+694    	; 0x6b14 <__fp_nan>
    685e:	0e f4       	brtc	.+2      	; 0x6862 <__addsf3+0x1e>
    6860:	e0 95       	com	r30
    6862:	e7 fb       	bst	r30, 7
    6864:	51 c1       	rjmp	.+674    	; 0x6b08 <__fp_inf>

00006866 <__addsf3x>:
    6866:	e9 2f       	mov	r30, r25
    6868:	77 d1       	rcall	.+750    	; 0x6b58 <__fp_split3>
    686a:	80 f3       	brcs	.-32     	; 0x684c <__addsf3+0x8>
    686c:	ba 17       	cp	r27, r26
    686e:	62 07       	cpc	r22, r18
    6870:	73 07       	cpc	r23, r19
    6872:	84 07       	cpc	r24, r20
    6874:	95 07       	cpc	r25, r21
    6876:	18 f0       	brcs	.+6      	; 0x687e <__addsf3x+0x18>
    6878:	71 f4       	brne	.+28     	; 0x6896 <__addsf3x+0x30>
    687a:	9e f5       	brtc	.+102    	; 0x68e2 <__addsf3x+0x7c>
    687c:	8f c1       	rjmp	.+798    	; 0x6b9c <__fp_zero>
    687e:	0e f4       	brtc	.+2      	; 0x6882 <__addsf3x+0x1c>
    6880:	e0 95       	com	r30
    6882:	0b 2e       	mov	r0, r27
    6884:	ba 2f       	mov	r27, r26
    6886:	a0 2d       	mov	r26, r0
    6888:	0b 01       	movw	r0, r22
    688a:	b9 01       	movw	r22, r18
    688c:	90 01       	movw	r18, r0
    688e:	0c 01       	movw	r0, r24
    6890:	ca 01       	movw	r24, r20
    6892:	a0 01       	movw	r20, r0
    6894:	11 24       	eor	r1, r1
    6896:	ff 27       	eor	r31, r31
    6898:	59 1b       	sub	r21, r25
    689a:	99 f0       	breq	.+38     	; 0x68c2 <__addsf3x+0x5c>
    689c:	59 3f       	cpi	r21, 0xF9	; 249
    689e:	50 f4       	brcc	.+20     	; 0x68b4 <__addsf3x+0x4e>
    68a0:	50 3e       	cpi	r21, 0xE0	; 224
    68a2:	68 f1       	brcs	.+90     	; 0x68fe <__addsf3x+0x98>
    68a4:	1a 16       	cp	r1, r26
    68a6:	f0 40       	sbci	r31, 0x00	; 0
    68a8:	a2 2f       	mov	r26, r18
    68aa:	23 2f       	mov	r18, r19
    68ac:	34 2f       	mov	r19, r20
    68ae:	44 27       	eor	r20, r20
    68b0:	58 5f       	subi	r21, 0xF8	; 248
    68b2:	f3 cf       	rjmp	.-26     	; 0x689a <__addsf3x+0x34>
    68b4:	46 95       	lsr	r20
    68b6:	37 95       	ror	r19
    68b8:	27 95       	ror	r18
    68ba:	a7 95       	ror	r26
    68bc:	f0 40       	sbci	r31, 0x00	; 0
    68be:	53 95       	inc	r21
    68c0:	c9 f7       	brne	.-14     	; 0x68b4 <__addsf3x+0x4e>
    68c2:	7e f4       	brtc	.+30     	; 0x68e2 <__addsf3x+0x7c>
    68c4:	1f 16       	cp	r1, r31
    68c6:	ba 0b       	sbc	r27, r26
    68c8:	62 0b       	sbc	r22, r18
    68ca:	73 0b       	sbc	r23, r19
    68cc:	84 0b       	sbc	r24, r20
    68ce:	ba f0       	brmi	.+46     	; 0x68fe <__addsf3x+0x98>
    68d0:	91 50       	subi	r25, 0x01	; 1
    68d2:	a1 f0       	breq	.+40     	; 0x68fc <__addsf3x+0x96>
    68d4:	ff 0f       	add	r31, r31
    68d6:	bb 1f       	adc	r27, r27
    68d8:	66 1f       	adc	r22, r22
    68da:	77 1f       	adc	r23, r23
    68dc:	88 1f       	adc	r24, r24
    68de:	c2 f7       	brpl	.-16     	; 0x68d0 <__addsf3x+0x6a>
    68e0:	0e c0       	rjmp	.+28     	; 0x68fe <__addsf3x+0x98>
    68e2:	ba 0f       	add	r27, r26
    68e4:	62 1f       	adc	r22, r18
    68e6:	73 1f       	adc	r23, r19
    68e8:	84 1f       	adc	r24, r20
    68ea:	48 f4       	brcc	.+18     	; 0x68fe <__addsf3x+0x98>
    68ec:	87 95       	ror	r24
    68ee:	77 95       	ror	r23
    68f0:	67 95       	ror	r22
    68f2:	b7 95       	ror	r27
    68f4:	f7 95       	ror	r31
    68f6:	9e 3f       	cpi	r25, 0xFE	; 254
    68f8:	08 f0       	brcs	.+2      	; 0x68fc <__addsf3x+0x96>
    68fa:	b3 cf       	rjmp	.-154    	; 0x6862 <__addsf3+0x1e>
    68fc:	93 95       	inc	r25
    68fe:	88 0f       	add	r24, r24
    6900:	08 f0       	brcs	.+2      	; 0x6904 <__addsf3x+0x9e>
    6902:	99 27       	eor	r25, r25
    6904:	ee 0f       	add	r30, r30
    6906:	97 95       	ror	r25
    6908:	87 95       	ror	r24
    690a:	08 95       	ret

0000690c <__cmpsf2>:
    690c:	d9 d0       	rcall	.+434    	; 0x6ac0 <__fp_cmp>
    690e:	08 f4       	brcc	.+2      	; 0x6912 <__cmpsf2+0x6>
    6910:	81 e0       	ldi	r24, 0x01	; 1
    6912:	08 95       	ret

00006914 <__divsf3>:
    6914:	0c d0       	rcall	.+24     	; 0x692e <__divsf3x>
    6916:	0f c1       	rjmp	.+542    	; 0x6b36 <__fp_round>
    6918:	07 d1       	rcall	.+526    	; 0x6b28 <__fp_pscB>
    691a:	40 f0       	brcs	.+16     	; 0x692c <__divsf3+0x18>
    691c:	fe d0       	rcall	.+508    	; 0x6b1a <__fp_pscA>
    691e:	30 f0       	brcs	.+12     	; 0x692c <__divsf3+0x18>
    6920:	21 f4       	brne	.+8      	; 0x692a <__divsf3+0x16>
    6922:	5f 3f       	cpi	r21, 0xFF	; 255
    6924:	19 f0       	breq	.+6      	; 0x692c <__divsf3+0x18>
    6926:	f0 c0       	rjmp	.+480    	; 0x6b08 <__fp_inf>
    6928:	51 11       	cpse	r21, r1
    692a:	39 c1       	rjmp	.+626    	; 0x6b9e <__fp_szero>
    692c:	f3 c0       	rjmp	.+486    	; 0x6b14 <__fp_nan>

0000692e <__divsf3x>:
    692e:	14 d1       	rcall	.+552    	; 0x6b58 <__fp_split3>
    6930:	98 f3       	brcs	.-26     	; 0x6918 <__divsf3+0x4>

00006932 <__divsf3_pse>:
    6932:	99 23       	and	r25, r25
    6934:	c9 f3       	breq	.-14     	; 0x6928 <__divsf3+0x14>
    6936:	55 23       	and	r21, r21
    6938:	b1 f3       	breq	.-20     	; 0x6926 <__divsf3+0x12>
    693a:	95 1b       	sub	r25, r21
    693c:	55 0b       	sbc	r21, r21
    693e:	bb 27       	eor	r27, r27
    6940:	aa 27       	eor	r26, r26
    6942:	62 17       	cp	r22, r18
    6944:	73 07       	cpc	r23, r19
    6946:	84 07       	cpc	r24, r20
    6948:	38 f0       	brcs	.+14     	; 0x6958 <__divsf3_pse+0x26>
    694a:	9f 5f       	subi	r25, 0xFF	; 255
    694c:	5f 4f       	sbci	r21, 0xFF	; 255
    694e:	22 0f       	add	r18, r18
    6950:	33 1f       	adc	r19, r19
    6952:	44 1f       	adc	r20, r20
    6954:	aa 1f       	adc	r26, r26
    6956:	a9 f3       	breq	.-22     	; 0x6942 <__divsf3_pse+0x10>
    6958:	33 d0       	rcall	.+102    	; 0x69c0 <__divsf3_pse+0x8e>
    695a:	0e 2e       	mov	r0, r30
    695c:	3a f0       	brmi	.+14     	; 0x696c <__divsf3_pse+0x3a>
    695e:	e0 e8       	ldi	r30, 0x80	; 128
    6960:	30 d0       	rcall	.+96     	; 0x69c2 <__divsf3_pse+0x90>
    6962:	91 50       	subi	r25, 0x01	; 1
    6964:	50 40       	sbci	r21, 0x00	; 0
    6966:	e6 95       	lsr	r30
    6968:	00 1c       	adc	r0, r0
    696a:	ca f7       	brpl	.-14     	; 0x695e <__divsf3_pse+0x2c>
    696c:	29 d0       	rcall	.+82     	; 0x69c0 <__divsf3_pse+0x8e>
    696e:	fe 2f       	mov	r31, r30
    6970:	27 d0       	rcall	.+78     	; 0x69c0 <__divsf3_pse+0x8e>
    6972:	66 0f       	add	r22, r22
    6974:	77 1f       	adc	r23, r23
    6976:	88 1f       	adc	r24, r24
    6978:	bb 1f       	adc	r27, r27
    697a:	26 17       	cp	r18, r22
    697c:	37 07       	cpc	r19, r23
    697e:	48 07       	cpc	r20, r24
    6980:	ab 07       	cpc	r26, r27
    6982:	b0 e8       	ldi	r27, 0x80	; 128
    6984:	09 f0       	breq	.+2      	; 0x6988 <__divsf3_pse+0x56>
    6986:	bb 0b       	sbc	r27, r27
    6988:	80 2d       	mov	r24, r0
    698a:	bf 01       	movw	r22, r30
    698c:	ff 27       	eor	r31, r31
    698e:	93 58       	subi	r25, 0x83	; 131
    6990:	5f 4f       	sbci	r21, 0xFF	; 255
    6992:	2a f0       	brmi	.+10     	; 0x699e <__divsf3_pse+0x6c>
    6994:	9e 3f       	cpi	r25, 0xFE	; 254
    6996:	51 05       	cpc	r21, r1
    6998:	68 f0       	brcs	.+26     	; 0x69b4 <__divsf3_pse+0x82>
    699a:	b6 c0       	rjmp	.+364    	; 0x6b08 <__fp_inf>
    699c:	00 c1       	rjmp	.+512    	; 0x6b9e <__fp_szero>
    699e:	5f 3f       	cpi	r21, 0xFF	; 255
    69a0:	ec f3       	brlt	.-6      	; 0x699c <__divsf3_pse+0x6a>
    69a2:	98 3e       	cpi	r25, 0xE8	; 232
    69a4:	dc f3       	brlt	.-10     	; 0x699c <__divsf3_pse+0x6a>
    69a6:	86 95       	lsr	r24
    69a8:	77 95       	ror	r23
    69aa:	67 95       	ror	r22
    69ac:	b7 95       	ror	r27
    69ae:	f7 95       	ror	r31
    69b0:	9f 5f       	subi	r25, 0xFF	; 255
    69b2:	c9 f7       	brne	.-14     	; 0x69a6 <__divsf3_pse+0x74>
    69b4:	88 0f       	add	r24, r24
    69b6:	91 1d       	adc	r25, r1
    69b8:	96 95       	lsr	r25
    69ba:	87 95       	ror	r24
    69bc:	97 f9       	bld	r25, 7
    69be:	08 95       	ret
    69c0:	e1 e0       	ldi	r30, 0x01	; 1
    69c2:	66 0f       	add	r22, r22
    69c4:	77 1f       	adc	r23, r23
    69c6:	88 1f       	adc	r24, r24
    69c8:	bb 1f       	adc	r27, r27
    69ca:	62 17       	cp	r22, r18
    69cc:	73 07       	cpc	r23, r19
    69ce:	84 07       	cpc	r24, r20
    69d0:	ba 07       	cpc	r27, r26
    69d2:	20 f0       	brcs	.+8      	; 0x69dc <__divsf3_pse+0xaa>
    69d4:	62 1b       	sub	r22, r18
    69d6:	73 0b       	sbc	r23, r19
    69d8:	84 0b       	sbc	r24, r20
    69da:	ba 0b       	sbc	r27, r26
    69dc:	ee 1f       	adc	r30, r30
    69de:	88 f7       	brcc	.-30     	; 0x69c2 <__divsf3_pse+0x90>
    69e0:	e0 95       	com	r30
    69e2:	08 95       	ret

000069e4 <__fixsfsi>:
    69e4:	04 d0       	rcall	.+8      	; 0x69ee <__fixunssfsi>
    69e6:	68 94       	set
    69e8:	b1 11       	cpse	r27, r1
    69ea:	d9 c0       	rjmp	.+434    	; 0x6b9e <__fp_szero>
    69ec:	08 95       	ret

000069ee <__fixunssfsi>:
    69ee:	bc d0       	rcall	.+376    	; 0x6b68 <__fp_splitA>
    69f0:	88 f0       	brcs	.+34     	; 0x6a14 <__fixunssfsi+0x26>
    69f2:	9f 57       	subi	r25, 0x7F	; 127
    69f4:	90 f0       	brcs	.+36     	; 0x6a1a <__fixunssfsi+0x2c>
    69f6:	b9 2f       	mov	r27, r25
    69f8:	99 27       	eor	r25, r25
    69fa:	b7 51       	subi	r27, 0x17	; 23
    69fc:	a0 f0       	brcs	.+40     	; 0x6a26 <__fixunssfsi+0x38>
    69fe:	d1 f0       	breq	.+52     	; 0x6a34 <__fixunssfsi+0x46>
    6a00:	66 0f       	add	r22, r22
    6a02:	77 1f       	adc	r23, r23
    6a04:	88 1f       	adc	r24, r24
    6a06:	99 1f       	adc	r25, r25
    6a08:	1a f0       	brmi	.+6      	; 0x6a10 <__fixunssfsi+0x22>
    6a0a:	ba 95       	dec	r27
    6a0c:	c9 f7       	brne	.-14     	; 0x6a00 <__fixunssfsi+0x12>
    6a0e:	12 c0       	rjmp	.+36     	; 0x6a34 <__fixunssfsi+0x46>
    6a10:	b1 30       	cpi	r27, 0x01	; 1
    6a12:	81 f0       	breq	.+32     	; 0x6a34 <__fixunssfsi+0x46>
    6a14:	c3 d0       	rcall	.+390    	; 0x6b9c <__fp_zero>
    6a16:	b1 e0       	ldi	r27, 0x01	; 1
    6a18:	08 95       	ret
    6a1a:	c0 c0       	rjmp	.+384    	; 0x6b9c <__fp_zero>
    6a1c:	67 2f       	mov	r22, r23
    6a1e:	78 2f       	mov	r23, r24
    6a20:	88 27       	eor	r24, r24
    6a22:	b8 5f       	subi	r27, 0xF8	; 248
    6a24:	39 f0       	breq	.+14     	; 0x6a34 <__fixunssfsi+0x46>
    6a26:	b9 3f       	cpi	r27, 0xF9	; 249
    6a28:	cc f3       	brlt	.-14     	; 0x6a1c <__fixunssfsi+0x2e>
    6a2a:	86 95       	lsr	r24
    6a2c:	77 95       	ror	r23
    6a2e:	67 95       	ror	r22
    6a30:	b3 95       	inc	r27
    6a32:	d9 f7       	brne	.-10     	; 0x6a2a <__fixunssfsi+0x3c>
    6a34:	3e f4       	brtc	.+14     	; 0x6a44 <__fixunssfsi+0x56>
    6a36:	90 95       	com	r25
    6a38:	80 95       	com	r24
    6a3a:	70 95       	com	r23
    6a3c:	61 95       	neg	r22
    6a3e:	7f 4f       	sbci	r23, 0xFF	; 255
    6a40:	8f 4f       	sbci	r24, 0xFF	; 255
    6a42:	9f 4f       	sbci	r25, 0xFF	; 255
    6a44:	08 95       	ret

00006a46 <__floatunsisf>:
    6a46:	e8 94       	clt
    6a48:	09 c0       	rjmp	.+18     	; 0x6a5c <__floatsisf+0x12>

00006a4a <__floatsisf>:
    6a4a:	97 fb       	bst	r25, 7
    6a4c:	3e f4       	brtc	.+14     	; 0x6a5c <__floatsisf+0x12>
    6a4e:	90 95       	com	r25
    6a50:	80 95       	com	r24
    6a52:	70 95       	com	r23
    6a54:	61 95       	neg	r22
    6a56:	7f 4f       	sbci	r23, 0xFF	; 255
    6a58:	8f 4f       	sbci	r24, 0xFF	; 255
    6a5a:	9f 4f       	sbci	r25, 0xFF	; 255
    6a5c:	99 23       	and	r25, r25
    6a5e:	a9 f0       	breq	.+42     	; 0x6a8a <__floatsisf+0x40>
    6a60:	f9 2f       	mov	r31, r25
    6a62:	96 e9       	ldi	r25, 0x96	; 150
    6a64:	bb 27       	eor	r27, r27
    6a66:	93 95       	inc	r25
    6a68:	f6 95       	lsr	r31
    6a6a:	87 95       	ror	r24
    6a6c:	77 95       	ror	r23
    6a6e:	67 95       	ror	r22
    6a70:	b7 95       	ror	r27
    6a72:	f1 11       	cpse	r31, r1
    6a74:	f8 cf       	rjmp	.-16     	; 0x6a66 <__floatsisf+0x1c>
    6a76:	fa f4       	brpl	.+62     	; 0x6ab6 <__floatsisf+0x6c>
    6a78:	bb 0f       	add	r27, r27
    6a7a:	11 f4       	brne	.+4      	; 0x6a80 <__floatsisf+0x36>
    6a7c:	60 ff       	sbrs	r22, 0
    6a7e:	1b c0       	rjmp	.+54     	; 0x6ab6 <__floatsisf+0x6c>
    6a80:	6f 5f       	subi	r22, 0xFF	; 255
    6a82:	7f 4f       	sbci	r23, 0xFF	; 255
    6a84:	8f 4f       	sbci	r24, 0xFF	; 255
    6a86:	9f 4f       	sbci	r25, 0xFF	; 255
    6a88:	16 c0       	rjmp	.+44     	; 0x6ab6 <__floatsisf+0x6c>
    6a8a:	88 23       	and	r24, r24
    6a8c:	11 f0       	breq	.+4      	; 0x6a92 <__floatsisf+0x48>
    6a8e:	96 e9       	ldi	r25, 0x96	; 150
    6a90:	11 c0       	rjmp	.+34     	; 0x6ab4 <__floatsisf+0x6a>
    6a92:	77 23       	and	r23, r23
    6a94:	21 f0       	breq	.+8      	; 0x6a9e <__floatsisf+0x54>
    6a96:	9e e8       	ldi	r25, 0x8E	; 142
    6a98:	87 2f       	mov	r24, r23
    6a9a:	76 2f       	mov	r23, r22
    6a9c:	05 c0       	rjmp	.+10     	; 0x6aa8 <__floatsisf+0x5e>
    6a9e:	66 23       	and	r22, r22
    6aa0:	71 f0       	breq	.+28     	; 0x6abe <__floatsisf+0x74>
    6aa2:	96 e8       	ldi	r25, 0x86	; 134
    6aa4:	86 2f       	mov	r24, r22
    6aa6:	70 e0       	ldi	r23, 0x00	; 0
    6aa8:	60 e0       	ldi	r22, 0x00	; 0
    6aaa:	2a f0       	brmi	.+10     	; 0x6ab6 <__floatsisf+0x6c>
    6aac:	9a 95       	dec	r25
    6aae:	66 0f       	add	r22, r22
    6ab0:	77 1f       	adc	r23, r23
    6ab2:	88 1f       	adc	r24, r24
    6ab4:	da f7       	brpl	.-10     	; 0x6aac <__floatsisf+0x62>
    6ab6:	88 0f       	add	r24, r24
    6ab8:	96 95       	lsr	r25
    6aba:	87 95       	ror	r24
    6abc:	97 f9       	bld	r25, 7
    6abe:	08 95       	ret

00006ac0 <__fp_cmp>:
    6ac0:	99 0f       	add	r25, r25
    6ac2:	00 08       	sbc	r0, r0
    6ac4:	55 0f       	add	r21, r21
    6ac6:	aa 0b       	sbc	r26, r26
    6ac8:	e0 e8       	ldi	r30, 0x80	; 128
    6aca:	fe ef       	ldi	r31, 0xFE	; 254
    6acc:	16 16       	cp	r1, r22
    6ace:	17 06       	cpc	r1, r23
    6ad0:	e8 07       	cpc	r30, r24
    6ad2:	f9 07       	cpc	r31, r25
    6ad4:	c0 f0       	brcs	.+48     	; 0x6b06 <__fp_cmp+0x46>
    6ad6:	12 16       	cp	r1, r18
    6ad8:	13 06       	cpc	r1, r19
    6ada:	e4 07       	cpc	r30, r20
    6adc:	f5 07       	cpc	r31, r21
    6ade:	98 f0       	brcs	.+38     	; 0x6b06 <__fp_cmp+0x46>
    6ae0:	62 1b       	sub	r22, r18
    6ae2:	73 0b       	sbc	r23, r19
    6ae4:	84 0b       	sbc	r24, r20
    6ae6:	95 0b       	sbc	r25, r21
    6ae8:	39 f4       	brne	.+14     	; 0x6af8 <__fp_cmp+0x38>
    6aea:	0a 26       	eor	r0, r26
    6aec:	61 f0       	breq	.+24     	; 0x6b06 <__fp_cmp+0x46>
    6aee:	23 2b       	or	r18, r19
    6af0:	24 2b       	or	r18, r20
    6af2:	25 2b       	or	r18, r21
    6af4:	21 f4       	brne	.+8      	; 0x6afe <__fp_cmp+0x3e>
    6af6:	08 95       	ret
    6af8:	0a 26       	eor	r0, r26
    6afa:	09 f4       	brne	.+2      	; 0x6afe <__fp_cmp+0x3e>
    6afc:	a1 40       	sbci	r26, 0x01	; 1
    6afe:	a6 95       	lsr	r26
    6b00:	8f ef       	ldi	r24, 0xFF	; 255
    6b02:	81 1d       	adc	r24, r1
    6b04:	81 1d       	adc	r24, r1
    6b06:	08 95       	ret

00006b08 <__fp_inf>:
    6b08:	97 f9       	bld	r25, 7
    6b0a:	9f 67       	ori	r25, 0x7F	; 127
    6b0c:	80 e8       	ldi	r24, 0x80	; 128
    6b0e:	70 e0       	ldi	r23, 0x00	; 0
    6b10:	60 e0       	ldi	r22, 0x00	; 0
    6b12:	08 95       	ret

00006b14 <__fp_nan>:
    6b14:	9f ef       	ldi	r25, 0xFF	; 255
    6b16:	80 ec       	ldi	r24, 0xC0	; 192
    6b18:	08 95       	ret

00006b1a <__fp_pscA>:
    6b1a:	00 24       	eor	r0, r0
    6b1c:	0a 94       	dec	r0
    6b1e:	16 16       	cp	r1, r22
    6b20:	17 06       	cpc	r1, r23
    6b22:	18 06       	cpc	r1, r24
    6b24:	09 06       	cpc	r0, r25
    6b26:	08 95       	ret

00006b28 <__fp_pscB>:
    6b28:	00 24       	eor	r0, r0
    6b2a:	0a 94       	dec	r0
    6b2c:	12 16       	cp	r1, r18
    6b2e:	13 06       	cpc	r1, r19
    6b30:	14 06       	cpc	r1, r20
    6b32:	05 06       	cpc	r0, r21
    6b34:	08 95       	ret

00006b36 <__fp_round>:
    6b36:	09 2e       	mov	r0, r25
    6b38:	03 94       	inc	r0
    6b3a:	00 0c       	add	r0, r0
    6b3c:	11 f4       	brne	.+4      	; 0x6b42 <__fp_round+0xc>
    6b3e:	88 23       	and	r24, r24
    6b40:	52 f0       	brmi	.+20     	; 0x6b56 <__fp_round+0x20>
    6b42:	bb 0f       	add	r27, r27
    6b44:	40 f4       	brcc	.+16     	; 0x6b56 <__fp_round+0x20>
    6b46:	bf 2b       	or	r27, r31
    6b48:	11 f4       	brne	.+4      	; 0x6b4e <__fp_round+0x18>
    6b4a:	60 ff       	sbrs	r22, 0
    6b4c:	04 c0       	rjmp	.+8      	; 0x6b56 <__fp_round+0x20>
    6b4e:	6f 5f       	subi	r22, 0xFF	; 255
    6b50:	7f 4f       	sbci	r23, 0xFF	; 255
    6b52:	8f 4f       	sbci	r24, 0xFF	; 255
    6b54:	9f 4f       	sbci	r25, 0xFF	; 255
    6b56:	08 95       	ret

00006b58 <__fp_split3>:
    6b58:	57 fd       	sbrc	r21, 7
    6b5a:	90 58       	subi	r25, 0x80	; 128
    6b5c:	44 0f       	add	r20, r20
    6b5e:	55 1f       	adc	r21, r21
    6b60:	59 f0       	breq	.+22     	; 0x6b78 <__fp_splitA+0x10>
    6b62:	5f 3f       	cpi	r21, 0xFF	; 255
    6b64:	71 f0       	breq	.+28     	; 0x6b82 <__fp_splitA+0x1a>
    6b66:	47 95       	ror	r20

00006b68 <__fp_splitA>:
    6b68:	88 0f       	add	r24, r24
    6b6a:	97 fb       	bst	r25, 7
    6b6c:	99 1f       	adc	r25, r25
    6b6e:	61 f0       	breq	.+24     	; 0x6b88 <__fp_splitA+0x20>
    6b70:	9f 3f       	cpi	r25, 0xFF	; 255
    6b72:	79 f0       	breq	.+30     	; 0x6b92 <__fp_splitA+0x2a>
    6b74:	87 95       	ror	r24
    6b76:	08 95       	ret
    6b78:	12 16       	cp	r1, r18
    6b7a:	13 06       	cpc	r1, r19
    6b7c:	14 06       	cpc	r1, r20
    6b7e:	55 1f       	adc	r21, r21
    6b80:	f2 cf       	rjmp	.-28     	; 0x6b66 <__fp_split3+0xe>
    6b82:	46 95       	lsr	r20
    6b84:	f1 df       	rcall	.-30     	; 0x6b68 <__fp_splitA>
    6b86:	08 c0       	rjmp	.+16     	; 0x6b98 <__fp_splitA+0x30>
    6b88:	16 16       	cp	r1, r22
    6b8a:	17 06       	cpc	r1, r23
    6b8c:	18 06       	cpc	r1, r24
    6b8e:	99 1f       	adc	r25, r25
    6b90:	f1 cf       	rjmp	.-30     	; 0x6b74 <__fp_splitA+0xc>
    6b92:	86 95       	lsr	r24
    6b94:	71 05       	cpc	r23, r1
    6b96:	61 05       	cpc	r22, r1
    6b98:	08 94       	sec
    6b9a:	08 95       	ret

00006b9c <__fp_zero>:
    6b9c:	e8 94       	clt

00006b9e <__fp_szero>:
    6b9e:	bb 27       	eor	r27, r27
    6ba0:	66 27       	eor	r22, r22
    6ba2:	77 27       	eor	r23, r23
    6ba4:	cb 01       	movw	r24, r22
    6ba6:	97 f9       	bld	r25, 7
    6ba8:	08 95       	ret

00006baa <__mulsf3>:
    6baa:	0b d0       	rcall	.+22     	; 0x6bc2 <__mulsf3x>
    6bac:	c4 cf       	rjmp	.-120    	; 0x6b36 <__fp_round>
    6bae:	b5 df       	rcall	.-150    	; 0x6b1a <__fp_pscA>
    6bb0:	28 f0       	brcs	.+10     	; 0x6bbc <__mulsf3+0x12>
    6bb2:	ba df       	rcall	.-140    	; 0x6b28 <__fp_pscB>
    6bb4:	18 f0       	brcs	.+6      	; 0x6bbc <__mulsf3+0x12>
    6bb6:	95 23       	and	r25, r21
    6bb8:	09 f0       	breq	.+2      	; 0x6bbc <__mulsf3+0x12>
    6bba:	a6 cf       	rjmp	.-180    	; 0x6b08 <__fp_inf>
    6bbc:	ab cf       	rjmp	.-170    	; 0x6b14 <__fp_nan>
    6bbe:	11 24       	eor	r1, r1
    6bc0:	ee cf       	rjmp	.-36     	; 0x6b9e <__fp_szero>

00006bc2 <__mulsf3x>:
    6bc2:	ca df       	rcall	.-108    	; 0x6b58 <__fp_split3>
    6bc4:	a0 f3       	brcs	.-24     	; 0x6bae <__mulsf3+0x4>

00006bc6 <__mulsf3_pse>:
    6bc6:	95 9f       	mul	r25, r21
    6bc8:	d1 f3       	breq	.-12     	; 0x6bbe <__mulsf3+0x14>
    6bca:	95 0f       	add	r25, r21
    6bcc:	50 e0       	ldi	r21, 0x00	; 0
    6bce:	55 1f       	adc	r21, r21
    6bd0:	62 9f       	mul	r22, r18
    6bd2:	f0 01       	movw	r30, r0
    6bd4:	72 9f       	mul	r23, r18
    6bd6:	bb 27       	eor	r27, r27
    6bd8:	f0 0d       	add	r31, r0
    6bda:	b1 1d       	adc	r27, r1
    6bdc:	63 9f       	mul	r22, r19
    6bde:	aa 27       	eor	r26, r26
    6be0:	f0 0d       	add	r31, r0
    6be2:	b1 1d       	adc	r27, r1
    6be4:	aa 1f       	adc	r26, r26
    6be6:	64 9f       	mul	r22, r20
    6be8:	66 27       	eor	r22, r22
    6bea:	b0 0d       	add	r27, r0
    6bec:	a1 1d       	adc	r26, r1
    6bee:	66 1f       	adc	r22, r22
    6bf0:	82 9f       	mul	r24, r18
    6bf2:	22 27       	eor	r18, r18
    6bf4:	b0 0d       	add	r27, r0
    6bf6:	a1 1d       	adc	r26, r1
    6bf8:	62 1f       	adc	r22, r18
    6bfa:	73 9f       	mul	r23, r19
    6bfc:	b0 0d       	add	r27, r0
    6bfe:	a1 1d       	adc	r26, r1
    6c00:	62 1f       	adc	r22, r18
    6c02:	83 9f       	mul	r24, r19
    6c04:	a0 0d       	add	r26, r0
    6c06:	61 1d       	adc	r22, r1
    6c08:	22 1f       	adc	r18, r18
    6c0a:	74 9f       	mul	r23, r20
    6c0c:	33 27       	eor	r19, r19
    6c0e:	a0 0d       	add	r26, r0
    6c10:	61 1d       	adc	r22, r1
    6c12:	23 1f       	adc	r18, r19
    6c14:	84 9f       	mul	r24, r20
    6c16:	60 0d       	add	r22, r0
    6c18:	21 1d       	adc	r18, r1
    6c1a:	82 2f       	mov	r24, r18
    6c1c:	76 2f       	mov	r23, r22
    6c1e:	6a 2f       	mov	r22, r26
    6c20:	11 24       	eor	r1, r1
    6c22:	9f 57       	subi	r25, 0x7F	; 127
    6c24:	50 40       	sbci	r21, 0x00	; 0
    6c26:	8a f0       	brmi	.+34     	; 0x6c4a <__mulsf3_pse+0x84>
    6c28:	e1 f0       	breq	.+56     	; 0x6c62 <__mulsf3_pse+0x9c>
    6c2a:	88 23       	and	r24, r24
    6c2c:	4a f0       	brmi	.+18     	; 0x6c40 <__mulsf3_pse+0x7a>
    6c2e:	ee 0f       	add	r30, r30
    6c30:	ff 1f       	adc	r31, r31
    6c32:	bb 1f       	adc	r27, r27
    6c34:	66 1f       	adc	r22, r22
    6c36:	77 1f       	adc	r23, r23
    6c38:	88 1f       	adc	r24, r24
    6c3a:	91 50       	subi	r25, 0x01	; 1
    6c3c:	50 40       	sbci	r21, 0x00	; 0
    6c3e:	a9 f7       	brne	.-22     	; 0x6c2a <__mulsf3_pse+0x64>
    6c40:	9e 3f       	cpi	r25, 0xFE	; 254
    6c42:	51 05       	cpc	r21, r1
    6c44:	70 f0       	brcs	.+28     	; 0x6c62 <__mulsf3_pse+0x9c>
    6c46:	60 cf       	rjmp	.-320    	; 0x6b08 <__fp_inf>
    6c48:	aa cf       	rjmp	.-172    	; 0x6b9e <__fp_szero>
    6c4a:	5f 3f       	cpi	r21, 0xFF	; 255
    6c4c:	ec f3       	brlt	.-6      	; 0x6c48 <__mulsf3_pse+0x82>
    6c4e:	98 3e       	cpi	r25, 0xE8	; 232
    6c50:	dc f3       	brlt	.-10     	; 0x6c48 <__mulsf3_pse+0x82>
    6c52:	86 95       	lsr	r24
    6c54:	77 95       	ror	r23
    6c56:	67 95       	ror	r22
    6c58:	b7 95       	ror	r27
    6c5a:	f7 95       	ror	r31
    6c5c:	e7 95       	ror	r30
    6c5e:	9f 5f       	subi	r25, 0xFF	; 255
    6c60:	c1 f7       	brne	.-16     	; 0x6c52 <__mulsf3_pse+0x8c>
    6c62:	fe 2b       	or	r31, r30
    6c64:	88 0f       	add	r24, r24
    6c66:	91 1d       	adc	r25, r1
    6c68:	96 95       	lsr	r25
    6c6a:	87 95       	ror	r24
    6c6c:	97 f9       	bld	r25, 7
    6c6e:	08 95       	ret

00006c70 <__mulsi3>:
    6c70:	62 9f       	mul	r22, r18
    6c72:	d0 01       	movw	r26, r0
    6c74:	73 9f       	mul	r23, r19
    6c76:	f0 01       	movw	r30, r0
    6c78:	82 9f       	mul	r24, r18
    6c7a:	e0 0d       	add	r30, r0
    6c7c:	f1 1d       	adc	r31, r1
    6c7e:	64 9f       	mul	r22, r20
    6c80:	e0 0d       	add	r30, r0
    6c82:	f1 1d       	adc	r31, r1
    6c84:	92 9f       	mul	r25, r18
    6c86:	f0 0d       	add	r31, r0
    6c88:	83 9f       	mul	r24, r19
    6c8a:	f0 0d       	add	r31, r0
    6c8c:	74 9f       	mul	r23, r20
    6c8e:	f0 0d       	add	r31, r0
    6c90:	65 9f       	mul	r22, r21
    6c92:	f0 0d       	add	r31, r0
    6c94:	99 27       	eor	r25, r25
    6c96:	72 9f       	mul	r23, r18
    6c98:	b0 0d       	add	r27, r0
    6c9a:	e1 1d       	adc	r30, r1
    6c9c:	f9 1f       	adc	r31, r25
    6c9e:	63 9f       	mul	r22, r19
    6ca0:	b0 0d       	add	r27, r0
    6ca2:	e1 1d       	adc	r30, r1
    6ca4:	f9 1f       	adc	r31, r25
    6ca6:	bd 01       	movw	r22, r26
    6ca8:	cf 01       	movw	r24, r30
    6caa:	11 24       	eor	r1, r1
    6cac:	08 95       	ret

00006cae <__udivmodqi4>:
    6cae:	99 1b       	sub	r25, r25
    6cb0:	79 e0       	ldi	r23, 0x09	; 9
    6cb2:	04 c0       	rjmp	.+8      	; 0x6cbc <__udivmodqi4_ep>

00006cb4 <__udivmodqi4_loop>:
    6cb4:	99 1f       	adc	r25, r25
    6cb6:	96 17       	cp	r25, r22
    6cb8:	08 f0       	brcs	.+2      	; 0x6cbc <__udivmodqi4_ep>
    6cba:	96 1b       	sub	r25, r22

00006cbc <__udivmodqi4_ep>:
    6cbc:	88 1f       	adc	r24, r24
    6cbe:	7a 95       	dec	r23
    6cc0:	c9 f7       	brne	.-14     	; 0x6cb4 <__udivmodqi4_loop>
    6cc2:	80 95       	com	r24
    6cc4:	08 95       	ret

00006cc6 <__divmodhi4>:
    6cc6:	97 fb       	bst	r25, 7
    6cc8:	09 2e       	mov	r0, r25
    6cca:	07 26       	eor	r0, r23
    6ccc:	0a d0       	rcall	.+20     	; 0x6ce2 <__divmodhi4_neg1>
    6cce:	77 fd       	sbrc	r23, 7
    6cd0:	04 d0       	rcall	.+8      	; 0x6cda <__divmodhi4_neg2>
    6cd2:	80 d0       	rcall	.+256    	; 0x6dd4 <__udivmodhi4>
    6cd4:	06 d0       	rcall	.+12     	; 0x6ce2 <__divmodhi4_neg1>
    6cd6:	00 20       	and	r0, r0
    6cd8:	1a f4       	brpl	.+6      	; 0x6ce0 <__divmodhi4_exit>

00006cda <__divmodhi4_neg2>:
    6cda:	70 95       	com	r23
    6cdc:	61 95       	neg	r22
    6cde:	7f 4f       	sbci	r23, 0xFF	; 255

00006ce0 <__divmodhi4_exit>:
    6ce0:	08 95       	ret

00006ce2 <__divmodhi4_neg1>:
    6ce2:	f6 f7       	brtc	.-4      	; 0x6ce0 <__divmodhi4_exit>
    6ce4:	90 95       	com	r25
    6ce6:	81 95       	neg	r24
    6ce8:	9f 4f       	sbci	r25, 0xFF	; 255
    6cea:	08 95       	ret

00006cec <__udivmodsi4>:
    6cec:	a1 e2       	ldi	r26, 0x21	; 33
    6cee:	1a 2e       	mov	r1, r26
    6cf0:	aa 1b       	sub	r26, r26
    6cf2:	bb 1b       	sub	r27, r27
    6cf4:	fd 01       	movw	r30, r26
    6cf6:	0d c0       	rjmp	.+26     	; 0x6d12 <__udivmodsi4_ep>

00006cf8 <__udivmodsi4_loop>:
    6cf8:	aa 1f       	adc	r26, r26
    6cfa:	bb 1f       	adc	r27, r27
    6cfc:	ee 1f       	adc	r30, r30
    6cfe:	ff 1f       	adc	r31, r31
    6d00:	a2 17       	cp	r26, r18
    6d02:	b3 07       	cpc	r27, r19
    6d04:	e4 07       	cpc	r30, r20
    6d06:	f5 07       	cpc	r31, r21
    6d08:	20 f0       	brcs	.+8      	; 0x6d12 <__udivmodsi4_ep>
    6d0a:	a2 1b       	sub	r26, r18
    6d0c:	b3 0b       	sbc	r27, r19
    6d0e:	e4 0b       	sbc	r30, r20
    6d10:	f5 0b       	sbc	r31, r21

00006d12 <__udivmodsi4_ep>:
    6d12:	66 1f       	adc	r22, r22
    6d14:	77 1f       	adc	r23, r23
    6d16:	88 1f       	adc	r24, r24
    6d18:	99 1f       	adc	r25, r25
    6d1a:	1a 94       	dec	r1
    6d1c:	69 f7       	brne	.-38     	; 0x6cf8 <__udivmodsi4_loop>
    6d1e:	60 95       	com	r22
    6d20:	70 95       	com	r23
    6d22:	80 95       	com	r24
    6d24:	90 95       	com	r25
    6d26:	9b 01       	movw	r18, r22
    6d28:	ac 01       	movw	r20, r24
    6d2a:	bd 01       	movw	r22, r26
    6d2c:	cf 01       	movw	r24, r30
    6d2e:	08 95       	ret

00006d30 <__divmodsi4>:
    6d30:	97 fb       	bst	r25, 7
    6d32:	09 2e       	mov	r0, r25
    6d34:	05 26       	eor	r0, r21
    6d36:	0e d0       	rcall	.+28     	; 0x6d54 <__divmodsi4_neg1>
    6d38:	57 fd       	sbrc	r21, 7
    6d3a:	04 d0       	rcall	.+8      	; 0x6d44 <__divmodsi4_neg2>
    6d3c:	d7 df       	rcall	.-82     	; 0x6cec <__udivmodsi4>
    6d3e:	0a d0       	rcall	.+20     	; 0x6d54 <__divmodsi4_neg1>
    6d40:	00 1c       	adc	r0, r0
    6d42:	38 f4       	brcc	.+14     	; 0x6d52 <__divmodsi4_exit>

00006d44 <__divmodsi4_neg2>:
    6d44:	50 95       	com	r21
    6d46:	40 95       	com	r20
    6d48:	30 95       	com	r19
    6d4a:	21 95       	neg	r18
    6d4c:	3f 4f       	sbci	r19, 0xFF	; 255
    6d4e:	4f 4f       	sbci	r20, 0xFF	; 255
    6d50:	5f 4f       	sbci	r21, 0xFF	; 255

00006d52 <__divmodsi4_exit>:
    6d52:	08 95       	ret

00006d54 <__divmodsi4_neg1>:
    6d54:	f6 f7       	brtc	.-4      	; 0x6d52 <__divmodsi4_exit>
    6d56:	90 95       	com	r25
    6d58:	80 95       	com	r24
    6d5a:	70 95       	com	r23
    6d5c:	61 95       	neg	r22
    6d5e:	7f 4f       	sbci	r23, 0xFF	; 255
    6d60:	8f 4f       	sbci	r24, 0xFF	; 255
    6d62:	9f 4f       	sbci	r25, 0xFF	; 255
    6d64:	08 95       	ret

00006d66 <__prologue_saves__>:
    6d66:	2f 92       	push	r2
    6d68:	3f 92       	push	r3
    6d6a:	4f 92       	push	r4
    6d6c:	5f 92       	push	r5
    6d6e:	6f 92       	push	r6
    6d70:	7f 92       	push	r7
    6d72:	8f 92       	push	r8
    6d74:	9f 92       	push	r9
    6d76:	af 92       	push	r10
    6d78:	bf 92       	push	r11
    6d7a:	cf 92       	push	r12
    6d7c:	df 92       	push	r13
    6d7e:	ef 92       	push	r14
    6d80:	ff 92       	push	r15
    6d82:	0f 93       	push	r16
    6d84:	1f 93       	push	r17
    6d86:	cf 93       	push	r28
    6d88:	df 93       	push	r29
    6d8a:	cd b7       	in	r28, 0x3d	; 61
    6d8c:	de b7       	in	r29, 0x3e	; 62
    6d8e:	ca 1b       	sub	r28, r26
    6d90:	db 0b       	sbc	r29, r27
    6d92:	0f b6       	in	r0, 0x3f	; 63
    6d94:	f8 94       	cli
    6d96:	de bf       	out	0x3e, r29	; 62
    6d98:	0f be       	out	0x3f, r0	; 63
    6d9a:	cd bf       	out	0x3d, r28	; 61
    6d9c:	09 94       	ijmp

00006d9e <__epilogue_restores__>:
    6d9e:	2a 88       	ldd	r2, Y+18	; 0x12
    6da0:	39 88       	ldd	r3, Y+17	; 0x11
    6da2:	48 88       	ldd	r4, Y+16	; 0x10
    6da4:	5f 84       	ldd	r5, Y+15	; 0x0f
    6da6:	6e 84       	ldd	r6, Y+14	; 0x0e
    6da8:	7d 84       	ldd	r7, Y+13	; 0x0d
    6daa:	8c 84       	ldd	r8, Y+12	; 0x0c
    6dac:	9b 84       	ldd	r9, Y+11	; 0x0b
    6dae:	aa 84       	ldd	r10, Y+10	; 0x0a
    6db0:	b9 84       	ldd	r11, Y+9	; 0x09
    6db2:	c8 84       	ldd	r12, Y+8	; 0x08
    6db4:	df 80       	ldd	r13, Y+7	; 0x07
    6db6:	ee 80       	ldd	r14, Y+6	; 0x06
    6db8:	fd 80       	ldd	r15, Y+5	; 0x05
    6dba:	0c 81       	ldd	r16, Y+4	; 0x04
    6dbc:	1b 81       	ldd	r17, Y+3	; 0x03
    6dbe:	aa 81       	ldd	r26, Y+2	; 0x02
    6dc0:	b9 81       	ldd	r27, Y+1	; 0x01
    6dc2:	ce 0f       	add	r28, r30
    6dc4:	d1 1d       	adc	r29, r1
    6dc6:	0f b6       	in	r0, 0x3f	; 63
    6dc8:	f8 94       	cli
    6dca:	de bf       	out	0x3e, r29	; 62
    6dcc:	0f be       	out	0x3f, r0	; 63
    6dce:	cd bf       	out	0x3d, r28	; 61
    6dd0:	ed 01       	movw	r28, r26
    6dd2:	08 95       	ret

00006dd4 <__udivmodhi4>:
    6dd4:	aa 1b       	sub	r26, r26
    6dd6:	bb 1b       	sub	r27, r27
    6dd8:	51 e1       	ldi	r21, 0x11	; 17
    6dda:	07 c0       	rjmp	.+14     	; 0x6dea <__udivmodhi4_ep>

00006ddc <__udivmodhi4_loop>:
    6ddc:	aa 1f       	adc	r26, r26
    6dde:	bb 1f       	adc	r27, r27
    6de0:	a6 17       	cp	r26, r22
    6de2:	b7 07       	cpc	r27, r23
    6de4:	10 f0       	brcs	.+4      	; 0x6dea <__udivmodhi4_ep>
    6de6:	a6 1b       	sub	r26, r22
    6de8:	b7 0b       	sbc	r27, r23

00006dea <__udivmodhi4_ep>:
    6dea:	88 1f       	adc	r24, r24
    6dec:	99 1f       	adc	r25, r25
    6dee:	5a 95       	dec	r21
    6df0:	a9 f7       	brne	.-22     	; 0x6ddc <__udivmodhi4_loop>
    6df2:	80 95       	com	r24
    6df4:	90 95       	com	r25
    6df6:	bc 01       	movw	r22, r24
    6df8:	cd 01       	movw	r24, r26
    6dfa:	08 95       	ret

00006dfc <__ftoa_engine>:
    6dfc:	28 30       	cpi	r18, 0x08	; 8
    6dfe:	08 f0       	brcs	.+2      	; 0x6e02 <__ftoa_engine+0x6>
    6e00:	27 e0       	ldi	r18, 0x07	; 7
    6e02:	33 27       	eor	r19, r19
    6e04:	da 01       	movw	r26, r20
    6e06:	99 0f       	add	r25, r25
    6e08:	31 1d       	adc	r19, r1
    6e0a:	87 fd       	sbrc	r24, 7
    6e0c:	91 60       	ori	r25, 0x01	; 1
    6e0e:	00 96       	adiw	r24, 0x00	; 0
    6e10:	61 05       	cpc	r22, r1
    6e12:	71 05       	cpc	r23, r1
    6e14:	39 f4       	brne	.+14     	; 0x6e24 <__ftoa_engine+0x28>
    6e16:	32 60       	ori	r19, 0x02	; 2
    6e18:	2e 5f       	subi	r18, 0xFE	; 254
    6e1a:	3d 93       	st	X+, r19
    6e1c:	30 e3       	ldi	r19, 0x30	; 48
    6e1e:	2a 95       	dec	r18
    6e20:	e1 f7       	brne	.-8      	; 0x6e1a <__ftoa_engine+0x1e>
    6e22:	08 95       	ret
    6e24:	9f 3f       	cpi	r25, 0xFF	; 255
    6e26:	30 f0       	brcs	.+12     	; 0x6e34 <__ftoa_engine+0x38>
    6e28:	80 38       	cpi	r24, 0x80	; 128
    6e2a:	71 05       	cpc	r23, r1
    6e2c:	61 05       	cpc	r22, r1
    6e2e:	09 f0       	breq	.+2      	; 0x6e32 <__ftoa_engine+0x36>
    6e30:	3c 5f       	subi	r19, 0xFC	; 252
    6e32:	3c 5f       	subi	r19, 0xFC	; 252
    6e34:	3d 93       	st	X+, r19
    6e36:	91 30       	cpi	r25, 0x01	; 1
    6e38:	08 f0       	brcs	.+2      	; 0x6e3c <__ftoa_engine+0x40>
    6e3a:	80 68       	ori	r24, 0x80	; 128
    6e3c:	91 1d       	adc	r25, r1
    6e3e:	df 93       	push	r29
    6e40:	cf 93       	push	r28
    6e42:	1f 93       	push	r17
    6e44:	0f 93       	push	r16
    6e46:	ff 92       	push	r15
    6e48:	ef 92       	push	r14
    6e4a:	19 2f       	mov	r17, r25
    6e4c:	98 7f       	andi	r25, 0xF8	; 248
    6e4e:	96 95       	lsr	r25
    6e50:	e9 2f       	mov	r30, r25
    6e52:	96 95       	lsr	r25
    6e54:	96 95       	lsr	r25
    6e56:	e9 0f       	add	r30, r25
    6e58:	ff 27       	eor	r31, r31
    6e5a:	ef 5d       	subi	r30, 0xDF	; 223
    6e5c:	fa 4f       	sbci	r31, 0xFA	; 250
    6e5e:	99 27       	eor	r25, r25
    6e60:	33 27       	eor	r19, r19
    6e62:	ee 24       	eor	r14, r14
    6e64:	ff 24       	eor	r15, r15
    6e66:	a7 01       	movw	r20, r14
    6e68:	e7 01       	movw	r28, r14
    6e6a:	05 90       	lpm	r0, Z+
    6e6c:	08 94       	sec
    6e6e:	07 94       	ror	r0
    6e70:	28 f4       	brcc	.+10     	; 0x6e7c <__ftoa_engine+0x80>
    6e72:	36 0f       	add	r19, r22
    6e74:	e7 1e       	adc	r14, r23
    6e76:	f8 1e       	adc	r15, r24
    6e78:	49 1f       	adc	r20, r25
    6e7a:	51 1d       	adc	r21, r1
    6e7c:	66 0f       	add	r22, r22
    6e7e:	77 1f       	adc	r23, r23
    6e80:	88 1f       	adc	r24, r24
    6e82:	99 1f       	adc	r25, r25
    6e84:	06 94       	lsr	r0
    6e86:	a1 f7       	brne	.-24     	; 0x6e70 <__ftoa_engine+0x74>
    6e88:	05 90       	lpm	r0, Z+
    6e8a:	07 94       	ror	r0
    6e8c:	28 f4       	brcc	.+10     	; 0x6e98 <__ftoa_engine+0x9c>
    6e8e:	e7 0e       	add	r14, r23
    6e90:	f8 1e       	adc	r15, r24
    6e92:	49 1f       	adc	r20, r25
    6e94:	56 1f       	adc	r21, r22
    6e96:	c1 1d       	adc	r28, r1
    6e98:	77 0f       	add	r23, r23
    6e9a:	88 1f       	adc	r24, r24
    6e9c:	99 1f       	adc	r25, r25
    6e9e:	66 1f       	adc	r22, r22
    6ea0:	06 94       	lsr	r0
    6ea2:	a1 f7       	brne	.-24     	; 0x6e8c <__ftoa_engine+0x90>
    6ea4:	05 90       	lpm	r0, Z+
    6ea6:	07 94       	ror	r0
    6ea8:	28 f4       	brcc	.+10     	; 0x6eb4 <__ftoa_engine+0xb8>
    6eaa:	f8 0e       	add	r15, r24
    6eac:	49 1f       	adc	r20, r25
    6eae:	56 1f       	adc	r21, r22
    6eb0:	c7 1f       	adc	r28, r23
    6eb2:	d1 1d       	adc	r29, r1
    6eb4:	88 0f       	add	r24, r24
    6eb6:	99 1f       	adc	r25, r25
    6eb8:	66 1f       	adc	r22, r22
    6eba:	77 1f       	adc	r23, r23
    6ebc:	06 94       	lsr	r0
    6ebe:	a1 f7       	brne	.-24     	; 0x6ea8 <__ftoa_engine+0xac>
    6ec0:	05 90       	lpm	r0, Z+
    6ec2:	07 94       	ror	r0
    6ec4:	20 f4       	brcc	.+8      	; 0x6ece <__ftoa_engine+0xd2>
    6ec6:	49 0f       	add	r20, r25
    6ec8:	56 1f       	adc	r21, r22
    6eca:	c7 1f       	adc	r28, r23
    6ecc:	d8 1f       	adc	r29, r24
    6ece:	99 0f       	add	r25, r25
    6ed0:	66 1f       	adc	r22, r22
    6ed2:	77 1f       	adc	r23, r23
    6ed4:	88 1f       	adc	r24, r24
    6ed6:	06 94       	lsr	r0
    6ed8:	a9 f7       	brne	.-22     	; 0x6ec4 <__ftoa_engine+0xc8>
    6eda:	84 91       	lpm	r24, Z+
    6edc:	10 95       	com	r17
    6ede:	17 70       	andi	r17, 0x07	; 7
    6ee0:	41 f0       	breq	.+16     	; 0x6ef2 <__ftoa_engine+0xf6>
    6ee2:	d6 95       	lsr	r29
    6ee4:	c7 95       	ror	r28
    6ee6:	57 95       	ror	r21
    6ee8:	47 95       	ror	r20
    6eea:	f7 94       	ror	r15
    6eec:	e7 94       	ror	r14
    6eee:	1a 95       	dec	r17
    6ef0:	c1 f7       	brne	.-16     	; 0x6ee2 <__ftoa_engine+0xe6>
    6ef2:	e7 ec       	ldi	r30, 0xC7	; 199
    6ef4:	f4 e0       	ldi	r31, 0x04	; 4
    6ef6:	68 94       	set
    6ef8:	15 90       	lpm	r1, Z+
    6efa:	15 91       	lpm	r17, Z+
    6efc:	35 91       	lpm	r19, Z+
    6efe:	65 91       	lpm	r22, Z+
    6f00:	95 91       	lpm	r25, Z+
    6f02:	05 90       	lpm	r0, Z+
    6f04:	7f e2       	ldi	r23, 0x2F	; 47
    6f06:	73 95       	inc	r23
    6f08:	e1 18       	sub	r14, r1
    6f0a:	f1 0a       	sbc	r15, r17
    6f0c:	43 0b       	sbc	r20, r19
    6f0e:	56 0b       	sbc	r21, r22
    6f10:	c9 0b       	sbc	r28, r25
    6f12:	d0 09       	sbc	r29, r0
    6f14:	c0 f7       	brcc	.-16     	; 0x6f06 <__ftoa_engine+0x10a>
    6f16:	e1 0c       	add	r14, r1
    6f18:	f1 1e       	adc	r15, r17
    6f1a:	43 1f       	adc	r20, r19
    6f1c:	56 1f       	adc	r21, r22
    6f1e:	c9 1f       	adc	r28, r25
    6f20:	d0 1d       	adc	r29, r0
    6f22:	7e f4       	brtc	.+30     	; 0x6f42 <__ftoa_engine+0x146>
    6f24:	70 33       	cpi	r23, 0x30	; 48
    6f26:	11 f4       	brne	.+4      	; 0x6f2c <__ftoa_engine+0x130>
    6f28:	8a 95       	dec	r24
    6f2a:	e6 cf       	rjmp	.-52     	; 0x6ef8 <__ftoa_engine+0xfc>
    6f2c:	e8 94       	clt
    6f2e:	01 50       	subi	r16, 0x01	; 1
    6f30:	30 f0       	brcs	.+12     	; 0x6f3e <__ftoa_engine+0x142>
    6f32:	08 0f       	add	r16, r24
    6f34:	0a f4       	brpl	.+2      	; 0x6f38 <__ftoa_engine+0x13c>
    6f36:	00 27       	eor	r16, r16
    6f38:	02 17       	cp	r16, r18
    6f3a:	08 f4       	brcc	.+2      	; 0x6f3e <__ftoa_engine+0x142>
    6f3c:	20 2f       	mov	r18, r16
    6f3e:	23 95       	inc	r18
    6f40:	02 2f       	mov	r16, r18
    6f42:	7a 33       	cpi	r23, 0x3A	; 58
    6f44:	28 f0       	brcs	.+10     	; 0x6f50 <__ftoa_engine+0x154>
    6f46:	79 e3       	ldi	r23, 0x39	; 57
    6f48:	7d 93       	st	X+, r23
    6f4a:	2a 95       	dec	r18
    6f4c:	e9 f7       	brne	.-6      	; 0x6f48 <__ftoa_engine+0x14c>
    6f4e:	10 c0       	rjmp	.+32     	; 0x6f70 <__ftoa_engine+0x174>
    6f50:	7d 93       	st	X+, r23
    6f52:	2a 95       	dec	r18
    6f54:	89 f6       	brne	.-94     	; 0x6ef8 <__ftoa_engine+0xfc>
    6f56:	06 94       	lsr	r0
    6f58:	97 95       	ror	r25
    6f5a:	67 95       	ror	r22
    6f5c:	37 95       	ror	r19
    6f5e:	17 95       	ror	r17
    6f60:	17 94       	ror	r1
    6f62:	e1 18       	sub	r14, r1
    6f64:	f1 0a       	sbc	r15, r17
    6f66:	43 0b       	sbc	r20, r19
    6f68:	56 0b       	sbc	r21, r22
    6f6a:	c9 0b       	sbc	r28, r25
    6f6c:	d0 09       	sbc	r29, r0
    6f6e:	98 f0       	brcs	.+38     	; 0x6f96 <__ftoa_engine+0x19a>
    6f70:	23 95       	inc	r18
    6f72:	7e 91       	ld	r23, -X
    6f74:	73 95       	inc	r23
    6f76:	7a 33       	cpi	r23, 0x3A	; 58
    6f78:	08 f0       	brcs	.+2      	; 0x6f7c <__ftoa_engine+0x180>
    6f7a:	70 e3       	ldi	r23, 0x30	; 48
    6f7c:	7c 93       	st	X, r23
    6f7e:	20 13       	cpse	r18, r16
    6f80:	b8 f7       	brcc	.-18     	; 0x6f70 <__ftoa_engine+0x174>
    6f82:	7e 91       	ld	r23, -X
    6f84:	70 61       	ori	r23, 0x10	; 16
    6f86:	7d 93       	st	X+, r23
    6f88:	30 f0       	brcs	.+12     	; 0x6f96 <__ftoa_engine+0x19a>
    6f8a:	83 95       	inc	r24
    6f8c:	71 e3       	ldi	r23, 0x31	; 49
    6f8e:	7d 93       	st	X+, r23
    6f90:	70 e3       	ldi	r23, 0x30	; 48
    6f92:	2a 95       	dec	r18
    6f94:	e1 f7       	brne	.-8      	; 0x6f8e <__ftoa_engine+0x192>
    6f96:	11 24       	eor	r1, r1
    6f98:	ef 90       	pop	r14
    6f9a:	ff 90       	pop	r15
    6f9c:	0f 91       	pop	r16
    6f9e:	1f 91       	pop	r17
    6fa0:	cf 91       	pop	r28
    6fa2:	df 91       	pop	r29
    6fa4:	99 27       	eor	r25, r25
    6fa6:	87 fd       	sbrc	r24, 7
    6fa8:	90 95       	com	r25
    6faa:	08 95       	ret

00006fac <isspace>:
    6fac:	91 11       	cpse	r25, r1
    6fae:	67 c2       	rjmp	.+1230   	; 0x747e <__ctype_isfalse>
    6fb0:	80 32       	cpi	r24, 0x20	; 32
    6fb2:	19 f0       	breq	.+6      	; 0x6fba <isspace+0xe>
    6fb4:	89 50       	subi	r24, 0x09	; 9
    6fb6:	85 50       	subi	r24, 0x05	; 5
    6fb8:	d0 f7       	brcc	.-12     	; 0x6fae <isspace+0x2>
    6fba:	08 95       	ret

00006fbc <tolower>:
    6fbc:	91 11       	cpse	r25, r1
    6fbe:	08 95       	ret
    6fc0:	81 54       	subi	r24, 0x41	; 65
    6fc2:	8a 51       	subi	r24, 0x1A	; 26
    6fc4:	08 f4       	brcc	.+2      	; 0x6fc8 <tolower+0xc>
    6fc6:	80 5e       	subi	r24, 0xE0	; 224
    6fc8:	85 5a       	subi	r24, 0xA5	; 165
    6fca:	08 95       	ret

00006fcc <strchr_P>:
    6fcc:	fc 01       	movw	r30, r24
    6fce:	05 90       	lpm	r0, Z+
    6fd0:	06 16       	cp	r0, r22
    6fd2:	21 f0       	breq	.+8      	; 0x6fdc <strchr_P+0x10>
    6fd4:	00 20       	and	r0, r0
    6fd6:	d9 f7       	brne	.-10     	; 0x6fce <strchr_P+0x2>
    6fd8:	c0 01       	movw	r24, r0
    6fda:	08 95       	ret
    6fdc:	31 97       	sbiw	r30, 0x01	; 1
    6fde:	cf 01       	movw	r24, r30
    6fe0:	08 95       	ret

00006fe2 <strnlen_P>:
    6fe2:	fc 01       	movw	r30, r24
    6fe4:	05 90       	lpm	r0, Z+
    6fe6:	61 50       	subi	r22, 0x01	; 1
    6fe8:	70 40       	sbci	r23, 0x00	; 0
    6fea:	01 10       	cpse	r0, r1
    6fec:	d8 f7       	brcc	.-10     	; 0x6fe4 <strnlen_P+0x2>
    6fee:	80 95       	com	r24
    6ff0:	90 95       	com	r25
    6ff2:	8e 0f       	add	r24, r30
    6ff4:	9f 1f       	adc	r25, r31
    6ff6:	08 95       	ret

00006ff8 <strtok>:
    6ff8:	42 e1       	ldi	r20, 0x12	; 18
    6ffa:	54 e0       	ldi	r21, 0x04	; 4
    6ffc:	0e 94 1a 38 	call	0x7034	; 0x7034 <strtok_r>
    7000:	08 95       	ret

00007002 <strncmp>:
    7002:	fb 01       	movw	r30, r22
    7004:	dc 01       	movw	r26, r24
    7006:	41 50       	subi	r20, 0x01	; 1
    7008:	50 40       	sbci	r21, 0x00	; 0
    700a:	30 f0       	brcs	.+12     	; 0x7018 <strncmp+0x16>
    700c:	8d 91       	ld	r24, X+
    700e:	01 90       	ld	r0, Z+
    7010:	80 19       	sub	r24, r0
    7012:	19 f4       	brne	.+6      	; 0x701a <strncmp+0x18>
    7014:	00 20       	and	r0, r0
    7016:	b9 f7       	brne	.-18     	; 0x7006 <strncmp+0x4>
    7018:	88 1b       	sub	r24, r24
    701a:	99 0b       	sbc	r25, r25
    701c:	08 95       	ret

0000701e <strnlen>:
    701e:	fc 01       	movw	r30, r24
    7020:	61 50       	subi	r22, 0x01	; 1
    7022:	70 40       	sbci	r23, 0x00	; 0
    7024:	01 90       	ld	r0, Z+
    7026:	01 10       	cpse	r0, r1
    7028:	d8 f7       	brcc	.-10     	; 0x7020 <strnlen+0x2>
    702a:	80 95       	com	r24
    702c:	90 95       	com	r25
    702e:	8e 0f       	add	r24, r30
    7030:	9f 1f       	adc	r25, r31
    7032:	08 95       	ret

00007034 <strtok_r>:
    7034:	fa 01       	movw	r30, r20
    7036:	a1 91       	ld	r26, Z+
    7038:	b0 81       	ld	r27, Z
    703a:	00 97       	sbiw	r24, 0x00	; 0
    703c:	19 f4       	brne	.+6      	; 0x7044 <strtok_r+0x10>
    703e:	10 97       	sbiw	r26, 0x00	; 0
    7040:	e1 f0       	breq	.+56     	; 0x707a <strtok_r+0x46>
    7042:	cd 01       	movw	r24, r26
    7044:	dc 01       	movw	r26, r24
    7046:	cd 01       	movw	r24, r26
    7048:	0d 90       	ld	r0, X+
    704a:	00 20       	and	r0, r0
    704c:	11 f4       	brne	.+4      	; 0x7052 <strtok_r+0x1e>
    704e:	c0 01       	movw	r24, r0
    7050:	13 c0       	rjmp	.+38     	; 0x7078 <strtok_r+0x44>
    7052:	fb 01       	movw	r30, r22
    7054:	21 91       	ld	r18, Z+
    7056:	22 23       	and	r18, r18
    7058:	19 f0       	breq	.+6      	; 0x7060 <strtok_r+0x2c>
    705a:	20 15       	cp	r18, r0
    705c:	d9 f7       	brne	.-10     	; 0x7054 <strtok_r+0x20>
    705e:	f3 cf       	rjmp	.-26     	; 0x7046 <strtok_r+0x12>
    7060:	fb 01       	movw	r30, r22
    7062:	21 91       	ld	r18, Z+
    7064:	20 15       	cp	r18, r0
    7066:	19 f4       	brne	.+6      	; 0x706e <strtok_r+0x3a>
    7068:	1e 92       	st	-X, r1
    706a:	11 96       	adiw	r26, 0x01	; 1
    706c:	06 c0       	rjmp	.+12     	; 0x707a <strtok_r+0x46>
    706e:	22 23       	and	r18, r18
    7070:	c1 f7       	brne	.-16     	; 0x7062 <strtok_r+0x2e>
    7072:	0d 90       	ld	r0, X+
    7074:	00 20       	and	r0, r0
    7076:	a1 f7       	brne	.-24     	; 0x7060 <strtok_r+0x2c>
    7078:	d0 01       	movw	r26, r0
    707a:	fa 01       	movw	r30, r20
    707c:	a1 93       	st	Z+, r26
    707e:	b0 83       	st	Z, r27
    7080:	08 95       	ret

00007082 <fgetc>:
    7082:	cf 93       	push	r28
    7084:	df 93       	push	r29
    7086:	ec 01       	movw	r28, r24
    7088:	4b 81       	ldd	r20, Y+3	; 0x03
    708a:	40 ff       	sbrs	r20, 0
    708c:	1a c0       	rjmp	.+52     	; 0x70c2 <fgetc+0x40>
    708e:	46 ff       	sbrs	r20, 6
    7090:	0a c0       	rjmp	.+20     	; 0x70a6 <fgetc+0x24>
    7092:	4f 7b       	andi	r20, 0xBF	; 191
    7094:	4b 83       	std	Y+3, r20	; 0x03
    7096:	8e 81       	ldd	r24, Y+6	; 0x06
    7098:	9f 81       	ldd	r25, Y+7	; 0x07
    709a:	01 96       	adiw	r24, 0x01	; 1
    709c:	9f 83       	std	Y+7, r25	; 0x07
    709e:	8e 83       	std	Y+6, r24	; 0x06
    70a0:	8a 81       	ldd	r24, Y+2	; 0x02
    70a2:	28 2f       	mov	r18, r24
    70a4:	2b c0       	rjmp	.+86     	; 0x70fc <fgetc+0x7a>
    70a6:	42 ff       	sbrs	r20, 2
    70a8:	13 c0       	rjmp	.+38     	; 0x70d0 <fgetc+0x4e>
    70aa:	e8 81       	ld	r30, Y
    70ac:	f9 81       	ldd	r31, Y+1	; 0x01
    70ae:	80 81       	ld	r24, Z
    70b0:	28 2f       	mov	r18, r24
    70b2:	33 27       	eor	r19, r19
    70b4:	27 fd       	sbrc	r18, 7
    70b6:	30 95       	com	r19
    70b8:	21 15       	cp	r18, r1
    70ba:	31 05       	cpc	r19, r1
    70bc:	29 f4       	brne	.+10     	; 0x70c8 <fgetc+0x46>
    70be:	40 62       	ori	r20, 0x20	; 32
    70c0:	4b 83       	std	Y+3, r20	; 0x03
    70c2:	2f ef       	ldi	r18, 0xFF	; 255
    70c4:	3f ef       	ldi	r19, 0xFF	; 255
    70c6:	1b c0       	rjmp	.+54     	; 0x70fe <fgetc+0x7c>
    70c8:	31 96       	adiw	r30, 0x01	; 1
    70ca:	f9 83       	std	Y+1, r31	; 0x01
    70cc:	e8 83       	st	Y, r30
    70ce:	11 c0       	rjmp	.+34     	; 0x70f2 <fgetc+0x70>
    70d0:	ea 85       	ldd	r30, Y+10	; 0x0a
    70d2:	fb 85       	ldd	r31, Y+11	; 0x0b
    70d4:	ce 01       	movw	r24, r28
    70d6:	09 95       	icall
    70d8:	9c 01       	movw	r18, r24
    70da:	97 ff       	sbrs	r25, 7
    70dc:	0a c0       	rjmp	.+20     	; 0x70f2 <fgetc+0x70>
    70de:	9b 81       	ldd	r25, Y+3	; 0x03
    70e0:	2f 5f       	subi	r18, 0xFF	; 255
    70e2:	3f 4f       	sbci	r19, 0xFF	; 255
    70e4:	11 f0       	breq	.+4      	; 0x70ea <fgetc+0x68>
    70e6:	80 e2       	ldi	r24, 0x20	; 32
    70e8:	01 c0       	rjmp	.+2      	; 0x70ec <fgetc+0x6a>
    70ea:	80 e1       	ldi	r24, 0x10	; 16
    70ec:	89 2b       	or	r24, r25
    70ee:	8b 83       	std	Y+3, r24	; 0x03
    70f0:	e8 cf       	rjmp	.-48     	; 0x70c2 <fgetc+0x40>
    70f2:	8e 81       	ldd	r24, Y+6	; 0x06
    70f4:	9f 81       	ldd	r25, Y+7	; 0x07
    70f6:	01 96       	adiw	r24, 0x01	; 1
    70f8:	9f 83       	std	Y+7, r25	; 0x07
    70fa:	8e 83       	std	Y+6, r24	; 0x06
    70fc:	30 e0       	ldi	r19, 0x00	; 0
    70fe:	c9 01       	movw	r24, r18
    7100:	df 91       	pop	r29
    7102:	cf 91       	pop	r28
    7104:	08 95       	ret

00007106 <fprintf>:
    7106:	a0 e0       	ldi	r26, 0x00	; 0
    7108:	b0 e0       	ldi	r27, 0x00	; 0
    710a:	e9 e8       	ldi	r30, 0x89	; 137
    710c:	f8 e3       	ldi	r31, 0x38	; 56
    710e:	0c 94 c3 36 	jmp	0x6d86	; 0x6d86 <__prologue_saves__+0x20>
    7112:	9e 01       	movw	r18, r28
    7114:	27 5f       	subi	r18, 0xF7	; 247
    7116:	3f 4f       	sbci	r19, 0xFF	; 255
    7118:	8d 81       	ldd	r24, Y+5	; 0x05
    711a:	9e 81       	ldd	r25, Y+6	; 0x06
    711c:	6f 81       	ldd	r22, Y+7	; 0x07
    711e:	78 85       	ldd	r23, Y+8	; 0x08
    7120:	a9 01       	movw	r20, r18
    7122:	0e 94 89 2c 	call	0x5912	; 0x5912 <vfprintf>
    7126:	20 96       	adiw	r28, 0x00	; 0
    7128:	e2 e0       	ldi	r30, 0x02	; 2
    712a:	0c 94 df 36 	jmp	0x6dbe	; 0x6dbe <__epilogue_restores__+0x20>

0000712e <fputc>:
    712e:	0f 93       	push	r16
    7130:	1f 93       	push	r17
    7132:	cf 93       	push	r28
    7134:	df 93       	push	r29
    7136:	8c 01       	movw	r16, r24
    7138:	eb 01       	movw	r28, r22
    713a:	8b 81       	ldd	r24, Y+3	; 0x03
    713c:	81 ff       	sbrs	r24, 1
    713e:	1b c0       	rjmp	.+54     	; 0x7176 <fputc+0x48>
    7140:	82 ff       	sbrs	r24, 2
    7142:	0d c0       	rjmp	.+26     	; 0x715e <fputc+0x30>
    7144:	2e 81       	ldd	r18, Y+6	; 0x06
    7146:	3f 81       	ldd	r19, Y+7	; 0x07
    7148:	8c 81       	ldd	r24, Y+4	; 0x04
    714a:	9d 81       	ldd	r25, Y+5	; 0x05
    714c:	28 17       	cp	r18, r24
    714e:	39 07       	cpc	r19, r25
    7150:	64 f4       	brge	.+24     	; 0x716a <fputc+0x3c>
    7152:	e8 81       	ld	r30, Y
    7154:	f9 81       	ldd	r31, Y+1	; 0x01
    7156:	01 93       	st	Z+, r16
    7158:	f9 83       	std	Y+1, r31	; 0x01
    715a:	e8 83       	st	Y, r30
    715c:	06 c0       	rjmp	.+12     	; 0x716a <fputc+0x3c>
    715e:	e8 85       	ldd	r30, Y+8	; 0x08
    7160:	f9 85       	ldd	r31, Y+9	; 0x09
    7162:	80 2f       	mov	r24, r16
    7164:	09 95       	icall
    7166:	89 2b       	or	r24, r25
    7168:	31 f4       	brne	.+12     	; 0x7176 <fputc+0x48>
    716a:	8e 81       	ldd	r24, Y+6	; 0x06
    716c:	9f 81       	ldd	r25, Y+7	; 0x07
    716e:	01 96       	adiw	r24, 0x01	; 1
    7170:	9f 83       	std	Y+7, r25	; 0x07
    7172:	8e 83       	std	Y+6, r24	; 0x06
    7174:	02 c0       	rjmp	.+4      	; 0x717a <fputc+0x4c>
    7176:	0f ef       	ldi	r16, 0xFF	; 255
    7178:	1f ef       	ldi	r17, 0xFF	; 255
    717a:	c8 01       	movw	r24, r16
    717c:	df 91       	pop	r29
    717e:	cf 91       	pop	r28
    7180:	1f 91       	pop	r17
    7182:	0f 91       	pop	r16
    7184:	08 95       	ret

00007186 <fputs>:
    7186:	ef 92       	push	r14
    7188:	ff 92       	push	r15
    718a:	0f 93       	push	r16
    718c:	1f 93       	push	r17
    718e:	cf 93       	push	r28
    7190:	df 93       	push	r29
    7192:	7c 01       	movw	r14, r24
    7194:	8b 01       	movw	r16, r22
    7196:	db 01       	movw	r26, r22
    7198:	13 96       	adiw	r26, 0x03	; 3
    719a:	8c 91       	ld	r24, X
    719c:	81 fd       	sbrc	r24, 1
    719e:	03 c0       	rjmp	.+6      	; 0x71a6 <fputs+0x20>
    71a0:	cf ef       	ldi	r28, 0xFF	; 255
    71a2:	df ef       	ldi	r29, 0xFF	; 255
    71a4:	13 c0       	rjmp	.+38     	; 0x71cc <fputs+0x46>
    71a6:	c0 e0       	ldi	r28, 0x00	; 0
    71a8:	d0 e0       	ldi	r29, 0x00	; 0
    71aa:	0b c0       	rjmp	.+22     	; 0x71c2 <fputs+0x3c>
    71ac:	d8 01       	movw	r26, r16
    71ae:	18 96       	adiw	r26, 0x08	; 8
    71b0:	ed 91       	ld	r30, X+
    71b2:	fc 91       	ld	r31, X
    71b4:	19 97       	sbiw	r26, 0x09	; 9
    71b6:	b8 01       	movw	r22, r16
    71b8:	09 95       	icall
    71ba:	89 2b       	or	r24, r25
    71bc:	11 f0       	breq	.+4      	; 0x71c2 <fputs+0x3c>
    71be:	cf ef       	ldi	r28, 0xFF	; 255
    71c0:	df ef       	ldi	r29, 0xFF	; 255
    71c2:	f7 01       	movw	r30, r14
    71c4:	81 91       	ld	r24, Z+
    71c6:	7f 01       	movw	r14, r30
    71c8:	88 23       	and	r24, r24
    71ca:	81 f7       	brne	.-32     	; 0x71ac <fputs+0x26>
    71cc:	ce 01       	movw	r24, r28
    71ce:	cd b7       	in	r28, 0x3d	; 61
    71d0:	de b7       	in	r29, 0x3e	; 62
    71d2:	e6 e0       	ldi	r30, 0x06	; 6
    71d4:	0c 94 db 36 	jmp	0x6db6	; 0x6db6 <__epilogue_restores__+0x18>

000071d8 <sprintf_P>:
    71d8:	ae e0       	ldi	r26, 0x0E	; 14
    71da:	b0 e0       	ldi	r27, 0x00	; 0
    71dc:	e2 ef       	ldi	r30, 0xF2	; 242
    71de:	f8 e3       	ldi	r31, 0x38	; 56
    71e0:	0c 94 c1 36 	jmp	0x6d82	; 0x6d82 <__prologue_saves__+0x1c>
    71e4:	0d 89       	ldd	r16, Y+21	; 0x15
    71e6:	1e 89       	ldd	r17, Y+22	; 0x16
    71e8:	8e e0       	ldi	r24, 0x0E	; 14
    71ea:	8c 83       	std	Y+4, r24	; 0x04
    71ec:	1a 83       	std	Y+2, r17	; 0x02
    71ee:	09 83       	std	Y+1, r16	; 0x01
    71f0:	8f ef       	ldi	r24, 0xFF	; 255
    71f2:	9f e7       	ldi	r25, 0x7F	; 127
    71f4:	9e 83       	std	Y+6, r25	; 0x06
    71f6:	8d 83       	std	Y+5, r24	; 0x05
    71f8:	9e 01       	movw	r18, r28
    71fa:	27 5e       	subi	r18, 0xE7	; 231
    71fc:	3f 4f       	sbci	r19, 0xFF	; 255
    71fe:	ce 01       	movw	r24, r28
    7200:	01 96       	adiw	r24, 0x01	; 1
    7202:	6f 89       	ldd	r22, Y+23	; 0x17
    7204:	78 8d       	ldd	r23, Y+24	; 0x18
    7206:	a9 01       	movw	r20, r18
    7208:	0e 94 89 2c 	call	0x5912	; 0x5912 <vfprintf>
    720c:	2f 81       	ldd	r18, Y+7	; 0x07
    720e:	38 85       	ldd	r19, Y+8	; 0x08
    7210:	02 0f       	add	r16, r18
    7212:	13 1f       	adc	r17, r19
    7214:	f8 01       	movw	r30, r16
    7216:	10 82       	st	Z, r1
    7218:	2e 96       	adiw	r28, 0x0e	; 14
    721a:	e4 e0       	ldi	r30, 0x04	; 4
    721c:	0c 94 dd 36 	jmp	0x6dba	; 0x6dba <__epilogue_restores__+0x1c>

00007220 <sscanf>:
    7220:	ae e0       	ldi	r26, 0x0E	; 14
    7222:	b0 e0       	ldi	r27, 0x00	; 0
    7224:	e6 e1       	ldi	r30, 0x16	; 22
    7226:	f9 e3       	ldi	r31, 0x39	; 57
    7228:	0c 94 c3 36 	jmp	0x6d86	; 0x6d86 <__prologue_saves__+0x20>
    722c:	85 e0       	ldi	r24, 0x05	; 5
    722e:	8c 83       	std	Y+4, r24	; 0x04
    7230:	8b 89       	ldd	r24, Y+19	; 0x13
    7232:	9c 89       	ldd	r25, Y+20	; 0x14
    7234:	9a 83       	std	Y+2, r25	; 0x02
    7236:	89 83       	std	Y+1, r24	; 0x01
    7238:	9e 01       	movw	r18, r28
    723a:	29 5e       	subi	r18, 0xE9	; 233
    723c:	3f 4f       	sbci	r19, 0xFF	; 255
    723e:	ce 01       	movw	r24, r28
    7240:	01 96       	adiw	r24, 0x01	; 1
    7242:	6d 89       	ldd	r22, Y+21	; 0x15
    7244:	7e 89       	ldd	r23, Y+22	; 0x16
    7246:	a9 01       	movw	r20, r18
    7248:	0e 94 f6 32 	call	0x65ec	; 0x65ec <vfscanf>
    724c:	2e 96       	adiw	r28, 0x0e	; 14
    724e:	e2 e0       	ldi	r30, 0x02	; 2
    7250:	0c 94 df 36 	jmp	0x6dbe	; 0x6dbe <__epilogue_restores__+0x20>

00007254 <vsnprintf>:
    7254:	ae e0       	ldi	r26, 0x0E	; 14
    7256:	b0 e0       	ldi	r27, 0x00	; 0
    7258:	e0 e3       	ldi	r30, 0x30	; 48
    725a:	f9 e3       	ldi	r31, 0x39	; 57
    725c:	0c 94 c1 36 	jmp	0x6d82	; 0x6d82 <__prologue_saves__+0x1c>
    7260:	8c 01       	movw	r16, r24
    7262:	77 ff       	sbrs	r23, 7
    7264:	02 c0       	rjmp	.+4      	; 0x726a <vsnprintf+0x16>
    7266:	60 e0       	ldi	r22, 0x00	; 0
    7268:	70 e8       	ldi	r23, 0x80	; 128
    726a:	61 50       	subi	r22, 0x01	; 1
    726c:	70 40       	sbci	r23, 0x00	; 0
    726e:	7e 83       	std	Y+6, r23	; 0x06
    7270:	6d 83       	std	Y+5, r22	; 0x05
    7272:	1a 83       	std	Y+2, r17	; 0x02
    7274:	09 83       	std	Y+1, r16	; 0x01
    7276:	86 e0       	ldi	r24, 0x06	; 6
    7278:	8c 83       	std	Y+4, r24	; 0x04
    727a:	ce 01       	movw	r24, r28
    727c:	01 96       	adiw	r24, 0x01	; 1
    727e:	ba 01       	movw	r22, r20
    7280:	a9 01       	movw	r20, r18
    7282:	0e 94 89 2c 	call	0x5912	; 0x5912 <vfprintf>
    7286:	2d 81       	ldd	r18, Y+5	; 0x05
    7288:	3e 81       	ldd	r19, Y+6	; 0x06
    728a:	37 fd       	sbrc	r19, 7
    728c:	09 c0       	rjmp	.+18     	; 0x72a0 <vsnprintf+0x4c>
    728e:	ef 81       	ldd	r30, Y+7	; 0x07
    7290:	f8 85       	ldd	r31, Y+8	; 0x08
    7292:	2e 17       	cp	r18, r30
    7294:	3f 07       	cpc	r19, r31
    7296:	0c f4       	brge	.+2      	; 0x729a <vsnprintf+0x46>
    7298:	f9 01       	movw	r30, r18
    729a:	e0 0f       	add	r30, r16
    729c:	f1 1f       	adc	r31, r17
    729e:	10 82       	st	Z, r1
    72a0:	2e 96       	adiw	r28, 0x0e	; 14
    72a2:	e4 e0       	ldi	r30, 0x04	; 4
    72a4:	0c 94 dd 36 	jmp	0x6dba	; 0x6dba <__epilogue_restores__+0x1c>

000072a8 <vsnprintf_P>:
    72a8:	ae e0       	ldi	r26, 0x0E	; 14
    72aa:	b0 e0       	ldi	r27, 0x00	; 0
    72ac:	ea e5       	ldi	r30, 0x5A	; 90
    72ae:	f9 e3       	ldi	r31, 0x39	; 57
    72b0:	0c 94 c1 36 	jmp	0x6d82	; 0x6d82 <__prologue_saves__+0x1c>
    72b4:	8c 01       	movw	r16, r24
    72b6:	77 ff       	sbrs	r23, 7
    72b8:	02 c0       	rjmp	.+4      	; 0x72be <vsnprintf_P+0x16>
    72ba:	60 e0       	ldi	r22, 0x00	; 0
    72bc:	70 e8       	ldi	r23, 0x80	; 128
    72be:	61 50       	subi	r22, 0x01	; 1
    72c0:	70 40       	sbci	r23, 0x00	; 0
    72c2:	7e 83       	std	Y+6, r23	; 0x06
    72c4:	6d 83       	std	Y+5, r22	; 0x05
    72c6:	1a 83       	std	Y+2, r17	; 0x02
    72c8:	09 83       	std	Y+1, r16	; 0x01
    72ca:	8e e0       	ldi	r24, 0x0E	; 14
    72cc:	8c 83       	std	Y+4, r24	; 0x04
    72ce:	ce 01       	movw	r24, r28
    72d0:	01 96       	adiw	r24, 0x01	; 1
    72d2:	ba 01       	movw	r22, r20
    72d4:	a9 01       	movw	r20, r18
    72d6:	0e 94 89 2c 	call	0x5912	; 0x5912 <vfprintf>
    72da:	2d 81       	ldd	r18, Y+5	; 0x05
    72dc:	3e 81       	ldd	r19, Y+6	; 0x06
    72de:	37 fd       	sbrc	r19, 7
    72e0:	09 c0       	rjmp	.+18     	; 0x72f4 <vsnprintf_P+0x4c>
    72e2:	ef 81       	ldd	r30, Y+7	; 0x07
    72e4:	f8 85       	ldd	r31, Y+8	; 0x08
    72e6:	2e 17       	cp	r18, r30
    72e8:	3f 07       	cpc	r19, r31
    72ea:	0c f4       	brge	.+2      	; 0x72ee <vsnprintf_P+0x46>
    72ec:	f9 01       	movw	r30, r18
    72ee:	e0 0f       	add	r30, r16
    72f0:	f1 1f       	adc	r31, r17
    72f2:	10 82       	st	Z, r1
    72f4:	2e 96       	adiw	r28, 0x0e	; 14
    72f6:	e4 e0       	ldi	r30, 0x04	; 4
    72f8:	0c 94 dd 36 	jmp	0x6dba	; 0x6dba <__epilogue_restores__+0x1c>

000072fc <ungetc>:
    72fc:	9c 01       	movw	r18, r24
    72fe:	fb 01       	movw	r30, r22
    7300:	83 81       	ldd	r24, Z+3	; 0x03
    7302:	80 ff       	sbrs	r24, 0
    7304:	11 c0       	rjmp	.+34     	; 0x7328 <ungetc+0x2c>
    7306:	86 fd       	sbrc	r24, 6
    7308:	0f c0       	rjmp	.+30     	; 0x7328 <ungetc+0x2c>
    730a:	9f ef       	ldi	r25, 0xFF	; 255
    730c:	2f 3f       	cpi	r18, 0xFF	; 255
    730e:	39 07       	cpc	r19, r25
    7310:	59 f0       	breq	.+22     	; 0x7328 <ungetc+0x2c>
    7312:	22 83       	std	Z+2, r18	; 0x02
    7314:	80 64       	ori	r24, 0x40	; 64
    7316:	8f 7d       	andi	r24, 0xDF	; 223
    7318:	83 83       	std	Z+3, r24	; 0x03
    731a:	86 81       	ldd	r24, Z+6	; 0x06
    731c:	97 81       	ldd	r25, Z+7	; 0x07
    731e:	01 97       	sbiw	r24, 0x01	; 1
    7320:	97 83       	std	Z+7, r25	; 0x07
    7322:	86 83       	std	Z+6, r24	; 0x06
    7324:	30 e0       	ldi	r19, 0x00	; 0
    7326:	02 c0       	rjmp	.+4      	; 0x732c <ungetc+0x30>
    7328:	2f ef       	ldi	r18, 0xFF	; 255
    732a:	3f ef       	ldi	r19, 0xFF	; 255
    732c:	c9 01       	movw	r24, r18
    732e:	08 95       	ret

00007330 <__ultoa_invert>:
    7330:	fa 01       	movw	r30, r20
    7332:	aa 27       	eor	r26, r26
    7334:	28 30       	cpi	r18, 0x08	; 8
    7336:	51 f1       	breq	.+84     	; 0x738c <__ultoa_invert+0x5c>
    7338:	20 31       	cpi	r18, 0x10	; 16
    733a:	81 f1       	breq	.+96     	; 0x739c <__ultoa_invert+0x6c>
    733c:	e8 94       	clt
    733e:	6f 93       	push	r22
    7340:	6e 7f       	andi	r22, 0xFE	; 254
    7342:	6e 5f       	subi	r22, 0xFE	; 254
    7344:	7f 4f       	sbci	r23, 0xFF	; 255
    7346:	8f 4f       	sbci	r24, 0xFF	; 255
    7348:	9f 4f       	sbci	r25, 0xFF	; 255
    734a:	af 4f       	sbci	r26, 0xFF	; 255
    734c:	b1 e0       	ldi	r27, 0x01	; 1
    734e:	3e d0       	rcall	.+124    	; 0x73cc <__ultoa_invert+0x9c>
    7350:	b4 e0       	ldi	r27, 0x04	; 4
    7352:	3c d0       	rcall	.+120    	; 0x73cc <__ultoa_invert+0x9c>
    7354:	67 0f       	add	r22, r23
    7356:	78 1f       	adc	r23, r24
    7358:	89 1f       	adc	r24, r25
    735a:	9a 1f       	adc	r25, r26
    735c:	a1 1d       	adc	r26, r1
    735e:	68 0f       	add	r22, r24
    7360:	79 1f       	adc	r23, r25
    7362:	8a 1f       	adc	r24, r26
    7364:	91 1d       	adc	r25, r1
    7366:	a1 1d       	adc	r26, r1
    7368:	6a 0f       	add	r22, r26
    736a:	71 1d       	adc	r23, r1
    736c:	81 1d       	adc	r24, r1
    736e:	91 1d       	adc	r25, r1
    7370:	a1 1d       	adc	r26, r1
    7372:	20 d0       	rcall	.+64     	; 0x73b4 <__ultoa_invert+0x84>
    7374:	09 f4       	brne	.+2      	; 0x7378 <__ultoa_invert+0x48>
    7376:	68 94       	set
    7378:	3f 91       	pop	r19
    737a:	2a e0       	ldi	r18, 0x0A	; 10
    737c:	26 9f       	mul	r18, r22
    737e:	11 24       	eor	r1, r1
    7380:	30 19       	sub	r19, r0
    7382:	30 5d       	subi	r19, 0xD0	; 208
    7384:	31 93       	st	Z+, r19
    7386:	de f6       	brtc	.-74     	; 0x733e <__ultoa_invert+0xe>
    7388:	cf 01       	movw	r24, r30
    738a:	08 95       	ret
    738c:	46 2f       	mov	r20, r22
    738e:	47 70       	andi	r20, 0x07	; 7
    7390:	40 5d       	subi	r20, 0xD0	; 208
    7392:	41 93       	st	Z+, r20
    7394:	b3 e0       	ldi	r27, 0x03	; 3
    7396:	0f d0       	rcall	.+30     	; 0x73b6 <__ultoa_invert+0x86>
    7398:	c9 f7       	brne	.-14     	; 0x738c <__ultoa_invert+0x5c>
    739a:	f6 cf       	rjmp	.-20     	; 0x7388 <__ultoa_invert+0x58>
    739c:	46 2f       	mov	r20, r22
    739e:	4f 70       	andi	r20, 0x0F	; 15
    73a0:	40 5d       	subi	r20, 0xD0	; 208
    73a2:	4a 33       	cpi	r20, 0x3A	; 58
    73a4:	18 f0       	brcs	.+6      	; 0x73ac <__ultoa_invert+0x7c>
    73a6:	49 5d       	subi	r20, 0xD9	; 217
    73a8:	31 fd       	sbrc	r19, 1
    73aa:	40 52       	subi	r20, 0x20	; 32
    73ac:	41 93       	st	Z+, r20
    73ae:	02 d0       	rcall	.+4      	; 0x73b4 <__ultoa_invert+0x84>
    73b0:	a9 f7       	brne	.-22     	; 0x739c <__ultoa_invert+0x6c>
    73b2:	ea cf       	rjmp	.-44     	; 0x7388 <__ultoa_invert+0x58>
    73b4:	b4 e0       	ldi	r27, 0x04	; 4
    73b6:	a6 95       	lsr	r26
    73b8:	97 95       	ror	r25
    73ba:	87 95       	ror	r24
    73bc:	77 95       	ror	r23
    73be:	67 95       	ror	r22
    73c0:	ba 95       	dec	r27
    73c2:	c9 f7       	brne	.-14     	; 0x73b6 <__ultoa_invert+0x86>
    73c4:	00 97       	sbiw	r24, 0x00	; 0
    73c6:	61 05       	cpc	r22, r1
    73c8:	71 05       	cpc	r23, r1
    73ca:	08 95       	ret
    73cc:	9b 01       	movw	r18, r22
    73ce:	ac 01       	movw	r20, r24
    73d0:	0a 2e       	mov	r0, r26
    73d2:	06 94       	lsr	r0
    73d4:	57 95       	ror	r21
    73d6:	47 95       	ror	r20
    73d8:	37 95       	ror	r19
    73da:	27 95       	ror	r18
    73dc:	ba 95       	dec	r27
    73de:	c9 f7       	brne	.-14     	; 0x73d2 <__ultoa_invert+0xa2>
    73e0:	62 0f       	add	r22, r18
    73e2:	73 1f       	adc	r23, r19
    73e4:	84 1f       	adc	r24, r20
    73e6:	95 1f       	adc	r25, r21
    73e8:	a0 1d       	adc	r26, r0
    73ea:	08 95       	ret

000073ec <__eerd_block_m324p>:
    73ec:	dc 01       	movw	r26, r24
    73ee:	cb 01       	movw	r24, r22

000073f0 <__eerd_blraw_m324p>:
    73f0:	fc 01       	movw	r30, r24
    73f2:	f9 99       	sbic	0x1f, 1	; 31
    73f4:	fe cf       	rjmp	.-4      	; 0x73f2 <__eerd_blraw_m324p+0x2>
    73f6:	06 c0       	rjmp	.+12     	; 0x7404 <__eerd_blraw_m324p+0x14>
    73f8:	f2 bd       	out	0x22, r31	; 34
    73fa:	e1 bd       	out	0x21, r30	; 33
    73fc:	f8 9a       	sbi	0x1f, 0	; 31
    73fe:	31 96       	adiw	r30, 0x01	; 1
    7400:	00 b4       	in	r0, 0x20	; 32
    7402:	0d 92       	st	X+, r0
    7404:	41 50       	subi	r20, 0x01	; 1
    7406:	50 40       	sbci	r21, 0x00	; 0
    7408:	b8 f7       	brcc	.-18     	; 0x73f8 <__eerd_blraw_m324p+0x8>
    740a:	08 95       	ret

0000740c <__eerd_byte_m324p>:
    740c:	f9 99       	sbic	0x1f, 1	; 31
    740e:	fe cf       	rjmp	.-4      	; 0x740c <__eerd_byte_m324p>
    7410:	92 bd       	out	0x22, r25	; 34
    7412:	81 bd       	out	0x21, r24	; 33
    7414:	f8 9a       	sbi	0x1f, 0	; 31
    7416:	99 27       	eor	r25, r25
    7418:	80 b5       	in	r24, 0x20	; 32
    741a:	08 95       	ret

0000741c <__eerd_dword_m324p>:
    741c:	a6 e1       	ldi	r26, 0x16	; 22
    741e:	b0 e0       	ldi	r27, 0x00	; 0
    7420:	44 e0       	ldi	r20, 0x04	; 4
    7422:	50 e0       	ldi	r21, 0x00	; 0
    7424:	0c 94 f8 39 	jmp	0x73f0	; 0x73f0 <__eerd_blraw_m324p>

00007428 <__eerd_word_m324p>:
    7428:	a8 e1       	ldi	r26, 0x18	; 24
    742a:	b0 e0       	ldi	r27, 0x00	; 0
    742c:	42 e0       	ldi	r20, 0x02	; 2
    742e:	50 e0       	ldi	r21, 0x00	; 0
    7430:	0c 94 f8 39 	jmp	0x73f0	; 0x73f0 <__eerd_blraw_m324p>

00007434 <__eewr_block_m324p>:
    7434:	dc 01       	movw	r26, r24
    7436:	cb 01       	movw	r24, r22
    7438:	03 c0       	rjmp	.+6      	; 0x7440 <__eewr_block_m324p+0xc>
    743a:	2d 91       	ld	r18, X+
    743c:	0e 94 25 3a 	call	0x744a	; 0x744a <__eewr_r18_m324p>
    7440:	41 50       	subi	r20, 0x01	; 1
    7442:	50 40       	sbci	r21, 0x00	; 0
    7444:	d0 f7       	brcc	.-12     	; 0x743a <__eewr_block_m324p+0x6>
    7446:	08 95       	ret

00007448 <__eewr_byte_m324p>:
    7448:	26 2f       	mov	r18, r22

0000744a <__eewr_r18_m324p>:
    744a:	f9 99       	sbic	0x1f, 1	; 31
    744c:	fe cf       	rjmp	.-4      	; 0x744a <__eewr_r18_m324p>
    744e:	1f ba       	out	0x1f, r1	; 31
    7450:	92 bd       	out	0x22, r25	; 34
    7452:	81 bd       	out	0x21, r24	; 33
    7454:	20 bd       	out	0x20, r18	; 32
    7456:	0f b6       	in	r0, 0x3f	; 63
    7458:	f8 94       	cli
    745a:	fa 9a       	sbi	0x1f, 2	; 31
    745c:	f9 9a       	sbi	0x1f, 1	; 31
    745e:	0f be       	out	0x3f, r0	; 63
    7460:	01 96       	adiw	r24, 0x01	; 1
    7462:	08 95       	ret

00007464 <__eewr_dword_m324p>:
    7464:	24 2f       	mov	r18, r20
    7466:	0e 94 25 3a 	call	0x744a	; 0x744a <__eewr_r18_m324p>
    746a:	25 2f       	mov	r18, r21
    746c:	0e 94 25 3a 	call	0x744a	; 0x744a <__eewr_r18_m324p>
    7470:	0c 94 3a 3a 	jmp	0x7474	; 0x7474 <__eewr_word_m324p>

00007474 <__eewr_word_m324p>:
    7474:	0e 94 24 3a 	call	0x7448	; 0x7448 <__eewr_byte_m324p>
    7478:	27 2f       	mov	r18, r23
    747a:	0c 94 25 3a 	jmp	0x744a	; 0x744a <__eewr_r18_m324p>

0000747e <__ctype_isfalse>:
    747e:	99 27       	eor	r25, r25
    7480:	88 27       	eor	r24, r24

00007482 <__ctype_istrue>:
    7482:	08 95       	ret

00007484 <_exit>:
    7484:	f8 94       	cli

00007486 <__stop_program>:
    7486:	ff cf       	rjmp	.-2      	; 0x7486 <__stop_program>
